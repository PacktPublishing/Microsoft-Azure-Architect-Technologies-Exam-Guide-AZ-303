<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.Azure.Cosmos.Client</name>
    </assembly>
    <members>
        <member name="M:Microsoft.Azure.Cosmos.Base64Helper.SecureStringToNativeBytes(System.Security.SecureString,System.Int32,System.IntPtr@,System.UInt32@)">
            <summary>
            Interprets <paramref name="secureString"/> as a Base64 string, and decodes it into a native byte array,
            which it returns.
            Avoids loading either the original Base64 or decoded binary into managed heap.
            </summary>
            <param name="secureString">Base64 string to decode</param>
            <param name="secureStringLength">Length of the Base64 string to decode</param>
            <param name="bytes">
              An IntPtr allocated with Marshal.AllocCoTaskMem, which, when the user is done, 
              MUST be zeroed out and then freed with Marshal.FreeCoTaskMem by the caller.
            </param>
            <param name="bytesLength">Number of bytes in the decoded binary currentCharacter</param>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.Batch">
            <summary>
            Represents a batch of requests that will be performed atomically against the Azure Cosmos DB service.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Batch.CreateItem``1(``0,Microsoft.Azure.Cosmos.BatchItemRequestOptions)">
            <summary>
            Adds an operation to create an item into the batch.
            </summary>
            <param name="item">A JSON serializable object that must contain an id property.<see cref="T:Microsoft.Azure.Cosmos.CosmosSerializer"/> to implement a custom serializer.</param>
            <param name="requestOptions">(Optional) The options for the item request. <see cref="T:Microsoft.Azure.Cosmos.BatchItemRequestOptions"/>.</param>
            <returns>The <see cref="T:Microsoft.Azure.Cosmos.Batch"/> instance with the operation added.</returns>
            <typeparam name="T">The type of item to be created.</typeparam>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Batch.CreateItemStream(System.IO.Stream,Microsoft.Azure.Cosmos.BatchItemRequestOptions)">
            <summary>
            Adds an operation to create an item into the batch.
            </summary>
            <param name="streamPayload">
            A <see cref="T:System.IO.Stream"/> containing the payload of the item.
            The stream must have a UTF-8 encoded JSON object which contains an id property.
            </param>
            <param name="requestOptions">(Optional) The options for the item request. <see cref="T:Microsoft.Azure.Cosmos.BatchItemRequestOptions"/>.</param>
            <returns>The <see cref="T:Microsoft.Azure.Cosmos.Batch"/> instance with the operation added.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Batch.ReadItem(System.String,Microsoft.Azure.Cosmos.BatchItemRequestOptions)">
            <summary>
            Adds an operation to read an item into the batch.
            </summary>
            <param name="id">The cosmos item id.</param>
            <param name="requestOptions">(Optional) The options for the item request. <see cref="T:Microsoft.Azure.Cosmos.BatchItemRequestOptions"/>.</param>
            <returns>The <see cref="T:Microsoft.Azure.Cosmos.Batch"/> instance with the operation added.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Batch.UpsertItem``1(``0,Microsoft.Azure.Cosmos.BatchItemRequestOptions)">
            <summary>
            Adds an operation to upsert an item into the batch.
            </summary>
            <param name="item">A JSON serializable object that must contain an id property. <see cref="T:Microsoft.Azure.Cosmos.CosmosSerializer"/> to implement a custom serializer.</param>
            <param name="requestOptions">(Optional) The options for the item request. <see cref="T:Microsoft.Azure.Cosmos.BatchItemRequestOptions"/>.</param>
            <returns>The <see cref="T:Microsoft.Azure.Cosmos.Batch"/> instance with the operation added.</returns>
            <typeparam name="T">The type of item to be created.</typeparam>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Batch.UpsertItemStream(System.IO.Stream,Microsoft.Azure.Cosmos.BatchItemRequestOptions)">
            <summary>
            Adds an operation to upsert an item into the batch.
            </summary>
            <param name="streamPayload">
            A <see cref="T:System.IO.Stream"/> containing the payload of the item.
            The stream must have a UTF-8 encoded JSON object which contains an id property.
            </param>
            <param name="requestOptions">(Optional) The options for the item request. <see cref="T:Microsoft.Azure.Cosmos.BatchItemRequestOptions"/>.</param>
            <returns>The <see cref="T:Microsoft.Azure.Cosmos.Batch"/> instance with the operation added.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Batch.ReplaceItem``1(System.String,``0,Microsoft.Azure.Cosmos.BatchItemRequestOptions)">
            <summary>
            Adds an operation to replace an item into the batch.
            </summary>
            <param name="id">The cosmos item id.</param>
            <param name="item">A JSON serializable object that must contain an id property. <see cref="T:Microsoft.Azure.Cosmos.CosmosSerializer"/> to implement a custom serializer.</param>
            <param name="requestOptions">(Optional) The options for the item request. <see cref="T:Microsoft.Azure.Cosmos.BatchItemRequestOptions"/>.</param>
            <returns>The <see cref="T:Microsoft.Azure.Cosmos.Batch"/> instance with the operation added.</returns>
            <typeparam name="T">The type of item to be created.</typeparam>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Batch.ReplaceItemStream(System.String,System.IO.Stream,Microsoft.Azure.Cosmos.BatchItemRequestOptions)">
            <summary>
            Adds an operation to replace an item into the batch.
            </summary>
            <param name="id">The cosmos item id.</param>
            <param name="streamPayload">
            A <see cref="T:System.IO.Stream"/> containing the payload of the item.
            The stream must have a UTF-8 encoded JSON object which contains an id property.
            </param>
            <param name="requestOptions">(Optional) The options for the item request. <see cref="T:Microsoft.Azure.Cosmos.BatchItemRequestOptions"/>.</param>
            <returns>The <see cref="T:Microsoft.Azure.Cosmos.Batch"/> instance with the operation added.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Batch.DeleteItem(System.String,Microsoft.Azure.Cosmos.BatchItemRequestOptions)">
            <summary>
            Adds an operation to delete an item into the batch.
            </summary>
            <param name="id">The cosmos item id.</param>
            <param name="requestOptions">(Optional) The options for the item request. <see cref="T:Microsoft.Azure.Cosmos.BatchItemRequestOptions"/>.</param>
            <returns>The <see cref="T:Microsoft.Azure.Cosmos.Batch"/> instance with the operation added.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Batch.ExecuteAsync(System.Threading.CancellationToken)">
            <summary>
            Executes the batch at the Azure Cosmos service as an asynchronous operation.
            </summary>
            <param name="cancellationToken">(Optional) <see cref="T:System.Threading.CancellationToken"/> representing request cancellation.</param>
            <returns>An awaitable <see cref="T:Microsoft.Azure.Cosmos.BatchResponse"/> which contains the completion status and results of each operation.</returns>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.BatchAsyncBatcher">
            <summary>
            Maintains a batch of operations and dispatches it as a unit of work.
            </summary>
            <remarks>
            The dispatch process consists of:
            1. Creating a <see cref="T:Microsoft.Azure.Cosmos.PartitionKeyRangeServerBatchRequest"/>.
            2. Verifying overflow that might happen due to HybridRow serialization. Any operations that did not fit, get sent to the <see cref="T:Microsoft.Azure.Cosmos.BatchAsyncBatcherRetryDelegate"/>.
            3. Execution of the request gets delegated to <see cref="T:Microsoft.Azure.Cosmos.BatchAsyncBatcherExecuteDelegate"/>.
            4. If there was a split detected, all operations in the request, are sent to the <see cref="T:Microsoft.Azure.Cosmos.BatchAsyncBatcherRetryDelegate"/> for re-queueing.
            5. The result of the request is used to wire up all responses with the original Tasks for each operation.
            </remarks>
            <seealso cref="T:Microsoft.Azure.Cosmos.ItemBatchOperation"/>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.BatchAsyncBatcherExecuteDelegate">
            <summary>
            Executor implementation that processes a list of operations.
            </summary>
            <returns>An instance of <see cref="T:Microsoft.Azure.Cosmos.PartitionKeyRangeBatchResponse"/>.</returns>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.BatchAsyncBatcherRetryDelegate">
            <summary>
            Delegate to process a request for retry an operation
            </summary>
            <returns>An instance of <see cref="T:Microsoft.Azure.Cosmos.PartitionKeyRangeBatchResponse"/>.</returns>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.BatchAsyncContainerExecutor">
            <summary>
            Bulk batch executor for operations in the same container.
            </summary>
            <remarks>
            It maintains one <see cref="T:Microsoft.Azure.Cosmos.BatchAsyncStreamer"/> for each Partition Key Range, which allows independent execution of requests.
            Semaphores are in place to rate limit the operations at the Streamer / Partition Key Range level, this means that we can send parallel and independent requests to different Partition Key Ranges, but for the same Range, requests will be limited.
            Two delegate implementations define how a particular request should be executed, and how operations should be retried. When the <see cref="T:Microsoft.Azure.Cosmos.BatchAsyncStreamer"/> dispatches a batch, the batch will create a request and call the execute delegate, if conditions are met, it might call the retry delegate.
            </remarks>
            <seealso cref="T:Microsoft.Azure.Cosmos.BatchAsyncStreamer"/>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.BatchAsyncContainerExecutor.#ctor">
            <summary>
            For unit testing.
            </summary>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.BatchAsyncContainerExecutorCache">
            <summary>
            Cache to create and share Executor instances across the client's lifetime.
            </summary>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.BatchAsyncStreamer">
            <summary>
            Handles operation queueing and dispatching.
            Fills batches efficiently and maintains a timer for early dispatching in case of partially-filled batches and to optimize for throughput.
            </summary>
            <remarks>
            There is always one batch at a time being filled. Locking is in place to avoid concurrent threads trying to Add operations while the timer might be Dispatching the current batch.
            The current batch is dispatched and a new one is readied to be filled by new operations, the dispatched batch runs independently through a fire and forget pattern.
            </remarks>
            <seealso cref="T:Microsoft.Azure.Cosmos.BatchAsyncBatcher"/>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.BatchCore.#ctor(Microsoft.Azure.Cosmos.ContainerCore,Microsoft.Azure.Cosmos.PartitionKey)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.Cosmos.BatchCore"/> class.
            </summary>
            <param name="container">Container that has items on which batch operations are to be performed.</param>
            <param name="partitionKey">The partition key for all items in the batch. <see cref="T:Microsoft.Azure.Cosmos.PartitionKey"/>.</param>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.BatchCore.ExecuteAsync(Microsoft.Azure.Cosmos.RequestOptions,System.Threading.CancellationToken)">
            <summary>
            Executes the batch at the Azure Cosmos service as an asynchronous operation.
            </summary>
            <param name="requestOptions">Options that apply to the batch. Used only for EPK routing.</param>
            <param name="cancellationToken">(Optional) <see cref="T:System.Threading.CancellationToken"/> representing request cancellation.</param>
            <returns>An awaitable <see cref="T:Microsoft.Azure.Cosmos.BatchResponse"/> which contains the completion status and results of each operation.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.BatchCore.PatchItemStream(System.String,System.IO.Stream,Microsoft.Azure.Cosmos.BatchItemRequestOptions)">
            <summary>
            Adds an operation to patch an item into the batch.
            </summary>
            <param name="id">The cosmos item id.</param>
            <param name="patchStream">A <see cref="T:System.IO.Stream"/> containing the patch specification.</param>
            <param name="requestOptions">(Optional) The options for the item request. <see cref="T:Microsoft.Azure.Cosmos.BatchItemRequestOptions"/>.</param>
            <returns>The <see cref="T:Microsoft.Azure.Cosmos.Batch"/> instance with the operation added.</returns>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.BatchExecUtils">
            <summary>
            Util methods for batch requests.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.BatchExecUtils.StreamToMemoryAsync(System.IO.Stream,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Converts a Stream to a Memory{byte} wrapping a byte array honoring a provided maximum length for the returned Memory.
            </summary>
            <param name="stream">Stream to be converted to bytes.</param>
            <param name="maximumLength">Desired maximum length of the Memory{byte}.</param>
            <param name="cancellationToken"><see cref="T:System.Threading.CancellationToken"/> to cancel the operation.</param>
            <returns>A Memory{byte} with length at most maximumLength.</returns>
            <remarks>Throws RequestEntityTooLargeException if the input stream has more bytes than maximumLength.</remarks>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.BatchExecutor.ExecuteServerRequestAsync(Microsoft.Azure.Cosmos.SinglePartitionKeyServerBatchRequest,System.Threading.CancellationToken)">
            <summary>
            Makes a single batch request to the server.
            </summary>
            <param name="serverRequest">A server request with a set of operations on items.</param>
            <param name="cancellationToken"><see cref="T:System.Threading.CancellationToken"/> representing request cancellation.</param>
            <returns>Response from the server.</returns>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.BatchItemRequestOptions">
            <summary>
            <see cref="T:Microsoft.Azure.Cosmos.RequestOptions"/> that apply to operations within a <see cref="T:Microsoft.Azure.Cosmos.Batch"/>.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.BatchItemRequestOptions.IndexingDirective">
            <summary>
            Gets or sets the indexing directive (Include or Exclude) for the request in the Azure Cosmos DB service.
            </summary>
            <value>
            The indexing directive to use with a request.
            </value>
            <seealso cref="T:Microsoft.Azure.Cosmos.IndexingPolicy"/>
            <seealso cref="P:Microsoft.Azure.Cosmos.BatchItemRequestOptions.IndexingDirective"/>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.BatchOperationResult">
            <summary>
            Represents a result for a specific operation that was part of a batch request.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.BatchOperationResult.StatusCode">
            <summary>
            Gets the completion status of the operation.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.BatchOperationResult.IsSuccessStatusCode">
            <summary>
            Gets a value indicating whether the current operation completed successfully.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.BatchOperationResult.ETag">
            <summary>
            Gets the entity tag associated with the resource.
            </summary>
            <value>
            The entity tag associated with the resource.
            </value>
            <remarks>
            ETags are used for concurrency checking when updating resources.
            </remarks>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.BatchOperationResult.ResourceStream">
            <summary>
            Gets the content of the resource.
            </summary>
            <value>
            The content of the resource as a MemoryStream.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.BatchOperationResult.RetryAfter">
            <summary>
            In case the operation is rate limited, indicates the time post which a retry can be attempted.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.BatchOperationResult.SubStatusCode">
            <summary>
            Gets detail on the completion status of the operation.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.BatchOperationResult.Diagnostics">
            <summary>
            Gets the cosmos diagnostic information for the current request to Azure Cosmos DB service
            </summary>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.BatchOperationResult`1">
            <summary>
            Represents a result for a specific operation that is part of a batch.
            </summary>
            <typeparam name="T">The type of the Resource which this class wraps.</typeparam>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.BatchOperationResult`1.#ctor(Microsoft.Azure.Cosmos.BatchOperationResult,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.Cosmos.BatchOperationResult`1"/> class.
            </summary>
            <param name="result">BatchOperationResult with stream resource.</param>
            <param name="resource">Deserialized resource.</param>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.BatchOperationResult`1.Resource">
            <summary>
            Gets the content of the resource.
            </summary>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.BatchResponse">
            <summary>
            Response of a batch request.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.BatchResponse.#ctor(System.Net.HttpStatusCode,Microsoft.Azure.Documents.SubStatusCodes,System.String,System.Collections.Generic.IReadOnlyList{Microsoft.Azure.Cosmos.ItemBatchOperation})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.Cosmos.BatchResponse"/> class.
            This method is intended to be used only when a response from the server is not available.
            </summary>
            <param name="statusCode">Indicates why the batch was not processed.</param>
            <param name="subStatusCode">Provides further details about why the batch was not processed.</param>
            <param name="errorMessage">The reason for failure.</param>
            <param name="operations">Operations that were to be executed.</param>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.BatchResponse.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.Cosmos.BatchResponse"/> class.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.BatchResponse.ActivityId">
            <summary>
            Gets the ActivityId that identifies the server request made to execute the batch.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.BatchResponse.RequestCharge">
            <summary>
            Gets the request charge for the batch request.
            </summary>
            <value>
            The request charge measured in request units.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.BatchResponse.RetryAfter">
            <summary>
            Gets the amount of time to wait before retrying this or any other request within Cosmos container or collection due to throttling.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.BatchResponse.StatusCode">
            <summary>
            Gets the completion status code of the batch request.
            </summary>
            <value>The request completion status code.</value>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.BatchResponse.ErrorMessage">
            <summary>
            Gets the reason for failure of the batch request.
            </summary>
            <value>The reason for failure, if any.</value>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.BatchResponse.IsSuccessStatusCode">
            <summary>
            Gets a value indicating whether the batch was processed.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.BatchResponse.Count">
            <summary>
            Gets the number of operation results.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.BatchResponse.Diagnostics">
            <summary>
            Gets the cosmos diagnostic information for the current request to Azure Cosmos DB service
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.BatchResponse.Item(System.Int32)">
            <summary>
            Gets the result of the operation at the provided index in the batch.
            </summary>
            <param name="index">0-based index of the operation in the batch whose result needs to be returned.</param>
            <returns>Result of operation at the provided index in the batch.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.BatchResponse.GetOperationResultAtIndex``1(System.Int32)">
            <summary>
            Gets the result of the operation at the provided index in the batch - the returned result has a Resource of provided type.
            </summary>
            <typeparam name="T">Type to which the Resource in the operation result needs to be deserialized to, when present.</typeparam>
            <param name="index">0-based index of the operation in the batch whose result needs to be returned.</param>
            <returns>Result of batch operation that contains a Resource deserialized to specified type.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.BatchResponse.GetEnumerator">
            <summary>
            Gets an enumerator over the operation results.
            </summary>
            <returns>Enumerator over the operation results.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.BatchResponse.GetActivityIds">
            <summary>
            Gets all the Activity IDs associated with the response.
            </summary>
            <returns>An enumerable that contains the Activity IDs.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.BatchResponse.Dispose">
            <summary>
            Disposes the current <see cref="T:Microsoft.Azure.Cosmos.BatchResponse"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.BatchResponse.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.Azure.Cosmos.BatchResponse.Dispose(System.Boolean)">
            <summary>
            Disposes the disposable members held by this class.
            </summary>
            <param name="disposing">Indicates whether to dispose managed resources or not.</param>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.ItemBatchOperation">
            <summary>
            Represents an operation on an item which will be executed as part of a batch request
            on a container.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.ItemBatchOperation.Context">
            <summary>
            Operational context used in stream operations.
            </summary>
            <seealso cref="T:Microsoft.Azure.Cosmos.BatchAsyncBatcher"/>
            <seealso cref="T:Microsoft.Azure.Cosmos.BatchAsyncStreamer"/>
            <seealso cref="T:Microsoft.Azure.Cosmos.BatchAsyncContainerExecutor"/>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.ItemBatchOperation.Dispose">
            <summary>
            Disposes the current <see cref="T:Microsoft.Azure.Cosmos.ItemBatchOperation"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.ItemBatchOperation.GetApproximateSerializedLength">
            <summary>
            Computes and returns an approximation for the length of this <see cref="T:Microsoft.Azure.Cosmos.ItemBatchOperation"/>.
            when serialized.
            </summary>
            <returns>An under-estimate of the length.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.ItemBatchOperation.MaterializeResourceAsync(Microsoft.Azure.Cosmos.CosmosSerializer,System.Threading.CancellationToken)">
            <summary>
            Materializes the operation's resource into a Memory{byte} wrapping a byte array.
            </summary>
            <param name="serializer">Serializer to serialize user provided objects to JSON.</param>
            <param name="cancellationToken"><see cref="T:System.Threading.CancellationToken"/> for cancellation.</param>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.ItemBatchOperation.AttachContext(Microsoft.Azure.Cosmos.ItemBatchOperationContext)">
            <summary>
            Attached a context to the current operation to track resolution.
            </summary>
            <exception cref="T:System.InvalidOperationException">If the operation already had an attached context.</exception>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.ItemBatchOperation.Dispose(System.Boolean)">
            <summary>
            Disposes the disposable members held by this class.
            </summary>
            <param name="disposing">Indicates whether to dispose managed resources or not.</param>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.ItemBatchOperation`1.MaterializeResourceAsync(Microsoft.Azure.Cosmos.CosmosSerializer,System.Threading.CancellationToken)">
            <summary>
            Materializes the operation's resource into a Memory{byte} wrapping a byte array.
            </summary>
            <param name="serializer">Serializer to serialize user provided objects to JSON.</param>
            <param name="cancellationToken"><see cref="T:System.Threading.CancellationToken"/> for cancellation.</param>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.ItemBatchOperationContext">
            <summary>
            Context for a particular Batch operation.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.ItemBatchOperationContext.ShouldRetryAsync(Microsoft.Azure.Cosmos.BatchOperationResult,System.Threading.CancellationToken)">
            <summary>
            Based on the Retry Policy, if a failed response should retry.
            </summary>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.PartitionKeyRangeBatchResponse">
            <summary>
            Response of a cross partition key batch request.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.PartitionKeyRangeBatchResponse.#ctor(System.Net.HttpStatusCode,Microsoft.Azure.Documents.SubStatusCodes,System.String,System.Collections.Generic.IReadOnlyList{Microsoft.Azure.Cosmos.ItemBatchOperation})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.Cosmos.PartitionKeyRangeBatchResponse"/> class.
            </summary>
            <param name="statusCode">Completion status code of the batch request.</param>
            <param name="subStatusCode">Provides further details about why the batch was not processed.</param>
            <param name="operations">Operations that were supposed to be executed, but weren't.</param>
            <param name="errorMessage">The reason for failure if any.</param>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.PartitionKeyRangeBatchResponse.#ctor(System.Int32,Microsoft.Azure.Cosmos.BatchResponse,Microsoft.Azure.Cosmos.CosmosSerializer)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.Cosmos.PartitionKeyRangeBatchResponse"/> class.
            </summary>
            <param name="originalOperationsCount">Original operations that generated the server responses.</param>
            <param name="serverResponse">Response from the server.</param>
            <param name="serializer">Serializer to deserialize response resource body streams.</param>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.PartitionKeyRangeBatchResponse.ActivityId">
            <summary>
            Gets the ActivityId that identifies the server request made to execute the batch request.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.PartitionKeyRangeBatchResponse.Diagnostics">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.Azure.Cosmos.PartitionKeyRangeBatchResponse.Count">
            <summary>
            Gets the number of operation results.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.PartitionKeyRangeBatchResponse.Item(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.Azure.Cosmos.PartitionKeyRangeBatchResponse.GetOperationResultAtIndex``1(System.Int32)">
            <summary>
            Gets the result of the operation at the provided index in the batch - the returned result has a Resource of provided type.
            </summary>
            <typeparam name="T">Type to which the Resource in the operation result needs to be deserialized to, when present.</typeparam>
            <param name="index">0-based index of the operation in the batch whose result needs to be returned.</param>
            <returns>Result of batch operation that contains a Resource deserialized to specified type.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.PartitionKeyRangeBatchResponse.GetEnumerator">
            <summary>
            Gets an enumerator over the operation results.
            </summary>
            <returns>Enumerator over the operation results.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.PartitionKeyRangeBatchResponse.Dispose(System.Boolean)">
            <summary>
            Disposes the disposable members held.
            </summary>
            <param name="disposing">Indicates whether to dispose managed resources or not.</param>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.PartitionKeyRangeServerBatchRequest.#ctor(System.String,System.Int32,System.Int32,Microsoft.Azure.Cosmos.CosmosSerializer)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.Cosmos.PartitionKeyRangeServerBatchRequest"/> class.
            </summary>
            <param name="partitionKeyRangeId">The partition key range id associated with all requests.</param>
            <param name="maxBodyLength">Maximum length allowed for the request body.</param>
            <param name="maxOperationCount">Maximum number of operations allowed in the request.</param>
            <param name="serializer">Serializer to serialize user provided objects to JSON.</param>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.PartitionKeyRangeServerBatchRequest.PartitionKeyRangeId">
            <summary>
             Gets the PartitionKeyRangeId that applies to all operations in this request.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.PartitionKeyRangeServerBatchRequest.CreateAsync(System.String,System.ArraySegment{Microsoft.Azure.Cosmos.ItemBatchOperation},System.Int32,System.Int32,System.Boolean,Microsoft.Azure.Cosmos.CosmosSerializer,System.Threading.CancellationToken)">
            <summary>
            Creates an instance of <see cref="T:Microsoft.Azure.Cosmos.PartitionKeyRangeServerBatchRequest"/>.
            In case of direct mode requests, all the operations are expected to belong to the same PartitionKeyRange.
            The body of the request is populated with operations till it reaches the provided maxBodyLength.
            </summary>
            <param name="partitionKeyRangeId">The partition key range id associated with all requests.</param>
            <param name="operations">Operations to be added into this batch request.</param>
            <param name="maxBodyLength">Desired maximum length of the request body.</param>
            <param name="maxOperationCount">Maximum number of operations allowed in the request.</param>
            <param name="ensureContinuousOperationIndexes">Whether to stop adding operations to the request once there is non-continuity in the operation indexes.</param>
            <param name="serializer">Serializer to serialize user provided objects to JSON.</param>
            <param name="cancellationToken"><see cref="T:System.Threading.CancellationToken"/> representing request cancellation.</param>
            <returns>A newly created instance of <see cref="T:Microsoft.Azure.Cosmos.PartitionKeyRangeServerBatchRequest"/>.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.ServerBatchRequest.#ctor(System.Int32,System.Int32,Microsoft.Azure.Cosmos.CosmosSerializer)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.Cosmos.ServerBatchRequest"/> class.
            </summary>
            <param name="maxBodyLength">Maximum length allowed for the request body.</param>
            <param name="maxOperationCount">Maximum number of operations allowed in the request.</param>
            <param name="serializer">Serializer to serialize user provided objects to JSON.</param>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.ServerBatchRequest.TransferBodyStream">
            <summary>
            Returns the body Stream.
            Caller is responsible for disposing it after use.
            </summary>
            <returns>Body stream.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.ServerBatchRequest.CreateBodyStreamAsync(System.ArraySegment{Microsoft.Azure.Cosmos.ItemBatchOperation},System.Threading.CancellationToken,System.Boolean)">
            <summary>
            Adds as many operations as possible from the provided list of operations
            in the list order while having the body stream not exceed maxBodySize.
            </summary>
            <param name="operations">Operations to be added; read-only.</param>
            <param name="cancellationToken"><see cref="T:System.Threading.CancellationToken"/> representing request cancellation.</param>
            <param name="ensureContinuousOperationIndexes">Whether to stop adding operations to the request once there is non-continuity in the operation indexes.</param>
            <returns>Any pending operations that were not included in the request.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.SinglePartitionKeyServerBatchRequest.#ctor(System.Nullable{Microsoft.Azure.Cosmos.PartitionKey},System.Int32,System.Int32,Microsoft.Azure.Cosmos.CosmosSerializer)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.Cosmos.SinglePartitionKeyServerBatchRequest"/> class.
            Single partition key server request.
            </summary>
            <param name="partitionKey">Partition key that applies to all operations in this request.</param>
            <param name="maxBodyLength">Maximum length allowed for the request body.</param>
            <param name="maxOperationCount">Maximum number of operations allowed in the request.</param>
            <param name="serializer">Serializer to serialize user provided objects to JSON.</param>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.SinglePartitionKeyServerBatchRequest.PartitionKey">
            <summary>
             PartitionKey that applies to all operations in this request.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.SinglePartitionKeyServerBatchRequest.CreateAsync(System.Nullable{Microsoft.Azure.Cosmos.PartitionKey},System.ArraySegment{Microsoft.Azure.Cosmos.ItemBatchOperation},System.Int32,System.Int32,Microsoft.Azure.Cosmos.CosmosSerializer,System.Threading.CancellationToken)">
            <summary>
            Creates an instance of <see cref="T:Microsoft.Azure.Cosmos.SinglePartitionKeyServerBatchRequest"/>.
            The body of the request is populated with operations till it reaches the provided maxBodyLength.
            </summary>
            <param name="partitionKey">Partition key of the request.</param>
            <param name="operations">Operations to be added into this batch request.</param>
            <param name="maxBodyLength">Desired maximum length of the request body.</param>
            <param name="maxOperationCount">Maximum number of operations allowed in the request.</param>
            <param name="serializer">Serializer to serialize user provided objects to JSON.</param>
            <param name="cancellationToken"><see cref="T:System.Threading.CancellationToken"/> representing request cancellation.</param>
            <returns>A newly created instance of <see cref="T:Microsoft.Azure.Cosmos.SinglePartitionKeyServerBatchRequest"/>.</returns>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.BulkPartitionKeyRangeGoneRetryPolicy">
            <summary>
            Used only in the context of Bulk Stream operations.
            </summary>
            <see cref="T:Microsoft.Azure.Cosmos.BatchAsyncBatcher"/>
            <see cref="T:Microsoft.Azure.Cosmos.ItemBatchOperationContext"/>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.ChangeFeedOptions">
            <summary>
            Specifies the options associated with change feed methods (enumeration operations) in the Azure Cosmos DB service.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.ChangeFeedOptions.MaxItemCount">
            <summary>
            Gets or sets the maximum number of items to be returned in the enumeration operation in the Azure Cosmos DB service.
            </summary>
            <value>
            The maximum number of items to be returned in the enumeration operation.
            </value> 
            <remarks>
            Used for query pagination.
            '-1' Used for dynamic page size.
            </remarks>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.ChangeFeedOptions.RequestContinuation">
            <summary>
            Gets or sets the request continuation token in the Azure Cosmos DB service.
            </summary>
            <value>
            The request continuation token.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.ChangeFeedOptions.SessionToken">
            <summary>
            Gets or sets the session token for use with session consistency in the Azure Cosmos DB service.
            </summary>
            <value>
            The session token for use with session consistency.
            </value>
            <remarks>
            Useful for applications that are load balanced across multiple Microsoft.Azure.Documents.Client.DocumentClient instances. 
            In this case, round-trip the token from end user to the application and then back to Azure Cosmos DB so that a session
            can be preserved across servers.
            </remarks>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.ChangeFeedOptions.PartitionKeyRangeId">
            <summary>
            Gets or sets the partition key range id for the current request in the Azure Cosmos DB service.
            </summary>
            <remarks>
            ChangeFeed requests can be executed against specific partition key ranges. 
            This is used to process the change feed in parallel across multiple consumers.
            PartitionKeyRangeId cannot be specified along with PartitionKey.
            </remarks>
            <see cref="T:Microsoft.Azure.Documents.PartitionKeyRange" />
            <see cref="M:Microsoft.Azure.Cosmos.DocumentClient.ReadPartitionKeyRangeFeedAsync(System.String,Microsoft.Azure.Cosmos.FeedOptions)"/>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.ChangeFeedOptions.PartitionKey">
            <summary>
            Gets or sets the partition key for the current request in the Azure Cosmos DB service.
            </summary>
            <remarks>
            PartitionKey cannot be specified along with PartitionKeyRangeId.
            </remarks>
            <see cref="T:Microsoft.Azure.Documents.PartitionKey" />
            <example>
            <![CDATA[
            var options = new ChangeFeedOptions()
            {
                PartitionKey = new PartitionKey("c7580115-8f46-4ac4-a0c7-22eae9aaabf1"),
                StartFromBeginning = true
            };
            ]]>
            </example>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.ChangeFeedOptions.StartFromBeginning">
            <summary>
            Gets or sets a value indicating whether change feed in the Azure Cosmos DB service 
            should start from beginning (true) or from current (false).
            By default it's start from current (false).
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.ChangeFeedOptions.StartTime">
            <summary>
            Gets or sets the time (exclusive) to start looking for changes after.
            If this is specified, StartFromBeginning is ignored.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.ChangeFeedOptions.IncludeTentativeWrites">
            <summary>
            Gets or sets a value indicating whether change feed in the Azure Cosmos DB service 
            should return tentative writes in addition to committed writes.
            By default the flag is set to false meaning only committed writes will be sent in response.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.ChangeFeed.Bootstrapping.PartitionSynchronizerCore.CreateLeasesAsync(System.Collections.Generic.HashSet{System.String})">
            <summary>
            Creates leases if they do not exist. This might happen on initial start or if some lease was unexpectedly lost.
            Leases are created without the continuation token. It means partitions will be read according to 'From Beginning' or
            'From current time'.
            Same applies also to split partitions. We do not search for parent lease and take continuation token since this might end up
            of reprocessing all the events since the split.
            </summary>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.ChangeFeed.Configuration.ChangeFeedLeaseOptions">
            <summary>
            Options to control various aspects of partition distribution happening within <see cref="T:Microsoft.Azure.Cosmos.ChangeFeed.ChangeFeedProcessorCore`1"/> instance.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.ChangeFeed.Configuration.ChangeFeedLeaseOptions.#ctor">
            <summary>Initializes a new instance of the <see cref="T:Microsoft.Azure.Cosmos.ChangeFeed.Configuration.ChangeFeedLeaseOptions" /> class.</summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.ChangeFeed.Configuration.ChangeFeedLeaseOptions.LeaseRenewInterval">
            <summary>
            Gets or sets renew interval for all leases currently held by <see cref="T:Microsoft.Azure.Cosmos.ChangeFeed.ChangeFeedProcessorCore`1"/> instance.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.ChangeFeed.Configuration.ChangeFeedLeaseOptions.LeaseAcquireInterval">
            <summary>
            Gets or sets the interval to kick off a task to compute if leases are distributed evenly among known host instances.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.ChangeFeed.Configuration.ChangeFeedLeaseOptions.LeaseExpirationInterval">
            <summary>
            Gets or sets the interval for which the lease is taken. If the lease is not renewed within this
            interval, it will cause it to expire and ownership of the lease will move to another <see cref="T:Microsoft.Azure.Cosmos.ChangeFeed.ChangeFeedProcessorCore`1"/> instance.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.ChangeFeed.Configuration.ChangeFeedLeaseOptions.LeasePrefix">
            <summary>
            Gets or sets a prefix to be used as part of the lease id. This can be used to support multiple instances of <see cref="T:Microsoft.Azure.Cosmos.ChangeFeed.ChangeFeedProcessorCore`1"/>
            instances pointing at the same feed while using the same auxiliary collection.
            </summary>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.ChangeFeed.Configuration.ChangeFeedProcessorOptions">
            <summary>
            Options to control various aspects of partition distribution happening within <see cref="T:Microsoft.Azure.Cosmos.ChangeFeed.ChangeFeedProcessorCore`1"/> instance.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.ChangeFeed.Configuration.ChangeFeedProcessorOptions.#ctor">
            <summary>Initializes a new instance of the <see cref="T:Microsoft.Azure.Cosmos.ChangeFeed.Configuration.ChangeFeedProcessorOptions" /> class.</summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.ChangeFeed.Configuration.ChangeFeedProcessorOptions.FeedPollDelay">
            <summary>
            Gets or sets the delay in between polling the change feed for new changes, after all current changes are drained.
            <remarks>
            Applies only after a read on the change feed yielded no results.
            </remarks>
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.ChangeFeed.Configuration.ChangeFeedProcessorOptions.CheckpointFrequency">
            <summary>
            Gets or sets the frequency how often to checkpoint leases.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.ChangeFeed.Configuration.ChangeFeedProcessorOptions.MaxItemCount">
            <summary>
            Gets or sets the maximum number of items to be returned in the enumeration operation in the Azure Cosmos DB service.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.ChangeFeed.Configuration.ChangeFeedProcessorOptions.StartContinuation">
            <summary>
            Gets or sets the start request continuation token to start looking for changes after.
            </summary>
            <remarks>
            This is only used when lease store is not initialized and is ignored if a lease exists and has continuation token.
            If this is specified, both StartTime and StartFromBeginning are ignored.
            </remarks>
            <seealso cref="P:Microsoft.Azure.Cosmos.ChangeFeedOptions.RequestContinuation"/>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.ChangeFeed.Configuration.ChangeFeedProcessorOptions.StartTime">
            <summary>
            Gets or sets the time (exclusive) to start looking for changes after.
            </summary>
            <remarks>
            This is only used when:
            (1) Lease store is not initialized and is ignored if a lease exists and has continuation token.
            (2) StartContinuation is not specified.
            If this is specified, StartFromBeginning is ignored.
            </remarks>
            <seealso cref="P:Microsoft.Azure.Cosmos.ChangeFeedOptions.StartTime"/>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.ChangeFeed.Configuration.ChangeFeedProcessorOptions.StartFromBeginning">
            <summary>
            Gets or sets a value indicating whether change feed in the Azure Cosmos DB service should start from beginning (true) or from current (false).
            By default it's start from current (false).
            </summary>
            <remarks>
            This is only used when:
            (1) Lease store is not initialized and is ignored if a lease exists and has continuation token.
            (2) StartContinuation is not specified.
            (3) StartTime is not specified.
            </remarks>
            <seealso cref="P:Microsoft.Azure.Cosmos.ChangeFeedOptions.StartFromBeginning"/>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.ChangeFeed.Configuration.ChangeFeedProcessorOptions.SessionToken">
            <summary>
            Gets or sets the session token for use with session consistency in the Azure Cosmos DB service.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.ChangeFeed.Configuration.ChangeFeedProcessorOptions.QueryFeedMaxBatchSize">
            <summary>
            Gets or sets the Batch size of query API.
            </summary>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.ChangeFeed.Configuration.CheckpointFrequency">
            <summary>
            Specifies the frequency of lease event. The event will trigger when either of conditions is satisfied.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.ChangeFeed.Configuration.CheckpointFrequency.ExplicitCheckpoint">
            <summary>
            Gets or sets a value indicating whether explicit check pointing is enabled. By default false. 
            Setting to true means change feed host will never checkpoint. 
            Client code needs to explicitly checkpoint via <see cref="T:Microsoft.Azure.Cosmos.ChangeFeed.FeedManagement.PartitionCheckpointer"/>
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.ChangeFeed.Configuration.CheckpointFrequency.ProcessedDocumentCount">
            <summary>
            Gets or sets the value that specifies to checkpoint every specified number of docs.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.ChangeFeed.Configuration.CheckpointFrequency.TimeInterval">
            <summary>
            Gets or sets the value that specifies to checkpoint every specified time interval.
            </summary>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.ChangeFeed.Exceptions.FeedSplitException">
            <summary>
            Exception occurred during feed processing because of a split.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.ChangeFeed.Exceptions.FeedSplitException.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.Cosmos.ChangeFeed.Exceptions.FeedSplitException"/> class using error message and last continuation token.
            </summary>
            <param name="message">The exception error message.</param>
            <param name="lastContinuation"> Request continuation token.</param>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.ChangeFeed.Exceptions.FeedSplitException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.Cosmos.ChangeFeed.Exceptions.FeedSplitException" /> class using default values.
            </summary>
            <param name="info">The SerializationInfo object that holds serialized object data for the exception being thrown.</param>
            <param name="context">The StreamingContext that contains contextual information about the source or destination.</param>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.ChangeFeed.Exceptions.FeedSplitException.LastContinuation">
            <summary>
            Gets the value of request continuation token.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.ChangeFeed.Exceptions.FeedSplitException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Sets the System.Runtime.Serialization.SerializationInfo with information about the exception.
            </summary>
            <param name="info">The SerializationInfo object that holds serialized object data for the exception being thrown.</param>
            <param name="context">The StreamingContext that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.ChangeFeed.Exceptions.LeaseLostException">
            <summary>
            Exception occurred when lease is lost, that would typically happen when it is taken by another host. Other cases: communication failure, number of retries reached, lease not found.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.ChangeFeed.Exceptions.LeaseLostException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.Cosmos.ChangeFeed.Exceptions.LeaseLostException" /> class.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.ChangeFeed.Exceptions.LeaseLostException.#ctor(Microsoft.Azure.Cosmos.ChangeFeed.LeaseManagement.DocumentServiceLease)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.Cosmos.ChangeFeed.Exceptions.LeaseLostException" /> class using the specified lease.
            </summary>
            <param name="lease">Instance of a lost lease.</param>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.ChangeFeed.Exceptions.LeaseLostException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.Cosmos.ChangeFeed.Exceptions.LeaseLostException" /> class using error message.
            </summary>
            <param name="message">The exception error message.</param>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.ChangeFeed.Exceptions.LeaseLostException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.Cosmos.ChangeFeed.Exceptions.LeaseLostException" /> class using error message and inner exception.
            </summary>
            <param name="message">The exception error message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.ChangeFeed.Exceptions.LeaseLostException.#ctor(Microsoft.Azure.Cosmos.ChangeFeed.LeaseManagement.DocumentServiceLease,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.Cosmos.ChangeFeed.Exceptions.LeaseLostException" /> class using the specified lease, and a flag indicating whether lease is gone.
            </summary>
            <param name="lease">Instance of a lost lease.</param>
            <param name="isGone">Whether lease doesn't exist.</param>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.ChangeFeed.Exceptions.LeaseLostException.#ctor(Microsoft.Azure.Cosmos.ChangeFeed.LeaseManagement.DocumentServiceLease,System.Exception,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.Cosmos.ChangeFeed.Exceptions.LeaseLostException" /> class using the specified lease, inner exception, and a flag indicating whether lease is gone.
            </summary>
            <param name="lease">Instance of a lost lease.</param>
            <param name="innerException">The inner exception.</param>
            <param name="isGone">Whether lease doesn't exist.</param>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.ChangeFeed.Exceptions.LeaseLostException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.Cosmos.ChangeFeed.Exceptions.LeaseLostException" /> class using default values.
            </summary>
            <param name="info">The SerializationInfo object that holds serialized object data for the exception being thrown.</param>
            <param name="context">The StreamingContext that contains contextual information about the source or destination.</param>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.ChangeFeed.Exceptions.LeaseLostException.Lease">
            <summary>
            Gets the lost lease.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.ChangeFeed.Exceptions.LeaseLostException.IsGone">
            <summary>
            Gets a value indicating whether lease doesn't exist.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.ChangeFeed.Exceptions.LeaseLostException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Sets the System.Runtime.Serialization.SerializationInfo with information about the exception.
            </summary>
            <param name="info">The SerializationInfo object that holds serialized object data for the exception being thrown.</param>
            <param name="context">The StreamingContext that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.ChangeFeed.Exceptions.ObserverException">
            <summary>
            Exception occurred when an operation in an IChangeFeedObserver is running and throws by user code
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.ChangeFeed.Exceptions.ObserverException.#ctor(System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.Cosmos.ChangeFeed.Exceptions.ObserverException" /> class using the specified internal exception.
            </summary>
            <param name="originalException"><see cref="T:System.Exception"/> thrown by the user code.</param>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.ChangeFeed.Exceptions.ObserverException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.Cosmos.ChangeFeed.Exceptions.ObserverException" /> class using default values.
            </summary>
            <param name="info">The SerializationInfo object that holds serialized object data for the exception being thrown.</param>
            <param name="context">The StreamingContext that contains contextual information about the source or destination.</param>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.ChangeFeed.Exceptions.ObserverException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Sets the System.Runtime.Serialization.SerializationInfo with information about the exception.
            </summary>
            <param name="info">The SerializationInfo object that holds serialized object data for the exception being thrown.</param>
            <param name="context">The StreamingContext that contains contextual information about the source or destination.</param>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.ChangeFeed.FeedManagement.LeaseRenewer.RunAsync(System.Threading.CancellationToken)">
            <summary>
            Starts the lease renewer
            </summary>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.ChangeFeed.FeedManagement.LoadBalancingStrategy">
             <summary>
             A strategy defines which leases should be taken by the current host in a certain moment.
             </summary>
             <remarks>
             It can set new <see cref="P:Microsoft.Azure.Cosmos.ChangeFeed.LeaseManagement.DocumentServiceLease.Properties"/> for all returned leases if needed, including currently owned leases.
             </remarks>
             <example>
             <code language="C#">
             <![CDATA[
             public class CustomStrategy : LoadBalancingStrategy
             {
                 private string hostName;
                 private string hostVersion;
                 private TimeSpan leaseExpirationInterval;
            
                 private const string VersionPropertyKey = "version";
            
                 public IEnumerable<DocumentServiceLease> SelectLeasesToTake(IEnumerable<DocumentServiceLease> allLeases)
                 {
                     var takenLeases = this.FindLeasesToTake(allLeases);
                     foreach (var lease in takenLeases)
                     {
                         lease.Properties[VersionPropertyKey] = this.hostVersion;
                     }
            
                     return takenLeases;
                 }
            
                 private IEnumerable<ILease> FindLeasesToTake(IEnumerable<DocumentServiceLease> allLeases)
                 {
                     List<DocumentServiceLease> takenLeases = new List<DocumentServiceLease>();
                     foreach (var lease in allLeases)
                     {
                         if (string.IsNullOrWhiteSpace(lease.Owner) || this.IsExpired(lease))
                         {
                             takenLeases.Add(lease);
                         }
            
                         if (lease.Owner != this.hostName)
                         {
                             var ownerVersion = lease.Properties[VersionPropertyKey];
                             if (ownerVersion < this.hostVersion)
                             {
                                 takenLeases.Add(lease);
                             }
            
                             // more logic for leases owned by other hosts
                         }
                     }
            
                     return takenLeases;
                 }
            
                 private bool IsExpired(DocumentServiceLease lease)
                 {
                     return lease.Timestamp.ToUniversalTime() + this.leaseExpirationInterval < DateTime.UtcNow;
                 }
             }
             ]]>
             </code>
             </example>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.ChangeFeed.FeedManagement.LoadBalancingStrategy.SelectLeasesToTake(System.Collections.Generic.IEnumerable{Microsoft.Azure.Cosmos.ChangeFeed.LeaseManagement.DocumentServiceLease})">
            <summary>
            Select leases that should be taken for processing.
            This method will be called periodically with <see cref="P:Microsoft.Azure.Cosmos.ChangeFeed.Configuration.ChangeFeedLeaseOptions.LeaseAcquireInterval"/>
            </summary>
            <param name="allLeases">All leases</param>
            <returns>Leases that should be taken for processing by this host</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.ChangeFeed.FeedManagement.PartitionCheckpointer.CheckpointPartitionAsync(System.String)">
            <summary>
            Checkpoint the given partition up to the given continuation token.
            </summary>
            <param name="сontinuationToken">Continuation token</param>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.ChangeFeed.FeedManagement.PartitionLoadBalancer.Start">
            <summary>
            Starts the load balancer
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.ChangeFeed.FeedManagement.PartitionLoadBalancer.StopAsync">
            <summary>
            Stops the load balancer
            </summary>
            <returns>Task that completes once load balancer is fully stopped</returns>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.ChangeFeed.FeedManagement.PartitionSynchronizer">
            <summary>
            Read DocDB partitions and create leases if they do not exist
            </summary>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.ChangeFeed.FeedManagement.RemainingLeaseTokenWork">
            <summary>
            Remaining estimated work on the lease token
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.ChangeFeed.FeedManagement.RemainingLeaseTokenWork.#ctor(System.String,System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.Cosmos.ChangeFeed.FeedManagement.RemainingLeaseTokenWork"/> class.
            </summary>
            <param name="leaseToken">The lease token for which the remaining work is calculated</param>
            <param name="remainingWork">The amount of documents remaining to be processed</param>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.ChangeFeed.FeedManagement.RemainingLeaseTokenWork.LeaseToken">
            <summary>
            Gets the lease token for which the remaining work is calculated
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.ChangeFeed.FeedManagement.RemainingLeaseTokenWork.RemainingWork">
            <summary>
            Gets the amount of documents remaining to be processed.
            </summary>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.ChangeFeed.FeedManagement.RemainingWorkEstimator">
            <summary>
            Used to estimate the pending work remaining to be read in the Change Feed. Calculates the sum of pending work based on the difference between the latest status of the feed and the status of each existing lease.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.ChangeFeed.FeedManagement.RemainingWorkEstimator.GetEstimatedRemainingWorkAsync(System.Threading.CancellationToken)">
            <summary>
            Calculates an estimate of the pending work remaining to be read in the Change Feed in amount of documents in the whole collection.
            </summary>
            <returns>An estimation of pending work in amount of documents.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.ChangeFeed.FeedManagement.RemainingWorkEstimator.GetEstimatedRemainingWorkPerLeaseTokenAsync(System.Threading.CancellationToken)">
            <summary>
            Calculates an estimate of the pending work remaining to be read in the Change Feed in amount of documents per distributed lease token.
            </summary>
            <returns>An array of an estimation of pending work in amount of documents per distributed lease token.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.ChangeFeed.FeedManagement.RemainingWorkEstimatorCore.ExtractLsnFromSessionToken(System.String)">
            <summary>
            Parses a Session Token and extracts the LSN.
            </summary>
            <param name="sessionToken">A Session Token</param>
            <returns>LSN value</returns>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.ChangeFeed.FeedProcessing.ChangeFeedObserver`1">
            <summary>
            This interface is used to deliver change events to document feed observers.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.ChangeFeed.FeedProcessing.ChangeFeedObserver`1.OpenAsync(Microsoft.Azure.Cosmos.ChangeFeed.FeedProcessing.ChangeFeedObserverContext)">
            <summary>
            This is called when change feed observer is opened.
            </summary>
            <param name="context">The context specifying partition for this observer, etc.</param>
            <returns>A Task to allow asynchronous execution.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.ChangeFeed.FeedProcessing.ChangeFeedObserver`1.CloseAsync(Microsoft.Azure.Cosmos.ChangeFeed.FeedProcessing.ChangeFeedObserverContext,Microsoft.Azure.Cosmos.ChangeFeed.FeedProcessing.ChangeFeedObserverCloseReason)">
            <summary>
            This is called when change feed observer is closed.
            </summary>
            <param name="context">The context specifying partition for this observer, etc.</param>
            <param name="reason">Specifies the reason the observer is closed.</param>
            <returns>A Task to allow asynchronous execution.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.ChangeFeed.FeedProcessing.ChangeFeedObserver`1.ProcessChangesAsync(Microsoft.Azure.Cosmos.ChangeFeed.FeedProcessing.ChangeFeedObserverContext,System.Collections.Generic.IReadOnlyCollection{`0},System.Threading.CancellationToken)">
            <summary>
            This is called when document changes are available on change feed.
            </summary>
            <param name="context">The context specifying partition for this change event, etc.</param>
            <param name="docs">The documents changed.</param>
            <param name="cancellationToken">Token to signal that the parition processing is going to finish.</param>
            <returns>A Task to allow asynchronous execution.</returns>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.ChangeFeed.FeedProcessing.ChangeFeedObserverCloseReason">
            <summary>
            The reason for the <see cref="T:Microsoft.Azure.Cosmos.ChangeFeed.FeedProcessing.ChangeFeedObserver`1"/> to close.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.ChangeFeed.FeedProcessing.ChangeFeedObserverCloseReason.Unknown">
            <summary>
            Unknown failure. This should never be sent to observers.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.ChangeFeed.FeedProcessing.ChangeFeedObserverCloseReason.Shutdown">
            <summary>
            The ChangeFeedEventHost is shutting down.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.ChangeFeed.FeedProcessing.ChangeFeedObserverCloseReason.ResourceGone">
            <summary>
            The resource, such as database or collection was removed.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.ChangeFeed.FeedProcessing.ChangeFeedObserverCloseReason.LeaseLost">
            <summary>
            Lease was lost due to expiration or load-balancing.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.ChangeFeed.FeedProcessing.ChangeFeedObserverCloseReason.ObserverError">
            <summary>
            IChangeFeedObserver threw an exception.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.ChangeFeed.FeedProcessing.ChangeFeedObserverCloseReason.LeaseGone">
            <summary>
            The lease is gone. This can be due to partition split.
            </summary>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.ChangeFeed.FeedProcessing.ChangeFeedObserverContext">
            <summary>
            Represents the context passed to <see cref="T:Microsoft.Azure.Cosmos.ChangeFeed.FeedProcessing.ChangeFeedObserver`1"/> events.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.ChangeFeed.FeedProcessing.ChangeFeedObserverContext.LeaseToken">
            <summary>
            Gets the Lease Token associated with the current Observer
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.ChangeFeed.FeedProcessing.ChangeFeedObserverContext.CheckpointAsync">
            <summary>
            Checkpoints progress of a stream. This method is valid only if manual checkpoint was configured.
            Client may accept multiple change feed batches to process in parallel.
            Once first N document processing was finished the client can call checkpoint on the last completed batches in the row.
            In case of automatic checkpointing this is method throws.
            </summary>
            <exception cref="T:Microsoft.Azure.Cosmos.ChangeFeed.Exceptions.LeaseLostException">Thrown if other host acquired the lease or the lease was deleted</exception>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.ChangeFeed.FeedProcessing.ChangeFeedObserverContextCore`1">
            <summary>
            The context passed to <see cref="T:Microsoft.Azure.Cosmos.ChangeFeed.FeedProcessing.ChangeFeedObserver`1"/> events.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.ChangeFeed.FeedProcessing.ChangeFeedObserverContextCore`1.CheckpointAsync">
            <summary>
            Checkpoints progress of a stream. This method is valid only if manual checkpoint was configured.
            Client may accept multiple change feed batches to process in parallel.
            Once first N document processing was finished the client can call checkpoint on the last completed batches in the row.
            In case of automatic checkpointing this is method throws.
            </summary>
            <exception cref="T:Microsoft.Azure.Cosmos.ChangeFeed.Exceptions.LeaseLostException">Thrown if other host acquired the lease or the lease was deleted</exception>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.ChangeFeed.FeedProcessing.ChangeFeedObserverFactory`1">
            <summary>
            Factory class used to create instance(s) of <see cref="T:Microsoft.Azure.Cosmos.ChangeFeed.FeedProcessing.ChangeFeedObserver`1"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.ChangeFeed.FeedProcessing.ChangeFeedObserverFactory`1.CreateObserver">
            <summary>
            Creates an instance of a <see cref="T:Microsoft.Azure.Cosmos.ChangeFeed.FeedProcessing.ChangeFeedObserver`1"/>.
            </summary>
            <returns>An instance of a <see cref="T:Microsoft.Azure.Cosmos.ChangeFeed.FeedProcessing.ChangeFeedObserver`1"/>.</returns>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.ChangeFeed.FeedProcessing.CheckpointerObserverFactory`1">
            <summary>
            Factory class used to create instance(s) of <see cref="T:Microsoft.Azure.Cosmos.ChangeFeed.FeedProcessing.ChangeFeedObserver`1"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.ChangeFeed.FeedProcessing.CheckpointerObserverFactory`1.#ctor(Microsoft.Azure.Cosmos.ChangeFeed.FeedProcessing.ChangeFeedObserverFactory{`0},Microsoft.Azure.Cosmos.ChangeFeed.Configuration.CheckpointFrequency)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.Cosmos.ChangeFeed.FeedProcessing.CheckpointerObserverFactory`1"/> class.
            </summary>
            <param name="observerFactory">Instance of Observer Factory</param>
            <param name="checkpointFrequency">Defined <see cref="T:Microsoft.Azure.Cosmos.ChangeFeed.Configuration.CheckpointFrequency"/></param>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.ChangeFeed.FeedProcessing.CheckpointerObserverFactory`1.CreateObserver">
            <summary>
            Creates a new instance of <see cref="T:Microsoft.Azure.Cosmos.ChangeFeed.FeedProcessing.ChangeFeedObserver`1"/>.
            </summary>
            <returns>Created instance of <see cref="T:Microsoft.Azure.Cosmos.ChangeFeed.FeedProcessing.ChangeFeedObserver`1"/>.</returns>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.ChangeFeed.FeedProcessing.FeedEstimator">
            <summary>
            Process that frequently checks the estimated state of the processor and dispatches a calculation to a <see cref="T:Microsoft.Azure.Cosmos.ChangeFeed.FeedProcessing.ChangeFeedEstimatorDispatcher"/>.
            </summary>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.ChangeFeed.FeedProcessing.FeedProcessor">
            <summary>
            Provides an API to run continuous processing on a single processing unit of some resource.
            Created by <see cref="M:Microsoft.Azure.Cosmos.ChangeFeed.FeedProcessing.FeedProcessorFactory`1.Create(Microsoft.Azure.Cosmos.ChangeFeed.LeaseManagement.DocumentServiceLease,Microsoft.Azure.Cosmos.ChangeFeed.FeedProcessing.ChangeFeedObserver{`0})"/> after some lease is acquired by the current host.
            Processing can perform the following tasks in a loop:
              1. Read some data from the resource feed.
              2. Handle possible problems with the read.
              3. Pass the obtained data to an observer by calling <see cref="M:Microsoft.Azure.Cosmos.ChangeFeed.FeedProcessing.ChangeFeedObserver`1.ProcessChangesAsync(Microsoft.Azure.Cosmos.ChangeFeed.FeedProcessing.ChangeFeedObserverContext,System.Collections.Generic.IReadOnlyCollection{`0},System.Threading.CancellationToken)"/> with the context <see cref="T:Microsoft.Azure.Cosmos.ChangeFeed.FeedProcessing.ChangeFeedObserverContext"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.ChangeFeed.FeedProcessing.FeedProcessor.RunAsync(System.Threading.CancellationToken)">
            <summary>
            Perform feed processing.
            </summary>
            <param name="cancellationToken">Cancellation token to be used to stop processing</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/>.</returns>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.ChangeFeed.FeedProcessing.FeedProcessorFactory`1">
            <summary>
            Factory class used to create instance(s) of <see cref="T:Microsoft.Azure.Cosmos.ChangeFeed.FeedProcessing.FeedProcessor"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.ChangeFeed.FeedProcessing.FeedProcessorFactory`1.Create(Microsoft.Azure.Cosmos.ChangeFeed.LeaseManagement.DocumentServiceLease,Microsoft.Azure.Cosmos.ChangeFeed.FeedProcessing.ChangeFeedObserver{`0})">
            <summary>
            Creates an instance of a <see cref="T:Microsoft.Azure.Cosmos.ChangeFeed.FeedProcessing.FeedProcessor"/>.
            </summary>
            <param name="lease">Lease to be used for feed processing</param>
            <param name="observer">Observer to be used</param>
            <returns>An instance of a <see cref="T:Microsoft.Azure.Cosmos.ChangeFeed.FeedProcessing.FeedProcessor"/>.</returns>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.ChangeFeed.LeaseManagement.DocumentServiceLease">
            <summary>
            Represents a lease that is persisted as a document in the lease collection.
            Leases are used to:
            * Keep track of the <see cref="T:Microsoft.Azure.Cosmos.ChangeFeedProcessor"/> progress for a particular Partition Key Range.
            * Distribute load between different instances of <see cref="T:Microsoft.Azure.Cosmos.ChangeFeedProcessor"/>.
            * Ensure reliable recovery for cases when an instance of <see cref="T:Microsoft.Azure.Cosmos.ChangeFeedProcessor"/> gets disconnected, hangs or crashes.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.ChangeFeed.LeaseManagement.DocumentServiceLease.CurrentLeaseToken">
            <summary>
            Gets the processing distribution unit identifier.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.ChangeFeed.LeaseManagement.DocumentServiceLease.Owner">
            <summary>
            Gets or sets the host name owner of the lease.
            The Owner keeps track which <see cref="T:Microsoft.Azure.Cosmos.ChangeFeedProcessor"/> is currently processing that Partition Key Range.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.ChangeFeed.LeaseManagement.DocumentServiceLease.Timestamp">
            <summary>
            Gets or sets the Timestamp of the lease.
            Timestamp is used to determine lease expiration.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.ChangeFeed.LeaseManagement.DocumentServiceLease.ContinuationToken">
            <summary>
            Gets or sets the Continuation Token.
            Continuation Token is used to determine the last processed point of the Change Feed.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.ChangeFeed.LeaseManagement.DocumentServiceLease.Id">
            <summary>
            Gets the lease Id.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.ChangeFeed.LeaseManagement.DocumentServiceLease.ConcurrencyToken">
            <summary>
            Gets the Concurrency Token.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.ChangeFeed.LeaseManagement.DocumentServiceLease.Properties">
            <summary>
            Gets or sets custom lease properties which can be managed from <see cref="T:Microsoft.Azure.Cosmos.ChangeFeed.FeedManagement.LoadBalancingStrategy"/>.
            </summary>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.ChangeFeed.LeaseManagement.DocumentServiceLeaseCheckpointer">
            <summary>
            Used to checkpoint leases.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.ChangeFeed.LeaseManagement.DocumentServiceLeaseCheckpointer.CheckpointAsync(Microsoft.Azure.Cosmos.ChangeFeed.LeaseManagement.DocumentServiceLease,System.String)">
            <summary>
            Checkpoint the lease.
            </summary>
            <param name="lease">Lease to renew</param>
            <param name="continuationToken">Continuation token</param>
            <returns>Updated renewed lease</returns>
            <exception cref="T:Microsoft.Azure.Cosmos.ChangeFeed.Exceptions.LeaseLostException">Thrown if other host acquired the lease or lease was deleted</exception>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.ChangeFeed.LeaseManagement.DocumentServiceLeaseContainer">
            <summary>
            Represents operations to get leases from lease store.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.ChangeFeed.LeaseManagement.DocumentServiceLeaseContainer.GetAllLeasesAsync">
            <summary>
            Get all leases.
            </summary>
            <returns>List of all leases</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.ChangeFeed.LeaseManagement.DocumentServiceLeaseContainer.GetOwnedLeasesAsync">
            <summary>
            Get all the leases owned by the current host.
            </summary>
            <returns>Enumerable of all leases owned by the current host</returns>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.ChangeFeed.LeaseManagement.DocumentServiceLeaseCore.ContinuationToken">
            <summary>
            Gets or sets the current value for the offset in the stream.
            </summary>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.ChangeFeed.LeaseManagement.DocumentServiceLeaseManager">
            <summary>
            The DocumentServiceLeaseManager defines a way to perform operations with <see cref="T:Microsoft.Azure.Cosmos.ChangeFeed.LeaseManagement.DocumentServiceLease"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.ChangeFeed.LeaseManagement.DocumentServiceLeaseManager.CreateLeaseIfNotExistAsync(System.String,System.String)">
            <summary>
            Checks whether the lease exists and creates it if it does not exist.
            </summary>
            <param name="partitionId">Partition to work on.</param>
            <param name="continuationToken">Continuation token if it exists.</param>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.ChangeFeed.LeaseManagement.DocumentServiceLeaseManager.DeleteAsync(Microsoft.Azure.Cosmos.ChangeFeed.LeaseManagement.DocumentServiceLease)">
            <summary>
            Delete the lease.
            </summary>
            <param name="lease">Lease to remove.</param>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.ChangeFeed.LeaseManagement.DocumentServiceLeaseManager.AcquireAsync(Microsoft.Azure.Cosmos.ChangeFeed.LeaseManagement.DocumentServiceLease)">
            <summary>
            Acquire ownership of the lease.
            </summary>
            <param name="lease">Lease to acquire.</param>
            <returns>Updated acquired lease.</returns>
            <exception cref="T:Microsoft.Azure.Cosmos.ChangeFeed.Exceptions.LeaseLostException">Thrown if other host acquired concurrently</exception>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.ChangeFeed.LeaseManagement.DocumentServiceLeaseManager.ReleaseAsync(Microsoft.Azure.Cosmos.ChangeFeed.LeaseManagement.DocumentServiceLease)">
            <summary>
            Release ownership of the lease.
            </summary>
            <param name="lease">Lease to acquire.</param>
            <exception cref="T:Microsoft.Azure.Cosmos.ChangeFeed.Exceptions.LeaseLostException">Thrown if other host acquired the lease or lease was deleted</exception>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.ChangeFeed.LeaseManagement.DocumentServiceLeaseManager.RenewAsync(Microsoft.Azure.Cosmos.ChangeFeed.LeaseManagement.DocumentServiceLease)">
            <summary>
            Renew the lease. Leases are periodically renewed to prevent expiration.
            </summary>
            <param name="lease">Lease to renew.</param>
            <returns>Updated renewed lease.</returns>
            <exception cref="T:Microsoft.Azure.Cosmos.ChangeFeed.Exceptions.LeaseLostException">Thrown if other host acquired the lease or lease was deleted</exception>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.ChangeFeed.LeaseManagement.DocumentServiceLeaseManager.UpdatePropertiesAsync(Microsoft.Azure.Cosmos.ChangeFeed.LeaseManagement.DocumentServiceLease)">
            <summary>
            Replace properties from the specified lease.
            </summary>
            <param name="leaseToUpdatePropertiesFrom">Lease containing new properties</param>
            <returns>Updated lease.</returns>
            <exception cref="T:Microsoft.Azure.Cosmos.ChangeFeed.Exceptions.LeaseLostException">Thrown if other host acquired the lease</exception>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.ChangeFeed.LeaseManagement.DocumentServiceLeaseManagerCosmos">
            <summary>
            <see cref="T:Microsoft.Azure.Cosmos.ChangeFeed.LeaseManagement.DocumentServiceLeaseManager"/> implementation that uses Azure Cosmos DB service
            </summary>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.ChangeFeed.LeaseManagement.DocumentServiceLeaseManagerInMemory">
            <summary>
            <see cref="T:Microsoft.Azure.Cosmos.ChangeFeed.LeaseManagement.DocumentServiceLeaseManager"/> implementation that uses In-Memory
            </summary>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.ChangeFeed.LeaseManagement.DocumentServiceLeaseStore">
            <summary>
            Represents the lease store container to deal with initialiation/cleanup of leases
            for particular monitoring collection and lease container prefix.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.ChangeFeed.LeaseManagement.DocumentServiceLeaseStore.IsInitializedAsync">
            <summary>
            Checks if the lease store is initialized.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.ChangeFeed.LeaseManagement.DocumentServiceLeaseStore.MarkInitializedAsync">
            <summary>
            Mark the store as initialized.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.ChangeFeed.LeaseManagement.DocumentServiceLeaseStore.AcquireInitializationLockAsync(System.TimeSpan)">
            <summary>
            Places a lock on the lease store for initialization. Only one process may own the store for the lock time.
            </summary>
            <param name="lockExpirationTime">The time for the lock to expire.</param>
            <returns>True if the lock was acquired, false otherwise.</returns>
            <remarks>In order for expiration time work, lease colection needs to have TTL enabled.</remarks>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.ChangeFeed.LeaseManagement.DocumentServiceLeaseStore.ReleaseInitializationLockAsync">
            <summary>
            Releases the lock one the lease store for initialization.
            </summary>
            <returns>True if the lock was acquired and was relesed, false if the lock was not acquired.</returns>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.ChangeFeed.LeaseManagement.DocumentServiceLeaseStoreCosmos">
            <summary>
            Implementation of <see cref="T:Microsoft.Azure.Cosmos.ChangeFeed.LeaseManagement.DocumentServiceLeaseStore"/> for state in Azure Cosmos DB
            </summary>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.ChangeFeed.LeaseManagement.DocumentServiceLeaseStoreInMemory">
            <summary>
            Implementation of <see cref="T:Microsoft.Azure.Cosmos.ChangeFeed.LeaseManagement.DocumentServiceLeaseStore"/> for state in-memory
            </summary>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.ChangeFeed.LeaseManagement.DocumentServiceLeaseStoreManager">
            <summary>
            The DocumentServiceLease defines a way to perform operations with <see cref="T:Microsoft.Azure.Cosmos.ChangeFeed.LeaseManagement.DocumentServiceLease"/>.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.ChangeFeed.LeaseManagement.DocumentServiceLeaseStoreManager.LeaseContainer">
            <summary>
            Represents operations to get leases from lease store.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.ChangeFeed.LeaseManagement.DocumentServiceLeaseStoreManager.LeaseManager">
            <summary>
            The DocumentServiceLeaseManager defines a way to perform operations with <see cref="T:Microsoft.Azure.Cosmos.ChangeFeed.LeaseManagement.DocumentServiceLease"/>.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.ChangeFeed.LeaseManagement.DocumentServiceLeaseStoreManager.LeaseCheckpointer">
            <summary>
            Used to checkpoint leases.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.ChangeFeed.LeaseManagement.DocumentServiceLeaseStoreManager.LeaseStore">
            <summary>
            Represents the lease store container to deal with initialiation/cleanup of leases
            for particular monitoring collection and lease container prefix.
            </summary>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.ChangeFeed.LeaseManagement.DocumentServiceLeaseStoreManagerBuilder">
            <summary>
            Provides flexible way to build lease manager constructor parameters.
            For the actual creation of lease manager instance, delegates to lease manager factory.
            </summary>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.ChangeFeed.LeaseManagement.DocumentServiceLeaseStoreManagerCosmos">
            <summary>
            Lease manager that is using Azure Document Service as lease storage.
            Documents in lease collection are organized as this:
            ChangeFeed.federation|database_rid|collection_rid.info            -- container
            ChangeFeed.federation|database_rid|collection_rid..partitionId1   -- each partition
            ChangeFeed.federation|database_rid|collection_rid..partitionId2
                                                    ...
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.ChangeFeed.LeaseManagement.DocumentServiceLeaseStoreManagerCosmos.#ctor(Microsoft.Azure.Cosmos.ChangeFeed.LeaseManagement.DocumentServiceLeaseStoreManagerOptions,Microsoft.Azure.Cosmos.Container,Microsoft.Azure.Cosmos.ChangeFeed.LeaseManagement.RequestOptionsFactory,Microsoft.Azure.Cosmos.ChangeFeed.LeaseManagement.DocumentServiceLeaseUpdater)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.Cosmos.ChangeFeed.LeaseManagement.DocumentServiceLeaseStoreManagerCosmos"/> class.
            </summary>
            <remarks>
            Internal only for testing purposes, otherwise would be private.
            </remarks>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.ChangeFeed.LeaseManagement.DocumentServiceLeaseStoreManagerInMemory">
            <summary>
            Lease manager that is using In-Memory as lease storage.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.ChangeFeed.LeaseManagement.DocumentServiceLeaseStoreManagerInMemory.#ctor(Microsoft.Azure.Cosmos.ChangeFeed.LeaseManagement.DocumentServiceLeaseUpdater,System.Collections.Concurrent.ConcurrentDictionary{System.String,Microsoft.Azure.Cosmos.ChangeFeed.LeaseManagement.DocumentServiceLease})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.Cosmos.ChangeFeed.LeaseManagement.DocumentServiceLeaseStoreManagerInMemory"/> class.
            </summary>
            <remarks>
            Internal only for testing purposes, otherwise would be private.
            </remarks>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.ChangeFeed.LeaseManagement.DocumentServiceLeaseUpdaterCosmos">
            <summary>
            <see cref="T:Microsoft.Azure.Cosmos.ChangeFeed.LeaseManagement.DocumentServiceLeaseUpdater"/> that uses Azure Cosmos DB
            </summary>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.ChangeFeed.LeaseManagement.DocumentServiceLeaseUpdaterInMemory">
            <summary>
            <see cref="T:Microsoft.Azure.Cosmos.ChangeFeed.LeaseManagement.DocumentServiceLeaseUpdater"/> that uses In-Memory
            </summary>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.ChangeFeed.LeaseManagement.PartitionedByIdCollectionRequestOptionsFactory">
            <summary>
            Used to create request options for partitioned lease collections, when partition key is defined as /id.
            </summary>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.ChangeFeed.LeaseManagement.RequestOptionsFactory">
            <summary>
            Defines request options for lease requests to use with <see cref="T:Microsoft.Azure.Cosmos.ChangeFeed.LeaseManagement.DocumentServiceLeaseStoreManagerCosmos"/> and <see cref="T:Microsoft.Azure.Cosmos.ChangeFeed.LeaseManagement.DocumentServiceLeaseStoreCosmos"/>.
            </summary>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.ChangeFeed.LeaseManagement.SinglePartitionRequestOptionsFactory">
            <summary>
            Used to create request options for non-partitioned lease collections.
            </summary>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.ChangeFeed.Monitoring.HealthMonitor">
            <summary>
            A strategy for handling the situation when the change feed processor is not able to acquire lease due to unknown reasons.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.ChangeFeed.Monitoring.HealthMonitor.InspectAsync(Microsoft.Azure.Cosmos.ChangeFeed.Monitoring.HealthMonitoringRecord)">
            <summary>
            A logic to handle that exceptional situation.
            </summary>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.ChangeFeed.Monitoring.HealthMonitoringRecord">
            <summary>
            A record used in the health monitoring.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.ChangeFeed.Monitoring.HealthMonitoringRecord.#ctor(Microsoft.Azure.Cosmos.ChangeFeed.Monitoring.HealthSeverity,Microsoft.Azure.Cosmos.ChangeFeed.Monitoring.MonitoredOperation,Microsoft.Azure.Cosmos.ChangeFeed.LeaseManagement.DocumentServiceLease,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.Cosmos.ChangeFeed.Monitoring.HealthMonitoringRecord"/> class.
            </summary>
            <param name="severity">The health severity level.</param>
            <param name="operation">The operation.</param>
            <param name="lease">The lease.</param>
            <param name="exception">The exception.</param>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.ChangeFeed.Monitoring.HealthMonitoringRecord.Severity">
            <summary>
            Gets the health severity.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.ChangeFeed.Monitoring.HealthMonitoringRecord.Operation">
            <summary>
            Gets the monitored operation.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.ChangeFeed.Monitoring.HealthMonitoringRecord.Lease">
            <summary>
            Gets the lease which triggered the operation.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.ChangeFeed.Monitoring.HealthMonitoringRecord.Exception">
            <summary>
            Gets the exception details in case of failure.
            </summary>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.ChangeFeed.Monitoring.HealthSeverity">
            <summary>
            The health severity level
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.ChangeFeed.Monitoring.HealthSeverity.Critical">
            <summary>
            Critical level.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.ChangeFeed.Monitoring.HealthSeverity.Error">
            <summary>
            Error level.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.ChangeFeed.Monitoring.HealthSeverity.Informational">
            <summary>
            Information level.
            </summary>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.ChangeFeed.Monitoring.MonitoredOperation">
            <summary>
            The health monitoring phase
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.ChangeFeed.Monitoring.MonitoredOperation.AcquireLease">
            <summary>
            A phase when the instance tries to acquire the lease
            </summary>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.ChangeFeed.Monitoring.TraceHealthMonitor">
            <summary>
            A monitor which logs the errors only.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.ChangeFeed.Monitoring.TraceHealthMonitor.InspectAsync(Microsoft.Azure.Cosmos.ChangeFeed.Monitoring.HealthMonitoringRecord)">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.Azure.Cosmos.ChangeFeedProcessor">
            <summary>
            Provides an API to start and stop a <see cref="T:Microsoft.Azure.Cosmos.ChangeFeedProcessor"/> instance created by <see cref="M:Microsoft.Azure.Cosmos.ChangeFeedProcessorBuilder.Build"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.ChangeFeedProcessor.StartAsync">
            <summary>
            Start listening for changes.
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/>.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.ChangeFeedProcessor.StopAsync">
            <summary>
            Stops listening for changes.
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/>.</returns>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.ChangeFeedProcessorBuilder">
            <summary>
            Provides a flexible way to create an instance of <see cref="T:Microsoft.Azure.Cosmos.ChangeFeedProcessor"/> with custom set of parameters.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.ChangeFeedProcessorBuilder.WithInstanceName(System.String)">
            <summary>
            Sets the Host name.
            </summary>
            <param name="instanceName">Name to be used for the processor instance. When using multiple processor hosts, each host must have a unique name.</param>
            <returns>The instance of <see cref="T:Microsoft.Azure.Cosmos.ChangeFeedProcessorBuilder"/> to use.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.ChangeFeedProcessorBuilder.WithLeaseConfiguration(System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan})">
            <summary>
            Sets a custom configuration to be used by this instance of <see cref="T:Microsoft.Azure.Cosmos.ChangeFeedProcessor"/> to control how leases are maintained in a container when using <see cref="M:Microsoft.Azure.Cosmos.ChangeFeedProcessorBuilder.WithLeaseContainer(Microsoft.Azure.Cosmos.Container)"/>.
            </summary>
            <param name="acquireInterval">Interval to kick off a task to verify if leases are distributed evenly among known host instances.</param>
            <param name="expirationInterval">Interval for which the lease is taken. If the lease is not renewed within this interval, it will cause it to expire and ownership of the lease will move to another processor instance.</param>
            <param name="renewInterval">Renew interval for all leases currently held by a particular processor instance.</param>
            <returns>The instance of <see cref="T:Microsoft.Azure.Cosmos.ChangeFeedProcessorBuilder"/> to use.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.ChangeFeedProcessorBuilder.WithPollInterval(System.TimeSpan)">
            <summary>
            Gets or sets the delay in between polling the change feed for new changes, after all current changes are drained.
            </summary>
            <remarks>
            Applies only after a read on the change feed yielded no results.
            </remarks>
            <param name="pollInterval">Polling interval value.</param>
            <returns>The instance of <see cref="T:Microsoft.Azure.Cosmos.ChangeFeedProcessorBuilder"/> to use.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.ChangeFeedProcessorBuilder.WithStartFromBeginning">
            <summary>
            Indicates whether change feed in the Azure Cosmos DB service should start from beginning.
            By default it's start from current time.
            </summary>
            <remarks>
            This is only used when:
            (1) Lease store is not initialized and is ignored if a lease exists and has continuation token.
            (2) StartContinuation is not specified.
            (3) StartTime is not specified.
            </remarks>
            <returns>The instance of <see cref="T:Microsoft.Azure.Cosmos.ChangeFeedProcessorBuilder"/> to use.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.ChangeFeedProcessorBuilder.WithStartTime(System.DateTime)">
            <summary>
            Sets the time (exclusive) to start looking for changes after.
            </summary>
            <remarks>
            This is only used when:
            (1) Lease store is not initialized and is ignored if a lease exists and has continuation token.
            (2) StartContinuation is not specified.
            If this is specified, StartFromBeginning is ignored.
            </remarks>
            <param name="startTime">Date and time when to start looking for changes.</param>
            <returns>The instance of <see cref="T:Microsoft.Azure.Cosmos.ChangeFeedProcessorBuilder"/> to use.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.ChangeFeedProcessorBuilder.WithMaxItems(System.Int32)">
            <summary>
            Sets the maximum number of items to be returned in the enumeration operation in the Azure Cosmos DB service.
            </summary>
            <param name="maxItemCount">Maximum amount of items to be returned in a Change Feed request.</param>
            <returns>An instance of <see cref="T:Microsoft.Azure.Cosmos.ChangeFeedProcessorBuilder"/>.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.ChangeFeedProcessorBuilder.WithLeaseContainer(Microsoft.Azure.Cosmos.Container)">
            <summary>
            Sets the Cosmos Container to hold the leases state
            </summary>
            <param name="leaseContainer">Instance of a Cosmos Container to hold the leases.</param>
            <returns>The instance of <see cref="T:Microsoft.Azure.Cosmos.ChangeFeedProcessorBuilder"/> to use.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.ChangeFeedProcessorBuilder.WithInMemoryLeaseContainer">
            <summary>
            Uses an in-memory container to maintain state of the leases
            </summary>
            <remarks>
            Using an in-memory container restricts the scaling capability to just the instance running the current processor.
            </remarks>
            <returns>The instance of <see cref="T:Microsoft.Azure.Cosmos.ChangeFeedProcessorBuilder"/> to use.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.ChangeFeedProcessorBuilder.WithSessionContinuationToken(System.String)">
            <summary>
            Sets the start request session continuation token to start looking for changes after.
            </summary>
            <remarks>
            This is only used when lease store is not initialized and is ignored if a lease exists and has continuation token.
            If this is specified, both StartTime and StartFromBeginning are ignored.
            </remarks>
            <returns>The instance of <see cref="T:Microsoft.Azure.Cosmos.ChangeFeedProcessorBuilder"/> to use.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.ChangeFeedProcessorBuilder.Build">
            <summary>
            Builds a new instance of the <see cref="T:Microsoft.Azure.Cosmos.ChangeFeedProcessor"/> with the specified configuration.
            </summary>
            <returns>An instance of <see cref="T:Microsoft.Azure.Cosmos.ChangeFeedProcessor"/>.</returns>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.ClearingSessionContainerClientRetryPolicy">
            <summary>
            This retry policy is designed to work with in a pair with ClientRetryPolicy.
            The inner retryPolicy must be a ClientRetryPolicy or a rety policy delegating to it.
            
            The expectation that is the outer retry policy in the retry policy chain and nobody can overwrite ShouldRetryResult.
            Once we clear the session we expect call to fail and throw exceptio to the client. Otherwise we may violate session consistency.
            </summary>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.ClientResources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.ClientResources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.ClientResources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.ClientResources.AllServicePoolsEmpty">
            <summary>
              Looks up a localized string similar to Sorry, we are currently experiencing high demand in this region, and cannot fulfill your request at this time. We work continuously to bring more and more capacity online, and encourage you to try again shortly. Please do not hesitate to contact us via Azure support at any time or for any reason using this link http://aka.ms/azuresupport..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.ClientResources.AuthTokenNotFound">
            <summary>
              Looks up a localized string similar to The client does not have any valid token for the requested resource {0}..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.ClientResources.BadQuery_IllegalMemberAccess">
            <summary>
              Looks up a localized string similar to Query expression is invalid, member {0} of type {1} is invalid..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.ClientResources.BadQuery_InvalidArrayIndexExpression">
            <summary>
              Looks up a localized string similar to Query expression is invalid, expression {0} is unsupported in this context. Supported expressions are MemberAccess and ArrayIndex..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.ClientResources.BadQuery_InvalidArrayIndexType">
            <summary>
              Looks up a localized string similar to Type {0} for an array index parameter is invalid. Array index parameter must be int..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.ClientResources.BadQuery_InvalidComparison">
            <summary>
              Looks up a localized string similar to Query expression is invalid, expression {0} must either have LHS or RHS as constant..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.ClientResources.BadQuery_InvalidComparisonType">
            <summary>
              Looks up a localized string similar to Query expression is invalid, expression {0} of type {1} cannot be used in this context..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.ClientResources.BadQuery_InvalidExpression">
            <summary>
              Looks up a localized string similar to Query expression is invalid, expression {0} is unsupported. Supported expressions are &apos;Queryable.Where&apos;, &apos;Queryable.Select&apos; &amp; &apos;Queryable.SelectMany&apos;.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.ClientResources.BadQuery_InvalidLeftExpression">
            <summary>
              Looks up a localized string similar to Query expression is invalid, expression {0} is not allowed in this context..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.ClientResources.BadQuery_InvalidMemberAccessExpression">
            <summary>
              Looks up a localized string similar to Query expression is invalid, expression {0} is unsupported in this context. Supported expressions are parameter reference, array index and property reference..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.ClientResources.BadQuery_InvalidMethodCall">
            <summary>
              Looks up a localized string similar to Query expression is invalid, method call {0} is not allowed at this context. Allowed methods are {1}..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.ClientResources.BadQuery_InvalidQueryType">
            <summary>
              Looks up a localized string similar to QueryType {0} is not supported..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.ClientResources.BadQuery_InvalidReturnType">
            <summary>
              Looks up a localized string similar to Query expression is invalid, expression return type {0} is unsupported. Query must evaluate to IEnumerable..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.ClientResources.BadQuery_TooManySelectManyArguments">
            <summary>
              Looks up a localized string similar to Query expression is invalid, expression {0} contains too many arguments. .
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.ClientResources.BadQuery_TransformQueryException">
            <summary>
              Looks up a localized string similar to An error occured while evaluating the transform expression {0}..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.ClientResources.BadSession">
            <summary>
              Looks up a localized string similar to Session object retrieved from client with endpoint {0} cannot be used on a client initialized to endpoint {1}..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.ClientResources.BatchNoOperations">
            <summary>
              Looks up a localized string similar to The batch request did not have any operations to be executed..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.ClientResources.BatchOperationTooLarge">
            <summary>
              Looks up a localized string similar to One or more batch operations are larger than the allowed limit..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.ClientResources.BatchRequestOptionNotSupported">
            <summary>
              Looks up a localized string similar to One or more request options provided on the batch request are not supported..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.ClientResources.BatchTooLarge">
            <summary>
              Looks up a localized string similar to This batch request cannot be executed as it is larger than the allowed limit. Please reduce the number of operations in the batch and try again..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.ClientResources.BinaryOperatorNotSupported">
            <summary>
              Looks up a localized string similar to Binary operator &apos;{0}&apos; is not supported..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.ClientResources.ConstantTypeIsNotSupported">
            <summary>
              Looks up a localized string similar to Constant of type &apos;{0}&apos; is not supported..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.ClientResources.ConstructorInvocationNotSupported">
            <summary>
              Looks up a localized string similar to Constructor invocation is not supported..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.ClientResources.EpkPropertiesPairingExpected">
            <summary>
              Looks up a localized string similar to Expected valid byte[] value for {0} and string value for {1} when either property is set..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.ClientResources.ExpectedMethodCallsMethods">
            <summary>
              Looks up a localized string similar to Expected a static IQueryable or IEnumerable extension method, received an instance method..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.ClientResources.ExpressionTypeIsNotSupported">
            <summary>
              Looks up a localized string similar to Expression with NodeType &apos;{0}&apos; is not supported..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.ClientResources.FailedToEvaluateSpatialExpression">
            <summary>
              Looks up a localized string similar to Expression tree cannot be processed because evaluation of Spatial expression failed..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.ClientResources.InputIsNotIDocumentQuery">
            <summary>
              Looks up a localized string similar to Input is not of type IDocumentQuery..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.ClientResources.InvalidArgumentsCount">
            <summary>
              Looks up a localized string similar to Incorrect number of arguments for method &apos;{0}&apos;. Expected &apos;{1}&apos; but received &apos;{2}&apos;..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.ClientResources.InvalidCallToUserDefinedFunctionProvider">
            <summary>
              Looks up a localized string similar to This method should only be called within Linq expression to Invoke a User-defined function..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.ClientResources.InvalidRangeError">
            <summary>
              Looks up a localized string similar to Range low value must be less than or equal the high value..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.ClientResources.InvalidServerResponse">
            <summary>
              Looks up a localized string similar to Received an invalid response from the server..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.ClientResources.InvalidSkipValue">
            <summary>
              Looks up a localized string similar to The count value provided for a Skip expression must be a non-negative integer..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.ClientResources.InvalidTakeValue">
            <summary>
              Looks up a localized string similar to The count value provided for a Take expression must be a non-negative integer..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.ClientResources.InvalidTypesForMethod">
            <summary>
              Looks up a localized string similar to Method &apos;{0}&apos; can not be invoked for type &apos;{1}&apos;. Supported types are &apos;[{2}]&apos;..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.ClientResources.MediaLinkInvalid">
            <summary>
              Looks up a localized string similar to MediaLink is invalid.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.ClientResources.MemberBindingNotSupported">
            <summary>
              Looks up a localized string similar to Member binding is not supported..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.ClientResources.MethodNotSupported">
            <summary>
              Looks up a localized string similar to Method &apos;{0}&apos; is not supported..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.ClientResources.NotSupported">
            <summary>
              Looks up a localized string similar to Not supported..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.ClientResources.OnlyLINQMethodsAreSupported">
            <summary>
              Looks up a localized string similar to Method &apos;{0}&apos; is not supported. Only LINQ Methods are supported..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.ClientResources.PartitionKeyExtractError">
            <summary>
              Looks up a localized string similar to Unable to extract partition key from document. Ensure that you have provided a valid PartitionKeyValueExtractor function..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.ClientResources.PartitionKeyPathConflict">
            <summary>
              Looks up a localized string similar to The requested partition key path &apos;{0}&apos; does not match existing Container &apos;{1}&apos; with partition key path &apos;{2}&apos;.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.ClientResources.PartitionPropertyNotFound">
            <summary>
              Looks up a localized string similar to Partition property not found in the document..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.ClientResources.PartitionResolver_DatabaseAlreadyExist">
            <summary>
              Looks up a localized string similar to An IPartitionResolver already exists for this database.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.ClientResources.PartitionResolver_DatabaseDoesntExist">
            <summary>
              Looks up a localized string similar to No IPartitionResolver available for this database.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.ClientResources.PathExpressionsOnly">
            <summary>
              Looks up a localized string similar to Only path expressions are supported for SelectMany..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.ClientResources.PKAndEpkSetTogether">
            <summary>
              Looks up a localized string similar to Partition key and effective partition key may not both be set..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.ClientResources.RangeNotFoundError">
            <summary>
              Looks up a localized string similar to A containing range for {0} doesn&apos;t exist in the partition map..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.ClientResources.ServerResponseDeserializationFailure">
            <summary>
              Looks up a localized string similar to Failed to deserialize response returned by server..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.ClientResources.StringCompareToInvalidConstant">
            <summary>
              Looks up a localized string similar to The right hand side of string.CompareTo() comparison must be constant &apos;0&apos;.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.ClientResources.StringCompareToInvalidOperator">
            <summary>
              Looks up a localized string similar to Invalid operator for string.CompareTo(). Vaid operators are (&apos;==&apos;, &apos;&lt;&apos;, &apos;&lt;=&apos;, &apos;&gt;&apos; or &apos;&gt;=&apos;).
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.ClientResources.TypeCheckExtensionFunctionsNotImplemented">
            <summary>
              Looks up a localized string similar to Type check operations can be used in Linq expressions only and are evaluated in Azure CosmosDB server..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.ClientResources.UdfNameIsNullOrEmpty">
            <summary>
              Looks up a localized string similar to User-defined function name can not be null or empty..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.ClientResources.UnaryOperatorNotSupported">
            <summary>
              Looks up a localized string similar to Unary operator &apos;{0}&apos; is not supported..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.ClientResources.UnexpectedAuthTokenType">
            <summary>
              Looks up a localized string similar to Unexpected authorization token type &apos;({0})&apos;. Expected &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.ClientResources.UnexpectedTokenType">
            <summary>
              Looks up a localized string similar to Unexpected token type: {0}.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.ClientResources.UnsupportedBatchRequestOptions">
            <summary>
              Looks up a localized string similar to Consistency, Session, and Triggers are not allowed when using the Batch streaming feature..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.ClientResources.UnsupportedPartitionKey">
            <summary>
              Looks up a localized string similar to Unsupported type {0} for partitionKey..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.ClientResources.ValueAndAnonymousTypesAndGeometryOnly">
            <summary>
              Looks up a localized string similar to Instantiation of only value types, anonymous types and spatial types are supported..
            </summary>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.ClientRetryPolicy">
            <summary>
            Client policy is combination of endpoint change retry + throttling retry.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.ClientRetryPolicy.ShouldRetryAsync(System.Exception,System.Threading.CancellationToken)">
            <summary> 
            Should the caller retry the operation.
            </summary>
            <param name="exception">Exception that occured when the operation was tried</param>
            <param name="cancellationToken"></param>
            <returns>True indicates caller should retry, False otherwise</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.ClientRetryPolicy.ShouldRetryAsync(Microsoft.Azure.Cosmos.ResponseMessage,System.Threading.CancellationToken)">
            <summary> 
            Should the caller retry the operation.
            </summary>
            <param name="cosmosResponseMessage"><see cref="T:Microsoft.Azure.Cosmos.ResponseMessage"/> in return of the request</param>
            <param name="cancellationToken"></param>
            <returns>True indicates caller should retry, False otherwise</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.ClientRetryPolicy.OnBeforeSendRequest(Microsoft.Azure.Documents.DocumentServiceRequest)">
            <summary>
            Method that is called before a request is sent to allow the retry policy implementation
            to modify the state of the request.
            </summary>
            <param name="request">The request being sent to the service.</param>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.ConnectionMode">
            <summary>
            Represents the connection mode to be used by the client when connecting to the Azure Cosmos DB service.
            </summary>
            <remarks>
            Direct and Gateway connectivity modes are supported. Gateway is the default. 
            </remarks>
            <example>
            <code language="c#">
            <![CDATA[
            DocumentClient client = new DocumentClient(endpointUri, masterKey, new ConnectionPolicy { ConnectionMode = ConnectionMode.Direct });
            ]]>
            </code>
            </example>
            <seealso cref="T:Microsoft.Azure.Cosmos.ConnectionPolicy"/>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.ConnectionMode.Gateway">
            <summary>
            Use the Azure Cosmos DB gateway to route all requests to the Azure Cosmos DB service. The gateway proxies requests to the right data partition.
            </summary>
            <remarks>
            Use Gateway connectivity when within firewall settings do not allow Direct connectivity. All connections 
            are made to the database account's endpoint through the standard HTTPS port (443).
            </remarks>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.ConnectionMode.Direct">
            <summary>
            Uses direct connectivity to connect to the data nodes in the Azure Cosmos DB service. Use gateway only to initialize and cache logical addresses and refresh on updates
            </summary>
            <remarks>
            Use Direct connectivity for best performance. Connections are made to the data nodes on Azure Cosmos DB's clusters 
            on a range of port numbers either using HTTPS or TCP/SSL.
            </remarks>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.ConnectionPolicy">
            <summary>
            Represents the connection policy associated with a DocumentClient to connect to the Azure Cosmos DB service.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.ConnectionPolicy.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.Cosmos.ConnectionPolicy"/> class to connect to the Azure Cosmos DB service.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.ConnectionPolicy.SetCurrentLocation(System.String)">
            <summary>
            Automatically populates the <see cref="P:Microsoft.Azure.Cosmos.ConnectionPolicy.PreferredLocations"/> for geo-replicated database accounts in the Azure Cosmos DB service,
            based on the current region that the client is running in.
            </summary>
            <param name="location">The current region that this client is running in. E.g. "East US" </param>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.ConnectionPolicy.MaxConcurrentFanoutRequests">
            <summary>
            Gets or sets the maximum number of concurrent fanout requests sent to the Azure Cosmos DB service.
            </summary>
            <value>Default value is 32.</value>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.ConnectionPolicy.RequestTimeout">
            <summary>
            Gets or sets the request timeout in seconds when connecting to the Azure Cosmos DB service.
            The number specifies the time to wait for response to come back from network peer.
            </summary>
            <value>Default value is 10 seconds.</value>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.ConnectionPolicy.MediaRequestTimeout">
            <summary>
            Gets or sets the media request timeout in seconds when connecting to the Azure Cosmos DB service.
            The number specifies the time to wait for response to come back from network peer for attachment content (a.k.a. media) operations.
            </summary>
            <value>
            Default value is 300 seconds.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.ConnectionPolicy.ConnectionMode">
            <summary>
            Gets or sets the connection mode used by the client when connecting to the Azure Cosmos DB service.
            </summary>
            <value>
            Default value is <see cref="F:Microsoft.Azure.Cosmos.ConnectionMode.Gateway"/>
            </value>
            <remarks>
            For more information, see <see href="https://docs.microsoft.com/en-us/azure/documentdb/documentdb-performance-tips#direct-connection">Connection policy: Use direct connection mode</see>.
            </remarks>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.ConnectionPolicy.MediaReadMode">
            <summary>
            Gets or sets the attachment content (a.k.a. media) download mode when connecting to the Azure Cosmos DB service.
            </summary>
            <value>
            Default value is <see cref="F:Microsoft.Azure.Cosmos.MediaReadMode.Buffered"/>.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.ConnectionPolicy.ConnectionProtocol">
            <summary>
            Gets or sets the connection protocol when connecting to the Azure Cosmos DB service.
            </summary>
            <value>
            Default value is <see cref="F:Microsoft.Azure.Documents.Client.Protocol.Https"/>.
            </value>
            <remarks>
            This setting is not used when <see cref="P:Microsoft.Azure.Cosmos.ConnectionPolicy.ConnectionMode"/> is set to <see cref="F:Microsoft.Azure.Cosmos.ConnectionMode.Gateway"/>.
            Gateway mode only supports HTTPS.
            For more information, see <see href="https://docs.microsoft.com/en-us/azure/documentdb/documentdb-performance-tips#use-tcp">Connection policy: Use the TCP protocol</see>.
            </remarks>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.ConnectionPolicy.EnableReadRequestsFallback">
            <summary>
            Gets or sets whether to allow for reads to go to multiple regions configured on an account of Azure Cosmos DB service.
            </summary>
            <value>
            Default value is null.
            </value>
            <remarks>
            If this property is not set, the default is true for all Consistency Levels other than Bounded Staleness,
            The default is false for Bounded Staleness.
            This property only has effect if the following conditions are satisifed:
            1. <see cref="P:Microsoft.Azure.Cosmos.ConnectionPolicy.EnableEndpointDiscovery"/> is true
            2. the Azure Cosmos DB account has more than one region
            </remarks>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.ConnectionPolicy.Default">
            <summary>
            Gets the default connection policy used to connect to the Azure Cosmos DB service.
            </summary>
            <value>
            Refer to the default values for the individual properties of <see cref="T:Microsoft.Azure.Cosmos.ConnectionPolicy"/> that determine the default connection policy.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.ConnectionPolicy.UserAgentSuffix">
            <summary>
            A suffix to be added to the default user-agent for the Azure Cosmos DB service.
            </summary>
            <remarks>
            Setting this property after sending any request won't have any effect.
            </remarks>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.ConnectionPolicy.PreferredLocations">
            <summary>
            Gets and sets the preferred locations (regions) for geo-replicated database accounts in the Azure Cosmos DB service.
            For example, "East US" as the preferred location.
            </summary>
            <remarks>
            <para>
            When <see cref="P:Microsoft.Azure.Cosmos.ConnectionPolicy.EnableEndpointDiscovery"/> is true and the value of this property is non-empty,
            the SDK uses the locations in the collection in the order they are specified to perform operations,
            otherwise if the value of this property is not specified,
            the SDK uses the write region as the preferred location for all operations.
            </para>
            <para>
            If <see cref="P:Microsoft.Azure.Cosmos.ConnectionPolicy.EnableEndpointDiscovery"/> is set to false, the value of this property is ignored.
            </para>
            </remarks>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.ConnectionPolicy.EnableEndpointDiscovery">
            <summary>
            Gets or sets the flag to enable endpoint discovery for geo-replicated database accounts in the Azure Cosmos DB service.
            </summary>
            <remarks>
            When the value of this property is true, the SDK will automatically discover the
            current write and read regions to ensure requests are sent to the correct region
            based on the regions specified in the <see cref="P:Microsoft.Azure.Cosmos.ConnectionPolicy.PreferredLocations"/> property.
            <value>Default value is true indicating endpoint discovery is enabled.</value>
            </remarks>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.ConnectionPolicy.UseMultipleWriteLocations">
            <summary>
            Gets or sets the flag to enable writes on any locations (regions) for geo-replicated database accounts in the Azure Cosmos DB service.
            </summary>
            <remarks>
            When the value of this property is true, the SDK will direct write operations to
            available writable locations of geo-replicated database account. Writable locations
            are ordered by <see cref="P:Microsoft.Azure.Cosmos.ConnectionPolicy.PreferredLocations"/> property. Setting the property value
            to true has no effect until <see cref="P:Microsoft.Azure.Cosmos.AccountProperties.EnableMultipleWriteLocations"/> 
            is also set to true.
            <value>Default value is false indicating that writes are only directed to
            first region in <see cref="P:Microsoft.Azure.Cosmos.ConnectionPolicy.PreferredLocations"/> property.</value>
            </remarks>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.ConnectionPolicy.MaxConnectionLimit">
            <summary>
            Gets or sets the maximum number of concurrent connections allowed for the target
            service endpoint in the Azure Cosmos DB service.
            </summary>
            <remarks>
            This setting is only applicable in Gateway mode.
            </remarks>
            <value>Default value is 50.</value>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.ConnectionPolicy.RetryOptions">
             <summary>
             Gets or sets the <see cref="P:Microsoft.Azure.Cosmos.ConnectionPolicy.RetryOptions"/> associated
             with the <see cref="T:Microsoft.Azure.Cosmos.DocumentClient"/> in the Azure Cosmos DB service.
             </summary>
             <seealso cref="T:Microsoft.Azure.Cosmos.DocumentClient"/>
             <seealso cref="T:Microsoft.Azure.Cosmos.ConnectionPolicy"/>
             <seealso cref="P:Microsoft.Azure.Cosmos.ConnectionPolicy.RetryOptions"/>
             <example>
             The example below creates a new <see cref="T:Microsoft.Azure.Cosmos.DocumentClient"/> and sets the <see cref="T:Microsoft.Azure.Cosmos.ConnectionPolicy"/>
             using the <see cref="P:Microsoft.Azure.Cosmos.ConnectionPolicy.RetryOptions"/> property.
             <para>
             <see cref="P:Microsoft.Azure.Cosmos.RetryOptions.MaxRetryAttemptsOnThrottledRequests"/> is set to 3, so in this case, if a request operation is rate limited by exceeding the reserved 
             throughput for the collection, the request operation retries 3 times before throwing the exception to the application.
             <see cref="P:Microsoft.Azure.Cosmos.RetryOptions.MaxRetryWaitTimeInSeconds"/> is set to 60, so in this case if the cumulative retry 
             wait time in seconds since the first request exceeds 60 seconds, the exception is thrown.
             </para>
             <code language="c#">
             <![CDATA[
             ConnectionPolicy connectionPolicy = new ConnectionPolicy();
             connectionPolicy.RetryOptions.MaxRetryAttemptsOnThrottledRequests = 3;
             connectionPolicy.RetryOptions.MaxRetryWaitTimeInSeconds = 60;
            
             DocumentClient client = new DocumentClient(new Uri("service endpoint"), "auth key", connectionPolicy);
             ]]>
             </code>
             </example>
             <value>
             If this property is not set, the SDK uses the default retry policy that has <see cref="P:Microsoft.Azure.Cosmos.RetryOptions.MaxRetryAttemptsOnThrottledRequests"/>
             set to 9 and <see cref="P:Microsoft.Azure.Cosmos.RetryOptions.MaxRetryWaitTimeInSeconds"/> set to 30 seconds.
             </value>
             <remarks>
             For more information, see <see href="https://docs.microsoft.com/en-us/azure/documentdb/documentdb-performance-tips#429">Handle rate limiting/request rate too large</see>.
             </remarks>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.ConnectionPolicy.IdleTcpConnectionTimeout">
            <summary>
            (Direct/TCP) Controls the amount of idle time after which unused connections are closed.
            </summary>
            <value>
            By default, idle connections are kept open indefinitely. Value must be greater than or equal to 10 minutes. Recommended values are between 20 minutes and 24 hours.
            </value>
            <remarks>
            Mainly useful for sparse infrequent access to a large database account.
            </remarks>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.ConnectionPolicy.OpenTcpConnectionTimeout">
            <summary>
            (Direct/TCP) Controls the amount of time allowed for trying to establish a connection.
            </summary>
            <value>
            The default timeout is 5 seconds. Recommended values are greater than or equal to 5 seconds.
            </value>
            <remarks>
            When the time elapses, the attempt is cancelled and an error is returned. Longer timeouts will delay retries and failures.
            </remarks>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.ConnectionPolicy.MaxRequestsPerTcpConnection">
            <summary>
            (Direct/TCP) Controls the number of requests allowed simultaneously over a single TCP connection. When more requests are in flight simultaneously, the direct/TCP client will open additional connections.
            </summary>
            <value>
            The default settings allow 30 simultaneous requests per connection.
            Do not set this value lower than 4 requests per connection or higher than 50-100 requests per connection. 
            The former can lead to a large number of connections to be created. 
            The latter can lead to head of line blocking, high latency and timeouts.
            </value>
            <remarks>
            Applications with a very high degree of parallelism per connection, with large requests or responses, or with very tight latency requirements might get better performance with 8-16 requests per connection.
            </remarks>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.ConnectionPolicy.MaxTcpConnectionsPerEndpoint">
            <summary>
            (Direct/TCP) Controls the maximum number of TCP connections that may be opened to each Cosmos DB back-end.
            Together with MaxRequestsPerTcpConnection, this setting limits the number of requests that are simultaneously sent to a single Cosmos DB back-end(MaxRequestsPerTcpConnection x MaxTcpConnectionPerEndpoint).
            </summary>
            <value>
            The default value is 65,535. Value must be greater than or equal to 16.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.ConnectionPolicy.MaxTcpPartitionCount">
            <summary>
            (Direct/TCP) This is an advanced setting that controls the number of TCP connections that will be opened eagerly to each Cosmos DB back-end.
            </summary>
            <value>
            Default value is 1. Applications with extreme performance requirements can set this value to 2.
            </value>
            <remarks>
            This setting must be used with caution. When used improperly, it can lead to client machine ephemeral port exhaustion <see href="https://docs.microsoft.com/en-us/azure/load-balancer/load-balancer-outbound-connections">Azure SNAT port exhaustion</see>.
            </remarks>
        </member>
        <member name="E:Microsoft.Azure.Cosmos.ConnectionPolicy.PreferenceChanged">
            <summary>
            GlobalEndpointManager will subscribe to this event if user updates the preferredLocations list in the Azure Cosmos DB service.
            </summary>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.CosmosClient">
            <summary>
            Provides a client-side logical representation of the Azure Cosmos DB account.
            This client can be used to configure and execute requests in the Azure Cosmos DB database service.
            
            CosmosClient is thread-safe. Its recommended to maintain a single instance of CosmosClient per lifetime 
            of the application which enables efficient connection management and performance. Please refer to 
            performance guide at <see href="https://docs.microsoft.com/azure/cosmos-db/performance-tips"/>.
            </summary>
            <example>
            This example create a <see cref="T:Microsoft.Azure.Cosmos.CosmosClient"/>, <see cref="T:Microsoft.Azure.Cosmos.Database"/>, and a <see cref="T:Microsoft.Azure.Cosmos.Container"/>.
            The CosmosClient is created with the connection string and configured to use "East US 2" region.
            <code language="c#">
            <![CDATA[
            using Microsoft.Azure.Cosmos;
            
            CosmosClient cosmosClient = new CosmosClient(
                        "connection-string-from-portal", 
                        new CosmosClientOptions()
                        {
                            ApplicationRegion = Regions.EastUS2,
                        });
            
            Database db = await client.CreateDatabaseAsync("database-id");
            Container container = await db.CreateContainerAsync("container-id");
            
            // Dispose cosmosClient at application exit
            ]]>
            </code>
            </example>
            <example>
            This example create a <see cref="T:Microsoft.Azure.Cosmos.CosmosClient"/>, <see cref="T:Microsoft.Azure.Cosmos.Database"/>, and a <see cref="T:Microsoft.Azure.Cosmos.Container"/>.
            The CosmosClient is created with the AccountEndpoint, AccountKey or ResourceToken and configured to use "East US 2" region.
            <code language="c#">
            <![CDATA[
            using Microsoft.Azure.Cosmos;
            
            CosmosClient cosmosClient = new CosmosClient(
                        "account-endpoint-from-portal", 
                        "account-key-from-portal", 
                        new CosmosClientOptions()
                        {
                            ApplicationRegion = Regions.EastUS2,
                        });
            
            Database db = await client.CreateDatabaseAsync("database-id");
            Container container = await db.CreateContainerAsync("container-id");
            
            // Dispose cosmosClient at application exit
            ]]>
            </code>
            </example>
            <example>
            This example create a <see cref="T:Microsoft.Azure.Cosmos.CosmosClient"/>, <see cref="T:Microsoft.Azure.Cosmos.Database"/>, and a <see cref="T:Microsoft.Azure.Cosmos.Container"/>.
            The CosmosClient is created through builder pattern <see cref="T:Microsoft.Azure.Cosmos.Fluent.CosmosClientBuilder"/>.
            <code language="c#">
            <![CDATA[
            using Microsoft.Azure.Cosmos;
            using Microsoft.Azure.Cosmos.Fluent;
            
            CosmosClient cosmosClient = new CosmosClientBuilder("connection-string-from-portal")
                .WithApplicationRegion("East US 2")
                .Build();
            
            Database db = await client.CreateDatabaseAsync("database-id")
            Container container = await db.CreateContainerAsync("container-id");
            
            // Dispose cosmosClient at application exit
            ]]>
            </code>
            </example>
            <remarks>
            <seealso cref="T:Microsoft.Azure.Cosmos.CosmosClientOptions"/>
            <seealso cref="T:Microsoft.Azure.Cosmos.Fluent.CosmosClientBuilder"/>
            <seealso href="https://docs.microsoft.com/azure/cosmos-db/performance-tips"/>
            <seealso href="https://docs.microsoft.com/azure/cosmos-db/troubleshoot-dot-net-sdk"/>
            <seealso href="https://docs.microsoft.com/azure/cosmos-db/distribute-data-globally" />
            <seealso href="https://docs.microsoft.com/azure/cosmos-db/partitioning-overview" />
            <seealso href="https://docs.microsoft.com/azure/cosmos-db/request-units" />
            </remarks>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.CosmosClient.#ctor">
            <summary>
            Create a new CosmosClient used for mock testing
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.CosmosClient.#ctor(System.String,Microsoft.Azure.Cosmos.CosmosClientOptions)">
            <summary>
            Create a new CosmosClient with the connection string
            
            CosmosClient is thread-safe. Its recommended to maintain a single instance of CosmosClient per lifetime 
            of the application which enables efficient connection management and performance. Please refer to 
            performance guide at <see href="https://docs.microsoft.com/azure/cosmos-db/performance-tips"/>.
            </summary>
            <param name="connectionString">The connection string to the cosmos account. ex: https://mycosmosaccount.documents.azure.com:443/;AccountKey=SuperSecretKey; </param>
            <param name="clientOptions">(Optional) client options</param>
            <example>
            The CosmosClient is created with the connection string and configured to use "East US 2" region.
            <code language="c#">
            <![CDATA[
            using Microsoft.Azure.Cosmos;
            
            CosmosClient cosmosClient = new CosmosClient(
                        "account-endpoint-from-portal", 
                        "account-key-from-portal", 
                        new CosmosClientOptions()
                        {
                            ApplicationRegion = Regions.EastUS2,
                        });
            
            // Dispose cosmosClient at application exit
            ]]>
            </code>
            </example>
            <remarks>
            <seealso cref="T:Microsoft.Azure.Cosmos.CosmosClientOptions"/>
            <seealso cref="T:Microsoft.Azure.Cosmos.Fluent.CosmosClientBuilder"/>
            <seealso href="https://docs.microsoft.com/azure/cosmos-db/performance-tips"/>
            <seealso href="https://docs.microsoft.com/azure/cosmos-db/troubleshoot-dot-net-sdk"/>
            </remarks>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.CosmosClient.#ctor(System.String,System.String,Microsoft.Azure.Cosmos.CosmosClientOptions)">
            <summary>
            Create a new CosmosClient with the account endpoint URI string and account key
            
            CosmosClient is thread-safe. Its recommended to maintain a single instance of CosmosClient per lifetime 
            of the application which enables efficient connection management and performance. Please refer to 
            performance guide at <see href="https://docs.microsoft.com/azure/cosmos-db/performance-tips"/>.
            </summary>
            <param name="accountEndpoint">The cosmos service endpoint to use</param>
            <param name="authKeyOrResourceToken">The cosmos account key or resource token to use to create the client.</param>
            <param name="clientOptions">(Optional) client options</param>
            <example>
            The CosmosClient is created with the AccountEndpoint, AccountKey or ResourceToken and configured to use "East US 2" region.
            <code language="c#">
            <![CDATA[
            using Microsoft.Azure.Cosmos;
            
            CosmosClient cosmosClient = new CosmosClient(
                        "account-endpoint-from-portal", 
                        "account-key-from-portal", 
                        new CosmosClientOptions()
                        {
                            ApplicationRegion = Regions.EastUS2,
                        });
            
            // Dispose cosmosClient at application exit
            ]]>
            </code>
            </example>
            <remarks>
            <seealso cref="T:Microsoft.Azure.Cosmos.CosmosClientOptions"/>
            <seealso cref="T:Microsoft.Azure.Cosmos.Fluent.CosmosClientBuilder"/>
            <seealso href="https://docs.microsoft.com/azure/cosmos-db/performance-tips"/>
            <seealso href="https://docs.microsoft.com/azure/cosmos-db/troubleshoot-dot-net-sdk"/>
            </remarks>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.CosmosClient.#ctor(System.String,System.String,Microsoft.Azure.Cosmos.CosmosClientOptions,Microsoft.Azure.Cosmos.DocumentClient)">
            <summary>
            Used for unit testing only.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.CosmosClient.ClientOptions">
            <summary>
            The <see cref="T:Microsoft.Azure.Cosmos.CosmosClientOptions"/> used initialize CosmosClient
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.CosmosClient.Endpoint">
            <summary>
            Gets the endpoint Uri for the Azure Cosmos DB service.
            </summary>
            <value>
            The Uri for the account endpoint.
            </value>
            <seealso cref="T:System.Uri"/>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.CosmosClient.AccountKey">
            <summary>
            Gets the AuthKey or resource token used by the client from the Azure Cosmos DB service.
            </summary>
            <value>
            The AuthKey used by the client.
            </value>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.CosmosClient.ReadAccountAsync">
            <summary>
            Read Azure Cosmos DB account properties <see cref="T:Microsoft.Azure.Cosmos.AccountProperties"/>
            </summary>
            <returns>
            A <see cref="T:Microsoft.Azure.Cosmos.AccountProperties"/> wrapped in a <see cref="T:System.Threading.Tasks.Task"/> object.
            </returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.CosmosClient.GetDatabase(System.String)">
            <summary>
            Returns a proxy reference to a database. 
            </summary>
            <param name="id">The cosmos database id</param>
            <remarks>
            <see cref="T:Microsoft.Azure.Cosmos.Database"/> proxy reference doesn't guarantee existence.
            Please ensure database exists through <see cref="M:Microsoft.Azure.Cosmos.CosmosClient.CreateDatabaseAsync(Microsoft.Azure.Cosmos.DatabaseProperties,System.Nullable{System.Int32},Microsoft.Azure.Cosmos.RequestOptions,System.Threading.CancellationToken)"/> 
            or <see cref="M:Microsoft.Azure.Cosmos.CosmosClient.CreateDatabaseIfNotExistsAsync(System.String,System.Nullable{System.Int32},Microsoft.Azure.Cosmos.RequestOptions,System.Threading.CancellationToken)"/>, before
            operating on it.
            </remarks>
            <example>
            <code language="c#">
            <![CDATA[
            Database db = cosmosClient.GetDatabase("myDatabaseId"];
            DatabaseResponse response = await db.ReadAsync();
            ]]>
            </code>
            </example>
            <returns>Cosmos database proxy</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.CosmosClient.GetContainer(System.String,System.String)">
            <summary>
            Returns a proxy reference to a container. 
            </summary>
            <remarks>
            <see cref="T:Microsoft.Azure.Cosmos.Container"/> proxy reference doesn't guarantee existence.
            Please ensure container exists through <see cref="M:Microsoft.Azure.Cosmos.Database.CreateContainerAsync(Microsoft.Azure.Cosmos.ContainerProperties,System.Nullable{System.Int32},Microsoft.Azure.Cosmos.RequestOptions,System.Threading.CancellationToken)"/> 
            or <see cref="M:Microsoft.Azure.Cosmos.Database.CreateContainerIfNotExistsAsync(Microsoft.Azure.Cosmos.ContainerProperties,System.Nullable{System.Int32},Microsoft.Azure.Cosmos.RequestOptions,System.Threading.CancellationToken)"/>, before
            operating on it.
            </remarks>
            <param name="databaseId">cosmos database name</param>
            <param name="containerId">cosmos container name</param>
            <returns>Cosmos container proxy</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.CosmosClient.CreateDatabaseAsync(System.String,System.Nullable{System.Int32},Microsoft.Azure.Cosmos.RequestOptions,System.Threading.CancellationToken)">
             <summary>
             Send a request for creating a database.
            
             A database manages users, permissions and a set of containers.
             Each Azure Cosmos DB Database Account is able to support multiple independent named databases,
             with the database being the logical container for data.
            
             Each Database consists of one or more containers, each of which in turn contain one or more
             documents. Since databases are an administrative resource, the Service Master Key will be
             required in order to access and successfully complete any action using the User APIs.
             </summary>
             <param name="id">The database id.</param>
             <param name="throughput">(Optional) The throughput provisioned for a database in measurement of Request Units per second in the Azure Cosmos DB service.</param>
             <param name="requestOptions">(Optional) A set of options that can be set.</param>
             <param name="cancellationToken">(Optional) <see cref="T:System.Threading.CancellationToken"/> representing request cancellation.</param>
             <returns>A <see cref="T:System.Threading.Tasks.Task"/> containing a <see cref="T:Microsoft.Azure.Cosmos.DatabaseResponse"/> which wraps a <see cref="T:Microsoft.Azure.Cosmos.DatabaseProperties"/> containing the resource record.</returns>
             <remarks>
             <seealso href="https://docs.microsoft.com/azure/cosmos-db/request-units"/> for details on provision throughput.
             </remarks>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.CosmosClient.CreateDatabaseIfNotExistsAsync(System.String,System.Nullable{System.Int32},Microsoft.Azure.Cosmos.RequestOptions,System.Threading.CancellationToken)">
             <summary>
             <para>Check if a database exists, and if it doesn't, create it.
             Only the database id is used to verify if there is an existing database. Other database properties 
             such as throughput are not validated and can be different then the passed properties.</para>
             
             <para>A database manages users, permissions and a set of containers.
             Each Azure Cosmos DB Database Account is able to support multiple independent named databases,
             with the database being the logical container for data.</para>
            
             <para>Each Database consists of one or more containers, each of which in turn contain one or more
             documents. Since databases are an administrative resource, the Service Master Key will be
             required in order to access and successfully complete any action using the User APIs.</para>
             </summary>
             <param name="id">The database id.</param>
             <param name="throughput">(Optional) The throughput provisioned for a database in measurement of Request Units per second in the Azure Cosmos DB service.</param>
             <param name="requestOptions">(Optional) A set of additional options that can be set.</param>
             <param name="cancellationToken">(Optional) <see cref="T:System.Threading.CancellationToken"/> representing request cancellation.</param>
             <returns>A <see cref="T:System.Threading.Tasks.Task"/> containing a <see cref="T:Microsoft.Azure.Cosmos.DatabaseResponse"/> which wraps a <see cref="T:Microsoft.Azure.Cosmos.DatabaseProperties"/> containing the resource record.</returns>
             <list>
                 <listheader>
                     <term>StatusCode</term><description>Common success StatusCodes for the CreateDatabaseIfNotExistsAsync operation</description>
                 </listheader>
                 <item>
                     <term>201</term><description>Created - New database is created.</description>
                 </item>
                 <item>
                     <term>200</term><description>Accepted - This means the database already exists.</description>
                 </item>
             </list>
             <remarks>
             <seealso href="https://docs.microsoft.com/azure/cosmos-db/request-units"/> for details on provision throughput.
             </remarks>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.CosmosClient.GetDatabaseQueryIterator``1(Microsoft.Azure.Cosmos.QueryDefinition,System.String,Microsoft.Azure.Cosmos.QueryRequestOptions)">
            <summary>
            This method creates a query for databases under an Cosmos DB Account using a SQL statement with parameterized values. It returns a FeedIterator.
            For more information on preparing SQL statements with parameterized values, please see <see cref="T:Microsoft.Azure.Cosmos.QueryDefinition"/>.
            </summary>
            <param name="queryDefinition">The cosmos SQL query definition.</param>
            <param name="continuationToken">The continuation token in the Azure Cosmos DB service.</param>
            <param name="requestOptions">(Optional) The options for the item query request <see cref="T:Microsoft.Azure.Cosmos.QueryRequestOptions"/></param>
            <returns>An iterator to go through the databases.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.CosmosClient.GetDatabaseQueryStreamIterator(Microsoft.Azure.Cosmos.QueryDefinition,System.String,Microsoft.Azure.Cosmos.QueryRequestOptions)">
            <summary>
            This method creates a query for databases under an Cosmos DB Account using a SQL statement with parameterized values. It returns a FeedIterator.
            For more information on preparing SQL statements with parameterized values, please see <see cref="T:Microsoft.Azure.Cosmos.QueryDefinition"/>.
            </summary>
            <param name="queryDefinition">The cosmos SQL query definition.</param>
            <param name="continuationToken">The continuation token in the Azure Cosmos DB service.</param>
            <param name="requestOptions">(Optional) The options for the query request <see cref="T:Microsoft.Azure.Cosmos.QueryRequestOptions"/></param>
            <returns>An iterator to go through the databases</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.CosmosClient.GetDatabaseQueryIterator``1(System.String,System.String,Microsoft.Azure.Cosmos.QueryRequestOptions)">
            <summary>
            This method creates a query for databases under an Cosmos DB Account using a SQL statement. It returns a FeedIterator.
            For more information on preparing SQL statements with parameterized values, please see <see cref="T:Microsoft.Azure.Cosmos.QueryDefinition"/> overload.
            </summary>
            <param name="queryText">The cosmos SQL query text.</param>
            <param name="continuationToken">The continuation token in the Azure Cosmos DB service.</param>
            <param name="requestOptions">(Optional) The options for the item query request <see cref="T:Microsoft.Azure.Cosmos.QueryRequestOptions"/></param>
            <returns>An iterator to go through the databases.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.CosmosClient.GetDatabaseQueryStreamIterator(System.String,System.String,Microsoft.Azure.Cosmos.QueryRequestOptions)">
            <summary>
            This method creates a query for databases under an Cosmos DB Account using a SQL statement. It returns a FeedIterator.
            For more information on preparing SQL statements with parameterized values, please see <see cref="T:Microsoft.Azure.Cosmos.QueryDefinition"/> overload.
            </summary>
            <param name="queryText">The cosmos SQL query text.</param>
            <param name="continuationToken">The continuation token in the Azure Cosmos DB service.</param>
            <param name="requestOptions">(Optional) The options for the query request <see cref="T:Microsoft.Azure.Cosmos.QueryRequestOptions"/></param>
            <returns>An iterator to go through the databases</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.CosmosClient.CreateDatabaseStreamAsync(Microsoft.Azure.Cosmos.DatabaseProperties,System.Nullable{System.Int32},Microsoft.Azure.Cosmos.RequestOptions,System.Threading.CancellationToken)">
             <summary>
             Send a request for creating a database.
            
             A database manages users, permissions and a set of containers.
             Each Azure Cosmos DB Database Account is able to support multiple independent named databases,
             with the database being the logical container for data.
            
             Each Database consists of one or more containers, each of which in turn contain one or more
             documents. Since databases are an administrative resource, the Service Master Key will be
             required in order to access and successfully complete any action using the User APIs.
             </summary>
             <param name="databaseProperties">The database properties</param>
             <param name="throughput">(Optional) The throughput provisioned for a database in measurement of Request Units per second in the Azure Cosmos DB service.</param>
             <param name="requestOptions">(Optional) A set of options that can be set.</param>
             <param name="cancellationToken">(Optional) <see cref="T:System.Threading.CancellationToken"/> representing request cancellation.</param>
             <returns>A <see cref="T:System.Threading.Tasks.Task"/> containing a <see cref="T:Microsoft.Azure.Cosmos.DatabaseResponse"/> which wraps a <see cref="T:Microsoft.Azure.Cosmos.DatabaseProperties"/> containing the resource record.</returns>
             <remarks>
             <seealso href="https://docs.microsoft.com/azure/cosmos-db/request-units"/> for details on provision throughput.
             </remarks>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.CosmosClient.Dispose">
            <summary>
            Dispose of cosmos client
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.CosmosClient.Dispose(System.Boolean)">
            <summary>
            Dispose of cosmos client
            </summary>
            <param name="disposing">True if disposing</param>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.CosmosClientOptions">
            <summary>
            Defines all the configurable options that the CosmosClient requires.
            </summary>
            <example>
            An example on how to configure the serialization option to ignore null values
            CosmosClientOptions clientOptions = new CosmosClientOptions()
            {
                SerializerOptions = new CosmosSerializationOptions(){
                    IgnoreNullValues = true
                },
                ConnectionMode = ConnectionMode.Gateway,
            };
            
            CosmosClient client = new CosmosClient("endpoint", "key", clientOptions);
            </example>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.CosmosClientOptions.DefaultConnectionMode">
            <summary>
            Default connection mode
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.CosmosClientOptions.DefaultProtocol">
            <summary>
            Default Protocol mode
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.CosmosClientOptions.propertiesSerializer">
            <summary>
            Default request timeout
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.CosmosClientOptions.#ctor">
            <summary>
            Creates a new CosmosClientOptions
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.CosmosClientOptions.ApplicationName">
            <summary>
            Get or set user-agent suffix to include with every Azure Cosmos DB service interaction.
            </summary>
            <remarks>
            Setting this property after sending any request won't have any effect.
            </remarks>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.CosmosClientOptions.ApplicationRegion">
            <summary>
            Get or set the preferred geo-replicated region to be used for Azure Cosmos DB service interaction.
            </summary>
            <remarks>
            When this property is specified, the SDK prefers the region to perform operations. Also SDK auto-selects 
            fallback geo-replicated regions for high availability. 
            When this property is not specified, the SDK uses the write region as the preferred region for all operations.
            
            <seealso cref="M:Microsoft.Azure.Cosmos.Fluent.CosmosClientBuilder.WithApplicationRegion(System.String)"/>
            <seealso href="https://docs.microsoft.com/azure/cosmos-db/how-to-multi-master"/>
            </remarks>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.CosmosClientOptions.GatewayModeMaxConnectionLimit">
            <summary>
            Get or set the maximum number of concurrent connections allowed for the target
            service endpoint in the Azure Cosmos DB service.
            </summary>
            <remarks>
            This setting is only applicable in Gateway mode.
            </remarks>
            <value>Default value is 50.</value>
            <seealso cref="M:Microsoft.Azure.Cosmos.Fluent.CosmosClientBuilder.WithConnectionModeGateway(System.Nullable{System.Int32},System.Net.IWebProxy)"/>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.CosmosClientOptions.RequestTimeout">
            <summary>
            Gets the request timeout in seconds when connecting to the Azure Cosmos DB service.
            The number specifies the time to wait for response to come back from network peer.
            </summary>
            <value>Default value is 1 minute.</value>
            <seealso cref="M:Microsoft.Azure.Cosmos.Fluent.CosmosClientBuilder.WithRequestTimeout(System.TimeSpan)"/>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.CosmosClientOptions.CustomHandlers">
            <summary>
            Gets the handlers run before the process
            </summary>
            <seealso cref="M:Microsoft.Azure.Cosmos.Fluent.CosmosClientBuilder.AddCustomHandlers(Microsoft.Azure.Cosmos.RequestHandler[])"/>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.CosmosClientOptions.ConnectionMode">
            <summary>
            Get or set the connection mode used by the client when connecting to the Azure Cosmos DB service.
            </summary>
            <value>
            Default value is <see cref="F:Microsoft.Azure.Cosmos.ConnectionMode.Direct"/>
            </value>
            <remarks>
            For more information, see <see href="https://docs.microsoft.com/azure/documentdb/documentdb-performance-tips#direct-connection">Connection policy: Use direct connection mode</see>.
            </remarks>
            <seealso cref="M:Microsoft.Azure.Cosmos.Fluent.CosmosClientBuilder.WithConnectionModeDirect"/>
            <seealso cref="M:Microsoft.Azure.Cosmos.Fluent.CosmosClientBuilder.WithConnectionModeGateway(System.Nullable{System.Int32},System.Net.IWebProxy)"/>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.CosmosClientOptions.ConsistencyLevel">
            <summary>
            This can be used to weaken the database account consistency level for read operations.
            If this is not set the database account consistency level will be used for all requests.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.CosmosClientOptions.MaxRetryAttemptsOnRateLimitedRequests">
            <summary>
            Get or set the number of times client should retry on rate throttled requests.
            </summary>
            <seealso cref="M:Microsoft.Azure.Cosmos.Fluent.CosmosClientBuilder.WithThrottlingRetryOptions(System.TimeSpan,System.Int32)"/>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.CosmosClientOptions.MaxRetryWaitTimeOnRateLimitedRequests">
            <summary>
            Get or set the max time to client is allowed to retry on rate throttled requests. 
            </summary>
            <remarks>
            The minimum interval is seconds. Any interval that is smaller will be ignored.
            </remarks>
            <seealso cref="M:Microsoft.Azure.Cosmos.Fluent.CosmosClientBuilder.WithThrottlingRetryOptions(System.TimeSpan,System.Int32)"/>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.CosmosClientOptions.IdleTcpConnectionTimeout">
            <summary>
            (Direct/TCP) Controls the amount of idle time after which unused connections are closed.
            </summary>
            <value>
            By default, idle connections are kept open indefinitely. Value must be greater than or equal to 10 minutes. Recommended values are between 20 minutes and 24 hours.
            </value>
            <remarks>
            Mainly useful for sparse infrequent access to a large database account.
            </remarks>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.CosmosClientOptions.OpenTcpConnectionTimeout">
            <summary>
            (Direct/TCP) Controls the amount of time allowed for trying to establish a connection.
            </summary>
            <value>
            The default timeout is 5 seconds. Recommended values are greater than or equal to 5 seconds.
            </value>
            <remarks>
            When the time elapses, the attempt is cancelled and an error is returned. Longer timeouts will delay retries and failures.
            </remarks>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.CosmosClientOptions.MaxRequestsPerTcpConnection">
            <summary>
            (Direct/TCP) Controls the number of requests allowed simultaneously over a single TCP connection. When more requests are in flight simultaneously, the direct/TCP client will open additional connections.
            </summary>
            <value>
            The default settings allow 30 simultaneous requests per connection.
            Do not set this value lower than 4 requests per connection or higher than 50-100 requests per connection.       
            The former can lead to a large number of connections to be created. 
            The latter can lead to head of line blocking, high latency and timeouts.
            </value>
            <remarks>
            Applications with a very high degree of parallelism per connection, with large requests or responses, or with very tight latency requirements might get better performance with 8-16 requests per connection.
            </remarks>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.CosmosClientOptions.MaxTcpConnectionsPerEndpoint">
            <summary>
            (Direct/TCP) Controls the maximum number of TCP connections that may be opened to each Cosmos DB back-end.
            Together with MaxRequestsPerTcpConnection, this setting limits the number of requests that are simultaneously sent to a single Cosmos DB back-end(MaxRequestsPerTcpConnection x MaxTcpConnectionPerEndpoint).
            </summary>
            <value>
            The default value is 65,535. Value must be greater than or equal to 16.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.CosmosClientOptions.WebProxy">
            <summary>
            (Gateway/Https) Get or set the proxy information used for web requests.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.CosmosClientOptions.SerializerOptions">
            <summary>
            Get to set optional serializer options.
            </summary>
            <example>
            An example on how to configure the serialization option to ignore null values
            CosmosClientOptions clientOptions = new CosmosClientOptions()
            {
                SerializerOptions = new CosmosSerializationOptions(){
                    IgnoreNullValues = true
                }
            };
            
            CosmosClient client = new CosmosClient("endpoint", "key", clientOptions);
            </example>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.CosmosClientOptions.Serializer">
            <summary>
            Get to set an optional JSON serializer. The client will use it to serialize or de-serialize user's cosmos request/responses.
            SDK owned types such as DatabaseProperties and ContainerProperties will always use the SDK default serializer.
            </summary>
            <example>
            // An example on how to set a custom serializer. For basic serializer options look at CosmosSerializationOptions
            CosmosSerializer ignoreNullSerializer = new MyCustomIgnoreNullSerializer();
                    
            CosmosClientOptions clientOptions = new CosmosClientOptions()
            {
                Serializer = ignoreNullSerializer
            };
            
            CosmosClient client = new CosmosClient("endpoint", "key", clientOptions);
            </example>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.CosmosClientOptions.LimitToEndpoint">
            <summary>
            Limits the operations to the provided endpoint on the CosmosClient.
            </summary>
            <value>
            Default value is false.
            </value>
            <remarks>
            When the value of this property is false, the SDK will automatically discover write and read regions, and use them when the configured application region is not available.
            When set to true, availability is limited to the endpoint specified on the CosmosClient constructor.
            Defining the <see cref="P:Microsoft.Azure.Cosmos.CosmosClientOptions.ApplicationRegion"/> is not allowed when setting the value to true.
            </remarks>
            <seealso href="https://docs.microsoft.com/azure/cosmos-db/high-availability"/>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.CosmosClientOptions.AllowBulkExecution">
            <summary>
            Allows optimistic batching of requests to service. Setting this option might impact the latency of the operations. Hence this option is recommended for non-latency sensitive scenarios only.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.CosmosClientOptions.PropertiesSerializer">
            <summary>
            A JSON serializer used by the CosmosClient to serialize or de-serialize cosmos request/responses.
            The default serializer is always used for all system owned types like DatabaseProperties.
            The default serializer is used for user types if no UserJsonSerializer is specified
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.CosmosClientOptions.ConnectionProtocol">
            <summary>
            Gets or sets the connection protocol when connecting to the Azure Cosmos service.
            </summary>
            <value>
            Default value is <see cref="F:Microsoft.Azure.Documents.Client.Protocol.Tcp"/>.
            </value>
            <remarks>
            This setting is not used when <see cref="P:Microsoft.Azure.Cosmos.CosmosClientOptions.ConnectionMode"/> is set to <see cref="F:Microsoft.Azure.Cosmos.ConnectionMode.Gateway"/>.
            Gateway mode only supports HTTPS.
            For more information, see <see href="https://docs.microsoft.com/azure/documentdb/documentdb-performance-tips#use-tcp">Connection policy: Use the TCP protocol</see>.
            </remarks>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.CosmosClientOptions.SendingRequestEventArgs">
            <summary>
            The event handler to be invoked before the request is sent.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.CosmosClientOptions.TransportClientHandlerFactory">
            <summary>
            (Optional) transport interceptor factory
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.CosmosClientOptions.ApiType">
            <summary>
            API type for the account
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.CosmosClientOptions.StoreClientFactory">
            <summary>
            Optional store client factory instance to use for all transport requests.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.CosmosClientOptions.InitialRetryForRetryWithMilliseconds">
            <summary>
            Gets or sets the initial delay retry time in milliseconds for the Azure Cosmos DB service
            for requests that hit RetryWithExceptions. This covers errors that occur due to concurrency errors in the store.
            </summary>
            <value>
            The default value is 1 second. For an example on how to set this value, please refer to <see cref="P:Microsoft.Azure.Cosmos.ConnectionPolicy.RetryOptions"/>.
            </value>
            <remarks>
            <para>
            When a request fails due to a RetryWith error, the client delays and retries the request. This configures the client
            to delay the time specified before retrying the request.
            </para>
            </remarks>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.CosmosClientOptions.MaximumRetryForRetryWithMilliseconds">
            <summary>
            Gets or sets the maximum delay retry time in milliseconds for the Azure Cosmos DB service
            for requests that hit RetryWithExceptions. This covers errors that occur due to concurrency errors in the store.
            </summary>
            <value>
            The default value is 30 seconds. For an example on how to set this value, please refer to <see cref="P:Microsoft.Azure.Cosmos.ConnectionPolicy.RetryOptions"/>.
            </value>
            <remarks>
            <para>
            When a request fails due to a RetryWith error, the client delays and retries the request. This configures the maximum time
            the client should delay before failing the request.
            </para>
            </remarks>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.CosmosClientOptions.RandomSaltForRetryWithMilliseconds">
            <summary>
            Gets or sets the interval to salt retry with value. This will spread the retry values from 1..n from the exponential back-off
            subscribed.
            </summary>
            <value>
            The default value is to not salt.
            </value>
            <remarks>
            <para>
            When a request fails due to a RetryWith error, the client delays and retries the request. This configures the jitter on the retry attempted.
            </para>
            </remarks>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.CosmosClientOptions.TotalWaitTimeForRetryWithMilliseconds">
            <summary>
            Gets or sets the total time to wait before failing the request for retry with failures.
            subscribed.
            </summary>
            <value>
            The default value 30 seconds.
            </value>
            <remarks>
            <para>
            When a request fails due to a RetryWith error, the client delays and retries the request. This configures total time spent waiting on the request.
            </para>
            </remarks>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.CosmosClientOptions.EnableCpuMonitor">
            <summary>
            Flag that controls whether CPU monitoring thread is created to enrich timeout exceptions with additional diagnostic. Default value is true.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.CosmosClientOptions.GetCosmosSerializerWithWrapperOrDefault">
            <summary>
            Gets the user json serializer with the CosmosJsonSerializerWrapper or the default
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.CosmosClientOptions.GetSerializedConfiguration">
            <summary>
            Serialize the current configuration into a JSON string
            </summary>
            <returns>Returns a JSON string of the current configuration.</returns>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.CosmosClientOptions.ClientOptionJsonConverter">
            <summary>
            The complex object passed in by the user can contain objects that can not be serialized. Instead just log the types.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.CosmosElements.CosmosElementSerializer.ToCosmosElements(System.IO.MemoryStream,Microsoft.Azure.Documents.ResourceType,Microsoft.Azure.Cosmos.CosmosSerializationFormatOptions)">
            <summary>
            Converts a list of CosmosElements into a memory stream.
            </summary>
            <param name="memoryStream">The memory stream response from Azure Cosmos</param>
            <param name="resourceType">The resource type</param>
            <param name="cosmosSerializationOptions">The custom serialization options. This allows custom serialization types like BSON, JSON, or other formats</param>
            <returns>Returns a memory stream of cosmos elements. By default the memory stream will contain JSON.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.CosmosElements.CosmosElementSerializer.ToStream(System.String,System.Collections.Generic.IEnumerable{Microsoft.Azure.Cosmos.CosmosElements.CosmosElement},Microsoft.Azure.Documents.ResourceType,Microsoft.Azure.Cosmos.CosmosSerializationFormatOptions)">
            <summary>
            Converts a list of CosmosElements into a memory stream.
            </summary>
            <param name="containerRid">Container Rid</param>
            <param name="cosmosElements">The cosmos elements</param>
            <param name="resourceType">The resource type</param>
            <param name="cosmosSerializationOptions">The custom serialization options. This allows custom serialization types like BSON, JSON, or other formats</param>
            <returns>Returns a memory stream of cosmos elements. By default the memory stream will contain JSON.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.CosmosElements.CosmosElementSerializer.Deserialize``1(System.String,System.Collections.Generic.IEnumerable{Microsoft.Azure.Cosmos.CosmosElements.CosmosElement},Microsoft.Azure.Documents.ResourceType,Microsoft.Azure.Cosmos.CosmosSerializer,Microsoft.Azure.Cosmos.CosmosSerializationFormatOptions)">
            <summary>
            Converts a list of CosmosElements into a list of objects.
            </summary>
            <param name="containerRid">Container Rid</param>
            <param name="cosmosElements">The cosmos elements</param>
            <param name="resourceType">The resource type</param>
            <param name="jsonSerializer">The JSON </param>
            <param name="cosmosSerializationOptions">The custom serialization options. This allows custom serialization types like BSON, JSON, or other formats</param>
            <returns>Returns a list of deserialized objects</returns>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.CosmosElements.CosmosNumberType">
            <summary>
            An enum that describes the kind of number represented by a cosmos number
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.CosmosElements.CosmosNumberType.Number64">
            <summary>
            A Json number where integers and floating points are interchangeably used.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.CosmosElements.CosmosNumberType.Int8">
            <summary>
            A single byte signed integer type.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.CosmosElements.CosmosNumberType.Int16">
            <summary>
            A 2 byte signed integer type.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.CosmosElements.CosmosNumberType.Int32">
            <summary>
            A 4 byte signed integer type.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.CosmosElements.CosmosNumberType.Int64">
            <summary>
            An 8 byte signed integer type.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.CosmosElements.CosmosNumberType.UInt32">
            <summary>
            A 4 byte unsigned integer type.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.CosmosElements.CosmosNumberType.Float32">
            <summary>
            A 4 byte floating point type.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.CosmosElements.CosmosNumberType.Float64">
            <summary>
            An 8 byte floating point type.
            </summary>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.CosmosSqlQuerySpecJsonConverter">
            <summary>
            A custom serializer converter for SQL query spec
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.CosmosSqlQuerySpecJsonConverter.CreateSqlQuerySpecSerializer(Microsoft.Azure.Cosmos.CosmosSerializer,Microsoft.Azure.Cosmos.CosmosSerializer)">
            <summary>
            Only create a custom SQL query spec serializer if there is a customer serializer else
            use the default properties serializer
            </summary>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.CosmosDiagnostics">
            <summary>
             Contains the cosmos diagnostic information for the current request to Azure Cosmos DB service.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.CosmosDiagnostics.ToString">
            <summary>
            Gets the string field <see cref="T:Microsoft.Azure.Cosmos.CosmosDiagnostics"/> instance in the Azure CosmosDB database service.
            </summary>
            <returns>The string field <see cref="T:Microsoft.Azure.Cosmos.CosmosDiagnostics"/> instance in the Azure CosmosDB database service.</returns>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.Query.Aggregation.AverageAggregator">
            <summary>
            Concrete implementation of IAggregator that can take the global weighted average from the local weighted average of multiple partitions and continuations.
            The way this works is that for each continuation in each partition we decompose the average into a sum and count.
            Let us denote the sum and count for the ith continuation in the jth partition as (sum_i,j, count_i,j),
            then the true average for the whole query is SUM(sum_i,j for all i and all j) / SUM(count_i,j for all i and all j),
            this way the average is weighted across continuation and partitions that have more or less documents contributing to their average.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Query.Aggregation.AverageAggregator.globalAverage">
            <summary>
            The running weighted average for this aggregator.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Query.Aggregation.AverageAggregator.Aggregate(Microsoft.Azure.Cosmos.CosmosElements.CosmosElement)">
            <summary>
            Averages the supplied item with the previously supplied items.
            </summary>
            <param name="localAverage">The local average to add to the global average.</param>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Query.Aggregation.AverageAggregator.GetResult">
            <summary>
            Returns the current running average or undefined if any of the intermediate averages resulted in an undefined value.
            </summary>
            <returns>The current running average or undefined if any of the intermediate averages resulted in an undefined value.</returns>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.Query.Aggregation.AverageAggregator.AverageInfo">
            <summary>
            Struct that stores a weighted average as a sum and count so they that average across different partitions with different numbers of documents can be taken.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Query.Aggregation.AverageAggregator.AverageInfo.#ctor(System.Nullable{System.Double},System.Int64)">
            <summary>
            Initializes a new instance of the AverageInfo class.
            </summary>
            <param name="sum">The sum (if defined).</param>
            <param name="count">The count.</param>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Query.Aggregation.AverageAggregator.AverageInfo.Create(Microsoft.Azure.Cosmos.CosmosElements.CosmosElement)">
            <summary>
            Initializes a new instance of the AverageInfo class.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.Query.Aggregation.AverageAggregator.AverageInfo.Sum">
            <summary>
            Gets the some component of the weighted average (or null of the result is undefined).
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.Query.Aggregation.AverageAggregator.AverageInfo.Count">
            <summary>
            Gets the count component of the weighted average.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Query.Aggregation.AverageAggregator.AverageInfo.op_Addition(Microsoft.Azure.Cosmos.Query.Aggregation.AverageAggregator.AverageInfo,Microsoft.Azure.Cosmos.Query.Aggregation.AverageAggregator.AverageInfo)">
            <summary>
            Takes the sum of two AverageInfo structs
            </summary>
            <param name="info1">The first AverageInfo.</param>
            <param name="info2">The second AverageInfo.</param>
            <returns>The sum of two AverageInfo structs</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Query.Aggregation.AverageAggregator.AverageInfo.GetAverage">
            <summary>
            Returns the average or undefined if any of the intermediate averages resulted in an undefined value.
            </summary>
            <returns>The average or undefined if any of the intermediate averages resulted in an undefined value.</returns>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.Query.Aggregation.CountAggregator">
            <summary>
            Concrete implementation of IAggregator that can take the global count from the local counts from multiple partitions and continuations.
            Let count_i,j be the count from the ith continuation in the jth partition, 
            then the count for the entire query is SUM(count_i,j for all i and j)
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Query.Aggregation.CountAggregator.globalCount">
            <summary>
            The global count.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Query.Aggregation.CountAggregator.Aggregate(Microsoft.Azure.Cosmos.CosmosElements.CosmosElement)">
            <summary>
            Adds a count to the running count.
            </summary>
            <param name="localCount">The count to add.</param>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Query.Aggregation.CountAggregator.GetResult">
            <summary>
            Gets the global count.
            </summary>
            <returns>The global count.</returns>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.Query.Aggregation.IAggregator">
            <summary>
            Interface for all aggregators that are used to aggregate across continuation and partition boundaries.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Query.Aggregation.IAggregator.Aggregate(Microsoft.Azure.Cosmos.CosmosElements.CosmosElement)">
            <summary>
            Adds an item to the aggregation.
            </summary>
            <param name="item">The item to add to the aggregation.</param>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Query.Aggregation.IAggregator.GetResult">
            <summary>
            Gets the result of the aggregation.
            </summary>
            <returns>The result of the aggregation.</returns>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.Query.Aggregation.MinMaxAggregator">
            <summary>
            Concrete implementation of IAggregator that can take the global min/max from the local min/max of multiple partitions and continuations.
            Let min/max_i,j be the min/max from the ith continuation in the jth partition, 
            then the min/max for the entire query is MIN/MAX(min/max_i,j for all i and j).
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Query.Aggregation.MinMaxAggregator.isMinAggregation">
            <summary>
            Whether or not the aggregation is a min or a max.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Query.Aggregation.MinMaxAggregator.globalMinMax">
            <summary>
            The global max of all items seen.
            </summary>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.Query.Aggregation.SumAggregator">
            <summary>
            Concrete implementation of IAggregator that can take the global sum from the local sum of multiple partitions and continuations.
            Let sum_i,j be the sum from the ith continuation in the jth partition, 
            then the sum for the entire query is SUM(sum_i,j for all i and j).
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Query.Aggregation.SumAggregator.globalSum">
            <summary>
            The global sum.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Query.Aggregation.SumAggregator.Aggregate(Microsoft.Azure.Cosmos.CosmosElements.CosmosElement)">
            <summary>
            Adds a local sum to the global sum.
            </summary>
            <param name="localSum">The local sum.</param>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Query.Aggregation.SumAggregator.GetResult">
            <summary>
            Gets the current sum.
            </summary>
            <returns>The current sum.</returns>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.Query.SingleGroupAggregator">
            <summary>
            Aggregates all the projections for a single grouping.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Query.SingleGroupAggregator.AddValues(Microsoft.Azure.Cosmos.CosmosElements.CosmosElement)">
            <summary>
            Adds the payload for group by values 
            </summary>
            <param name="values"></param>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Query.SingleGroupAggregator.GetResult">
            <summary>
            Forms the final result of the grouping.
            </summary>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.Query.SingleGroupAggregator.SelectValueAggregateValues">
            <summary>
            For SELECT VALUE queries there is only one value for each grouping.
            This class just helps maintain that and captures the first value across all continuations.
            </summary>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.Query.SingleGroupAggregator.SelectListAggregateValues">
            <summary>
            For select list queries we need to create a dictionary of alias to group by value.
            For each grouping drained from the backend we merge it with the results here.
            At the end this class will form a JSON object with the correct aliases and grouping result.
            </summary>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.Query.SingleGroupAggregator.AggregateValue">
            <summary>
            With a group by value we need to encapsulate the fact that we have:
            1) aggregate group by values
            2) scalar group by values.
            </summary>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.Query.CompositeContinuationToken">
            <summary>
            A composite continuation token that has both backend continuation token and partition range information. 
            </summary>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.Query.DistinctMap">
            <summary>
            Base class for all types of DistinctMaps.
            An IDistinctMap is able to efficiently store a hash set of json values.
            This is done by taking the json value and storing a GUID like hash of that value in a hashset.
            By storing the hash we avoid storing the entire object in main memory.
            Only downside is that there is a possibility of a hash collision.
            However we store the hash as 192 bits, so the possibility of a collision is pretty low.
            You can run the birthday paradox math to figure out how low: https://en.wikipedia.org/wiki/Birthday_problem
            </summary>
            <summary>
            Partial wrapper
            </summary>
            <summary>
            Partial wrapper
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Query.DistinctMap.Create(Microsoft.Azure.Cosmos.Query.DistinctQueryType,System.Nullable{Microsoft.Azure.Cosmos.UInt192})">
            <summary>
            Creates an IDistinctMap based on the type.
            </summary>
            <param name="distinctQueryType">The type of distinct query.</param>
            <param name="previousHash">The hash of the previous value successfully inserted into this DistinctMap</param>
            <returns>The appropriate IDistinctMap.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Query.DistinctMap.Add(Microsoft.Azure.Cosmos.CosmosElements.CosmosElement,System.Nullable{Microsoft.Azure.Cosmos.UInt192}@)">
            <summary>
            Adds a JToken to this DistinctMap.
            </summary>
            <param name="cosmosElement">The element to add.</param>
            <param name="hash">The hash of the token.</param>
            <returns>Whether or not the token was successfully added.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Query.DistinctMap.GetHash(Microsoft.Azure.Cosmos.CosmosElements.CosmosElement)">
            <summary>
            Gets the hash of a JToken.
            </summary>
            <param name="cosmosElement">The token to hash.</param>
            <returns>The hash of the JToken.</returns>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.Query.DistinctMap.DistinctHash">
            <summary>
            Base class for DistinctHash.
            This class is able to take hashes with seeded values.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Query.DistinctMap.DistinctHash.Value">
            <summary>
            Singleton for DistinctHash.
            </summary>
            <remarks>All the hashseeds have to be different.</remarks>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Query.DistinctMap.DistinctHash.UInt192LengthInBits">
            <summary>
            Length of a UInt192 in bits
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Query.DistinctMap.DistinctHash.BitsPerByte">
            <summary>
            The number of bits in a byte.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Query.DistinctMap.DistinctHash.UInt192LengthInBytes">
            <summary>
            Length of a UInt192 in bytes.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Query.DistinctMap.DistinctHash.#ctor(Microsoft.Azure.Cosmos.Query.DistinctMap.DistinctHash.HashSeeds)">
            <summary>
            Initializes a new instance of the DistinctHash class.
            </summary>
            <param name="hashSeeds">The hash seeds to use.</param>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.Query.DistinctMap.DistinctHash.HashSeedValues">
            <summary>
            Gets the HashSeeds for this type.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Query.DistinctMap.DistinctHash.GetHash(Microsoft.Azure.Cosmos.UInt192,Microsoft.Azure.Cosmos.UInt192)">
            <summary>
            Gets the hash given a value and a seed.
            </summary>
            <param name="value">The value to hash.</param>
            <param name="seed">The seed.</param>
            <returns>The hash.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Query.DistinctMap.DistinctHash.GetHash(System.Byte[],Microsoft.Azure.Cosmos.UInt192)">
            <summary>
            Gets the hash of a byte array.
            </summary>
            <param name="bytes">The bytes.</param>
            <param name="seed">The seed.</param>
            <returns>The hash.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Query.DistinctMap.DistinctHash.GetHashToken(Microsoft.Azure.Cosmos.CosmosElements.CosmosElement)">
            <summary>
            Gets the hash of a JToken value.
            </summary>
            <param name="cosmosElement">The element to load.</param>
            <returns>The hash of the JToken.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Query.DistinctMap.DistinctHash.GetHashToken(Microsoft.Azure.Cosmos.CosmosElements.CosmosElement,Microsoft.Azure.Cosmos.UInt192)">
            <summary>
            Gets the hash of a JToken given a seed.
            </summary>
            <param name="cosmosElement">The cosmos element to hash.</param>
            <param name="seed">The seed to use.</param>
            <returns>The hash of the JToken.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Query.DistinctMap.DistinctHash.GetUndefinedHash(Microsoft.Azure.Cosmos.UInt192)">
            <summary>
            Gets the hash of a undefined JSON value.
            </summary>
            <param name="seed">The seed to use.</param>
            <returns>The hash of a undefined JSON value.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Query.DistinctMap.DistinctHash.GetNullHash(Microsoft.Azure.Cosmos.UInt192)">
            <summary>
            Gets the hash of a null JSON value.
            </summary>
            <param name="seed">The seed to use.</param>
            <returns>The hash of a null JSON value given a seed.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Query.DistinctMap.DistinctHash.GetBooleanHash(System.Boolean,Microsoft.Azure.Cosmos.UInt192)">
            <summary>
            Gets the hash of a boolean JSON value.
            </summary>
            <param name="boolean">The boolean to hash.</param>
            <param name="seed">The seed.</param>
            <returns>The hash of a boolean JSON value.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Query.DistinctMap.DistinctHash.GetNumberHash(System.Double,Microsoft.Azure.Cosmos.UInt192)">
            <summary>
            Gets the hash of a JSON number value.
            </summary>
            <param name="number">The number to hash.</param>
            <param name="seed">The seed to use.</param>
            <returns>The hash of a JSON number value.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Query.DistinctMap.DistinctHash.GetStringHash(System.String,Microsoft.Azure.Cosmos.UInt192)">
            <summary>
            Gets the hash of a JSON string value.
            </summary>
            <param name="value">The value to hash.</param>
            <param name="seed">The seed to use.</param>
            <returns>The hash of a JSON string value.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Query.DistinctMap.DistinctHash.GetArrayHash(Microsoft.Azure.Cosmos.CosmosElements.CosmosArray,Microsoft.Azure.Cosmos.UInt192)">
            <summary>
            Gets the hash of a JSON array.
            </summary>
            <param name="cosmosArray">The array to hash.</param>
            <param name="seed">The seed to use.</param>
            <returns>The hash of a JSON array.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Query.DistinctMap.DistinctHash.GetObjectHash(Microsoft.Azure.Cosmos.CosmosElements.CosmosObject,Microsoft.Azure.Cosmos.UInt192)">
            <summary>
            Gets the hash of a JSON object.
            </summary>
            <param name="cosmosObject">The object to hash.</param>
            <param name="seed">The seed to use.</param>
            <returns>The hash of a JSON object.</returns>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.Query.DistinctMap.DistinctHash.HashSeeds">
            <summary>
            The seeds to use for hashing different json types.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Query.DistinctMap.DistinctHash.HashSeeds.#ctor(Microsoft.Azure.Cosmos.UInt192,Microsoft.Azure.Cosmos.UInt192,Microsoft.Azure.Cosmos.UInt192,Microsoft.Azure.Cosmos.UInt192,Microsoft.Azure.Cosmos.UInt192,Microsoft.Azure.Cosmos.UInt192,Microsoft.Azure.Cosmos.UInt192,Microsoft.Azure.Cosmos.UInt192,Microsoft.Azure.Cosmos.UInt192,Microsoft.Azure.Cosmos.UInt192)">
            <summary>
            Initializes a new instance of the HashSeeds struct.
            </summary>
            <param name="rootHashSeed">The seed used for the JSON root.</param>
            <param name="nullHashSeed">The seed used for JSON null values.</param>
            <param name="falseHashSeed">The seed used for JSON false values.</param>
            <param name="trueHashSeed">The seed used for JSON true values.</param>
            <param name="numberHashSeed">The seed used for JSON number values.</param>
            <param name="stringHashSeed">The seed used for JSON string values.</param>
            <param name="arrayHashSeed">The seed used for JSON array values.</param>
            <param name="objectHashSeed">The seed used for JSON object values.</param>
            <param name="arrayIndexHashSeed">The seed used for JSON array elements.</param>
            <param name="propertyNameHashSeed">The seed used for JSON property names.</param>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.Query.DistinctMap.DistinctHash.HashSeeds.Root">
            <summary>
            Gets the seed used for the JSON root.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.Query.DistinctMap.DistinctHash.HashSeeds.Null">
            <summary>
            Gets the seed used for JSON null values.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.Query.DistinctMap.DistinctHash.HashSeeds.False">
            <summary>
            Gets the seed used for JSON false values.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.Query.DistinctMap.DistinctHash.HashSeeds.True">
            <summary>
            Gets the seed used for JSON true values.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.Query.DistinctMap.DistinctHash.HashSeeds.Number">
            <summary>
            Gets the seed used for JSON number values.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.Query.DistinctMap.DistinctHash.HashSeeds.String">
            <summary>
            Gets the seed used for JSON string values.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.Query.DistinctMap.DistinctHash.HashSeeds.Array">
            <summary>
            Gets the seed used for JSON array values.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.Query.DistinctMap.DistinctHash.HashSeeds.Object">
            <summary>
            Gets the seed used for JSON object values.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.Query.DistinctMap.DistinctHash.HashSeeds.ArrayIndex">
            <summary>
            Gets the seed used for JSON array elements.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.Query.DistinctMap.DistinctHash.HashSeeds.PropertyName">
            <summary>
            Gets the seed used for JSON property names.
            </summary>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.Query.DistinctMap.OrderedDistinctMap">
            <summary>
            For distinct queries of the form:
            SELECT DISTINCT VALUE c.(blah) from c order by c.(blah)
            We can make an optimization, since the problem boils down to
            "How can you find all the distinct items in a sorted stream"
            Ex. "1, 1, 2, 2, 2, 3, 4, 4" -> "1, 2, 3, 4"
            The solution is that you only need to remember the previous item of the stream:
            foreach item in stream:
                if item != previous item:
                    yield item
            This class accomplishes that by storing the previous hash and assuming the items come in sorted order.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Query.DistinctMap.OrderedDistinctMap.lastHash">
            <summary>
            The hash of the last item that was added to this distinct map.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Query.DistinctMap.OrderedDistinctMap.#ctor(Microsoft.Azure.Cosmos.UInt192)">
            <summary>
            Initializes a new instance of the OrderedDistinctMap class.
            </summary>
            <param name="lastHash">The previous hash from the previous continuation.</param>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Query.DistinctMap.OrderedDistinctMap.Add(Microsoft.Azure.Cosmos.CosmosElements.CosmosElement,System.Nullable{Microsoft.Azure.Cosmos.UInt192}@)">
            <summary>
            Adds a JToken to this map if it hasn't already been added.
            </summary>
            <param name="cosmosElement">The element to add.</param>
            <param name="hash">The hash of the token.</param>
            <returns>Whether or not the item was added to this Distinct Map.</returns>
            <remarks>This function assumes data is added in sorted order.</remarks>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.Query.DistinctMap.SimpleValues">
            <summary>
            Flags for all the simple json values, so that we don't need a separate hash for them.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Query.DistinctMap.SimpleValues.None">
            <summary>
            None JSON Value.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Query.DistinctMap.SimpleValues.Undefined">
            <summary>
            Undefined JSON Value.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Query.DistinctMap.SimpleValues.Null">
            <summary>
            Null JSON Value.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Query.DistinctMap.SimpleValues.False">
            <summary>
            False JSON Value.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Query.DistinctMap.SimpleValues.True">
            <summary>
            True JSON Value.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Query.DistinctMap.SimpleValues.EmptyString">
            <summary>
            Empty String.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Query.DistinctMap.SimpleValues.EmptyArray">
            <summary>
            Empty Array.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Query.DistinctMap.SimpleValues.EmptyObject">
            <summary>
            Empty Object.
            </summary>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.Query.DistinctMap.UnorderdDistinctMap">
            <summary>
            For distinct queries we need to keep a running hash set of all the documents seen.
            You can read more about this in DistinctDocumentQueryExecutionComponent.cs.
            This class does that with the additional optimization that it doesn't store the whole JSON.
            Instead this class takes a GUID like hash and store that instead.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Query.DistinctMap.UnorderdDistinctMap.UInt192Length">
            <summary>
            Length of UInt192 (in bytes).
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Query.DistinctMap.UnorderdDistinctMap.UInt128Length">
            <summary>
            Length of UInt128 (in bytes).
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Query.DistinctMap.UnorderdDistinctMap.ULongLength">
            <summary>
            Length of ulong (in bytes).
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Query.DistinctMap.UnorderdDistinctMap.UIntLength">
            <summary>
            Length of uint (in bytes).
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Query.DistinctMap.UnorderdDistinctMap.utf8Buffer">
            <summary>
            Buffer that gets reused to convert a .net string (utf-16) to a (utf-8) byte array.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Query.DistinctMap.UnorderdDistinctMap.numbers">
            <summary>
            HashSet for all numbers seen.
            This takes less space than a 24 byte hash and has full fidelity.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Query.DistinctMap.UnorderdDistinctMap.stringsLength4">
            <summary>
            HashSet for all strings seen of length less than or equal to 4 stored as a uint.
            This takes less space than a 24 byte hash and has full fidelity.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Query.DistinctMap.UnorderdDistinctMap.stringLength8">
            <summary>
            HashSet for all strings seen of length less than or equal to 8 stored as a ulong.
            This takes less space than a 24 byte hash and has full fidelity.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Query.DistinctMap.UnorderdDistinctMap.stringLength16">
            <summary>
            HashSet for all strings of length less than or equal to 16 stored as a UInt128.
            This takes less space than a 24 byte hash and has full fidelity.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Query.DistinctMap.UnorderdDistinctMap.stringLength24">
            <summary>
            HashSet for all strings seen of length less than or equal to 24 stored as a UInt192.
            This takes the same space as 24 byte hash and has full fidelity.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Query.DistinctMap.UnorderdDistinctMap.stringLength24Plus">
            <summary>
            HashSet for all strings seen of length greater than 24 stored as a UInt192.
            This set only stores the hash, since we don't want to spend the space for storing large strings.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Query.DistinctMap.UnorderdDistinctMap.arrays">
            <summary>
            HashSet for all arrays seen.
            This set only stores the hash, since we don't want to spend the space for storing large arrays.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Query.DistinctMap.UnorderdDistinctMap.objects">
            <summary>
            HashSet for all object seen.
            This set only stores the hash, since we don't want to spend the space for storing large objects.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Query.DistinctMap.UnorderdDistinctMap.simpleValues">
            <summary>
            Stores all the simple values that we don't want to dedicate a hash set for.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Query.DistinctMap.UnorderdDistinctMap.Add(Microsoft.Azure.Cosmos.CosmosElements.CosmosElement,System.Nullable{Microsoft.Azure.Cosmos.UInt192}@)">
            <summary>
            Adds a JToken to this map if it hasn't already been added.
            </summary>
            <param name="cosmosElement">The element to add.</param>
            <param name="hash">The hash of the token.</param>
            <returns>Whether or not the item was added to this Distinct Map.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Query.DistinctMap.UnorderdDistinctMap.AddNumberValue(System.Double)">
            <summary>
            Adds a number value to the map.
            </summary>
            <param name="value">The value to add.</param>
            <returns>Whether or not the value was successfully added.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Query.DistinctMap.UnorderdDistinctMap.AddSimpleValue(Microsoft.Azure.Cosmos.Query.DistinctMap.SimpleValues)">
            <summary>
            Adds a simple value to the map.
            </summary>
            <param name="value">The simple value.</param>
            <returns>Whether or not the value was successfully added.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Query.DistinctMap.UnorderdDistinctMap.AddStringValue(System.String)">
            <summary>
            Adds a string to the distinct map.
            </summary>
            <param name="value">The string to add.</param>
            <returns>Whether or not the value was successfully added.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Query.DistinctMap.UnorderdDistinctMap.AddArrayValue(Microsoft.Azure.Cosmos.CosmosElements.CosmosArray)">
            <summary>
            Adds an array value to the distinct map.
            </summary>
            <param name="array">The array to add.</param>
            <returns>Whether or not the value was successfully added.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Query.DistinctMap.UnorderdDistinctMap.AddObjectValue(Microsoft.Azure.Cosmos.CosmosElements.CosmosObject)">
            <summary>
            Adds an object value to the distinct map.
            </summary>
            <param name="cosmosObject">The object to add.</param>
            <returns>Whether or not the value was successfully added.</returns>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.Query.DistinctQueryType">
            <summary>
            Enum of the type of distinct queries.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Query.DistinctQueryType.None">
            <summary>
            This means that the query does not have DISTINCT.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Query.DistinctQueryType.Unordered">
            <summary>
            This means that the query has DISTINCT, but it's not ordered perfectly.
            </summary>
            <example>SELECT DISTINCT VALUE c.name FROM c</example>
            <example>SELECT DISTINCT VALUE c.name FROM c ORDER BY c.age</example>
            <example>SELECT DISTINCT c.name FROM c ORDER BY c.name</example>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Query.DistinctQueryType.Ordered">
            <summary>
            This means that the query has DISTINCT, and it is ordered perfectly.
            </summary>
            <example>SELECT DISTINCT VALUE c.name FROM c ORDER BY c.name</example>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.Query.ExecutionComponent.AggregateDocumentQueryExecutionComponent">
            <summary>
            Execution component that is able to aggregate local aggregates from multiple continuations and partitions.
            At a high level aggregates queries only return a "partial" aggregate.
            "partial" means that the result is only valid for that one continuation (and one partition).
            For example suppose you have the query "SELECT COUNT(1) FROM c" and you have a single partition collection, 
            then you will get one count for each continuation of the query.
            If you wanted the true result for this query, then you will have to take the sum of all continuations.
            The reason why we have multiple continuations is because for a long running query we have to break up the results into multiple continuations.
            Fortunately all the aggregates can be aggregated across continuations and partitions.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Query.ExecutionComponent.AggregateDocumentQueryExecutionComponent.singleGroupAggregator">
            <summary>
            This class does most of the work, since a query like:
            
            SELECT VALUE AVG(c.age)
            FROM c
            
            is really just an aggregation on a single grouping (the whole collection).
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Query.ExecutionComponent.AggregateDocumentQueryExecutionComponent.isValueAggregateQuery">
            <summary>
            We need to keep track of whether the projection has the 'VALUE' keyword.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Query.ExecutionComponent.AggregateDocumentQueryExecutionComponent.#ctor(Microsoft.Azure.Cosmos.Query.ExecutionComponent.IDocumentQueryExecutionComponent,Microsoft.Azure.Cosmos.Query.SingleGroupAggregator,System.Boolean)">
            <summary>
            Initializes a new instance of the AggregateDocumentQueryExecutionComponent class.
            </summary>
            <param name="source">The source component that will supply the local aggregates from multiple continuations and partitions.</param>
            <param name="singleGroupAggregator">The single group aggregator that we will feed results into.</param>
            <param name="isValueAggregateQuery">Whether or not the query has the 'VALUE' keyword.</param>
            <remarks>This constructor is private since there is some async initialization that needs to happen in CreateAsync().</remarks>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Query.ExecutionComponent.AggregateDocumentQueryExecutionComponent.CreateAsync(Microsoft.Azure.Cosmos.Query.AggregateOperator[],System.Collections.Generic.IReadOnlyDictionary{System.String,System.Nullable{Microsoft.Azure.Cosmos.Query.AggregateOperator}},System.Boolean,System.String,System.Func{System.String,System.Threading.Tasks.Task{Microsoft.Azure.Cosmos.Query.ExecutionComponent.IDocumentQueryExecutionComponent}})">
            <summary>
            Creates a AggregateDocumentQueryExecutionComponent.
            </summary>
            <param name="aggregates">The aggregates.</param>
            <param name="aliasToAggregateType">The alias to aggregate type.</param>
            <param name="hasSelectValue">Whether or not the query has the 'VALUE' keyword.</param>
            <param name="requestContinuation">The continuation token to resume from.</param>
            <param name="createSourceCallback">The callback to create the source component that supplies the local aggregates.</param>
            <returns>The AggregateDocumentQueryExecutionComponent.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Query.ExecutionComponent.AggregateDocumentQueryExecutionComponent.DrainAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Drains at most 'maxElements' documents from the AggregateDocumentQueryExecutionComponent.
            </summary>
            <param name="maxElements">This value is ignored, since the aggregates are aggregated for you.</param>
            <param name="token">The cancellation token.</param>
            <returns>The aggregate result after all the continuations have been followed.</returns>
            <remarks>
            Note that this functions follows all continuations meaning that it won't return until all continuations are drained.
            This means that if you have a long running query this function will take a very long time to return.
            </remarks>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.Query.ExecutionComponent.AggregateDocumentQueryExecutionComponent.RewrittenAggregateProjections">
            <summary>
            Struct for getting the payload out of the rewritten projection.
            </summary>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.Query.ExecutionComponent.CosmosQueryExecutionComponent">
            <summary>
            Interface for all DocumentQueryExecutionComponents
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.Query.ExecutionComponent.CosmosQueryExecutionComponent.IsDone">
            <summary>
            Gets a value indicating whether this component is done draining documents.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Query.ExecutionComponent.CosmosQueryExecutionComponent.DrainAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Drains documents from this component.
            </summary>
            <param name="maxElements">The maximum number of documents to drain.</param>
            <param name="token">The cancellation token to cancel tasks.</param>
            <returns>A task that when awaited on returns a feed response.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Query.ExecutionComponent.CosmosQueryExecutionComponent.Stop">
            <summary>
            Stops this document query execution component.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Query.ExecutionComponent.CosmosQueryExecutionComponent.GetQueryMetrics">
            <summary>
            Gets the QueryMetrics from this component.
            </summary>
            <returns>The QueryMetrics from this component.</returns>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.Query.ExecutionComponent.DistinctDocumentQueryExecutionComponent">
            <summary>
            Distinct queries return documents that are distinct with a page.
            This means that documents are not guaranteed to be distinct across continuations and partitions.
            The reasoning for this is because the backend treats each continuation of a query as a separate request
            and partitions are not aware of each other.
            The solution is that the client keeps a running hash set of all the documents it has already seen,
            so that when it encounters a duplicate document from another continuation it will not be emitted to the user.
            The only problem is that if the user chooses to go through the continuation token API for DocumentQuery instead
            of while(HasMoreResults) ExecuteNextAsync, then will see duplicates across continuations.
            There is no workaround for that use case, since the continuation token will have to include all the documents seen.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Query.ExecutionComponent.DistinctDocumentQueryExecutionComponent.distinctMap">
            <summary>
            An DistinctMap that efficiently stores the documents that we have already seen.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Query.ExecutionComponent.DistinctDocumentQueryExecutionComponent.distinctQueryType">
            <summary>
            The type of distinct query this component is serving.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Query.ExecutionComponent.DistinctDocumentQueryExecutionComponent.lastHash">
            <summary>
            The hash of the last value added to the distinct map.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Query.ExecutionComponent.DistinctDocumentQueryExecutionComponent.#ctor(Microsoft.Azure.Cosmos.Query.CosmosQueryClient,Microsoft.Azure.Cosmos.Query.DistinctQueryType,System.Nullable{Microsoft.Azure.Cosmos.UInt192},Microsoft.Azure.Cosmos.Query.ExecutionComponent.IDocumentQueryExecutionComponent)">
            <summary>
            Initializes a new instance of the DistinctDocumentQueryExecutionComponent class.
            </summary>
            <param name="queryClient">The query client</param>
            <param name="distinctQueryType">The type of distinct query.</param>
            <param name="previousHash">The previous that distinct map saw.</param>
            <param name="source">The source to drain from.</param>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Query.ExecutionComponent.DistinctDocumentQueryExecutionComponent.CreateAsync(Microsoft.Azure.Cosmos.Query.CosmosQueryClient,System.String,System.Func{System.String,System.Threading.Tasks.Task{Microsoft.Azure.Cosmos.Query.ExecutionComponent.IDocumentQueryExecutionComponent}},Microsoft.Azure.Cosmos.Query.DistinctQueryType)">
            <summary>
            Creates an DistinctDocumentQueryExecutionComponent
            </summary>
            <param name="queryClient">The query client</param>
            <param name="requestContinuation">The continuation token.</param>
            <param name="createSourceCallback">The callback to create the source to drain from.</param>
            <param name="distinctQueryType">The type of distinct query.</param>
            <returns>A task to await on and in return </returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Query.ExecutionComponent.DistinctDocumentQueryExecutionComponent.DrainAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Drains a page of results returning only distinct elements.
            </summary>
            <param name="maxElements">The maximum number of items to drain.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A page of distinct results.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Query.ExecutionComponent.DistinctDocumentQueryExecutionComponent.GetJTokenFromObject(System.Object)">
            <summary>
            Efficiently casts a object to a JToken.
            </summary>
            <param name="document">The document to cast.</param>
            <returns>The JToken from the object.</returns>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.Query.ExecutionComponent.DistinctDocumentQueryExecutionComponent.DistinctContinuationToken">
            <summary>
            Continuation token for distinct queries.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Query.ExecutionComponent.DistinctDocumentQueryExecutionComponent.DistinctContinuationToken.#ctor(System.Nullable{Microsoft.Azure.Cosmos.UInt192},System.String)">
            <summary>
            Initializes a new instance of the DistinctContinuationToken struct.
            </summary>
            <param name="lastHash">The last hash.</param>
            <param name="sourceToken">The continuation token for the source context.</param>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.Query.ExecutionComponent.DistinctDocumentQueryExecutionComponent.DistinctContinuationToken.LastHash">
            <summary>
            Gets the previous hash.
            </summary>
            <remarks>The type is nullable, since only ordered distinct queries will have a previous hash.</remarks>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.Query.ExecutionComponent.DistinctDocumentQueryExecutionComponent.DistinctContinuationToken.SourceToken">
            <summary>
            Gets he continuation token for the source context.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Query.ExecutionComponent.DistinctDocumentQueryExecutionComponent.DistinctContinuationToken.Parse(Microsoft.Azure.Cosmos.Query.CosmosQueryClient,System.String)">
            <summary>
            Parses out the DistinctContinuationToken from a string.
            </summary>
            <param name="queryClient">The query client</param>
            <param name="value">The value to parse.</param>
            <returns>The parsed DistinctContinuationToken.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Query.ExecutionComponent.DistinctDocumentQueryExecutionComponent.DistinctContinuationToken.TryParse(System.String,Microsoft.Azure.Cosmos.Query.ExecutionComponent.DistinctDocumentQueryExecutionComponent.DistinctContinuationToken@)">
            <summary>
            Tries to parse a DistinctContinuationToken from a string.
            </summary>
            <param name="value">The value to parse.</param>
            <param name="distinctContinuationToken">The output DistinctContinuationToken.</param>
            <returns>True if we successfully parsed the DistinctContinuationToken, else false.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Query.ExecutionComponent.DistinctDocumentQueryExecutionComponent.DistinctContinuationToken.ToString">
            <summary>
            Gets the serialized form of DistinctContinuationToken
            </summary>
            <returns>The serialized form of DistinctContinuationToken</returns>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.Query.ExecutionComponent.DistinctDocumentQueryExecutionComponent.DistinctContinuationToken.NullableUInt192Serializer">
            <summary>
            Customer converter for nullable UInt192 so that we can serialize and deserialize the previous hash for distinct queries.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Query.ExecutionComponent.DistinctDocumentQueryExecutionComponent.DistinctContinuationToken.NullableUInt192Serializer.CanConvert(System.Type)">
            <summary>
            Gets whether or not you can convert the object type.
            </summary>
            <param name="objectType">The object type.</param>
            <returns>Whether or not you can convert the object type.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Query.ExecutionComponent.DistinctDocumentQueryExecutionComponent.DistinctContinuationToken.NullableUInt192Serializer.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the nullable UInt192
            </summary>
            <param name="reader">The reader to read from.</param>
            <param name="objectType">The object type.</param>
            <param name="existingValue">The existing value.</param>
            <param name="serializer">The serializer.</param>
            <returns>The nullable UInt192.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Query.ExecutionComponent.DistinctDocumentQueryExecutionComponent.DistinctContinuationToken.NullableUInt192Serializer.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the nullable UInt192
            </summary>
            <param name="writer">The writer.</param>
            <param name="value">The value.</param>
            <param name="serializer">The serializer.</param>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.Query.ExecutionComponent.DocumentQueryExecutionComponentBase">
            <summary>
            Base class for all DocumentQueryExecutionComponents that implements and IDocumentQueryExecutionComponent
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Query.ExecutionComponent.DocumentQueryExecutionComponentBase.Source">
            <summary>
            Source DocumentQueryExecutionComponent that this component will drain from.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Query.ExecutionComponent.DocumentQueryExecutionComponentBase.#ctor(Microsoft.Azure.Cosmos.Query.ExecutionComponent.IDocumentQueryExecutionComponent)">
            <summary>
            Initializes a new instance of the DocumentQueryExecutionComponentBase class.
            </summary>
            <param name="source">The source to drain documents from.</param>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.Query.ExecutionComponent.DocumentQueryExecutionComponentBase.IsDone">
            <summary>
            Gets a value indicating whether or not this component is done draining documents.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Query.ExecutionComponent.DocumentQueryExecutionComponentBase.Dispose">
            <summary>
            Disposes this context.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Query.ExecutionComponent.DocumentQueryExecutionComponentBase.DrainAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Drains documents from this execution context.
            </summary>
            <param name="maxElements">Upper bound for the number of documents you wish to receive.</param>
            <param name="token">The cancellation token to use.</param>
            <returns>A DoucmentFeedResponse of documents.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Query.ExecutionComponent.DocumentQueryExecutionComponentBase.Stop">
            <summary>
            Stops the execution component.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Query.ExecutionComponent.DocumentQueryExecutionComponentBase.GetQueryMetrics">
            <summary>
            Gets the query metrics from this component.
            </summary>
            <returns>The partitioned query metrics from this component.</returns>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.Query.ExecutionComponent.GroupByDocumentQueryExecutionComponent">
            <summary>
            Query execution component that groups groupings across continuations and pages.
            The general idea is a query gets rewritten from this:
            
            SELECT c.team, c.name, COUNT(1) AS count
            FROM c
            GROUP BY c.team, c.name
            
            To this:
            
            SELECT 
                [{"item": c.team}, {"item": c.name}] AS groupByItems, 
                {"team": c.team, "name": c.name, "count": {"item": COUNT(1)}} AS payload
            FROM c
            GROUP BY c.team, c.name
            
            With the following dictionary:
            
            {
                "team": null,
                "name": null,
                "count" COUNT
            }
            
            So we know how to aggregate each column. 
            At the end the columns are stitched together to make the grouped document.
            </summary>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.Query.ExecutionComponent.GroupByDocumentQueryExecutionComponent.RewrittenGroupByProjection">
            <summary>
            When a group by query gets rewritten the projection looks like:
            
            SELECT 
                [{"item": c.age}, {"item": c.name}] AS groupByItems, 
                {"age": c.age, "name": c.name} AS payload
            
            This struct just lets us easily access the "groupByItems" and "payload" property.
            </summary>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.Query.ExecutionComponent.IDocumentQueryExecutionComponent">
            <summary>
            Interface for all DocumentQueryExecutionComponents
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.Query.ExecutionComponent.IDocumentQueryExecutionComponent.IsDone">
            <summary>
            Gets a value indicating whether this component is done draining documents.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Query.ExecutionComponent.IDocumentQueryExecutionComponent.DrainAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Drains documents from this component.
            </summary>
            <param name="maxElements">The maximum number of documents to drain.</param>
            <param name="token">The cancellation token to cancel tasks.</param>
            <returns>A task that when awaited on returns a feed response.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Query.ExecutionComponent.IDocumentQueryExecutionComponent.Stop">
            <summary>
            Stops this document query execution component.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Query.ExecutionComponent.IDocumentQueryExecutionComponent.GetQueryMetrics">
            <summary>
            Gets the QueryMetrics from this component.
            </summary>
            <returns>The QueryMetrics from this component.</returns>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.Query.ExecutionComponent.SkipDocumentQueryExecutionComponent.OffsetContinuationToken">
            <summary>
            A OffsetContinuationToken is a composition of a source continuation token and how many items to skip from that source.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Query.ExecutionComponent.SkipDocumentQueryExecutionComponent.OffsetContinuationToken.#ctor(System.Int32,System.String)">
            <summary>
            Initializes a new instance of the OffsetContinuationToken struct.
            </summary>
            <param name="offset">The number of items to skip in the query.</param>
            <param name="sourceToken">The continuation token for the source component of the query.</param>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.Query.ExecutionComponent.SkipDocumentQueryExecutionComponent.OffsetContinuationToken.Offset">
            <summary>
            The number of items to skip in the query.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.Query.ExecutionComponent.SkipDocumentQueryExecutionComponent.OffsetContinuationToken.SourceToken">
            <summary>
            Gets the continuation token for the source component of the query.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Query.ExecutionComponent.SkipDocumentQueryExecutionComponent.OffsetContinuationToken.Parse(System.String)">
            <summary>
            Parses the OffsetContinuationToken from it's string form.
            </summary>
            <param name="value">The string form to parse from.</param>
            <returns>The parsed OffsetContinuationToken.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Query.ExecutionComponent.SkipDocumentQueryExecutionComponent.OffsetContinuationToken.TryParse(System.String,Microsoft.Azure.Cosmos.Query.ExecutionComponent.SkipDocumentQueryExecutionComponent.OffsetContinuationToken@)">
            <summary>
            Tries to parse out the OffsetContinuationToken.
            </summary>
            <param name="value">The value to parse from.</param>
            <param name="offsetContinuationToken">The result of parsing out the token.</param>
            <returns>Whether or not the LimitContinuationToken was successfully parsed out.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Query.ExecutionComponent.SkipDocumentQueryExecutionComponent.OffsetContinuationToken.ToString">
            <summary>
            Gets the string version of the continuation token that can be passed in a response header.
            </summary>
            <returns>The string version of the continuation token that can be passed in a response header.</returns>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.Query.ExecutionComponent.TakeDocumentQueryExecutionComponent.LimitContinuationToken">
            <summary>
            A LimitContinuationToken is a composition of a source continuation token and how many items we have left to drain from that source.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Query.ExecutionComponent.TakeDocumentQueryExecutionComponent.LimitContinuationToken.#ctor(System.Int32,System.String)">
            <summary>
            Initializes a new instance of the LimitContinuationToken struct.
            </summary>
            <param name="limit">The limit to the number of document drained for the remainder of the query.</param>
            <param name="sourceToken">The continuation token for the source component of the query.</param>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.Query.ExecutionComponent.TakeDocumentQueryExecutionComponent.LimitContinuationToken.Limit">
            <summary>
            Gets the limit to the number of document drained for the remainder of the query.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.Query.ExecutionComponent.TakeDocumentQueryExecutionComponent.LimitContinuationToken.SourceToken">
            <summary>
            Gets the continuation token for the source component of the query.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Query.ExecutionComponent.TakeDocumentQueryExecutionComponent.LimitContinuationToken.Parse(Microsoft.Azure.Cosmos.Query.CosmosQueryClient,System.String)">
            <summary>
            Parses the LimitContinuationToken from it's string form.
            </summary>
            <param name="queryClient">The query client</param>
            <param name="value">The string form to parse from.</param>
            <returns>The parsed LimitContinuationToken.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Query.ExecutionComponent.TakeDocumentQueryExecutionComponent.LimitContinuationToken.TryParse(System.String,Microsoft.Azure.Cosmos.Query.ExecutionComponent.TakeDocumentQueryExecutionComponent.LimitContinuationToken@)">
            <summary>
            Tries to parse out the LimitContinuationToken.
            </summary>
            <param name="value">The value to parse from.</param>
            <param name="limitContinuationToken">The result of parsing out the token.</param>
            <returns>Whether or not the LimitContinuationToken was successfully parsed out.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Query.ExecutionComponent.TakeDocumentQueryExecutionComponent.LimitContinuationToken.ToString">
            <summary>
            Gets the string version of the continuation token that can be passed in a response header.
            </summary>
            <returns>The string version of the continuation token that can be passed in a response header.</returns>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.Query.ExecutionComponent.TakeDocumentQueryExecutionComponent.TopContinuationToken">
            <summary>
            A TopContinuationToken is a composition of a source continuation token and how many items we have left to drain from that source.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Query.ExecutionComponent.TakeDocumentQueryExecutionComponent.TopContinuationToken.#ctor(System.Int32,System.String)">
            <summary>
            Initializes a new instance of the TopContinuationToken struct.
            </summary>
            <param name="top">The limit to the number of document drained for the remainder of the query.</param>
            <param name="sourceToken">The continuation token for the source component of the query.</param>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.Query.ExecutionComponent.TakeDocumentQueryExecutionComponent.TopContinuationToken.Top">
            <summary>
            Gets the limit to the number of document drained for the remainder of the query.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.Query.ExecutionComponent.TakeDocumentQueryExecutionComponent.TopContinuationToken.SourceToken">
            <summary>
            Gets the continuation token for the source component of the query.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Query.ExecutionComponent.TakeDocumentQueryExecutionComponent.TopContinuationToken.Parse(Microsoft.Azure.Cosmos.Query.CosmosQueryClient,System.String)">
            <summary>
            Parses the TopContinuationToken from it's string form.
            </summary>
            <param name="queryClient">The query client</param>
            <param name="value">The string form to parse from.</param>
            <returns>The parsed TopContinuationToken.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Query.ExecutionComponent.TakeDocumentQueryExecutionComponent.TopContinuationToken.TryParse(System.String,Microsoft.Azure.Cosmos.Query.ExecutionComponent.TakeDocumentQueryExecutionComponent.TopContinuationToken@)">
            <summary>
            Tries to parse out the TopContinuationToken.
            </summary>
            <param name="value">The value to parse from.</param>
            <param name="topContinuationToken">The result of parsing out the token.</param>
            <returns>Whether or not the TopContinuationToken was successfully parsed out.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Query.ExecutionComponent.TakeDocumentQueryExecutionComponent.TopContinuationToken.ToString">
            <summary>
            Gets the string version of the continuation token that can be passed in a response header.
            </summary>
            <returns>The string version of the continuation token that can be passed in a response header.</returns>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.Query.CosmosCrossPartitionQueryExecutionContext">
            <summary>
            This class is responsible for maintaining a forest of <see cref="T:Microsoft.Azure.Cosmos.Query.ItemProducerTree"/>.
            The trees in this forest are ordered using a priority queue and the nodes within the forest are internally ordered using a comparator.
            The ordering is determine by the concrete derived class.
            This class allows derived classes to iterate through the documents in the forest using Current and MoveNext semantics.
            This class is also responsible for prefetching documents if necessary using <see cref="T:Microsoft.Azure.Cosmos.ComparableTaskScheduler"/> whose ordering is also determined by the derived classes.
            This class also aggregated all metrics from sending queries to individual partitions.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Query.CosmosCrossPartitionQueryExecutionContext.DynamicPageSizeAdjustmentFactor">
            <summary>
            When a document producer tree successfully fetches a page we increase the page size by this factor so that any particular document producer will only ever make O(log(n)) roundtrips, while also only ever grabbing at most twice the number of documents needed.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Query.CosmosCrossPartitionQueryExecutionContext.itemProducerForest">
            <summary>
            Priority Queue of ItemProducerTrees that make a forest that can be iterated on.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Query.CosmosCrossPartitionQueryExecutionContext.fetchPrioirtyFunction">
            <summary>
            Function used to determine which document producer to fetch from first
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Query.CosmosCrossPartitionQueryExecutionContext.comparableTaskScheduler">
            <summary>
            The task scheduler that kicks off all the prefetches behind the scenes.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Query.CosmosCrossPartitionQueryExecutionContext.equalityComparer">
            <summary>
            The equality comparer used to determine whether a document producer needs it's continuation token to be part of the composite continuation token.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Query.CosmosCrossPartitionQueryExecutionContext.requestChargeTracker">
            <summary>
            Request Charge Tracker used to atomically add request charges (doubles).
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Query.CosmosCrossPartitionQueryExecutionContext.actualMaxPageSize">
            <summary>
            The actual max page size after all the optimizations have been made it in the create document query execution context layer.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Query.CosmosCrossPartitionQueryExecutionContext.actualMaxBufferedItemCount">
            <summary>
            The actual max buffered item count after all the optimizations have been made it in the create document query execution context layer.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Query.CosmosCrossPartitionQueryExecutionContext.groupedQueryMetrics">
            <summary>
            This stores all the query metrics which have been grouped by partition id.
            When a feed response is returned (which includes multiple partitions and potentially multiple continuations)
            we take a snapshot of partitionedQueryMetrics and store it in grouped query metrics.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Query.CosmosCrossPartitionQueryExecutionContext.partitionedQueryMetrics">
            <summary>
            This stores the running query metrics.
            When a feed response is returned he take a snapshot of this bag and store it in groupedQueryMetrics.
            The bag is then emptied and available to store the query metric for future continuations.
            </summary>
            <remarks>
            Due to the nature of parallel queries and prefetches the query metrics you get for a single continuation does not always 
            map to how much work was done to get that continuation.
            For example say for a simple cross partition query we return the first page of the results from the first partition,
            but behind the scenes we prefetched from other partitions.
            Another example is for an order by query we return one page of results but it only required us to use partial pages from each partition, 
            but we eventually used the whole page for the next continuation; which continuation reports the cost?
            Basically the only thing we can ensure is if you drain a query fully you should get back the same query metrics by the end.
            </remarks>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Query.CosmosCrossPartitionQueryExecutionContext.totalBufferedItems">
            <summary>
            Total number of buffered items to determine if we can go for another prefetch while still honoring the MaxBufferedItemCount.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Query.CosmosCrossPartitionQueryExecutionContext.totalResponseLengthBytes">
            <summary>
            The total response length.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Query.CosmosCrossPartitionQueryExecutionContext.#ctor(Microsoft.Azure.Cosmos.Query.CosmosQueryContext,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Collections.Generic.IComparer{Microsoft.Azure.Cosmos.Query.ItemProducerTree},System.Func{Microsoft.Azure.Cosmos.Query.ItemProducerTree,System.Int32},System.Collections.Generic.IEqualityComparer{Microsoft.Azure.Cosmos.CosmosElements.CosmosElement})">
            <summary>
            Initializes a new instance of the CosmosCrossPartitionQueryExecutionContext class.
            </summary>
            <param name="queryContext">Constructor parameters for the base class.</param>
            <param name="maxConcurrency">The max concurrency</param>
            <param name="maxBufferedItemCount">The max buffered item count</param>
            <param name="maxItemCount">Max item count</param>
            <param name="moveNextComparer">Comparer used to figure out that document producer tree to serve documents from next.</param>
            <param name="fetchPrioirtyFunction">The priority function to determine which partition to fetch documents from next.</param>
            <param name="equalityComparer">Used to determine whether we need to return the continuation token for a partition.</param>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.Query.CosmosCrossPartitionQueryExecutionContext.IsDone">
            <summary>
            Gets a value indicating whether this context is done having documents drained.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.Query.CosmosCrossPartitionQueryExecutionContext.FailureResponse">
            <summary>
            If a failure is hit store it and return it on the next drain call.
            This allows returning the results computed before the failure.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.Query.CosmosCrossPartitionQueryExecutionContext.ContinuationToken">
            <summary>
            Gets the continuation token for the context.
            This method is overridden by the derived class, since they all have different continuation tokens.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.Query.CosmosCrossPartitionQueryExecutionContext.CanPrefetch">
            <summary>
            Gets a value indicating whether we are allowed to prefetch.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.Query.CosmosCrossPartitionQueryExecutionContext.HasMoreResults">
            <summary>
            Gets a value indicating whether the context still has more results.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.Query.CosmosCrossPartitionQueryExecutionContext.FreeItemSpace">
            <summary>
            Gets the number of documents we can still buffer.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Query.CosmosCrossPartitionQueryExecutionContext.GetQueryMetrics">
            <summary>
            Gets the query metrics that are set in SetQueryMetrics
            </summary>
            <returns>The grouped query metrics.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Query.CosmosCrossPartitionQueryExecutionContext.GetActiveItemProducers">
            <summary>
            After a split you need to maintain the continuation tokens for all the child document producers until a condition is met.
            For example lets say that a document producer is at continuation X and it gets split,
            then the children each get continuation X, but since you only drain from one of them at a time you are left with the first child having 
            continuation X + delta and the second child having continuation X (draw this out if you are following along).
            At this point you have the answer the question: "Which continuation token do you return to the user?".
            Let's say you return X, then when you come back to the first child you will be repeating work, thus returning some documents more than once.
            Let's say you return X + delta, then you fine when you return to the first child, but when you get to the second child you don't have a continuation token
            meaning that you will be repeating all the document for the second partition up until X and again you will be returning some documents more than once.
            Thus you have to return the continuation token for both children.
            Both this means you are returning more than 1 continuation token for the rest of the query.
            Well a naive optimization is to flush the continuation for a child partition once you are done draining from it, which isn't bad for a parallel query,
            but if you have an order by query you might not be done with a producer until the end of the query.
            The next optimization for a parallel query is to flush the continuation token the moment you start reading from a child partition.
            This works for a parallel query, but breaks for an order by query.
            The final realization is that for an order by query you are only choosing between multiple child partitions when their is a tie,
            so the key is that you can dump the continuation token the moment you come across a new order by item.
            For order by queries that is determined by the order by field and for parallel queries that is the moment you come by a new rid (which is any document, since rids are unique within a partition).
            So by passing an equality comparer to the document producers they can determine whether they are still "active".
            </summary>
            <returns>
            Returns all document producers whose continuation token you have to return.
            Only during a split will this list contain more than 1 item.
            </returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Query.CosmosCrossPartitionQueryExecutionContext.CurrentItemProducerTree">
            <summary>
            Gets the current document producer tree that should be drained from.
            </summary>
            <returns>The current document producer tree that should be drained from.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Query.CosmosCrossPartitionQueryExecutionContext.PushCurrentItemProducerTree(Microsoft.Azure.Cosmos.Query.ItemProducerTree)">
            <summary>
            Pushes a document producer back to the queue.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Query.CosmosCrossPartitionQueryExecutionContext.PopCurrentItemProducerTree">
            <summary>
            Pops the current document producer tree that should be drained from.
            </summary>
            <returns>The current document producer tree that should be drained from.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Query.CosmosCrossPartitionQueryExecutionContext.Dispose">
            <summary>
            Disposes of the context and implements IDisposable.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Query.CosmosCrossPartitionQueryExecutionContext.Stop">
            <summary>
            Stops the execution context.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Query.CosmosCrossPartitionQueryExecutionContext.MoveNextHelperAsync(Microsoft.Azure.Cosmos.Query.ItemProducerTree,System.Threading.CancellationToken)">
            <summary>
            A helper to move next and set the failure response if one is received
            </summary>
            <param name="itemProducerTree">The item producer tree</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>True if it move next failed. It can fail from an error or hitting the end of the tree</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Query.CosmosCrossPartitionQueryExecutionContext.DrainAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Drains documents from this component. This has the common drain logic for each implementation.
            </summary>
            <param name="maxElements">The maximum number of documents to drain.</param>
            <param name="cancellationToken">The cancellation token to cancel tasks.</param>
            <returns>A task that when awaited on returns a feed response.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Query.CosmosCrossPartitionQueryExecutionContext.InternalDrainAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            The drain async logic for the different implementation 
            </summary>
            <param name="maxElements">The maximum number of documents to drain.</param>
            <param name="token">The cancellation token to cancel tasks.</param>
            <returns>A task that when awaited on returns a feed response.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Query.CosmosCrossPartitionQueryExecutionContext.InitializeAsync(System.String,System.Collections.Generic.IReadOnlyList{Microsoft.Azure.Documents.PartitionKeyRange},System.Int32,Microsoft.Azure.Cosmos.SqlQuerySpec,System.Collections.Generic.Dictionary{System.String,System.String},System.Boolean,System.String,System.Func{Microsoft.Azure.Cosmos.Query.ItemProducerTree,System.Threading.Tasks.Task},System.Threading.CancellationToken)">
            <summary>
            Initializes cross partition query execution context by initializing the necessary document producers.
            </summary>
            <param name="collectionRid">The collection to drain from.</param>
            <param name="partitionKeyRanges">The partitions to target.</param>
            <param name="initialPageSize">The page size to start the document producers off with.</param>
            <param name="querySpecForInit">The query specification for the rewritten query.</param>
            <param name="targetRangeToContinuationMap">Map from partition to it's corresponding continuation token.</param>
            <param name="deferFirstPage">Whether or not we should defer the fetch of the first page from each partition.</param>
            <param name="filter">The filter to inject in the predicate.</param>
            <param name="filterCallback">The callback used to filter each partition.</param>
            <param name="token">The cancellation token.</param>
            <returns>A task to await on.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Query.CosmosCrossPartitionQueryExecutionContext.FindTargetRangeAndExtractContinuationTokens``1(System.Collections.Generic.List{Microsoft.Azure.Documents.PartitionKeyRange},System.Collections.Generic.IEnumerable{System.Tuple{``0,Microsoft.Azure.Documents.Routing.Range{System.String}}},System.Collections.Generic.Dictionary{System.String,``0}@)">
            <summary>
            <para>
            If a query encounters split up resuming using continuation, we need to regenerate the continuation tokens. 
            Specifically, since after split we will have new set of ranges, we need to remove continuation token for the 
            parent partition and introduce continuation token for the child partitions. 
            </para>
            <para>
            This function does that. Also in that process, we also check validity of the input continuation tokens. For example, 
            even after split the boundary ranges of the child partitions should match with the parent partitions. If the Min and Max
            range of a target partition in the continuation token was Min1 and Max1. Then the Min and Max range info for the two 
            corresponding child partitions C1Min, C1Max, C2Min, and C2Max should follow the constrain below:
             PMax = C2Max > C2Min > C1Max > C1Min = PMin.
            </para>
            </summary>
            <param name="partitionKeyRanges">The partition key ranges to extract continuation tokens for.</param>
            <param name="suppliedContinuationTokens">The continuation token that the user supplied.</param>
            <param name="targetRangeToContinuationTokenMap">The output dictionary of partition key range to continuation token.</param>
            <typeparam name="TContinuationToken">The type of continuation token to generate.</typeparam>
            <Remarks>
            The code assumes that merge doesn't happen and 
            </Remarks>
            <returns>The index of the partition whose MinInclusive is equal to the suppliedContinuationTokens</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Query.CosmosCrossPartitionQueryExecutionContext.SetQueryMetrics">
            <summary>
            Since query metrics are being aggregated asynchronously to the feed responses as explained in the member documentation,
            this function allows us to take a snapshot of the query metrics.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Query.CosmosCrossPartitionQueryExecutionContext.TryScheduleFetch(Microsoft.Azure.Cosmos.Query.ItemProducerTree)">
            <summary>
            Tries to schedule a fetch from the document producer tree.
            </summary>
            <param name="itemProducerTree">The document producer tree to schedule a fetch for.</param>
            <returns>Whether or not the fetch was successfully scheduled.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Query.CosmosCrossPartitionQueryExecutionContext.OnItemProducerTreeCompleteFetching(Microsoft.Azure.Cosmos.Query.ItemProducerTree,System.Int32,System.Double,Microsoft.Azure.Cosmos.QueryMetrics,System.Int64,System.Threading.CancellationToken)">
            <summary>
            Function that is given to all the document producers to call on once they are done fetching.
            This is so that the CosmosCrossPartitionQueryExecutionContext can aggregate metadata from them.
            </summary>
            <param name="producer">The document producer that just finished fetching.</param>
            <param name="itemsBuffered">The number of items that the producer just fetched.</param>
            <param name="resourceUnitUsage">The amount of RUs that the producer just consumed.</param>
            <param name="queryMetrics">The query metrics that the producer just got back from the backend.</param>
            <param name="responseLengthBytes">The length of the response the producer just got back in bytes.</param>
            <param name="token">The cancellation token.</param>
            <remarks>
            This function is by nature a bit racy.
            A query might be fully drained but a background task is still fetching documents so this will get called after the context is done.
            </remarks>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Query.CosmosCrossPartitionQueryExecutionContext.GetTrace(System.String)">
            <summary>
            Gets the formatting for a trace.
            </summary>
            <param name="message">The message to format</param>
            <returns>The formatted message ready for a trace.</returns>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.Query.CosmosCrossPartitionQueryExecutionContext.CrossPartitionInitParams">
            <summary>
            All CrossPartitionQueries need this information on top of the parameter for DocumentQueryExecutionContextBase.
            I moved it out into it's own type, so that we don't have to keep passing around all the individual parameters in the factory pattern.
            This also allows us to check the arguments once instead of in each of the constructors.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Query.CosmosCrossPartitionQueryExecutionContext.CrossPartitionInitParams.#ctor(Microsoft.Azure.Cosmos.SqlQuerySpec,System.String,Microsoft.Azure.Cosmos.Query.PartitionedQueryExecutionInfo,System.Collections.Generic.List{Microsoft.Azure.Documents.PartitionKeyRange},System.Int32,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Initializes a new instance of the InitParams struct.
            </summary>
            <param name="sqlQuerySpec">The Sql query spec</param>
            <param name="collectionRid">The collection rid.</param>
            <param name="partitionedQueryExecutionInfo">The partitioned query execution info.</param>
            <param name="partitionKeyRanges">The partition key ranges.</param>
            <param name="initialPageSize">The initial page size.</param>
            <param name="maxConcurrency">The max concurrency</param>
            <param name="maxBufferedItemCount">The max buffered item count</param>
            <param name="maxItemCount">Max item count</param>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.Query.CosmosCrossPartitionQueryExecutionContext.CrossPartitionInitParams.SqlQuerySpec">
            <summary>
            Get the sql query spec
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.Query.CosmosCrossPartitionQueryExecutionContext.CrossPartitionInitParams.CollectionRid">
            <summary>
            Gets the collection rid to drain documents from.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.Query.CosmosCrossPartitionQueryExecutionContext.CrossPartitionInitParams.PartitionedQueryExecutionInfo">
            <summary>
            Gets the serialized version of the PipelinedDocumentQueryExecutionContext.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.Query.CosmosCrossPartitionQueryExecutionContext.CrossPartitionInitParams.PartitionKeyRanges">
            <summary>
            Gets the partition key ranges to fan out to.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.Query.CosmosCrossPartitionQueryExecutionContext.CrossPartitionInitParams.InitialPageSize">
            <summary>
            Gets the initial page size for each document producer.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.Query.CosmosCrossPartitionQueryExecutionContext.CrossPartitionInitParams.MaxConcurrency">
            <summary>
            Gets the max concurrency
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.Query.CosmosCrossPartitionQueryExecutionContext.CrossPartitionInitParams.MaxItemCount">
            <summary>
            Gets the max item count
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.Query.CosmosCrossPartitionQueryExecutionContext.CrossPartitionInitParams.MaxBufferedItemCount">
            <summary>
            Gets the max buffered item count
            </summary>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.Query.CosmosCrossPartitionQueryExecutionContext.ItemProducerTreeComparableTask">
            <summary>
            Comparable task for the ComparableTaskScheduler.
            This is specifically for tasks that fetch from partitions in a document producer tree.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Query.CosmosCrossPartitionQueryExecutionContext.ItemProducerTreeComparableTask.producer">
            <summary>
            The producer to fetch from.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Query.CosmosCrossPartitionQueryExecutionContext.ItemProducerTreeComparableTask.#ctor(Microsoft.Azure.Cosmos.Query.ItemProducerTree,System.Func{Microsoft.Azure.Cosmos.Query.ItemProducerTree,System.Int32})">
            <summary>
            Initializes a new instance of the ItemProducerTreeComparableTask class.
            </summary>
            <param name="producer">The producer to fetch from.</param>
            <param name="taskPriorityFunction">The callback to determine the fetch priority of the document producer.</param>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Query.CosmosCrossPartitionQueryExecutionContext.ItemProducerTreeComparableTask.StartAsync(System.Threading.CancellationToken)">
            <summary>
            Entry point for the function to start fetching.
            </summary>
            <param name="token">The cancellation token.</param>
            <returns>A task to await on.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Query.CosmosCrossPartitionQueryExecutionContext.ItemProducerTreeComparableTask.Equals(Microsoft.Azure.Cosmos.IComparableTask)">
            <summary>
            Determines whether this class is equal to another task.
            </summary>
            <param name="other">The other task</param>
            <returns>Whether this class is equal to another task.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Query.CosmosCrossPartitionQueryExecutionContext.ItemProducerTreeComparableTask.GetHashCode">
            <summary>
            Gets the hash code for this task.
            </summary>
            <returns>The hash code for this task.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Query.CosmosCrossPartitionQueryExecutionContext.ItemProducerTreeComparableTask.Equals(Microsoft.Azure.Cosmos.Query.CosmosCrossPartitionQueryExecutionContext.ItemProducerTreeComparableTask)">
            <summary>
            Internal implementation of equality.
            </summary>
            <param name="other">The other comparable task to check for equality.</param>
            <returns>Whether or not the comparable tasks are equal.</returns>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.Query.CosmosOrderByItemQueryExecutionContext">
            <summary>
            CosmosOrderByItemQueryExecutionContext is a concrete implementation for CrossPartitionQueryExecutionContext.
            This class is responsible for draining cross partition queries that have order by conditions.
            The way order by queries work is that they are doing a k-way merge of sorted lists from each partition with an added condition.
            The added condition is that if 2 or more top documents from different partitions are equivalent then we drain from the left most partition first.
            This way we can generate a single continuation token for all n partitions.
            This class is able to stop and resume execution by generating continuation tokens and reconstructing an execution context from said token.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Query.CosmosOrderByItemQueryExecutionContext.FormatPlaceHolder">
            <summary>
            Order by queries are rewritten to allow us to inject a filter.
            This placeholder is so that we can just string replace it with the filter we want without having to understand the structure of the query.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Query.CosmosOrderByItemQueryExecutionContext.True">
            <summary>
            If query does not need a filter then we replace the FormatPlaceHolder with "true", since
            "SELECT * FROM c WHERE blah and true" is the same as "SELECT * FROM c where blah"
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Query.CosmosOrderByItemQueryExecutionContext.FetchPriorityFunction">
            <summary>
            Function to determine the priority of fetches.
            Basically we are fetching from the partition with the least number of buffered documents first.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Query.CosmosOrderByItemQueryExecutionContext.skipCount">
            <summary>
            Skip count used for JOIN queries.
            You can read up more about this in the documentation for the continuation token.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Query.CosmosOrderByItemQueryExecutionContext.previousRid">
            <summary>
            We need to keep track of the previousRid, since order by queries don't drain full pages.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Query.CosmosOrderByItemQueryExecutionContext.#ctor(Microsoft.Azure.Cosmos.Query.CosmosQueryContext,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},Microsoft.Azure.Cosmos.Query.ParallelQuery.OrderByConsumeComparer)">
            <summary>
            Initializes a new instance of the CosmosOrderByItemQueryExecutionContext class.
            </summary>
            <param name="initPararms">The params used to construct the base class.</param>
            For cross partition order by queries a query like "SELECT c.id, c.field_0 ORDER BY r.field_7 gets rewritten as:
            <![CDATA[
            SELECT r._rid, [{"item": r.field_7}] AS orderByItems, {"id": r.id, "field_0": r.field_0} AS payload
            FROM r
            WHERE({ document db - formattable order by query - filter})
            ORDER BY r.field_7]]>
            This is needed because we need to add additional filters to the query when we resume from a continuation,
            and it lets us easily parse out the _rid orderByItems, and payload without parsing the entire document (and having to remember the order by field).
            <param name="maxConcurrency">The max concurrency</param>
            <param name="maxBufferedItemCount">The max buffered item count</param>
            <param name="maxItemCount">Max item count</param>
            <param name="consumeComparer">Comparer used to internally compare documents from different sorted partitions.</param>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.Query.CosmosOrderByItemQueryExecutionContext.ContinuationToken">
            <summary>
            Gets the continuation token for an order by query.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Query.CosmosOrderByItemQueryExecutionContext.CreateAsync(Microsoft.Azure.Cosmos.Query.CosmosQueryContext,Microsoft.Azure.Cosmos.Query.CosmosCrossPartitionQueryExecutionContext.CrossPartitionInitParams,System.String,System.Threading.CancellationToken)">
            <summary>
            Creates an CosmosOrderByItemQueryExecutionContext
            </summary>
            <param name="queryContext">The parameters for the base class constructor.</param>
            <param name="initParams">The parameters to initialize the base class.</param>
            <param name="requestContinuationToken">The request continuation.</param>
            <param name="token">The cancellation token.</param>
            <returns>A task to await on, which in turn creates an CosmosOrderByItemQueryExecutionContext.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Query.CosmosOrderByItemQueryExecutionContext.InternalDrainAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Drains a page of documents from this context.
            </summary>
            <param name="maxElements">The maximum number of elements.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A task that when awaited on return a page of documents.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Query.CosmosOrderByItemQueryExecutionContext.ShouldIncrementSkipCount(Microsoft.Azure.Cosmos.Query.ItemProducer)">
            <summary>
            Gets whether or not we should increment the skip count based on the rid of the document.
            </summary>
            <param name="currentItemProducer">The current document producer.</param>
            <returns>Whether or not we should increment the skip count.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Query.CosmosOrderByItemQueryExecutionContext.InitializeAsync(Microsoft.Azure.Cosmos.SqlQuerySpec,System.String,System.String,System.Collections.Generic.List{Microsoft.Azure.Documents.PartitionKeyRange},System.Int32,Microsoft.Azure.Cosmos.Query.SortOrder[],System.String[],System.Threading.CancellationToken)">
            <summary>
            Initializes this execution context.
            </summary>
            <param name="sqlQuerySpec">sql query spec.</param>
            <param name="requestContinuation">The continuation token to resume from (or null if none).</param>
            <param name="collectionRid">The collection rid.</param>
            <param name="partitionKeyRanges">The partition key ranges to drain from.</param>
            <param name="initialPageSize">The initial page size.</param>
            <param name="sortOrders">The sort orders.</param>
            <param name="orderByExpressions">The order by expressions.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A task to await on.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Query.CosmosOrderByItemQueryExecutionContext.ValidateAndExtractContinuationToken(System.String,Microsoft.Azure.Cosmos.Query.SortOrder[],System.String[])">
            <summary>
            Validates and extracts out the order by continuation tokens 
            </summary>
            <param name="requestContinuation">The string continuation token.</param>
            <param name="sortOrders">The sort orders.</param>
            <param name="orderByExpressions">The order by expressions.</param>
            <returns>The continuation tokens.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Query.CosmosOrderByItemQueryExecutionContext.FilterAsync(Microsoft.Azure.Cosmos.Query.ItemProducerTree,Microsoft.Azure.Cosmos.Query.SortOrder[],Microsoft.Azure.Cosmos.Query.OrderByContinuationToken,System.Threading.CancellationToken)">
            <summary>
            When resuming an order by query we need to filter the document producers.
            </summary>
            <param name="producer">The producer to filter down.</param>
            <param name="sortOrders">The sort orders.</param>
            <param name="continuationToken">The continuation token.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A task to await on.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Query.CosmosOrderByItemQueryExecutionContext.GetPartitionKeyRangesInitializationInfo(Microsoft.Azure.Cosmos.Query.OrderByContinuationToken[],System.Collections.Generic.List{Microsoft.Azure.Documents.PartitionKeyRange},Microsoft.Azure.Cosmos.Query.SortOrder[],System.String[],System.Collections.Generic.Dictionary{System.String,Microsoft.Azure.Cosmos.Query.OrderByContinuationToken}@)">
            <summary>
            Gets the filters for every partition.
            </summary>
            <param name="suppliedContinuationTokens">The supplied continuation token.</param>
            <param name="partitionKeyRanges">The partition key ranges.</param>
            <param name="sortOrders">The sort orders.</param>
            <param name="orderByExpressions">The order by expressions.</param>
            <param name="targetRangeToContinuationTokenMap">The dictionary of target ranges to continuation token map.</param>
            <returns>The filters for every partition.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Query.CosmosOrderByItemQueryExecutionContext.GetFormattedFilters(System.String[],Microsoft.Azure.Cosmos.Query.OrderByContinuationToken[],Microsoft.Azure.Cosmos.Query.SortOrder[])">
            <summary>
            Gets the formatted filters for every partition.
            </summary>
            <param name="expressions">The filter expressions.</param>
            <param name="continuationTokens">The continuation token.</param>
            <param name="sortOrders">The sort orders.</param>
            <returns>The formatted filters for every partition.</returns>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.Query.CosmosOrderByItemQueryExecutionContext.FormattedFilterInfo">
            <summary>
            Struct to hold all the filters for every partition.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Query.CosmosOrderByItemQueryExecutionContext.FormattedFilterInfo.FiltersForTargetRange">
            <summary>
            Filters for current partition.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Query.CosmosOrderByItemQueryExecutionContext.FormattedFilterInfo.FilterForRangesLeftOfTargetRanges">
            <summary>
            Filters for partitions left of the current partition.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Query.CosmosOrderByItemQueryExecutionContext.FormattedFilterInfo.FilterForRangesRightOfTargetRanges">
            <summary>
            Filters for partitions right of the current partition.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Query.CosmosOrderByItemQueryExecutionContext.FormattedFilterInfo.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the FormattedFilterInfo struct.
            </summary>
            <param name="leftFilter">The filters for the partitions left of the current partition.</param>
            <param name="targetFilter">The filters for the current partition.</param>
            <param name="rightFilters">The filters for the partitions right of the current partition.</param>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.Query.CosmosOrderByItemQueryExecutionContext.OrderByEqualityComparer">
            <summary>
            Equality comparer used to determine if a document producer needs it's continuation token returned.
            Basically just says that the continuation token can be flushed once you stop seeing duplicates.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Query.CosmosOrderByItemQueryExecutionContext.OrderByEqualityComparer.orderByConsumeComparer">
            <summary>
            The order by comparer.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Query.CosmosOrderByItemQueryExecutionContext.OrderByEqualityComparer.#ctor(Microsoft.Azure.Cosmos.Query.ParallelQuery.OrderByConsumeComparer)">
            <summary>
            Initializes a new instance of the OrderByEqualityComparer class.
            </summary>
            <param name="orderByConsumeComparer">The order by consume comparer.</param>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Query.CosmosOrderByItemQueryExecutionContext.OrderByEqualityComparer.Equals(Microsoft.Azure.Cosmos.CosmosElements.CosmosElement,Microsoft.Azure.Cosmos.CosmosElements.CosmosElement)">
            <summary>
            Gets whether two OrderByQueryResult instances are equal.
            </summary>
            <param name="x">The first.</param>
            <param name="y">The second.</param>
            <returns>Whether two OrderByQueryResult instances are equal.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Query.CosmosOrderByItemQueryExecutionContext.OrderByEqualityComparer.GetHashCode(Microsoft.Azure.Cosmos.CosmosElements.CosmosElement)">
            <summary>
            Gets the hash code for object.
            </summary>
            <param name="obj">The object to hash.</param>
            <returns>The hash code for the OrderByQueryResult object.</returns>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.Query.CosmosParallelItemQueryExecutionContext">
            <summary>
            CosmosParallelItemQueryExecutionContext is a concrete implementation for CrossPartitionQueryExecutionContext.
            This class is responsible for draining cross partition queries that do not have order by conditions.
            The way parallel queries work is that it drains from the left most partition first.
            This class handles draining in the correct order and can also stop and resume the query 
            by generating a continuation token and resuming from said continuation token.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Query.CosmosParallelItemQueryExecutionContext.MoveNextComparer">
            <summary>
            The comparer used to determine which document to serve next.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Query.CosmosParallelItemQueryExecutionContext.FetchPriorityFunction">
            <summary>
            The function to determine which partition to fetch from first.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Query.CosmosParallelItemQueryExecutionContext.EqualityComparer">
            <summary>
            The comparer used to determine, which continuation tokens should be returned to the user.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Query.CosmosParallelItemQueryExecutionContext.#ctor(Microsoft.Azure.Cosmos.Query.CosmosQueryContext,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Initializes a new instance of the CosmosParallelItemQueryExecutionContext class.
            </summary>
            <param name="queryContext">The parameters for constructing the base class.</param>
            <param name="maxConcurrency">The max concurrency</param>
            <param name="maxBufferedItemCount">The max buffered item count</param>
            <param name="maxItemCount">Max item count</param>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.Query.CosmosParallelItemQueryExecutionContext.ContinuationToken">
            <summary>
            For parallel queries the continuation token semantically holds two pieces of information:
            1) What physical partition did the user read up to
            2) How far into said partition did they read up to
            And since the client consumes queries strictly in a left to right order we can partition the documents:
            1) Documents left of the continuation token have been drained
            2) Documents to the right of the continuation token still need to be served.
            This is useful since we can have a single continuation token for all partitions.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Query.CosmosParallelItemQueryExecutionContext.CreateAsync(Microsoft.Azure.Cosmos.Query.CosmosQueryContext,Microsoft.Azure.Cosmos.Query.CosmosCrossPartitionQueryExecutionContext.CrossPartitionInitParams,System.String,System.Threading.CancellationToken)">
            <summary>
            Creates a CosmosParallelItemQueryExecutionContext
            </summary>
            <param name="queryContext">The params the construct the base class.</param>
            <param name="initParams">The params to initialize the cross partition context.</param>
            <param name="requestContinuationToken">The request continuation.</param>
            <param name="token">The cancellation token.</param>
            <returns>A task to await on, which in turn returns a CosmosParallelItemQueryExecutionContext.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Query.CosmosParallelItemQueryExecutionContext.InternalDrainAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Drains documents from this execution context.
            </summary>
            <param name="maxElements">The maximum number of documents to drains.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A task that when awaited on returns a DoucmentFeedResponse of results.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Query.CosmosParallelItemQueryExecutionContext.InitializeAsync(Microsoft.Azure.Cosmos.SqlQuerySpec,System.String,System.Collections.Generic.List{Microsoft.Azure.Documents.PartitionKeyRange},System.Int32,System.String,System.Threading.CancellationToken)">
            <summary>
            Initialize the execution context.
            </summary>
            <param name="sqlQuerySpec">SQL query spec.</param>
            <param name="collectionRid">The collection rid.</param>
            <param name="partitionKeyRanges">The partition key ranges to drain documents from.</param>
            <param name="initialPageSize">The initial page size.</param>
            <param name="requestContinuation">The continuation token to resume from.</param>
            <param name="token">The cancellation token.</param>
            <returns>A task to await on.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Query.CosmosParallelItemQueryExecutionContext.GetPartitionKeyRangesForContinuation(Microsoft.Azure.Cosmos.Query.CompositeContinuationToken[],System.Collections.Generic.List{Microsoft.Azure.Documents.PartitionKeyRange},System.Collections.Generic.Dictionary{System.String,Microsoft.Azure.Cosmos.Query.CompositeContinuationToken}@)">
            <summary>
            Given a continuation token and a list of partitionKeyRanges this function will return a list of partition key ranges you should resume with.
            Note that the output list is just a right hand slice of the input list, since we know that for any continuation of a parallel query it is just
            resuming from the partition that the query left off that.
            </summary>
            <param name="suppliedCompositeContinuationTokens">The continuation tokens that the user has supplied.</param>
            <param name="partitionKeyRanges">The partition key ranges.</param>
            <param name="targetRangeToContinuationMap">The output dictionary of partition key ranges to continuation token.</param>
            <returns>The subset of partition to actually target.</returns>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.Query.CosmosParallelItemQueryExecutionContext.ParallelEqualityComparer">
            <summary>
            Comparer used to determine if we should return the continuation token to the user
            </summary>
            <remarks>This basically just says that the two object are never equals, so that we don't return a continuation for a partition we have started draining.</remarks>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Query.CosmosParallelItemQueryExecutionContext.ParallelEqualityComparer.Equals(Microsoft.Azure.Cosmos.CosmosElements.CosmosElement,Microsoft.Azure.Cosmos.CosmosElements.CosmosElement)">
            <summary>
            Returns whether two parallel query items are equal.
            </summary>
            <param name="x">The first item.</param>
            <param name="y">The second item.</param>
            <returns>Whether two parallel query items are equal.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Query.CosmosParallelItemQueryExecutionContext.ParallelEqualityComparer.GetHashCode(Microsoft.Azure.Cosmos.CosmosElements.CosmosElement)">
            <summary>
            Gets the hash code of an object.
            </summary>
            <param name="obj">The object to hash.</param>
            <returns>The hash code for the object.</returns>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.Query.CosmosQueryExecutionContext">
            <summary>
            Interface for all document query execution contexts
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.Query.CosmosQueryExecutionContext.IsDone">
            <summary>
            Gets a value indicating whether or not the context is done serving documents.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Query.CosmosQueryExecutionContext.ExecuteNextAsync(System.Threading.CancellationToken)">
            <summary>
            Executes the context to feed the next page of results.
            </summary>
            <param name="token">The cancellation token.</param>
            <returns>A task to await on, which in return provides a DoucmentFeedResponse of documents.</returns>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.Query.CosmosQueryExecutionContextFactory">
            <summary>
            Factory class for creating the appropriate DocumentQueryExecutionContext for the provided type of query.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Query.CosmosQueryExecutionContextFactory.responseMessageException">
            <summary>
            Store the failed response
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Query.CosmosQueryExecutionContextFactory.exception">
            <summary>
            Store any exception thrown
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Query.CosmosQueryExecutionContextFactory.GetTargetPartitionKeyRangesAsync(Microsoft.Azure.Cosmos.Query.CosmosQueryClient,System.String,Microsoft.Azure.Cosmos.Query.PartitionedQueryExecutionInfo,Microsoft.Azure.Cosmos.Query.ContainerQueryProperties,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Gets the list of partition key ranges. 
            1. Check partition key range id
            2. Check Partition key
            3. Check the effective partition key
            4. Get the range from the PartitionedQueryExecutionInfo
            </summary>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.Query.PipelinedDocumentQueryExecutionContext">
            <summary>
            You can imagine the pipeline to be a directed acyclic graph where documents flow from multiple sources (the partitions) to a single sink (the client who calls on ExecuteNextAsync()).
            The pipeline will consist of individual implementations of <see cref="T:Microsoft.Azure.Cosmos.Query.CosmosQueryExecutionContext"/>. 
            Every member of the pipeline has a source of documents (another member of the pipeline or an actual partition),
            a method of draining documents (DrainAsync()) from said source, and a flag for whether that member of the pipeline is completely drained.
            <para>
            The following is a diagram of the pipeline:
                +--------------------------+    +--------------------------+    +--------------------------+
                |                          |    |                          |    |                          |
                | Document Producer Tree 0 |    | Document Producer Tree 1 |    | Document Producer Tree N |
                |                          |    |                          |    |                          |
                +--------------------------+    +--------------------------+    +--------------------------+
                              |                               |                               |           
                               \                              |                              /
                                \                             |                             /
                                 +---------------------------------------------------------+
                                 |                                                         |
                                 |   Parallel / Order By Document Query Execution Context  |
                                 |                                                         |
                                 +---------------------------------------------------------+
                                                              |
                                                              |
                                                              |
                                    +---------------------------------------------------+
                                    |                                                   |
                                    |    Aggregate Document Query Execution Component   |
                                    |                                                   |
                                    +---------------------------------------------------+
                                                              |
                                                              |
                                                              |
                                        +------------------------------------------+
                                        |                                          |
                                        |  Top Document Query Execution Component  |
                                        |                                          |
                                        +------------------------------------------+
                                                              |
                                                              |
                                                              |
                                               +-----------------------------+
                                               |                             |
                                               |            Client           |
                                               |                             |
                                               +-----------------------------+
            </para>    
            <para>
            This class is responsible for constructing the pipelined described.
            Note that the pipeline will always have one of <see cref="T:Microsoft.Azure.Cosmos.Query.CosmosOrderByItemQueryExecutionContext"/> or <see cref="T:Microsoft.Azure.Cosmos.Query.CosmosParallelItemQueryExecutionContext"/>,
            which both derive from <see cref="T:Microsoft.Azure.Cosmos.Query.CosmosCrossPartitionQueryExecutionContext"/> as these are top level execution contexts.
            These top level execution contexts have <see cref="T:Microsoft.Azure.Cosmos.Query.ItemProducerTree"/> that are responsible for hitting the backend
            and will optionally feed into <see cref="T:Microsoft.Azure.Cosmos.Query.ExecutionComponent.AggregateDocumentQueryExecutionComponent"/> and <see cref="T:Microsoft.Azure.Cosmos.Query.ExecutionComponent.TakeDocumentQueryExecutionComponent"/>.
            How these components are picked is based on <see cref="T:Microsoft.Azure.Cosmos.Query.PartitionedQueryExecutionInfo"/>,
            which is a serialized form of this class and serves as a blueprint for construction.
            </para>
            <para>
            Once the pipeline is constructed the client(sink of the graph) calls ExecuteNextAsync() which calls on DrainAsync(),
            which by definition grabs documents from the parent component of the pipeline.
            This bubbles down until you reach a component that has a DocumentProducer that fetches a document from the backend.
            </para>
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Query.PipelinedDocumentQueryExecutionContext.component">
            <summary>
            The root level component that all calls will be forwarded to.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Query.PipelinedDocumentQueryExecutionContext.actualPageSize">
            <summary>
            The actual page size to drain.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Query.PipelinedDocumentQueryExecutionContext.#ctor(Microsoft.Azure.Cosmos.Query.ExecutionComponent.IDocumentQueryExecutionComponent,System.Int32)">
            <summary>
            Initializes a new instance of the PipelinedDocumentQueryExecutionContext class.
            </summary>
            <param name="component">The root level component that all calls will be forwarded to.</param>
            <param name="actualPageSize">The actual page size to drain.</param>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.Query.PipelinedDocumentQueryExecutionContext.IsDone">
            <summary>
            Gets a value indicating whether this execution context is done draining documents.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Query.PipelinedDocumentQueryExecutionContext.CreateAsync(Microsoft.Azure.Cosmos.Query.CosmosQueryContext,Microsoft.Azure.Cosmos.Query.CosmosCrossPartitionQueryExecutionContext.CrossPartitionInitParams,System.String,System.Threading.CancellationToken)">
            <summary>
            Creates a CosmosPipelinedItemQueryExecutionContext.
            </summary>
            <param name="queryContext">The parameters for constructing the base class.</param>
            <param name="initParams">The initial parameters</param>
            <param name="requestContinuationToken">The request continuation.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A task to await on, which in turn returns a CosmosPipelinedItemQueryExecutionContext.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Query.PipelinedDocumentQueryExecutionContext.Dispose">
            <summary>
            Disposes of this context.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Query.PipelinedDocumentQueryExecutionContext.ExecuteNextFeedResponseAsync(System.Threading.CancellationToken)">
            <summary>
            Gets the next page of results from this context.
            </summary>
            <param name="token">The cancellation token.</param>
            <returns>A task to await on that in turn returns a DoucmentFeedResponse of results.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Query.PipelinedDocumentQueryExecutionContext.ExecuteNextAsync(System.Threading.CancellationToken)">
            <summary>
            Gets the next page of results from this context.
            </summary>
            <param name="token">The cancellation token.</param>
            <returns>A task to await on that in turn returns a DoucmentFeedResponse of results.</returns>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.Query.ItemComparer">
            <summary>
            Utility class used to compare all items that we get back from a query.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Query.ItemComparer.Instance">
            <summary>
            Singleton item comparer.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Query.ItemComparer.MinValue">
            <summary>
            The minimum value out of all possible items.
            </summary>
            <remarks>Note that this isn't a real item.</remarks>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Query.ItemComparer.MaxValue">
            <summary>
            The maximum value out of all possible items.
            </summary>
            <remarks>Note that this isn't a real item.</remarks>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Query.ItemComparer.Undefined">
            <summary>
            Undefined is represented by null in the CosmosElement library.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Query.ItemComparer.Compare(Microsoft.Azure.Cosmos.CosmosElements.CosmosElement,Microsoft.Azure.Cosmos.CosmosElements.CosmosElement)">
            <summary>
            Compares to objects and returns their partial sort relationship.
            </summary>
            <param name="element1">The first element to compare.</param>
            <param name="element2">The second element to compare.</param>
            <returns>
            Less than zero if obj1 comes before obj2 in the sort order.
            Zero if obj1 and obj2 are interchangeable in the sort order.
            Greater than zero if obj2 comes before obj1 in the sort order.
            </returns>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.Query.ItemComparer.MinValueItem">
            <summary>
            Represents the minimum value item.
            </summary>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.Query.ItemComparer.MaxValueItem">
            <summary>
            Represent the maximum value item.
            </summary>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.Query.ItemProducer">
            <summary>
            The ItemProducer is the base unit of buffering and iterating through documents.
            Note that a document producer will let you iterate through documents within the pages of a partition and maintain any state.
            In pseudo code this works out to:
            for page in partition:
                for document in page:
                    yield document
                update_state()
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Query.ItemProducer.bufferedPages">
            <summary>
            The buffered pages that is thread safe, since the producer and consumer of the queue can be on different threads.
            We buffer TryMonad of DoucmentFeedResponse of T, since we want to buffer exceptions,
            so that the exception is thrown on the consumer thread (instead of the background producer thread), thus observing the exception.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Query.ItemProducer.fetchSemaphore">
            <summary>
            The document producer can only be fetching one page at a time.
            Since the fetch function can be called by the execution contexts or the scheduler, we use this semaphore to keep the fetch function thread safe.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Query.ItemProducer.produceAsyncCompleteCallback">
            <summary>
            Once a document producer tree finishes fetching document they should call on this function so that the higher level execution context can aggregate the number of documents fetched, the request charge, and the query metrics.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Query.ItemProducer.fetchSchedulingMetrics">
            <summary>
            Keeps track of when a fetch happens and ends to calculate scheduling metrics.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Query.ItemProducer.fetchExecutionRangeAccumulator">
            <summary>
            Keeps track of fetch ranges.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Query.ItemProducer.equalityComparer">
            <summary>
            Equality comparer to determine if you have come across a distinct document according to the sort order.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Query.ItemProducer.pageSize">
            <summary>
            Over the duration of the life time of a document producer the page size will change, since we have an adaptive page size.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Query.ItemProducer.currentContinuationToken">
            <summary>
            The current continuation token that the user has read from the document producer tree.
            This is used for determining whether there are more results.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Query.ItemProducer.CurrentPage">
            <summary>
            The current page that is being enumerated.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Query.ItemProducer.itemsLeftInCurrentPage">
            <summary>
            The number of items left in the current page, which is used by parallel queries since they need to drain full pages.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Query.ItemProducer.bufferedItemCount">
            <summary>
            The number of items currently buffered, which is used by the scheduler incase you want to implement give less full document producers a higher priority.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Query.ItemProducer.hasStartedFetching">
            <summary>
            Whether or not the document producer has started fetching.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Query.ItemProducer.hitException">
            <summary>
            Need this flag so that the document producer stops buffering more results after a fatal exception.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Query.ItemProducer.#ctor(Microsoft.Azure.Cosmos.Query.CosmosQueryContext,Microsoft.Azure.Cosmos.SqlQuerySpec,Microsoft.Azure.Documents.PartitionKeyRange,Microsoft.Azure.Cosmos.Query.ItemProducer.ProduceAsyncCompleteDelegate,System.Collections.Generic.IEqualityComparer{Microsoft.Azure.Cosmos.CosmosElements.CosmosElement},System.Int64,System.String)">
            <summary>
            Initializes a new instance of the ItemProducer class.
            </summary>
            <param name="queryContext">request context</param>
            <param name="querySpecForInit">query spec for initialization</param>
            <param name="partitionKeyRange">The partition key range.</param>
            <param name="produceAsyncCompleteCallback">The callback to call once you are done fetching.</param>
            <param name="equalityComparer">The comparer to use to determine whether the producer has seen a new document.</param>
            <param name="initialPageSize">The initial page size.</param>
            <param name="initialContinuationToken">The initial continuation token.</param>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.Query.ItemProducer.PartitionKeyRange">
            <summary>
            Gets the <see cref="P:Microsoft.Azure.Cosmos.Query.ItemProducer.PartitionKeyRange"/> for the partition that this document producer is fetching from.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.Query.ItemProducer.Filter">
            <summary>
            Gets or sets the filter predicate for the document producer that is used by order by execution context.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.Query.ItemProducer.PreviousContinuationToken">
            <summary>
            Gets the previous continuation token.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.Query.ItemProducer.BackendContinuationToken">
            <summary>
            Gets the backend continuation token.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.Query.ItemProducer.IsActive">
            <summary>
            Gets a value indicating whether the continuation token for this producer needs to be given back as part of the composite continuation token.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.Query.ItemProducer.IsAtBeginningOfPage">
            <summary>
            Gets a value indicating whether this producer is at the beginning of the page.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.Query.ItemProducer.HasMoreResults">
            <summary>
            Gets a value indicating whether this producer has more results.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.Query.ItemProducer.HasMoreBackendResults">
            <summary>
            Gets a value indicating whether this producer has more backend results.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.Query.ItemProducer.ItemsLeftInCurrentPage">
            <summary>
            Gets how many items are left in the current page.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.Query.ItemProducer.BufferedItemCount">
            <summary>
            Gets how many documents are buffered in this producer.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.Query.ItemProducer.PageSize">
            <summary>
            Gets or sets the page size of this producer.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.Query.ItemProducer.ActivityId">
            <summary>
            Gets the activity for the last request made by this document producer.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.Query.ItemProducer.Current">
            <summary>
            Gets the current document in this producer.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Query.ItemProducer.IsSuccessResponse">
            <summary>
            A static object representing that the move next operation succeeded, and was able to load the next page
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Query.ItemProducer.IsDoneResponse">
            <summary>
            A static object representing that there is no more pages to load. 
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Query.ItemProducer.MoveNextAsync(System.Threading.CancellationToken)">
            <summary>
            Moves to the next document in the producer.
            </summary>
            <param name="token">The cancellation token.</param>
            <returns>Whether or not we successfully moved to the next document.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Query.ItemProducer.BufferMoreIfEmptyAsync(System.Threading.CancellationToken)">
            <summary>
            Buffers more documents if the producer is empty.
            </summary>
            <param name="token">The cancellation token.</param>
            <returns>A task to await on.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Query.ItemProducer.BufferMoreDocumentsAsync(System.Threading.CancellationToken)">
            <summary>
            Buffers more documents in the producer.
            </summary>
            <param name="token">The cancellation token.</param>
            <returns>A task to await on.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Query.ItemProducer.MoveNextAsyncImplementationAsync(System.Threading.CancellationToken)">
            <summary>
            Implementation of move next async.
            After this function is called the wrapper function determines if a distinct document has been read and updates the 'IsActive' flag.
            </summary>
            <param name="token">The cancellation token.</param>
            <returns>Whether or not we successfully moved to the next document in the producer.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Query.ItemProducer.MoveNextDocumentWithinCurrentPage">
            <summary>
            Tries to moved to the next document within the current page that we are reading from.
            </summary>
            <returns>Whether the operation was successful.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Query.ItemProducer.TryMoveNextPageAsync(System.Threading.CancellationToken)">
            <summary>
            Tries to the move to the next page in the document producer.
            </summary>
            <param name="token">The cancellation token.</param>
            <returns>Whether the operation was successful.</returns>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.Query.ItemProducerTree">
            <summary>
            This class is responsible for fetching documents from a partition and all it's descendants, which is modeled as a tree of document producers.
            The root node is responsible for buffering documents from the root partition and the children recursively buffer documents for their corresponding partitions.
            The tree itself allows a user to iterate through it's documents using a comparator and Current / Move Next Async functions.
            Note that if a user wants to determine the current document it will take the max of it's buffered documents and the recursive max of it's children.
            Also note that if there are no buffered documents for any node in the recursive evaluation, then those nodes will go for a fetch.
            Finally note that due to the tree structure of this class it is inherently split proof.
            If any leaf node in the tree encounters a split exception it will spawn child document producer trees (any many as needed, so multiple splits is handled) and continue on as if the split never happened.
            This code does not handle merges, but we will cross that bridge when we have to (I am currently thinking about a linked list where the nodes represent document producers and you can merge adjacent nodes).
            As a implementation detail the documents are buffered and logically enumerated as a nested loop. The following is the pseudo code:
            for partition in document_producer_tree:
                for page in partition:
                    for document in page:
                        yield document.
            And the way this is done is by buffering pages and updating the state of the ItemProducerTree whenever a user crosses a page boundary.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Query.ItemProducerTree.children">
            <summary>
            The child partitions of this node in the tree that are added after a split.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Query.ItemProducerTree.createItemProducerTreeCallback">
            <summary>
            Callback to create child document producer trees once a split happens.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Query.ItemProducerTree.deferFirstPage">
            <summary>
            Whether or not to defer fetching the first page from all the partitions.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Query.ItemProducerTree.collectionRid">
            <summary>
            The collection rid to drain from. 
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Query.ItemProducerTree.executeWithSplitProofingSemaphore">
            <summary>
            Semaphore to ensure mutual exclusion during fetching from a tree.
            This is to ensure that there is no race conditions during splits.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Query.ItemProducerTree.#ctor(Microsoft.Azure.Cosmos.Query.CosmosQueryContext,Microsoft.Azure.Cosmos.SqlQuerySpec,Microsoft.Azure.Documents.PartitionKeyRange,Microsoft.Azure.Cosmos.Query.ItemProducerTree.ProduceAsyncCompleteDelegate,System.Collections.Generic.IComparer{Microsoft.Azure.Cosmos.Query.ItemProducerTree},System.Collections.Generic.IEqualityComparer{Microsoft.Azure.Cosmos.CosmosElements.CosmosElement},System.Boolean,System.String,System.Int64,System.String)">
            <summary>
            Initializes a new instance of the ItemProducerTree class.
            </summary>
            <param name="queryContext">query context.</param>
            <param name="querySpecForInit">query spec init.</param>
            <param name="partitionKeyRange">The partition key range.</param>
            <param name="produceAsyncCompleteCallback">Callback to invoke once a fetch finishes.</param>
            <param name="itemProducerTreeComparer">Comparer to determine, which tree to produce from.</param>
            <param name="equalityComparer">Comparer to see if we need to return the continuation token for a partition.</param>
            <param name="deferFirstPage">Whether or not to defer fetching the first page.</param>
            <param name="collectionRid">The collection to drain from.</param>
            <param name="initialPageSize">The initial page size.</param>
            <param name="initialContinuationToken">The initial continuation token.</param>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.Query.ItemProducerTree.Root">
            <summary>
            Gets the root document from the tree.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.Query.ItemProducerTree.PartitionKeyRange">
            <summary>
            Gets the partition key range from the current document producer tree.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.Query.ItemProducerTree.Filter">
            <summary>
            Gets or sets the filter for the current document producer tree.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.Query.ItemProducerTree.CurrentItemProducerTree">
            <summary>
            Gets the current (highest priority) document producer tree from all subtrees.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.Query.ItemProducerTree.IsAtBeginningOfPage">
            <summary>
            Gets a value indicating whether the document producer tree is at the beginning of the page for the current document producer.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.Query.ItemProducerTree.HasMoreResults">
            <summary>
            Gets a value indicating whether the document producer tree has more results.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.Query.ItemProducerTree.HasMoreBackendResults">
            <summary>
            Gets a value indicating whether the document producer tree has more backend results.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.Query.ItemProducerTree.ItemsLeftInCurrentPage">
            <summary>
            Gets whether there are items left in the current page of the document producer tree.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.Query.ItemProducerTree.BufferedItemCount">
            <summary>
            Gets the buffered item count in the current document producer tree.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.Query.ItemProducerTree.IsActive">
            <summary>
            Gets a value indicating whether the document producer tree is active.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.Query.ItemProducerTree.PageSize">
            <summary>
            Gets or sets the page size for this document producer tree.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.Query.ItemProducerTree.ActivityId">
            <summary>
            Gets the activity id from the current document producer tree.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.Query.ItemProducerTree.Current">
            <summary>
            Gets the current item from the document producer tree.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.Query.ItemProducerTree.HasSplit">
            <summary>
            Gets a value indicating whether the document producer tree has split.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Query.ItemProducerTree.MoveNextAsync(System.Threading.CancellationToken)">
            <summary>
            Moves to the next item in the document producer tree.
            </summary>
            <param name="token">The cancellation token.</param>
            <returns>A task to await on that returns whether we successfully moved next.</returns>
            <remarks>This function is split proofed.</remarks>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Query.ItemProducerTree.MoveNextIfNotSplitAsync(System.Threading.CancellationToken)">
            <summary>
            Moves next only if the producer has not split.
            This is used to avoid calling move next twice during splits.
            </summary>
            <param name="token">The cancellation token.</param>
            <returns>A task to await on which in turn returns whether or not we moved next.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Query.ItemProducerTree.BufferMoreDocumentsAsync(System.Threading.CancellationToken)">
            <summary>
            Buffers more documents in a split proof manner.
            </summary>
            <param name="token">The cancellation token.</param>
            <returns>A task to await on.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Query.ItemProducerTree.GetActiveItemProducers">
            <summary>
            Gets the document producers that need their continuation token return to the user.
            </summary>
            <returns>The document producers that need their continuation token return to the user.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Query.ItemProducerTree.GetEnumerator">
            <summary>
            Gets the enumerator for all the leaf level document producers.
            </summary>
            <returns>The enumerator for all the leaf level document producers.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Query.ItemProducerTree.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets the enumerator.
            </summary>
            <returns>The enumerator.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Query.ItemProducerTree.CreateItemProducerTreeCallback(Microsoft.Azure.Cosmos.Query.CosmosQueryContext,Microsoft.Azure.Cosmos.SqlQuerySpec,Microsoft.Azure.Cosmos.Query.ItemProducerTree.ProduceAsyncCompleteDelegate,System.Collections.Generic.IComparer{Microsoft.Azure.Cosmos.Query.ItemProducerTree},System.Collections.Generic.IEqualityComparer{Microsoft.Azure.Cosmos.CosmosElements.CosmosElement},System.Boolean,System.String,System.Int64)">
            <summary>
            Callback to create a child document producer tree based on the partition key range.
            </summary>
            <param name="queryContext">request context</param>
            <param name="querySpecForInit">query spec for initialization</param>
            <param name="produceAsyncCompleteCallback">Callback to invoke once a fetch finishes.</param>
            <param name="itemProducerTreeComparer">Comparer to determine, which tree to produce from.</param>
            <param name="equalityComparer">Comparer to see if we need to return the continuation token for a partition.</param>
            <param name="deferFirstPage">Whether or not to defer fetching the first page.</param>
            <param name="collectionRid">The collection to drain from.</param>
            <param name="initialPageSize">The initial page size.</param>
            <returns>A function that given a partition key range and continuation token will create a document producer.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Query.ItemProducerTree.IsSplitException(Microsoft.Azure.Cosmos.Query.QueryResponseCore)">
            <summary>
            Given a document client exception this function determines whether it was caused due to a split.
            </summary>
            <param name="ex">The document client exception</param>
            <returns>Whether or not the exception was due to a split.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Query.ItemProducerTree.TryMoveNextAsyncImplementationAsync(System.Threading.CancellationToken)">
            <summary>
            Implementation for moving to the next item in the document producer tree.
            </summary>
            <param name="token">The cancellation token.</param>
            <returns>A task with whether or not move next succeeded.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Query.ItemProducerTree.TryMoveNextIfNotSplitAsyncImplementationAsync(System.Threading.CancellationToken)">
            <summary>
            Implementation for moving next if the tree has not split.
            </summary>
            <param name="token">The cancellation token.</param>
            <returns>A task to await on which in turn return whether we successfully moved next.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Query.ItemProducerTree.BufferMoreDocumentsImplementationAsync(System.Threading.CancellationToken)">
            <summary>
            Implementation for buffering more documents.
            </summary>
            <param name="token">The cancellation token.</param>
            <returns>A task to await on.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Query.ItemProducerTree.ExecuteWithSplitProofingAsync(System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task{System.ValueTuple{System.Boolean,System.Nullable{Microsoft.Azure.Cosmos.Query.QueryResponseCore}}}},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            This function will execute any function in a split proof manner.
            What it does is it will try to execute the supplied function and catch any gone exceptions do to a split.
            If a split happens when this function will 
            </summary>
            <param name="function">The function to execute in a split proof manner.</param>
            <param name="functionNeedsBeReexecuted">If the function needs to be re-executed after split.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <remarks>
            <para>
            This function is thread safe meaning that if multiple functions want to execute in a split proof manner,
            then they will need to go one after another.
            This is required since you could have the follow scenario:
            Time    | CurrentItemProducer   | Thread 1      | Thread2
            0       | 0                         | MoveNextAsync | BufferMore
            1       | 0                         | Split         | Split
            </para>
            <para>
            Therefore thread 1 and thread 2 both think that document producer 0 got split and they both try to repair the execution context,
            which is a race condition.
            Note that this thread safety / serial behavior is only scoped to a single document producer tree
            meaning this should not have a performance hit on the scheduler that is prefetching from other partitions.
            </para>
            </remarks>
            <returns>The result of the function would have returned as if there were no splits.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Query.ItemProducerTree.GetReplacementRangesAsync(Microsoft.Azure.Documents.PartitionKeyRange,System.String)">
            <summary>
            Gets the replacement ranges for the target range that got split.
            </summary>
            <param name="targetRange">The target range that got split.</param>
            <param name="collectionRid">The collection rid.</param>
            <returns>The replacement ranges for the target range that got split.</returns>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.Query.OrderByItem">
            <summary>
            Used to represent an order by item for a cross partition ORDER BY query.
            </summary>
            <example>{"item": 5}</example>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.Query.OrderByItem.OrderByItemConverter">
            <summary>
            Custom converter to serialize and deserialize the payload.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Query.OrderByItem.OrderByItemConverter.CanConvert(System.Type)">
            <summary>
            Gets whether or not the object can be converted.
            </summary>
            <param name="objectType">The type of the object.</param>
            <returns>Whether or not the object can be converted.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Query.OrderByItem.OrderByItemConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads a payload from a json reader.
            </summary>
            <param name="reader">The reader.</param>
            <param name="objectType">The object type.</param>
            <param name="existingValue">The existing value.</param>
            <param name="serializer">The serialized</param>
            <returns>The deserialized JSON.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Query.OrderByItem.OrderByItemConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the json to a writer.
            </summary>
            <param name="writer">The writer to write to.</param>
            <param name="value">The value to serialize.</param>
            <param name="serializer">The serializer to use.</param>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.Query.ParallelQuery.OrderByConsumeComparer">
            <summary>
            For cross partition order by queries we serve documents from the partition
            that has the next document in the sort order of the query.
            If there is a tie, then we break the tie by picking the leftmost partition.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Query.ParallelQuery.OrderByConsumeComparer.AllowMixedTypeOrderByTestFlag">
            <summary>
            This flag used to determine whether we should support mixed type order by.
            For testing purposes we might turn it on to test mixed type order by on index v2.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Query.ParallelQuery.OrderByConsumeComparer.sortOrders">
            <summary>
            The sort orders for the query (1 for each order by in the query).
            Until composite indexing is released this will just be an array of length 1.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Query.ParallelQuery.OrderByConsumeComparer.#ctor(Microsoft.Azure.Cosmos.Query.SortOrder[])">
            <summary>
            Initializes a new instance of the OrderByConsumeComparer class.
            </summary>
            <param name="sortOrders">The sort orders for the query.</param>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Query.ParallelQuery.OrderByConsumeComparer.Compare(Microsoft.Azure.Cosmos.Query.ItemProducerTree,Microsoft.Azure.Cosmos.Query.ItemProducerTree)">
            <summary>
            Compares two document producer trees and returns an integer with the relation of which has the document that comes first in the sort order.
            </summary>
            <param name="producer1">The first document producer tree.</param>
            <param name="producer2">The second document producer tree.</param>
            <returns>
            Less than zero if the document in the first document producer comes first.
            Zero if the documents are equivalent.
            Greater than zero if the document in the second document producer comes first.
            </returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Query.ParallelQuery.OrderByConsumeComparer.CompareOrderByItems(System.Collections.Generic.IList{Microsoft.Azure.Cosmos.Query.OrderByItem},System.Collections.Generic.IList{Microsoft.Azure.Cosmos.Query.OrderByItem})">
            <summary>
            Takes the items relevant to the sort and return an integer defining the relationship.
            </summary>
            <param name="items1">The items relevant to the sort from the first partition.</param>
            <param name="items2">The items relevant to the sort from the second partition.</param>
            <returns>The sort relationship.</returns>
            <example>
            Suppose the query was "SELECT * FROM c ORDER BY c.name asc, c.age desc",
            then items1 could be ["Brandon", 22] and items2 could be ["Felix", 28]
            Then we would first compare "Brandon" to "Felix" and say that "Brandon" comes first in an ascending lex order (we don't even have to look at age).
            If items1 was ["Brandon", 22] and items2 was ["Brandon", 23] then we would say have to look at the age to break the tie and in this case 23 comes first in a descending order.
            Some examples of composite order by: http://www.dofactory.com/sql/order-by
            </example>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Query.ParallelQuery.OrderByConsumeComparer.CheckTypeMatching(System.Collections.Generic.IList{Microsoft.Azure.Cosmos.Query.OrderByItem},System.Collections.Generic.IList{Microsoft.Azure.Cosmos.Query.OrderByItem})">
            <summary>
            With index V1 collections we have the check the types of the items since it is impossible to support mixed typed order by for V1 collections.
            The reason for this is, since V1 does not order types.
            The only constraint is that all the numbers will be sorted with respect to each other and same for the strings, but strings and numbers might get interleaved.
            Take the following example:
            Partition 1: "A", 1, "B", 2
            Partition 2: 42, "Z", 0x5F3759DF
            Step 1: Compare "A" to 42 and WLOG 42 comes first
            Step 2: Compare "A" to "Z" and "A" comes first
            Step 3: Compare "Z" to 1 and WLOG 1 comes first
            Whoops: We have 42, "A", 1 and 1 should come before 42.
            </summary>
            <param name="items1">The items relevant to the sort for the first partition.</param>
            <param name="items2">The items relevant to the sort for the second partition.</param>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.Query.ParallelQuery.ParallelQueryConfig">
            <summary>
            This class stores all the default values used during cross partition queries.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Query.ParallelQuery.ParallelQueryConfig.ClientInternalPageSize">
            <summary>
            If the client specifies a MaxItemCount as -1, we return documents in batches of 100
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Query.ParallelQuery.ParallelQueryConfig.DefaultMaximumBufferSize">
            <summary>
            Default maximum number of documents cached at the client side, if it is not specified in the feedOptions.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Query.ParallelQuery.ParallelQueryConfig.AutoModeTasksIncrementFactor">
            <summary>
            We adaptively increase the number of threads as we see partitions are continuing to return results. 2 => we double the number of threads.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Query.ParallelQuery.ParallelQueryConfig.ClientInternalMaxItemCount">
            <summary>
            This is the value we overwrite with in the above case. -1 => the server returns dynamic number of results. Overwriting -1 by very high number doesn't have any significant impact in performance. -1, tries to return maximum number of documents possible per roundtrip
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Query.ParallelQuery.ParallelQueryConfig.NumberOfNetworkCallsPerProcessor">
            <summary>
            Making a backend call is equivalent to a Network Call. Here 1 indicates that if the client machine has 4 processor, we would allow at max (4*1) = 4 parallel calls to the backend. Of course, the number of parallel call won't exceed the number of partitions that needs to be visited for the query under consideration.
            </summary> 
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Query.ParallelQuery.ParallelQueryConfig.DefaultInstance">
            <summary>
            Singleton instance.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Query.ParallelQuery.ParallelQueryConfig.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.Cosmos.Query.ParallelQuery.ParallelQueryConfig"/> class.
            </summary>
            <param name="clientInternalMaxItemCount">The client's internal max item count.</param>
            <param name="defaultMaximumBufferSize">The default maximum buffer size.</param>
            <param name="clientInternalPageSize">The client's internal page size.</param>
            <param name="autoModeTasksIncrementFactor">The increment factor for auto mode.</param>
            <param name="numberOfNetworkCallsPerProcessor">Number of network calls per processor.</param>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Query.ParallelQuery.ParallelQueryConfig.GetConfig">
            <summary>
            Gets the configs for parallel queries.
            </summary>
            <returns>The configs for parallel queries.</returns>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.Query.OrderByContinuationToken">
            <summary>
            <para>
            Executing an OrderBy query for a partitioned collection, say, "select * from root order by root.key ASC", 
            boils down to solving a version of k-way merge sort, where, each of the k partitions produces a sorted stream of values.
            </para>
            <para>
            Now if a query requires multiple ExecuteNextAsync, we return a serialized version of OrderByContinuationToken, to the users
            so that they can resume the query from where they left off at a later point in time. Below we describe the components of
            OrderByContinuation in detail. 
            </para> 
            A key notion of a OrderByContinuation is that of the "Target Partition", which is effectively 
            the partition from whose stream the last value was consumed during the execution of the query. 
            We construct our continuation token composing the information of the target partition and 
            the metadata related to the last value seen from the target partition.  
            <para>
            One key difference in our version of the k-way merge sort from the classical version of the k-way merge sort is that, in
            our case there is a partial order on the 2-tuple consisting of {partition, value seen from that partition}. 
            For example, (P1, 2) less than (P2, 2) if P1 is less than P2 (i.e., P1.MinRange is less than P2.MinRange). This difference allowed 
            us to shorten the continuation token (i.e., we only need to know the state of the target range), 
            but at the cost of performance penalties in pathological cases (e.g., Partition 0 is heavily throttled 
            but still serving value "2", while partition 1 has a large number of "2"s which can't be served
            to the user).
            </para>
            <para>
            Considering the above fact, three important points to note here are:
                1. If the latest value seen at the target partition is X, then we have exhausted all value less than X (for ASC order),
                all partitions that have smaller Range.Min than that of the target partition. 
                2. All partitions, that have greater Range.Min than that of the target partition, have exhausted all values less than or equal to X 
            </para>    
            <para>
            Given this background, below is an example of order by continuation token. The class members below explains the different 
            component/states of the continuation token.
            </para> 
            </summary>
            <example>
            Order by continuation token example.
            <![CDATA[
             {"compositeToken":{"token":"+RID:OpY0AN-mFAACAAAAAAAABA==#RT:1#TRC:1#RTD:qdTAEA==","range":{"min":"05C1D9CD673398","max":"05C1E399CD6732"}},"orderByItems"[{"item":2}],"rid":"OpY0AN-mFAACAAAAAAAABA==","skipCount":0,"filter":"r.key > 1"}
            ]]>
            </example>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Query.OrderByContinuationToken.#ctor(Microsoft.Azure.Cosmos.Query.CosmosQueryClient,Microsoft.Azure.Cosmos.Query.CompositeContinuationToken,System.Collections.Generic.IList{Microsoft.Azure.Cosmos.Query.OrderByItem},System.String,System.Int32,System.String)">
            <summary>
            Initializes a new instance of the OrderByContinuationToken struct.
            </summary>
            <param name="queryClient">The query client</param>
            <param name="compositeContinuationToken">The composite continuation token (refer to property documentation).</param>
            <param name="orderByItems">The order by items (refer to property documentation).</param>
            <param name="rid">The rid (refer to property documentation).</param>
            <param name="skipCount">The skip count (refer to property documentation).</param>
            <param name="filter">The filter (refer to property documentation).</param>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.Query.OrderByContinuationToken.CompositeContinuationToken">
            <summary>
            Gets: Target partition states, including backend continuation and partition key range information. 
            </summary>
            <example>
            <![CDATA[
             {"compositeToken":{"token":"+RID:OpY0AN-mFAACAAAAAAAABA==#RT:1#TRC:1#RTD:qdTAEA==","range":{"min":"05C1D9CD673398","max":"05C1E399CD6732"}}
            ]]>
            </example>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.Query.OrderByContinuationToken.OrderByItems">
            <summary>
            Gets: Values in the top most OrderByQueryResult from the target partition.
            orderByItems is used for filtering after we resume.
            </summary>
            <example>
            Here, the item 2 means that, it was an orderBy by integer field, and when the query paused,
            the latest value seen from the corresponding partition was 2. 
            <![CDATA[
             "orderByItems"[{"item":2}]
            ]]>
            </example>
            <remarks>
            Right now, we don't support orderBy by multiple fields, so orderByItems is an array of one element. 
            </remarks>>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.Query.OrderByContinuationToken.Rid">
            <summary>
            Gets: Rid in the top most OrderByQueryResult from the target partition.
            Rid is used for filtering after we resume, when orderByItems have the same value.
            </summary>
            <remarks>
            Note that, Rid is just a marker from the backend point of view, and the
            document with the Rid might not exist upon resuming a query (due to deletion or
            other reasons). The backend will just return the next available result logically 
            succeeding the marker. 
            </remarks>
            <example>
            <![CDATA[
             "rid":"OpY0AN-mFAACAAAAAAAABA=="
            ]]>
            </example>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.Query.OrderByContinuationToken.SkipCount">
            <summary>
            <para>
            Gets: Skip count is necessary for JOIN queries to resume. Azure Cosmos DB's joins are much different from standard 
            SQL joins. While standard SQL joins happen across two tables, Azure Cosmos DB joins happens over a single collection 
            (think single table with each row having dynamic number of columns). While executing a join query, 
            each Azure Cosmos DB document (i.e, each row), though, can generate multiple result items. You can look up the documentation 
            online to understand this better. 
            </para>
            <para>
            This behavior has implications on how pagination work for CosmosDB queries, especially for order by queries across
            multiple partition. 
            </para>
            <para>
            To understand complexity, let's take an example. Let's say that there is only 1 partition in a collection, and the collection
            has 2 documents. And each document generate 6 results on a hypothetical join query. Now, if someone issues the query with a page size
            of 10, while fetching the second page of the query (as it has already exhausted the results produced by the join on the first document) 
            needs to resume from the second document and skip the first 6 - ((2 * 6) - 10) = 4 results. 
            </para>
            The skip count keeps track of that information. 
            </summary> 
        </member>
        <member name="P:Microsoft.Azure.Cosmos.Query.OrderByContinuationToken.Filter">
            <summary>
            Gets: We use the filter to rewrite the OrderBy query when resuming from a continuation token. 
            </summary>
            <example>
            <para>
            In this example snippet below the filter string indicates that the query was an OrderBy query 
            and when the query was paused it had already output all the values value greater than 1. 
            And when the query resumes it only needs to fetch value greater than 1. 
            </para>
            <para>
            Note that, if any value less than 1 that was inserted after the query started won't be delivered as a 
            part of the result. 
            <![CDATA[
             "filter":"r.key > 1"
            ]]>
            </para>
            </example>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Query.OrderByContinuationToken.TryParse(System.String,Microsoft.Azure.Cosmos.Query.OrderByContinuationToken@)">
            <summary>
            Tries to parse out the TopContinuationToken.
            </summary>
            <param name="value">The value to parse from.</param>
            <param name="orderByContinuationToken">The result of parsing out the token.</param>
            <returns>Whether or not the TopContinuationToken was successfully parsed out.</returns>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.Query.OrderByQueryResult">
            <summary>
            <para>
            For cross partition order by queries a query like "SELECT c.id, c.field_0 ORDER BY r.field_7 gets rewritten as:
            SELECT r._rid, [{"item": r.field_7}] AS orderByItems, {"id": r.id, "field_0": r.field_0} AS payload
            FROM r
            WHERE({ document db - formattable order by query - filter})
            ORDER BY r.field_7
            </para>
            <para>
            This is so that the client can parse out the _rid, orderByItems from the actual data / payload,
            without scanning the entire document.
            </para>
            <para>
            This struct is used to strongly bind the results of that rewritten query.
            </para>
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.Query.OrderByQueryResult.Rid">
            <summary>
            Gets the rid of the document.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.Query.OrderByQueryResult.OrderByItems">
            <summary>
            Gets the order by items from the document.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.Query.OrderByQueryResult.Payload">
            <summary>
            Gets the actual document.
            </summary>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.Query.RangeFilterInitializationInfo">
            <summary>
            <para>
            InitializationInfo is a data structure to capture how the DocumentProducers are initialized
            once we start a cross-partition OrderBy query execution from a continuation token.
            </para>
            <para>
            Specifically, the data-structure captures the "filter" condition for all the partitions that
            need to be visited as a part of the query. Please see the description of "filters" in the 
            OrderByContinuationToken class. 
            </para>
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Query.RangeFilterInitializationInfo.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the RangeFilterInitializationInfo struct.
            </summary>
            <param name="filter">The filter to apply to the partitions.</param>
            <param name="startIndex">The start index of the partitions.</param>
            <param name="endIndex">The end index of the partitions.</param>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.Query.RangeFilterInitializationInfo.Filter">
            <summary>
            Gets the filter itself. 
            </summary>
            <example>
            <para>
            For an order by query "select * from root order by root.key ASC", a filter string could be "root.key > 2",
            considering "key" is an integer field. 
            </para>
            <para>
            The filter simply indicates that the order by query have already delivered all the root.key with "less than equal to 2".
            </para>
            </example>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.Query.RangeFilterInitializationInfo.StartIndex">
            <summary>
            Gets the start index.
            <para>
            Assuming that, at the beginning of the query execution, all the partitions, that needs to be visited, are ordered from 0 to n, 
            startIndex refers to the starting point of the contiguous block of partitions that requires the "filter" to be applied.
            </para>
            <para>
            Typically, there would three such blocks
            * one before the target range (Please study the OrderByContinuationToken class to understand what a target range is)
            * the target range itself
            * one after the target range. 
            Each of these block may have different filter conditions. 
            For example, if
            (1) the target range has filter condition "root.key >= 2", then 
            (2) the preceding block will have condition "root.key > 2" and
            (3) the succeeding block will have filter condition "root.key >= 2". 
            </para>
            <para>
            However, there could be more than one target ranges, in case of query execution across split, each leading to one more 
            blocks (typically containing one partition).
            </para>
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.Query.RangeFilterInitializationInfo.EndIndex">
            <summary>
            Gets the end index.
            Assuming that, at the beginning of the query execution, all the partitions, that needs to be visited, are ordered from 0 to n, 
            EndIndex refers to the end point of the contiguous block of partitions that requires the "filter" to be applied.
            </summary>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.Query.ParallelItemProducerTreeComparer">
            <summary>
            For parallel queries we drain from left partition to right,
            then by rid order within those partitions.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Query.ParallelItemProducerTreeComparer.Compare(Microsoft.Azure.Cosmos.Query.ItemProducerTree,Microsoft.Azure.Cosmos.Query.ItemProducerTree)">
            <summary>
            Compares two document producer trees in a parallel context and returns their comparison.
            </summary>
            <param name="documentProducerTree1">The first document producer tree.</param>
            <param name="documentProducerTree2">The second document producer tree.</param>
            <returns>
            A negative number if the first comes before the second.
            Zero if the two document producer trees are interchangeable.
            A positive number if the second comes before the first.
            </returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Query.CosmosQueryClient.TryGetOverlappingRangesAsync(System.String,Microsoft.Azure.Documents.Routing.Range{System.String},System.Boolean)">
            <summary>
            Returns list of effective partition key ranges for a collection.
            </summary>
            <param name="collectionResourceId">Collection for which to retrieve routing map.</param>
            <param name="range">This method will return all ranges which overlap this range.</param>
            <param name="forceRefresh">Whether forcefully refreshing the routing map is necessary</param>
            <returns>List of effective partition key ranges for a collection or null if collection doesn't exist.</returns>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.Query.PartitionedQueryMetrics">
            <summary>
            Class for composing multiple query metrics in a dictionary interface.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Query.PartitionedQueryMetrics.partitionedQueryMetrics">
            <summary>
            The backing store.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Query.PartitionedQueryMetrics.#ctor(System.Collections.Generic.IReadOnlyDictionary{System.String,Microsoft.Azure.Cosmos.QueryMetrics})">
            <summary>
            Initializes a new instance of the PartitionedQueryMetrics class.
            </summary>
            <param name="other">The other dictionary of query metrics to create from.</param>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Query.PartitionedQueryMetrics.#ctor">
            <summary>
            Initializes a new instance of the PartitionedQueryMetrics class.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.Query.PartitionedQueryMetrics.Count">
            <summary>
            Gets the count.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.Query.PartitionedQueryMetrics.Keys">
            <summary>
            Gets the keys.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.Query.PartitionedQueryMetrics.Values">
            <summary>
            Gets the values.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.Query.PartitionedQueryMetrics.Item(System.String)">
            <summary>
            Gets the QueryMetrics corresponding to the key.
            </summary>
            <param name="key">The partition id.</param>
            <returns>The QueryMetrics corresponding to the key.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Query.PartitionedQueryMetrics.CreateFromIEnumerable(System.Collections.Generic.IEnumerable{Microsoft.Azure.Cosmos.Query.PartitionedQueryMetrics})">
            <summary>
            Aggregates an IEnumerable of partitioned query metrics together.
            </summary>
            <param name="partitionedQueryMetricsList">The partitioned query metrics to add together.</param>
            <returns>The summed up partitioned query metrics.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Query.PartitionedQueryMetrics.op_Addition(Microsoft.Azure.Cosmos.Query.PartitionedQueryMetrics,Microsoft.Azure.Cosmos.Query.PartitionedQueryMetrics)">
            <summary>
            Overloaded for adding two partitioned query metrics together.
            </summary>
            <param name="partitionedQueryMetrics1">The first partitioned query metrics.</param>
            <param name="partitionedQueryMetrics2">The second partitioned query metrics.</param>
            <returns>
            Sums up two partitioned query metrics taking the union of the keys.
            If there is an intersection then the intersection is summed up as defined by QueryMetrics.
            The union minus the intersection is left as is.
            </returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Query.PartitionedQueryMetrics.Add(Microsoft.Azure.Cosmos.Query.PartitionedQueryMetrics[])">
            <summary>
            Adds partitioned query metrics together.
            </summary>
            <param name="partitionedQueryMetricsList">The partitioned query metrics to add.</param>
            <returns>The summed up partitioned query metrics.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Query.PartitionedQueryMetrics.ToString">
            <summary>
            Gets the string version.
            </summary>
            <returns>The string version.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Query.PartitionedQueryMetrics.ContainsKey(System.String)">
            <summary>
            Checks to see if this contains a key.
            </summary>
            <param name="key">The key.</param>
            <returns>Whether or not this partitioned query metrics contains a key.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Query.PartitionedQueryMetrics.GetEnumerator">
            <summary>
            Gets an enumerator.
            </summary>
            <returns>An enumerator.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Query.PartitionedQueryMetrics.TryGetValue(System.String,Microsoft.Azure.Cosmos.QueryMetrics@)">
            <summary>
            Tries to get a value corresponding to a key.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <returns>true if the key was found, else false.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Query.PartitionedQueryMetrics.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets the enumerator.
            </summary>
            <returns>The enumerator.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Query.PartitionedQueryMetrics.ToTextString">
            <summary>
            Gets the text string of this object.
            </summary>
            <returns>The text string of this object.</returns>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.Query.StandByFeedContinuationToken">
            <summary>
            Stand by continuation token representing a contiguous read over all the ranges with continuation state across all ranges.
            </summary>
            <remarks>
            The StandByFeed token represents the state of continuation tokens across all Partition Key Ranges and can be used to sequentially read the Change Feed for each range while maintaining a global state by serializing the values (and allowing deserialization).
            </remarks>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.Query.DefaultDocumentQueryExecutionContext">
            <summary>
            Default document query execution context for single partition queries or for split proofing general requests.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Query.DefaultDocumentQueryExecutionContext.isContinuationExpected">
            <summary>
            Whether or not a continuation is expected.
            </summary>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.Query.DocumentQueryExecutionContextFactory">
            <summary>
            Factory class for creating the appropriate DocumentQueryExecutionContext for the provided type of query.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Query.DocumentQueryExecutionContextFactory.GetTargetPartitionKeyRangesAsync(Microsoft.Azure.Cosmos.Query.DefaultDocumentQueryExecutionContext,Microsoft.Azure.Cosmos.Query.PartitionedQueryExecutionInfo,Microsoft.Azure.Cosmos.ContainerProperties,Microsoft.Azure.Cosmos.FeedOptions)">
            <summary>
            Gets the list of partition key ranges. 
            1. Check partition key range id
            2. Check Partition key
            3. Check the effective partition key
            4. Get the range from the PartitionedQueryExecutionInfo
            </summary>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.Query.QueryCompatibilityMode">
            <summary>
            A client query compatibility mode when making query request.
            Can be used to force a specific query request format.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Query.QueryCompatibilityMode.Default">
            <summary>
            Default (latest) query format.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Query.QueryCompatibilityMode.Query">
            <summary>
            Query (application/query+json).
            Default.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Query.QueryCompatibilityMode.SqlQuery">
            <summary>
            SqlQuery (application/sql).
            </summary>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.Query.IDocumentQueryExecutionContext">
            <summary>
            Interface for all document query execution contexts
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.Query.IDocumentQueryExecutionContext.IsDone">
            <summary>
            Gets a value indicating whether or not the context is done serving documents.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Query.IDocumentQueryExecutionContext.ExecuteNextFeedResponseAsync(System.Threading.CancellationToken)">
            <summary>
            Executes the context to feed the next page of results.
            </summary>
            <param name="token">The cancellation token.</param>
            <returns>A task to await on, which in return provides a DoucmentFeedResponse of documents.</returns>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.Query.ProxyDocumentQueryExecutionContext">
            <summary>
            This class is used as a proxy to wrap the DefaultDocumentQueryExecutionContext which is needed 
            for sending the query to Gateway first and then uses PipelinedDocumentQueryExecutionContext after
            it gets the necessary info. This has been added since we
            haven't produced Linux/Mac version of the ServiceInterop native binary which holds the logic for
            parsing the query without having this extra hop to Gateway
            </summary>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.DocumentClient">
             <summary>
             Provides a client-side logical representation for the Azure Cosmos DB service.
             This client is used to configure and execute requests against the service.
             </summary>
             <threadSafety>
             This type is thread safe.
             </threadSafety>
             <remarks>
             The service client that encapsulates the endpoint and credentials and connection policy used to access the Azure Cosmos DB service.
             It is recommended to cache and reuse this instance within your application rather than creating a new instance for every operation.
            
             <para>
             When your app uses DocumentClient, you should call its IDisposable.Dispose implementation when you are finished using it.
             Depending on your programming technique, you can do this in one of two ways:
             </para>
            
             <para>
             1. By using a language construct such as the using statement in C#.
             The using statement is actually a syntactic convenience.
             At compile time, the language compiler implements the intermediate language (IL) for a try/catch block.
             <code language="c#">
             <![CDATA[
             using (IDocumentClient client = new DocumentClient(new Uri("endpoint"), "authKey"))
             {
                 ...
             }
             ]]>
             </code>
             </para>
            
             <para>
             2. By wrapping the call to the IDisposable.Dispose implementation in a try/catch block.
             The following example replaces the using block in the previous example with a try/catch/finally block.
             <code language="c#">
             <![CDATA[
             IDocumentClient client = new DocumentClient(new Uri("endpoint"), "authKey"))
             try{
                 ...
             }
             finally{
                 if (client != null) client.Dispose();
             }
             ]]>
             </code>
             </para>
            
             </remarks>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.DocumentClient.#ctor(System.Uri,System.Security.SecureString,Microsoft.Azure.Cosmos.ConnectionPolicy,System.Nullable{Microsoft.Azure.Documents.ConsistencyLevel})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.Cosmos.DocumentClient"/> class using the
            specified Azure Cosmos DB service endpoint, key, and connection policy for the Azure Cosmos DB service.
            </summary>
            <param name="serviceEndpoint">
            The service endpoint to use to create the client.
            </param>
            <param name="authKey">
            The list of Permission objects to use to create the client.
            </param>
            <param name="connectionPolicy">
            (Optional) The connection policy for the client. If none is passed, the default is used <see cref="P:Microsoft.Azure.Cosmos.DocumentClient.ConnectionPolicy"/>
            </param>
            <param name="desiredConsistencyLevel">
            (Optional) This can be used to weaken the database account consistency level for read operations.
            If this is not set the database account consistency level will be used for all requests.
            </param>
            <remarks>
            The service endpoint and the authorization key can be obtained from the Azure Management Portal.
            The authKey used here is encrypted for privacy when being used, and deleted from computer memory when no longer needed
            <para>
            Using Direct connectivity, wherever possible, is recommended
            </para>
            </remarks>
            <seealso cref="T:System.Uri"/>
            <seealso cref="T:System.Security.SecureString"/>
            <seealso cref="P:Microsoft.Azure.Cosmos.DocumentClient.ConnectionPolicy"/>
            <seealso cref="P:Microsoft.Azure.Cosmos.DocumentClient.ConsistencyLevel"/>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.DocumentClient.#ctor(System.Uri,System.Security.SecureString,Microsoft.Azure.Cosmos.ConnectionPolicy,System.Nullable{Microsoft.Azure.Documents.ConsistencyLevel},Newtonsoft.Json.JsonSerializerSettings)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.Cosmos.DocumentClient"/> class using the
            specified Azure Cosmos DB service endpoint, key, connection policy and a custom JsonSerializerSettings
            for the Azure Cosmos DB service.
            </summary>
            <param name="serviceEndpoint">
            The service endpoint to use to create the client.
            </param>
            <param name="authKey">
            The list of Permission objects to use to create the client.
            </param>
            <param name="connectionPolicy">
            The connection policy for the client.
            </param>
            <param name="desiredConsistencyLevel">
            This can be used to weaken the database account consistency level for read operations.
            If this is not set the database account consistency level will be used for all requests.
            </param>
            <param name="serializerSettings">
            The custom JsonSerializer settings to be used for serialization/derialization.
            </param>
            <remarks>
            The service endpoint and the authorization key can be obtained from the Azure Management Portal.
            The authKey used here is encrypted for privacy when being used, and deleted from computer memory when no longer needed
            <para>
            Using Direct connectivity, wherever possible, is recommended
            </para>
            </remarks>
            <seealso cref="T:System.Uri"/>
            <seealso cref="T:System.Security.SecureString"/>
            <seealso cref="P:Microsoft.Azure.Cosmos.DocumentClient.ConnectionPolicy"/>
            <seealso cref="P:Microsoft.Azure.Cosmos.DocumentClient.ConsistencyLevel"/>
            <seealso cref="T:Newtonsoft.Json.JsonSerializerSettings"/>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.DocumentClient.#ctor(System.Uri,System.Security.SecureString,Newtonsoft.Json.JsonSerializerSettings,Microsoft.Azure.Cosmos.ConnectionPolicy,System.Nullable{Microsoft.Azure.Documents.ConsistencyLevel})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.Cosmos.DocumentClient"/> class using the
            specified Azure Cosmos DB service endpoint, key, connection policy and a custom JsonSerializerSettings
            for the Azure Cosmos DB service.
            </summary>
            <param name="serviceEndpoint">
            The service endpoint to use to create the client.
            </param>
            <param name="authKey">
            The list of Permission objects to use to create the client.
            </param>
            <param name="serializerSettings">
            The custom JsonSerializer settings to be used for serialization/derialization.
            </param>
            <param name="connectionPolicy">
            (Optional) The connection policy for the client. If none is passed, the default is used <see cref="P:Microsoft.Azure.Cosmos.DocumentClient.ConnectionPolicy"/>
            </param>
            <param name="desiredConsistencyLevel">
            (Optional) This can be used to weaken the database account consistency level for read operations.
            If this is not set the database account consistency level will be used for all requests.
            </param>
            <remarks>
            The service endpoint and the authorization key can be obtained from the Azure Management Portal.
            The authKey used here is encrypted for privacy when being used, and deleted from computer memory when no longer needed
            <para>
            Using Direct connectivity, wherever possible, is recommended
            </para>
            </remarks>
            <seealso cref="T:System.Uri"/>
            <seealso cref="T:System.Security.SecureString"/>
            <seealso cref="T:Newtonsoft.Json.JsonSerializerSettings"/>
            <seealso cref="P:Microsoft.Azure.Cosmos.DocumentClient.ConnectionPolicy"/>
            <seealso cref="P:Microsoft.Azure.Cosmos.DocumentClient.ConsistencyLevel"/>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.DocumentClient.#ctor(System.Uri,System.String,Microsoft.Azure.Cosmos.ConnectionPolicy,System.Nullable{Microsoft.Azure.Documents.ConsistencyLevel})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.Cosmos.DocumentClient"/> class using the
            specified service endpoint, an authorization key (or resource token) and a connection policy
            for the Azure Cosmos DB service.
            </summary>
            <param name="serviceEndpoint">The service endpoint to use to create the client.</param>
            <param name="authKeyOrResourceToken">The authorization key or resource token to use to create the client.</param>
            <param name="connectionPolicy">(Optional) The connection policy for the client.</param>
            <param name="desiredConsistencyLevel">(Optional) The default consistency policy for client operations.</param>
            <remarks>
            The service endpoint can be obtained from the Azure Management Portal.
            If you are connecting using one of the Master Keys, these can be obtained along with the endpoint from the Azure Management Portal
            If however you are connecting as a specific Azure Cosmos DB User, the value passed to <paramref name="authKeyOrResourceToken"/> is the ResourceToken obtained from the permission feed for the user.
            <para>
            Using Direct connectivity, wherever possible, is recommended.
            </para>
            </remarks>
            <seealso cref="T:System.Uri"/>
            <seealso cref="P:Microsoft.Azure.Cosmos.DocumentClient.ConnectionPolicy"/>
            <seealso cref="P:Microsoft.Azure.Cosmos.DocumentClient.ConsistencyLevel"/>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.DocumentClient.#ctor(System.Uri,System.String,System.Net.Http.HttpMessageHandler,Microsoft.Azure.Cosmos.ConnectionPolicy,System.Nullable{Microsoft.Azure.Documents.ConsistencyLevel})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.Cosmos.DocumentClient"/> class using the
            specified service endpoint, an authorization key (or resource token) and a connection policy
            for the Azure Cosmos DB service.
            </summary>
            <param name="serviceEndpoint">The service endpoint to use to create the client.</param>
            <param name="authKeyOrResourceToken">The authorization key or resource token to use to create the client.</param>
            <param name="handler">The HTTP handler stack to use for sending requests (e.g., HttpClientHandler).</param>
            <param name="connectionPolicy">(Optional) The connection policy for the client.</param>
            <param name="desiredConsistencyLevel">(Optional) The default consistency policy for client operations.</param>
            <remarks>
            The service endpoint can be obtained from the Azure Management Portal.
            If you are connecting using one of the Master Keys, these can be obtained along with the endpoint from the Azure Management Portal
            If however you are connecting as a specific Azure Cosmos DB User, the value passed to <paramref name="authKeyOrResourceToken"/> is the ResourceToken obtained from the permission feed for the user.
            <para>
            Using Direct connectivity, wherever possible, is recommended.
            </para>
            </remarks>
            <seealso cref="T:System.Uri"/>
            <seealso cref="P:Microsoft.Azure.Cosmos.DocumentClient.ConnectionPolicy"/>
            <seealso cref="P:Microsoft.Azure.Cosmos.DocumentClient.ConsistencyLevel"/>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.DocumentClient.#ctor(System.Uri,System.String,System.EventHandler{Microsoft.Azure.Documents.SendingRequestEventArgs},Microsoft.Azure.Cosmos.ConnectionPolicy,System.Nullable{Microsoft.Azure.Documents.ConsistencyLevel},Newtonsoft.Json.JsonSerializerSettings,Microsoft.Azure.Documents.ApiType,System.EventHandler{Microsoft.Azure.Documents.ReceivedResponseEventArgs},System.Net.Http.HttpMessageHandler,Microsoft.Azure.Documents.ISessionContainer,System.Nullable{System.Boolean},System.Func{Microsoft.Azure.Documents.TransportClient,Microsoft.Azure.Documents.TransportClient},Microsoft.Azure.Documents.IStoreClientFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.Cosmos.DocumentClient"/> class using the
            specified service endpoint, an authorization key (or resource token) and a connection policy
            for the Azure Cosmos DB service.
            </summary>
            <param name="serviceEndpoint">The service endpoint to use to create the client.</param>
            <param name="authKeyOrResourceToken">The authorization key or resource token to use to create the client.</param>
            <param name="sendingRequestEventArgs"> The event handler to be invoked before the request is sent.</param>
            <param name="receivedResponseEventArgs"> The event handler to be invoked after a response has been received.</param>
            <param name="connectionPolicy">(Optional) The connection policy for the client.</param>
            <param name="desiredConsistencyLevel">(Optional) The default consistency policy for client operations.</param>
            <param name="serializerSettings">The custom JsonSerializer settings to be used for serialization/derialization.</param>
            <param name="apitype">Api type for the account</param>
            <param name="handler">The HTTP handler stack to use for sending requests (e.g., HttpClientHandler).</param>
            <param name="sessionContainer">The default session container with which DocumentClient is created.</param>
            <param name="enableCpuMonitor">Flag that indicates whether client-side CPU monitoring is enabled for improved troubleshooting.</param>
            <param name="transportClientHandlerFactory">Transport client handler factory.</param>
            <param name="storeClientFactory">Factory that creates store clients sharing the same transport client to optimize network resource reuse across multiple document clients in the same process.</param>
            <remarks>
            The service endpoint can be obtained from the Azure Management Portal.
            If you are connecting using one of the Master Keys, these can be obtained along with the endpoint from the Azure Management Portal
            If however you are connecting as a specific Azure Cosmos DB User, the value passed to <paramref name="authKeyOrResourceToken"/> is the ResourceToken obtained from the permission feed for the user.
            <para>
            Using Direct connectivity, wherever possible, is recommended.
            </para>
            </remarks>
            <seealso cref="T:System.Uri"/>
            <seealso cref="P:Microsoft.Azure.Cosmos.DocumentClient.ConnectionPolicy"/>
            <seealso cref="P:Microsoft.Azure.Cosmos.DocumentClient.ConsistencyLevel"/>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.DocumentClient.#ctor(System.Uri,System.String,Microsoft.Azure.Cosmos.ConnectionPolicy,System.Nullable{Microsoft.Azure.Documents.ConsistencyLevel},Newtonsoft.Json.JsonSerializerSettings)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.Cosmos.DocumentClient"/> class using the
            specified service endpoint, an authorization key (or resource token), a connection policy
            and a custom JsonSerializerSettings for the Azure Cosmos DB service.
            </summary>
            <param name="serviceEndpoint">The service endpoint to use to create the client.</param>
            <param name="authKeyOrResourceToken">The authorization key or resource token to use to create the client.</param>
            <param name="connectionPolicy">The connection policy for the client.</param>
            <param name="desiredConsistencyLevel">The default consistency policy for client operations.</param>
            <param name="serializerSettings">The custom JsonSerializer settings to be used for serialization/derialization.</param>
            <remarks>
            The service endpoint can be obtained from the Azure Management Portal.
            If you are connecting using one of the Master Keys, these can be obtained along with the endpoint from the Azure Management Portal
            If however you are connecting as a specific Azure Cosmos DB User, the value passed to <paramref name="authKeyOrResourceToken"/> is the ResourceToken obtained from the permission feed for the user.
            <para>
            Using Direct connectivity, wherever possible, is recommended.
            </para>
            </remarks>
            <seealso cref="T:System.Uri"/>
            <seealso cref="P:Microsoft.Azure.Cosmos.DocumentClient.ConnectionPolicy"/>
            <seealso cref="P:Microsoft.Azure.Cosmos.DocumentClient.ConsistencyLevel"/>
            <seealso cref="T:Newtonsoft.Json.JsonSerializerSettings"/>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.DocumentClient.#ctor(System.Uri,System.String,Newtonsoft.Json.JsonSerializerSettings,Microsoft.Azure.Cosmos.ConnectionPolicy,System.Nullable{Microsoft.Azure.Documents.ConsistencyLevel})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.Cosmos.DocumentClient"/> class using the
            specified service endpoint, an authorization key (or resource token), a connection policy
            and a custom JsonSerializerSettings for the Azure Cosmos DB service.
            </summary>
            <param name="serviceEndpoint">The service endpoint to use to create the client.</param>
            <param name="authKeyOrResourceToken">The authorization key or resource token to use to create the client.</param>
            <param name="serializerSettings">The custom JsonSerializer settings to be used for serialization/derialization.</param>
            <param name="connectionPolicy">(Optional) The connection policy for the client.</param>
            <param name="desiredConsistencyLevel">(Optional) The default consistency policy for client operations.</param>
            <remarks>
            The service endpoint can be obtained from the Azure Management Portal.
            If you are connecting using one of the Master Keys, these can be obtained along with the endpoint from the Azure Management Portal
            If however you are connecting as a specific Azure Cosmos DB User, the value passed to <paramref name="authKeyOrResourceToken"/> is the ResourceToken obtained from the permission feed for the user.
            <para>
            Using Direct connectivity, wherever possible, is recommended.
            </para>
            </remarks>
            <seealso cref="T:System.Uri"/>
            <seealso cref="T:Newtonsoft.Json.JsonSerializerSettings"/>
            <seealso cref="P:Microsoft.Azure.Cosmos.DocumentClient.ConnectionPolicy"/>
            <seealso cref="P:Microsoft.Azure.Cosmos.DocumentClient.ConsistencyLevel"/>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.DocumentClient.#ctor(System.Uri,System.Collections.Generic.IList{Microsoft.Azure.Documents.Permission},Microsoft.Azure.Cosmos.ConnectionPolicy,System.Nullable{Microsoft.Azure.Documents.ConsistencyLevel})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.Cosmos.DocumentClient"/> class using the
            specified Azure Cosmos DB service endpoint for the Azure Cosmos DB service, a list of permission objects and a connection policy.
            </summary>
            <param name="serviceEndpoint">The service endpoint to use to create the client.</param>
            <param name="permissionFeed">A list of Permission objects to use to create the client.</param>
            <param name="connectionPolicy">(Optional) The <see cref="T:Microsoft.Azure.Cosmos.ConnectionPolicy"/> to use for this connection.</param>
            <param name="desiredConsistencyLevel">(Optional) The default consistency policy for client operations.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="permissionFeed"/> is not supplied.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="permissionFeed"/> is not a valid permission link.</exception>
            <remarks>
            If no <paramref name="connectionPolicy"/> is provided, then the default <see cref="T:Microsoft.Azure.Cosmos.ConnectionPolicy"/> will be used.
            Using Direct connectivity, wherever possible, is recommended.
            </remarks>
            <seealso cref="T:System.Uri"/>
            <seealso cref="T:Microsoft.Azure.Cosmos.Permission"/>
            <seealso cref="P:Microsoft.Azure.Cosmos.DocumentClient.ConnectionPolicy"/>
            <seealso cref="P:Microsoft.Azure.Cosmos.DocumentClient.ConsistencyLevel"/>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.DocumentClient.#ctor(System.Uri,System.Collections.Generic.IList{Microsoft.Azure.Cosmos.ResourceToken},Microsoft.Azure.Cosmos.ConnectionPolicy,System.Nullable{Microsoft.Azure.Documents.ConsistencyLevel})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.Cosmos.DocumentClient"/> class using the
            specified Azure Cosmos DB service endpoint, a list of <see cref="T:Microsoft.Azure.Cosmos.ResourceToken"/> objects and a connection policy.
            </summary>
            <param name="serviceEndpoint">The service endpoint to use to create the client.</param>
            <param name="resourceTokens">A list of <see cref="T:Microsoft.Azure.Cosmos.ResourceToken"/> objects to use to create the client.</param>
            <param name="connectionPolicy">(Optional) The <see cref="T:Microsoft.Azure.Cosmos.ConnectionPolicy"/> to use for this connection.</param>
            <param name="desiredConsistencyLevel">(Optional) The default consistency policy for client operations.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="resourceTokens"/> is not supplied.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="resourceTokens"/> is not a valid permission link.</exception>
            <remarks>
            If no <paramref name="connectionPolicy"/> is provided, then the default <see cref="T:Microsoft.Azure.Cosmos.ConnectionPolicy"/> will be used.
            Using Direct connectivity, wherever possible, is recommended.
            </remarks>
            <seealso cref="T:System.Uri"/>
            <seealso cref="T:Microsoft.Azure.Cosmos.Permission"/>
            <seealso cref="P:Microsoft.Azure.Cosmos.DocumentClient.ConnectionPolicy"/>
            <seealso cref="P:Microsoft.Azure.Cosmos.DocumentClient.ConsistencyLevel"/>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.DocumentClient.#ctor(System.Uri,System.Collections.Generic.IDictionary{System.String,System.String},Microsoft.Azure.Cosmos.ConnectionPolicy,System.Nullable{Microsoft.Azure.Documents.ConsistencyLevel})">
            <summary>
            Initializes a new instance of the Microsoft.Azure.Cosmos.DocumentClient class using the
            specified Azure Cosmos DB service endpoint, a dictionary of resource tokens and a connection policy.
            </summary>
            <param name="serviceEndpoint">The service endpoint to use to create the client.</param>
            <param name="resourceTokens">A dictionary of resource ids and resource tokens.</param>
            <param name="connectionPolicy">(Optional) The connection policy for the client.</param>
            <param name="desiredConsistencyLevel">(Optional) The default consistency policy for client operations.</param>
            <remarks>Using Direct connectivity, wherever possible, is recommended</remarks>
            <seealso cref="T:System.Uri"/>
            <seealso cref="P:Microsoft.Azure.Cosmos.DocumentClient.ConnectionPolicy"/>
            <seealso cref="P:Microsoft.Azure.Cosmos.DocumentClient.ConsistencyLevel"/>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.DocumentClient.#ctor(System.Uri,System.String)">
            <summary>
            Internal constructor purely for unit-testing
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.DocumentClient.OpenAsync(System.Threading.CancellationToken)">
            <summary>
            Open the connection to validate that the client initialization is successful in the Azure Cosmos DB service.
            </summary>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> object.
            </returns>
            <remarks>
            This method is recommended to be called, after the constructor, but before calling any other methods on the DocumentClient instance.
            If there are any initialization exceptions, this method will throw them (set on the task).
            Alternately, calling any API will throw initialization exception at the first call.
            </remarks>
            <example>
            <code language="c#">
            <![CDATA[
            using (IDocumentClient client = new DocumentClient(new Uri("service endpoint"), "auth key"))
            {
                await client.OpenAsync();
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.DocumentClient.Session">
            <summary>
            Gets or sets the session object used for session consistency version tracking in the Azure Cosmos DB service.
            </summary>
            <remarks>
            <value>
            The session object used for version tracking when the consistency level is set to Session.
            </value>
            The session object can be saved and shared between two DocumentClient instances within the same AppDomain.
            </remarks>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.DocumentClient.GetSessionToken(System.String)">
            <summary>
            Gets or sets the session object used for session consistency version tracking for a specific collection in the Azure Cosmos DB service.
            </summary>
            <param name="collectionLink">Collection for which session token must be retrieved.</param>
            <value>
            The session token used for version tracking when the consistency level is set to Session.
            </value>
            <remarks>
            The session token can be saved and supplied to a request via <see cref="P:Microsoft.Azure.Documents.Client.RequestOptions.SessionToken"/>.
            </remarks>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.DocumentClient.ApiType">
            <summary>
            Gets the Api type
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.DocumentClient.ServiceEndpoint">
            <summary>
            Gets the endpoint Uri for the service endpoint from the Azure Cosmos DB service.
            </summary>
            <value>
            The Uri for the service endpoint.
            </value>
            <seealso cref="T:System.Uri"/>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.DocumentClient.WriteEndpoint">
            <summary>
            Gets the current write endpoint chosen based on availability and preference from the Azure Cosmos DB service.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.DocumentClient.ReadEndpoint">
            <summary>
            Gets the current read endpoint chosen based on availability and preference from the Azure Cosmos DB service.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.DocumentClient.ConnectionPolicy">
            <summary>
            Gets the Connection policy used by the client from the Azure Cosmos DB service.
            </summary>
            <value>
            The Connection policy used by the client.
            </value>
            <seealso cref="T:Microsoft.Azure.Cosmos.ConnectionPolicy"/>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.DocumentClient.ResourceTokens">
            <summary>
            Gets a dictionary of resource tokens used by the client from the Azure Cosmos DB service.
            </summary>
            <value>
            A dictionary of resource tokens used by the client.
            </value>
            <seealso cref="T:System.Collections.Generic.IDictionary`2"/>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.DocumentClient.AuthKey">
            <summary>
            Gets the AuthKey used by the client from the Azure Cosmos DB service.
            </summary>
            <value>
            The AuthKey used by the client.
            </value>
            <seealso cref="T:System.Security.SecureString"/>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.DocumentClient.ConsistencyLevel">
            <summary>
            Gets the configured consistency level of the client from the Azure Cosmos DB service.
            </summary>
            <value>
            The configured <see cref="T:Microsoft.Azure.Cosmos.ConsistencyLevel"/> of the client.
            </value>
            <seealso cref="T:Microsoft.Azure.Cosmos.ConsistencyLevel"/>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.DocumentClient.Dispose">
            <summary>
            Disposes the client for the Azure Cosmos DB service.
            </summary>
            <example>
            <code language="c#">
            <![CDATA[
            IDocumentClient client = new DocumentClient(new Uri("service endpoint"), "auth key");
            if (client != null) client.Dispose();
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.DocumentClient.ResetSessionTokenRetryPolicy">
            <summary>
            RetryPolicy retries a request when it encounters session unavailable (see ClientRetryPolicy).
            Once it exhausts all write regions it clears the session container, then it uses ClientCollectionCache
            to resolves the request's collection name. If it differs from the session container's resource id it
            explains the session unavailable exception: somebody removed and recreated the collection. In this
            case we retry once again (with empty session token) otherwise we return the error to the client
            (see RenameCollectionAwareClientRetryPolicy)
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.DocumentClient.StoreModel">
            <summary>
            Gets and sets the IStoreModel object.
            </summary>
            <remarks>
            Test hook to enable unit test of DocumentClient.
            </remarks>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.DocumentClient.GatewayStoreModel">
            <summary>
            Gets and sets the gateway IStoreModel object.
            </summary>
            <remarks>
            Test hook to enable unit test of DocumentClient.
            </remarks>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.DocumentClient.OnExecuteScalarQueryCallback">
            <summary>
            Gets and sets on execute scalar query callback
            </summary>
            <remarks>
            Test hook to enable unit test for scalar queries
            </remarks>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.DocumentClient.CreateDatabaseAsync(Microsoft.Azure.Documents.Database,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Creates a database resource as an asychronous operation in the Azure Cosmos DB service.
            </summary>
            <param name="database">The specification for the <see cref="T:Microsoft.Azure.Cosmos.Database"/> to create.</param>
            <param name="options">(Optional) The <see cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/> for the request.</param>
            <returns>The <see cref="T:Microsoft.Azure.Cosmos.Database"/> that was created within a task object representing the service response for the asynchronous operation.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="database"/> is not set.</exception>
            <exception cref="T:System.AggregateException">Represents a consolidation of failures that occured during async processing. Look within InnerExceptions to find the actual exception(s).</exception>
            <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Database are:
            <list type="table">
                <listheader>
                    <term>StatusCode</term><description>Reason for exception</description>
                </listheader>
                <item>
                    <term>400</term><description>BadRequest - This means something was wrong with the database object supplied. It is likely that an id was not supplied for the new Database.</description>
                </item>
                <item>
                    <term>409</term><description>Conflict - This means a <see cref="T:Microsoft.Azure.Cosmos.Database"/> with an id matching the id field of <paramref name="database"/> already existed.</description>
                </item>
            </list>
            </exception>
            <example>
            The example below creates a new <see cref="T:Microsoft.Azure.Cosmos.Database"/> with an Id property of 'MyDatabase'
            This code snippet is intended to be used from within an asynchronous method as it uses the await keyword
            <code language="c#">
            <![CDATA[
            using (IDocumentClient client = new DocumentClient(new Uri("service endpoint"), "auth key"))
            {
                Database db = await client.CreateDatabaseAsync(new Database { Id = "MyDatabase" });
            }
            ]]>
            </code>
            </example>
            <example>
            If you would like to construct a <see cref="T:Microsoft.Azure.Cosmos.Database"/> from within a synchronous method then you need to use the following code
            <code language="c#">
            <![CDATA[
            using (IDocumentClient client = new DocumentClient(new Uri("service endpoint"), "auth key"))
            {
                Database db = client.CreateDatabaseAsync(new Database { Id = "MyDatabase" }).Result;
            }
            ]]>
            </code>
            </example>
            <seealso cref="T:Microsoft.Azure.Documents.Database"/>
            <seealso cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>
            <seealso cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/>
            <seealso cref="T:System.Threading.Tasks.Task"/>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.DocumentClient.CreateDatabaseIfNotExistsAsync(Microsoft.Azure.Documents.Database,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Creates(if doesn't exist) or gets(if already exists) a database resource as an asychronous operation in the Azure Cosmos DB service.
            You can check the status code from the response to determine whether the database was newly created(201) or existing database was returned(200)
            </summary>
            <param name="database">The specification for the <see cref="T:Microsoft.Azure.Cosmos.Database"/> to create.</param>
            <param name="options">(Optional) The <see cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/> for the request.</param>
            <returns>The <see cref="T:Microsoft.Azure.Cosmos.Database"/> that was created within a task object representing the service response for the asynchronous operation.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="database"/> is not set.</exception>
            <exception cref="T:System.AggregateException">Represents a consolidation of failures that occured during async processing. Look within InnerExceptions to find the actual exception(s).</exception>
            <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property.</exception>
            <example>
            The example below creates a new <see cref="T:Microsoft.Azure.Cosmos.Database"/> with an Id property of 'MyDatabase'
            This code snippet is intended to be used from within an asynchronous method as it uses the await keyword
            <code language="c#">
            <![CDATA[
            using (IDocumentClient client = new DocumentClient(new Uri("service endpoint"), "auth key"))
            {
                Database db = await client.CreateDatabaseIfNotExistsAsync(new Database { Id = "MyDatabase" });
            }
            ]]>
            </code>
            </example>
            <example>
            If you would like to construct a <see cref="T:Microsoft.Azure.Cosmos.Database"/> from within a synchronous method then you need to use the following code
            <code language="c#">
            <![CDATA[
            using (IDocumentClient client = new DocumentClient(new Uri("service endpoint"), "auth key"))
            {
                Database db = client.CreateDatabaseIfNotExistsAsync(new Database { Id = "MyDatabase" }).Result;
            }
            ]]>
            </code>
            </example>
            <seealso cref="T:Microsoft.Azure.Documents.Database"/>
            <seealso cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>
            <seealso cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/>
            <seealso cref="T:System.Threading.Tasks.Task"/>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.DocumentClient.CreateDocumentAsync(System.String,System.Object,Microsoft.Azure.Documents.Client.RequestOptions,System.Boolean,System.Threading.CancellationToken)">
             <summary>
             Creates a Document as an asychronous operation in the Azure Cosmos DB service.
             </summary>
             <param name="documentsFeedOrDatabaseLink">The link of the <see cref="T:Microsoft.Azure.Documents.DocumentCollection"/> to create the document in. E.g. dbs/db_rid/colls/coll_rid/ </param>
             <param name="document">The document object to create.</param>
             <param name="options">(Optional) Any request options you wish to set. E.g. Specifying a Trigger to execute when creating the document. <see cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/></param>
             <param name="disableAutomaticIdGeneration">(Optional) Disables the automatic id generation, If this is True the system will throw an exception if the id property is missing from the Document.</param>
             <param name="cancellationToken">(Optional) A <see cref="T:System.Threading.CancellationToken"/> that can be used by other objects or threads to receive notice of cancellation.</param>
             <returns>The <see cref="T:Microsoft.Azure.Documents.Document"/> that was created contained within a <see cref="T:System.Threading.Tasks.Task"/> object representing the service response for the asynchronous operation.</returns>
             <exception cref="T:System.ArgumentNullException">If either <paramref name="documentsFeedOrDatabaseLink"/> or <paramref name="document"/> is not set.</exception>
             <exception cref="T:System.AggregateException">Represents a consolidation of failures that occured during async processing. Look within InnerExceptions to find the actual exception(s)</exception>
             <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
             <list type="table">
                 <listheader>
                     <term>StatusCode</term><description>Reason for exception</description>
                 </listheader>
                 <item>
                     <term>400</term><description>BadRequest - This means something was wrong with the document supplied. It is likely that <paramref name="disableAutomaticIdGeneration"/> was true and an id was not supplied</description>
                 </item>
                 <item>
                     <term>403</term><description>Forbidden - This likely means the collection in to which you were trying to create the document is full.</description>
                 </item>
                 <item>
                     <term>409</term><description>Conflict - This means a <see cref="T:Microsoft.Azure.Documents.Document"/> with an id matching the id field of <paramref name="document"/> already existed</description>
                 </item>
                 <item>
                     <term>413</term><description>RequestEntityTooLarge - This means the <see cref="T:Microsoft.Azure.Documents.Document"/> exceeds the current max entity size. Consult documentation for limits and quotas.</description>
                 </item>
                 <item>
                     <term>429</term><description>TooManyRequests - This means you have exceeded the number of request units per second. Consult the DocumentClientException.RetryAfter value to see how long you should wait before retrying this operation.</description>
                 </item>
             </list>
             </exception>
             <example>
             Azure Cosmos DB supports a number of different ways to work with documents. A document can extend <see cref="T:Microsoft.Azure.Documents.Resource"/>
             <code language="c#">
             <![CDATA[
             public class MyObject : Resource
             {
                 public string MyProperty {get; set;}
             }
            
             using (IDocumentClient client = new DocumentClient(new Uri("service endpoint"), "auth key"))
             {
                 Document doc = await client.CreateDocumentAsync("dbs/db_rid/colls/coll_rid/", new MyObject { MyProperty = "A Value" });
             }
             ]]>
             </code>
             </example>
             <example>
             A document can be any POCO object that can be serialized to JSON, even if it doesn't extend from <see cref="T:Microsoft.Azure.Documents.Resource"/>
             <code language="c#">
             <![CDATA[
             public class MyPOCO
             {
                 public string MyProperty {get; set;}
             }
            
             using (IDocumentClient client = new DocumentClient(new Uri("service endpoint"), "auth key"))
             {
                 Document doc = await client.CreateDocumentAsync("dbs/db_rid/colls/coll_rid/", new MyPOCO { MyProperty = "A Value" });
             }
             ]]>
             </code>
             </example>
             <example>
             Finally, a Document can also be a dynamic object
             <code language="c#">
             <![CDATA[
             using (IDocumentClient client = new DocumentClient(new Uri("service endpoint"), "auth key"))
             {
                 Document doc = await client.CreateDocumentAsync("dbs/db_rid/colls/coll_rid/", new { SomeProperty = "A Value" } );
             }
             ]]>
             </code>
             </example>
             <example>
             Create a Document and execute a Pre and Post Trigger
             <code language="c#">
             <![CDATA[
             using (IDocumentClient client = new DocumentClient(new Uri("service endpoint"), "auth key"))
             {
                 Document doc = await client.CreateDocumentAsync(
                     "dbs/db_rid/colls/coll_rid/",
                     new { id = "DOC123213443" },
                     new RequestOptions
                     {
                         PreTriggerInclude = new List<string> { "MyPreTrigger" },
                         PostTriggerInclude = new List<string> { "MyPostTrigger" }
                     });
             }
             ]]>
             </code>
             </example>
             <seealso cref="T:Microsoft.Azure.Documents.Document"/>
             <seealso cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>
             <seealso cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/>
             <seealso cref="T:System.Threading.Tasks.Task"/>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.DocumentClient.CreateDocumentCollectionAsync(System.String,Microsoft.Azure.Documents.DocumentCollection,Microsoft.Azure.Documents.Client.RequestOptions)">
             <summary>
             Creates a collection as an asychronous operation in the Azure Cosmos DB service.
             </summary>
             <param name="databaseLink">The link of the database to create the collection in. E.g. dbs/db_rid/.</param>
             <param name="documentCollection">The <see cref="T:Microsoft.Azure.Documents.DocumentCollection"/> object.</param>
             <param name="options">(Optional) Any <see cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/> you wish to provide when creating a Collection. E.g. RequestOptions.OfferThroughput = 400. </param>
             <returns>The <see cref="T:Microsoft.Azure.Documents.DocumentCollection"/> that was created contained within a <see cref="T:System.Threading.Tasks.Task"/> object representing the service response for the asynchronous operation.</returns>
             <exception cref="T:System.ArgumentNullException">If either <paramref name="databaseLink"/> or <paramref name="documentCollection"/> is not set.</exception>
             <exception cref="T:System.AggregateException">Represents a consolidation of failures that occured during async processing. Look within InnerExceptions to find the actual exception(s).</exception>
             <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a collection are:
             <list type="table">
                 <listheader>
                     <term>StatusCode</term><description>Reason for exception</description>
                 </listheader>
                 <item>
                     <term>400</term><description>BadRequest - This means something was wrong with the request supplied. It is likely that an id was not supplied for the new collection.</description>
                 </item>
                 <item>
                     <term>403</term><description>Forbidden - This means you attempted to exceed your quota for collections. Contact support to have this quota increased.</description>
                 </item>
                 <item>
                     <term>409</term><description>Conflict - This means a <see cref="T:Microsoft.Azure.Documents.DocumentCollection"/> with an id matching the id you supplied already existed.</description>
                 </item>
             </list>
             </exception>
             <example>
            
             <code language="c#">
             <![CDATA[
             using (IDocumentClient client = new DocumentClient(new Uri("service endpoint"), "auth key"))
             {
                 //Create a new collection with an OfferThroughput set to 10000
                 //Not passing in RequestOptions.OfferThroughput will result in a collection with the default OfferThroughput set.
                 DocumentCollection coll = await client.CreateDocumentCollectionAsync(databaseLink,
                     new DocumentCollection { Id = "My Collection" },
                     new RequestOptions { OfferThroughput = 10000} );
             }
             ]]>
             </code>
             </example>
             <seealso cref="T:Microsoft.Azure.Documents.DocumentCollection"/>
             <seealso cref="T:Microsoft.Azure.Documents.OfferV2"/>
             <seealso cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>
             <seealso cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/>
             <seealso cref="T:System.Threading.Tasks.Task"/>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.DocumentClient.CreateDocumentCollectionIfNotExistsAsync(System.String,Microsoft.Azure.Documents.DocumentCollection,Microsoft.Azure.Documents.Client.RequestOptions)">
             <summary>
             Creates (if doesn't exist) or gets (if already exists) a collection as an asychronous operation in the Azure Cosmos DB service.
             You can check the status code from the response to determine whether the collection was newly created (201) or existing collection was returned (200).
             </summary>
             <param name="databaseLink">The link of the database to create the collection in. E.g. dbs/db_rid/.</param>
             <param name="documentCollection">The <see cref="T:Microsoft.Azure.Documents.DocumentCollection"/> object.</param>
             <param name="options">(Optional) Any <see cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/> you wish to provide when creating a Collection. E.g. RequestOptions.OfferThroughput = 400. </param>
             <returns>The <see cref="T:Microsoft.Azure.Documents.DocumentCollection"/> that was created contained within a <see cref="T:System.Threading.Tasks.Task"/> object representing the service response for the asynchronous operation.</returns>
             <exception cref="T:System.ArgumentNullException">If either <paramref name="databaseLink"/> or <paramref name="documentCollection"/> is not set.</exception>
             <exception cref="T:System.AggregateException">Represents a consolidation of failures that occured during async processing. Look within InnerExceptions to find the actual exception(s).</exception>
             <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a DocumentCollection are:
             <list type="table">
                 <listheader>
                     <term>StatusCode</term><description>Reason for exception</description>
                 </listheader>
                 <item>
                     <term>400</term><description>BadRequest - This means something was wrong with the request supplied. It is likely that an id was not supplied for the new collection.</description>
                 </item>
                 <item>
                     <term>403</term><description>Forbidden - This means you attempted to exceed your quota for collections. Contact support to have this quota increased.</description>
                 </item>
             </list>
             </exception>
             <example>
            
             <code language="c#">
             <![CDATA[
             using (IDocumentClient client = new DocumentClient(new Uri("service endpoint"), "auth key"))
             {
                 //Create a new collection with an OfferThroughput set to 10000
                 //Not passing in RequestOptions.OfferThroughput will result in a collection with the default OfferThroughput set.
                 DocumentCollection coll = await client.CreateDocumentCollectionIfNotExistsAsync(databaseLink,
                     new DocumentCollection { Id = "My Collection" },
                     new RequestOptions { OfferThroughput = 10000} );
             }
             ]]>
             </code>
             </example>
             <seealso cref="T:Microsoft.Azure.Documents.DocumentCollection"/>
             <seealso cref="T:Microsoft.Azure.Documents.OfferV2"/>
             <seealso cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>
             <seealso cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/>
             <seealso cref="T:System.Threading.Tasks.Task"/>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.DocumentClient.RestoreDocumentCollectionAsync(System.String,Microsoft.Azure.Documents.DocumentCollection,System.Nullable{System.DateTimeOffset},Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Restores a collection as an asychronous operation in the Azure Cosmos DB service.
            </summary>
            <param name="sourceDocumentCollectionLink">The link to the source <see cref="T:Microsoft.Azure.Documents.DocumentCollection"/> object.</param>
            <param name="targetDocumentCollection">The target <see cref="T:Microsoft.Azure.Documents.DocumentCollection"/> object.</param>
            <param name="restoreTime">(optional)The point in time to restore. If null, use the latest restorable time. </param>
            <param name="options">(Optional) The <see cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/> for the request.</param>
            <returns>The task object representing the service response for the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.DocumentClient.GetDocumentCollectionRestoreStatusAsync(System.String)">
            <summary>
            Get the status of a collection being restored in the Azure Cosmos DB service.
            </summary>
            <param name="targetDocumentCollectionLink">The link of the document collection being restored.</param>
            <returns>The task object representing the service response for the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.DocumentClient.CreateStoredProcedureAsync(System.String,Microsoft.Azure.Documents.StoredProcedure,Microsoft.Azure.Documents.Client.RequestOptions)">
             <summary>
             Creates a stored procedure as an asychronous operation in the Azure Cosmos DB service.
             </summary>
             <param name="collectionLink">The link of the collection to create the stored procedure in. E.g. dbs/db_rid/colls/col_rid/</param>
             <param name="storedProcedure">The <see cref="T:Microsoft.Azure.Documents.StoredProcedure"/> object to create.</param>
             <param name="options">(Optional) Any <see cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>for this request.</param>
             <returns>The <see cref="T:Microsoft.Azure.Documents.StoredProcedure"/> that was created contained within a <see cref="T:System.Threading.Tasks.Task"/> object representing the service response for the asynchronous operation.</returns>
             <exception cref="T:System.ArgumentNullException">If either <paramref name="collectionLink"/> or <paramref name="storedProcedure"/> is not set.</exception>
             <exception cref="T:System.AggregateException">Represents a consolidation of failures that occured during async processing. Look within InnerExceptions to find the actual exception(s)</exception>
             <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
             <list type="table">
                 <listheader>
                     <term>StatusCode</term><description>Reason for exception</description>
                 </listheader>
                 <item>
                     <term>400</term><description>BadRequest - This means something was wrong with the request supplied. It is likely that an Id was not supplied for the stored procedure or the Body was malformed.</description>
                 </item>
                 <item>
                     <term>403</term><description>Forbidden - You have reached your quota of stored procedures for the collection supplied. Contact support to have this quota increased.</description>
                 </item>
                 <item>
                     <term>409</term><description>Conflict - This means a <see cref="T:Microsoft.Azure.Documents.StoredProcedure"/> with an id matching the id you supplied already existed.</description>
                 </item>
                 <item>
                     <term>413</term><description>RequestEntityTooLarge - This means the body of the <see cref="T:Microsoft.Azure.Documents.StoredProcedure"/> you tried to create was too large.</description>
                 </item>
             </list>
             </exception>
             <example>
            
             <code language="c#">
             <![CDATA[
             //Create a new stored procedure called "HelloWorldSproc" that takes in a single param called "name".
             StoredProcedure sproc = await client.CreateStoredProcedureAsync(collectionLink, new StoredProcedure
             {
                Id = "HelloWorldSproc",
                Body = @"function (name){
                            var response = getContext().getResponse();
                            response.setBody('Hello ' + name);
                         }"
             });
             ]]>
             </code>
             </example>
             <seealso cref="T:Microsoft.Azure.Documents.StoredProcedure"/>
             <seealso cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>
             <seealso cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/>
             <seealso cref="T:System.Threading.Tasks.Task"/>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.DocumentClient.CreateTriggerAsync(System.String,Microsoft.Azure.Documents.Trigger,Microsoft.Azure.Documents.Client.RequestOptions)">
             <summary>
             Creates a trigger as an asychronous operation in the Azure Cosmos DB service.
             </summary>
             <param name="collectionLink">The link of the <see cref="T:Microsoft.Azure.Documents.DocumentCollection"/> to create the trigger in. E.g. dbs/db_rid/colls/col_rid/ </param>
             <param name="trigger">The <see cref="T:Microsoft.Azure.Documents.Trigger"/> object to create.</param>
             <param name="options">(Optional) Any <see cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>for this request.</param>
             <returns>A task object representing the service response for the asynchronous operation.</returns>
             <exception cref="T:System.ArgumentNullException">If either <paramref name="collectionLink"/> or <paramref name="trigger"/> is not set.</exception>
             <exception cref="T:System.AggregateException">Represents a consolidation of failures that occured during async processing. Look within InnerExceptions to find the actual exception(s)</exception>
             <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
             <list type="table">
                 <listheader>
                     <term>StatusCode</term><description>Reason for exception</description>
                 </listheader>
                 <item>
                     <term>400</term><description>BadRequest - This means something was wrong with the request supplied. It is likely that an Id was not supplied for the new trigger or that the Body was malformed.</description>
                 </item>
                 <item>
                     <term>403</term><description>Forbidden - You have reached your quota of triggers for the collection supplied. Contact support to have this quota increased.</description>
                 </item>
                 <item>
                     <term>409</term><description>Conflict - This means a <see cref="T:Microsoft.Azure.Documents.Trigger"/> with an id matching the id you supplied already existed.</description>
                 </item>
                 <item>
                     <term>413</term><description>RequestEntityTooLarge - This means the body of the <see cref="T:Microsoft.Azure.Documents.Trigger"/> you tried to create was too large.</description>
                 </item>
             </list>
             </exception>
             <example>
            
             <code language="c#">
             <![CDATA[
             //Create a trigger that validates the contents of a document as it is created and adds a 'timestamp' property if one was not found.
             Trigger trig = await client.CreateTriggerAsync(collectionLink, new Trigger
             {
                 Id = "ValidateDocuments",
                 Body = @"function validate() {
                                     var context = getContext();
                                     var request = context.getRequest();                                                             
                                     var documentToCreate = request.getBody();
                                     
                                     // validate properties
                                     if (!('timestamp' in documentToCreate)) {
                                         var ts = new Date();
                                         documentToCreate['timestamp'] = ts.getTime();
                                     }
                                     
                                     // update the document that will be created
                                     request.setBody(documentToCreate);
                                   }",
                 TriggerType = TriggerType.Pre,
                 TriggerOperation = TriggerOperation.Create
             });
             ]]>
             </code>
             </example>
             <seealso cref="T:Microsoft.Azure.Documents.Trigger"/>
             <seealso cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>
             <seealso cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/>
             <seealso cref="T:System.Threading.Tasks.Task"/>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.DocumentClient.CreateUserDefinedFunctionAsync(System.String,Microsoft.Azure.Documents.UserDefinedFunction,Microsoft.Azure.Documents.Client.RequestOptions)">
             <summary>
             Creates a user defined function as an asychronous operation in the Azure Cosmos DB service.
             </summary>
             <param name="collectionLink">The link of the <see cref="T:Microsoft.Azure.Documents.DocumentCollection"/> to create the user defined function in. E.g. dbs/db_rid/colls/col_rid/ </param>
             <param name="function">The <see cref="T:Microsoft.Azure.Documents.UserDefinedFunction"/> object to create.</param>
             <param name="options">(Optional) Any <see cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>for this request.</param>
             <returns>A task object representing the service response for the asynchronous operation.</returns>
             <exception cref="T:System.ArgumentNullException">If either <paramref name="collectionLink"/> or <paramref name="function"/> is not set.</exception>
             <exception cref="T:System.AggregateException">Represents a consolidation of failures that occured during async processing. Look within InnerExceptions to find the actual exception(s)</exception>
             <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
             <list type="table">
                 <listheader>
                     <term>StatusCode</term><description>Reason for exception</description>
                 </listheader>
                 <item>
                     <term>400</term><description>BadRequest - This means something was wrong with the request supplied. It is likely that an Id was not supplied for the new user defined function or that the Body was malformed.</description>
                 </item>
                 <item>
                     <term>403</term><description>Forbidden - You have reached your quota of user defined functions for the collection supplied. Contact support to have this quota increased.</description>
                 </item>
                 <item>
                     <term>409</term><description>Conflict - This means a <see cref="T:Microsoft.Azure.Documents.UserDefinedFunction"/> with an id matching the id you supplied already existed.</description>
                 </item>
                 <item>
                     <term>413</term><description>RequestEntityTooLarge - This means the body of the <see cref="T:Microsoft.Azure.Documents.UserDefinedFunction"/> you tried to create was too large.</description>
                 </item>
             </list>
             </exception>
             <example>
            
             <code language="c#">
             <![CDATA[
             //Create a user defined function that converts a string to upper case
             UserDefinedFunction udf = client.CreateUserDefinedFunctionAsync(collectionLink, new UserDefinedFunction
             {
                Id = "ToUpper",
                Body = @"function toUpper(input) {
                                    return input.toUpperCase();
                                 }",
             });
             ]]>
             </code>
             </example>
             <seealso cref="T:Microsoft.Azure.Documents.UserDefinedFunction"/>
             <seealso cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>
             <seealso cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/>
             <seealso cref="T:System.Threading.Tasks.Task"/>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.DocumentClient.CreateUserDefinedTypeAsync(System.String,Microsoft.Azure.Documents.UserDefinedType,Microsoft.Azure.Documents.Client.RequestOptions)">
             <summary>
             Creates a user defined type object as an asychronous operation in the Azure Cosmos DB service.
             </summary>
             <param name="databaseLink">The link of the database to create the user defined type in. E.g. dbs/db_rid/ </param>
             <param name="userDefinedType">The <see cref="T:Microsoft.Azure.Documents.UserDefinedType"/> object to create.</param>
             <param name="options">(Optional) The request options for the request.</param>
             <returns>A task object representing the service response for the asynchronous operation which contains the created <see cref="T:Microsoft.Azure.Documents.UserDefinedType"/> object.</returns>
             <exception cref="T:System.ArgumentNullException">If either <paramref name="databaseLink"/> or <paramref name="userDefinedType"/> is not set.</exception>
             <exception cref="T:System.AggregateException">Represents a consolidation of failures that occured during async processing. Look within InnerExceptions to find the actual exception(s)</exception>
             <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a UserDefinedType are:
             <list type="table">
                 <listheader>
                     <term>StatusCode</term><description>Reason for exception</description>
                 </listheader>
                 <item>
                     <term>400</term><description>BadRequest - This means something was wrong with the request supplied.</description>
                 </item>
                 <item>
                     <term>403</term><description>Forbidden - You have reached your quota of user defined type objects for this database. Contact support to have this quota increased.</description>
                 </item>
                 <item>
                     <term>409</term><description>Conflict - This means a <see cref="T:Microsoft.Azure.Documents.UserDefinedType"/> with an id matching the id you supplied already existed.</description>
                 </item>
             </list>
             </exception>
             <example>
            
             <code language="c#">
             <![CDATA[
             //Create a new user defined type in the specified database
             UserDefinedType userDefinedType = await client.CreateUserDefinedTypeAsync(databaseLink, new UserDefinedType { Id = "userDefinedTypeId5" });
             ]]>
             </code>
             </example>
             <seealso cref="T:Microsoft.Azure.Documents.UserDefinedType"/>
             <seealso cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>
             <seealso cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/>
             <seealso cref="T:System.Threading.Tasks.Task"/>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.DocumentClient.DeleteDatabaseAsync(System.String,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Delete a <see cref="T:Microsoft.Azure.Documents.Database"/> from the Azure Cosmos DB service as an asynchronous operation.
            </summary>
            <param name="databaseLink">The link of the <see cref="T:Microsoft.Azure.Documents.Database"/> to delete. E.g. dbs/db_rid/ </param>
            <param name="options">(Optional) The request options for the request.</param>
            <returns>A <see cref="N:System.Threading.Tasks"/> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/> which will contain information about the request issued.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="databaseLink"/> is not set.</exception>
            <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
            <list type="table">
                <listheader>
                    <term>StatusCode</term><description>Reason for exception</description>
                </listheader>
                <item>
                    <term>404</term><description>NotFound - This means the resource you tried to delete did not exist.</description>
                </item>
            </list>
            </exception>
            <example>
            <code language="c#">
            <![CDATA[
            //Delete a database using its selfLink property
            //To get the databaseLink you would have to query for the Database, using CreateDatabaseQuery(),  and then refer to its .SelfLink property
            await client.DeleteDatabaseAsync(databaseLink);
            ]]>
            </code>
            </example>
            <seealso cref="T:Microsoft.Azure.Documents.Database"/>
            <seealso cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>
            <seealso cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/>
            <seealso cref="T:System.Threading.Tasks.Task"/>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.DocumentClient.DeleteDocumentAsync(System.String,Microsoft.Azure.Documents.Client.RequestOptions,System.Threading.CancellationToken)">
            <summary>
            Delete a <see cref="T:Microsoft.Azure.Documents.Document"/> from the Azure Cosmos DB service as an asynchronous operation.
            </summary>
            <param name="documentLink">The link of the <see cref="T:Microsoft.Azure.Documents.Document"/> to delete. E.g. dbs/db_rid/colls/col_rid/docs/doc_rid/ </param>
            <param name="options">(Optional) The request options for the request.</param>
            <param name="cancellationToken">(Optional) A <see cref="T:System.Threading.CancellationToken"/> that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>A <see cref="N:System.Threading.Tasks"/> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/> which will contain information about the request issued.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="documentLink"/> is not set.</exception>
            <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
            <list type="table">
                <listheader>
                    <term>StatusCode</term><description>Reason for exception</description>
                </listheader>
                <item>
                    <term>404</term><description>NotFound - This means the resource you tried to delete did not exist.</description>
                </item>
            </list>
            </exception>
            <example>
            <code language="c#">
            <![CDATA[
            //Delete a document using its selfLink property
            //To get the documentLink you would have to query for the Document, using CreateDocumentQuery(),  and then refer to its .SelfLink property
            await client.DeleteDocumentAsync(documentLink);
            ]]>
            </code>
            </example>
            <seealso cref="T:Microsoft.Azure.Documents.Database"/>
            <seealso cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>
            <seealso cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/>
            <seealso cref="T:System.Threading.Tasks.Task"/>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.DocumentClient.DeleteDocumentCollectionAsync(System.String,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Delete a <see cref="T:Microsoft.Azure.Documents.DocumentCollection"/> from the Azure Cosmos DB service as an asynchronous operation.
            </summary>
            <param name="documentCollectionLink">The link of the <see cref="T:Microsoft.Azure.Documents.Document"/> to delete. E.g. dbs/db_rid/colls/col_rid/ </param>
            <param name="options">(Optional) The request options for the request.</param>
            <returns>A <see cref="N:System.Threading.Tasks"/> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/> which will contain information about the request issued.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="documentCollectionLink"/> is not set.</exception>
            <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
            <list type="table">
                <listheader>
                    <term>StatusCode</term><description>Reason for exception</description>
                </listheader>
                <item>
                    <term>404</term><description>NotFound - This means the resource you tried to delete did not exist.</description>
                </item>
            </list>
            </exception>
            <example>
            <code language="c#">
            <![CDATA[
            //Delete a collection using its selfLink property
            //To get the collectionLink you would have to query for the Collection, using CreateDocumentCollectionQuery(),  and then refer to its .SelfLink property
            await client.DeleteDocumentCollectionAsync(collectionLink);
            ]]>
            </code>
            </example>
            <seealso cref="T:Microsoft.Azure.Documents.DocumentCollection"/>
            <seealso cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>
            <seealso cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/>
            <seealso cref="T:System.Threading.Tasks.Task"/>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.DocumentClient.DeleteStoredProcedureAsync(System.String,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Delete a <see cref="T:Microsoft.Azure.Documents.StoredProcedure"/> from the Azure Cosmos DB service as an asynchronous operation.
            </summary>
            <param name="storedProcedureLink">The link of the <see cref="T:Microsoft.Azure.Documents.StoredProcedure"/> to delete. E.g. dbs/db_rid/colls/col_rid/sprocs/sproc_rid/ </param>
            <param name="options">(Optional) The request options for the request.</param>
            <returns>A <see cref="N:System.Threading.Tasks"/> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/> which will contain information about the request issued.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="storedProcedureLink"/> is not set.</exception>
            <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
            <list type="table">
                <listheader>
                    <term>StatusCode</term><description>Reason for exception</description>
                </listheader>
                <item>
                    <term>404</term><description>NotFound - This means the resource you tried to delete did not exist.</description>
                </item>
            </list>
            </exception>
            <example>
            <code language="c#">
            <![CDATA[
            //Delete a stored procedure using its selfLink property.
            //To get the sprocLink you would have to query for the Stored Procedure, using CreateStoredProcedureQuery(),  and then refer to its .SelfLink property
            await client.DeleteStoredProcedureAsync(sprocLink);
            ]]>
            </code>
            </example>
            <seealso cref="T:Microsoft.Azure.Documents.StoredProcedure"/>
            <seealso cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>
            <seealso cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/>
            <seealso cref="T:System.Threading.Tasks.Task"/>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.DocumentClient.DeleteTriggerAsync(System.String,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Delete a <see cref="T:Microsoft.Azure.Documents.Trigger"/> from the Azure Cosmos DB service as an asynchronous operation.
            </summary>
            <param name="triggerLink">The link of the <see cref="T:Microsoft.Azure.Documents.Trigger"/> to delete. E.g. dbs/db_rid/colls/col_rid/triggers/trigger_rid/ </param>
            <param name="options">(Optional) The request options for the request.</param>
            <returns>A <see cref="N:System.Threading.Tasks"/> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/> which will contain information about the request issued.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="triggerLink"/> is not set.</exception>
            <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
            <list type="table">
                <listheader>
                    <term>StatusCode</term><description>Reason for exception</description>
                </listheader>
                <item>
                    <term>404</term><description>NotFound - This means the resource you tried to delete did not exist.</description>
                </item>
            </list>
            </exception>
            <example>
            <code language="c#">
            <![CDATA[
            //Delete a trigger using its selfLink property.
            //To get the triggerLink you would have to query for the Trigger, using CreateTriggerQuery(),  and then refer to its .SelfLink property
            await client.DeleteTriggerAsync(triggerLink);
            ]]>
            </code>
            </example>
            <seealso cref="T:Microsoft.Azure.Documents.Trigger"/>
            <seealso cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>
            <seealso cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/>
            <seealso cref="T:System.Threading.Tasks.Task"/>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.DocumentClient.DeleteUserDefinedFunctionAsync(System.String,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Delete a <see cref="T:Microsoft.Azure.Documents.UserDefinedFunction"/> from the Azure Cosmos DB service as an asynchronous operation.
            </summary>
            <param name="functionLink">The link of the <see cref="T:Microsoft.Azure.Documents.UserDefinedFunction"/> to delete. E.g. dbs/db_rid/colls/col_rid/udfs/udf_rid/ </param>
            <param name="options">(Optional) The request options for the request.</param>
            <returns>A <see cref="N:System.Threading.Tasks"/> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/> which will contain information about the request issued.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="functionLink"/> is not set.</exception>
            <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
            <list type="table">
                <listheader>
                    <term>StatusCode</term><description>Reason for exception</description>
                </listheader>
                <item>
                    <term>404</term><description>NotFound - This means the resource you tried to delete did not exist.</description>
                </item>
            </list>
            </exception>
            <example>
            <code language="c#">
            <![CDATA[
            //Delete a user defined function using its selfLink property.
            //To get the functionLink you would have to query for the User Defined Function, using CreateUserDefinedFunctionQuery(),  and then refer to its .SelfLink property
            await client.DeleteUserDefinedFunctionAsync(functionLink);
            ]]>
            </code>
            </example>
            <seealso cref="T:Microsoft.Azure.Documents.UserDefinedFunction"/>
            <seealso cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>
            <seealso cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/>
            <seealso cref="T:System.Threading.Tasks.Task"/>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.DocumentClient.DeleteConflictAsync(System.String,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Delete a <see cref="T:Microsoft.Azure.Documents.Conflict"/> from the Azure Cosmos DB service as an asynchronous operation.
            </summary>
            <param name="conflictLink">The link of the <see cref="T:Microsoft.Azure.Documents.Conflict"/> to delete. E.g. dbs/db_rid/colls/coll_rid/conflicts/ </param>
            <param name="options">(Optional) The request options for the request.</param>
            <returns>A <see cref="N:System.Threading.Tasks"/> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/> which will contain information about the request issued.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="conflictLink"/> is not set.</exception>
            <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
            <list type="table">
                <listheader>
                    <term>StatusCode</term><description>Reason for exception</description>
                </listheader>
                <item>
                    <term>404</term><description>NotFound - This means the resource you tried to delete did not exist.</description>
                </item>
            </list>
            </exception>
            <example>
            <code language="c#">
            <![CDATA[
            //Delete a conflict using its selfLink property.
            //To get the conflictLink you would have to query for the Conflict object, using CreateConflictQuery(), and then refer to its .SelfLink property
            await client.DeleteConflictAsync(conflictLink);
            ]]>
            </code>
            </example>
            <seealso cref="T:Microsoft.Azure.Documents.Conflict"/>
            <seealso cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>
            <seealso cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/>
            <seealso cref="T:System.Threading.Tasks.Task"/>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.DocumentClient.ReplaceDocumentCollectionAsync(Microsoft.Azure.Documents.DocumentCollection,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Replaces a document collection in the Azure Cosmos DB service as an asynchronous operation.
            </summary>
            <param name="documentCollection">the updated document collection.</param>
            <param name="options">the request options for the request.</param>
            <returns>
            A <see cref="N:System.Threading.Tasks"/> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/> which wraps a <see cref="T:Microsoft.Azure.Documents.DocumentCollection"/> containing the updated resource record.
            </returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.DocumentClient.ReplaceDocumentAsync(System.String,System.Object,Microsoft.Azure.Documents.Client.RequestOptions,System.Threading.CancellationToken)">
             <summary>
             Replaces a <see cref="T:Microsoft.Azure.Documents.Document"/> in the Azure Cosmos DB service as an asynchronous operation.
             </summary>
             <param name="documentLink">The link of the document to be updated. E.g. dbs/db_rid/colls/col_rid/docs/doc_rid/ </param>
             <param name="document">The updated <see cref="T:Microsoft.Azure.Documents.Document"/> to replace the existing resource with.</param>
             <param name="options">(Optional) The request options for the request.</param>
             <param name="cancellationToken">(Optional) A <see cref="T:System.Threading.CancellationToken"/> that can be used by other objects or threads to receive notice of cancellation.</param>
             <returns>
             A <see cref="N:System.Threading.Tasks"/> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/> which wraps a <see cref="T:Microsoft.Azure.Documents.Document"/> containing the updated resource record.
             </returns>
             <exception cref="T:System.ArgumentNullException">If either <paramref name="documentLink"/> or <paramref name="document"/> is not set.</exception>
             <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
             <list type="table">
                 <listheader>
                     <term>StatusCode</term><description>Reason for exception</description>
                 </listheader>
                 <item>
                     <term>404</term><description>NotFound - This means the resource you tried to delete did not exist.</description>
                 </item>
             </list>
             </exception>
             <example>
             In this example, instead of using a strongly typed <see cref="T:Microsoft.Azure.Documents.Document"/>, we will work with our own POCO object and not rely on the dynamic nature of the Document class.
             <code language="c#">
             <![CDATA[
             public class MyPoco
             {
                 public string Id {get; set;}
                 public string MyProperty {get; set;}
             }
            
             //Get the doc back as a Document so you have access to doc.SelfLink
             Document doc = client.CreateDocumentQuery<Document>(collectionLink)
                                    .Where(r => r.Id == "doc id")
                                    .AsEnumerable()
                                    .SingleOrDefault();
            
             //Now dynamically cast doc back to your MyPoco
             MyPoco poco = (dynamic)doc;
            
             //Update some properties of the poco object
             poco.MyProperty = "updated value";
            
             //Now persist these changes to the database using doc.SelLink and the update poco object
             Document updated = await client.ReplaceDocumentAsync(doc.SelfLink, poco);
             ]]>
             </code>
             </example>
             <seealso cref="T:Microsoft.Azure.Documents.Document"/>
             <seealso cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>
             <seealso cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/>
             <seealso cref="T:System.Threading.Tasks.Task"/>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.DocumentClient.ReplaceDocumentAsync(Microsoft.Azure.Documents.Document,Microsoft.Azure.Documents.Client.RequestOptions,System.Threading.CancellationToken)">
             <summary>
             Replaces a <see cref="T:Microsoft.Azure.Documents.Document"/> in the Azure Cosmos DB service as an asynchronous operation.
             </summary>
             <param name="document">The updated <see cref="T:Microsoft.Azure.Documents.Document"/> to replace the existing resource with.</param>
             <param name="options">(Optional) The request options for the request.</param>
             <param name="cancellationToken">(Optional) A <see cref="T:System.Threading.CancellationToken"/> that can be used by other objects or threads to receive notice of cancellation.</param>
             <returns>
             A <see cref="N:System.Threading.Tasks"/> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/> which wraps a <see cref="T:Microsoft.Azure.Documents.Document"/> containing the updated resource record.
             </returns>
             <exception cref="T:System.ArgumentNullException">If <paramref name="document"/> is not set.</exception>
             <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
             <list type="table">
                 <listheader>
                     <term>StatusCode</term><description>Reason for exception</description>
                 </listheader>
                 <item>
                     <term>404</term><description>NotFound - This means the resource you tried to delete did not exist.</description>
                 </item>
             </list>
             </exception>
             <example>
             This example uses <see cref="T:Microsoft.Azure.Documents.Document"/> and takes advantage of the fact that it is a dynamic object and uses SetProperty to dynamically update properties on the document
             <code language="c#">
             <![CDATA[
             //Fetch the Document to be updated
             Document doc = client.CreateDocumentQuery<Document>(collectionLink)
                                         .Where(r => r.Id == "doc id")
                                         .AsEnumerable()
                                         .SingleOrDefault();
            
             //Update some properties on the found resource
             doc.SetPropertyValue("MyProperty", "updated value");
            
             //Now persist these changes to the database by replacing the original resource
             Document updated = await client.ReplaceDocumentAsync(doc);
             ]]>
             </code>
             </example>
             <seealso cref="T:Microsoft.Azure.Documents.Document"/>
             <seealso cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>
             <seealso cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/>
             <seealso cref="T:System.Threading.Tasks.Task"/>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.DocumentClient.ReplaceStoredProcedureAsync(Microsoft.Azure.Documents.StoredProcedure,Microsoft.Azure.Documents.Client.RequestOptions)">
             <summary>
             Replaces a <see cref="T:Microsoft.Azure.Documents.StoredProcedure"/> in the Azure Cosmos DB service as an asynchronous operation.
             </summary>
             <param name="storedProcedure">The updated <see cref="T:Microsoft.Azure.Documents.StoredProcedure"/> to replace the existing resource with.</param>
             <param name="options">(Optional) The request options for the request.</param>
             <returns>
             A <see cref="N:System.Threading.Tasks"/> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/> which wraps a <see cref="T:Microsoft.Azure.Documents.StoredProcedure"/> containing the updated resource record.
             </returns>
             <exception cref="T:System.ArgumentNullException">If <paramref name="storedProcedure"/> is not set.</exception>
             <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
             <list type="table">
                 <listheader>
                     <term>StatusCode</term><description>Reason for exception</description>
                 </listheader>
                 <item>
                     <term>404</term><description>NotFound - This means the resource you tried to delete did not exist.</description>
                 </item>
             </list>
             </exception>
             <example>
             <code language="c#">
             <![CDATA[
             //Fetch the resource to be updated
             StoredProcedure sproc = client.CreateStoredProcedureQuery(sprocsLink)
                                              .Where(r => r.Id == "sproc id")
                                              .AsEnumerable()
                                              .SingleOrDefault();
            
             //Update some properties on the found resource
             sproc.Body = "function () {new javascript body for sproc}";
            
             //Now persist these changes to the database by replacing the original resource
             StoredProcedure updated = await client.ReplaceStoredProcedureAsync(sproc);
             ]]>
             </code>
             </example>
             <seealso cref="T:Microsoft.Azure.Documents.StoredProcedure"/>
             <seealso cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>
             <seealso cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/>
             <seealso cref="T:System.Threading.Tasks.Task"/>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.DocumentClient.ReplaceTriggerAsync(Microsoft.Azure.Documents.Trigger,Microsoft.Azure.Documents.Client.RequestOptions)">
             <summary>
             Replaces a <see cref="T:Microsoft.Azure.Documents.Trigger"/> in the Azure Cosmos DB service as an asynchronous operation.
             </summary>
             <param name="trigger">The updated <see cref="T:Microsoft.Azure.Documents.Trigger"/> to replace the existing resource with.</param>
             <param name="options">(Optional) The request options for the request.</param>
             <returns>
             A <see cref="N:System.Threading.Tasks"/> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/> which wraps a <see cref="T:Microsoft.Azure.Documents.Trigger"/> containing the updated resource record.
             </returns>
             <exception cref="T:System.ArgumentNullException">If <paramref name="trigger"/> is not set.</exception>
             <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
             <list type="table">
                 <listheader>
                     <term>StatusCode</term><description>Reason for exception</description>
                 </listheader>
                 <item>
                     <term>404</term><description>NotFound - This means the resource you tried to delete did not exist.</description>
                 </item>
             </list>
             </exception>
             <example>
             <code language="c#">
             <![CDATA[
             //Fetch the resource to be updated
             Trigger trigger = client.CreateTriggerQuery(sprocsLink)
                                           .Where(r => r.Id == "trigger id")
                                           .AsEnumerable()
                                           .SingleOrDefault();
            
             //Update some properties on the found resource
             trigger.Body = "function () {new javascript body for trigger}";
            
             //Now persist these changes to the database by replacing the original resource
             Trigger updated = await client.ReplaceTriggerAsync(sproc);
             ]]>
             </code>
             </example>
             <seealso cref="T:Microsoft.Azure.Documents.Trigger"/>
             <seealso cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>
             <seealso cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/>
             <seealso cref="T:System.Threading.Tasks.Task"/>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.DocumentClient.ReplaceUserDefinedFunctionAsync(Microsoft.Azure.Documents.UserDefinedFunction,Microsoft.Azure.Documents.Client.RequestOptions)">
             <summary>
             Replaces a <see cref="T:Microsoft.Azure.Documents.UserDefinedFunction"/> in the Azure Cosmos DB service as an asynchronous operation.
             </summary>
             <param name="function">The updated <see cref="T:Microsoft.Azure.Documents.UserDefinedFunction"/> to replace the existing resource with.</param>
             <param name="options">(Optional) The request options for the request.</param>
             <returns>
             A <see cref="N:System.Threading.Tasks"/> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/> which wraps a <see cref="T:Microsoft.Azure.Documents.UserDefinedFunction"/> containing the updated resource record.
             </returns>
             <exception cref="T:System.ArgumentNullException">If <paramref name="function"/> is not set.</exception>
             <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
             <list type="table">
                 <listheader>
                     <term>StatusCode</term><description>Reason for exception</description>
                 </listheader>
                 <item>
                     <term>404</term><description>NotFound - This means the resource you tried to delete did not exist.</description>
                 </item>
             </list>
             </exception>
             <example>
             <code language="c#">
             <![CDATA[
             //Fetch the resource to be updated
             UserDefinedFunction udf = client.CreateUserDefinedFunctionQuery(functionsLink)
                                                 .Where(r => r.Id == "udf id")
                                                 .AsEnumerable()
                                                 .SingleOrDefault();
            
             //Update some properties on the found resource
             udf.Body = "function () {new javascript body for udf}";
            
             //Now persist these changes to the database by replacing the original resource
             UserDefinedFunction updated = await client.ReplaceUserDefinedFunctionAsync(udf);
             ]]>
             </code>
             </example>
             <seealso cref="T:Microsoft.Azure.Documents.UserDefinedFunction"/>
             <seealso cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>
             <seealso cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/>
             <seealso cref="T:System.Threading.Tasks.Task"/>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.DocumentClient.ReplaceOfferAsync(Microsoft.Azure.Documents.Offer)">
             <summary>
             Replaces a <see cref="T:Microsoft.Azure.Documents.Offer"/> in the Azure Cosmos DB service as an asynchronous operation.
             </summary>
             <param name="offer">The updated <see cref="T:Microsoft.Azure.Documents.Offer"/> to replace the existing resource with.</param>
             <returns>
             A <see cref="N:System.Threading.Tasks"/> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/> which wraps a <see cref="T:Microsoft.Azure.Documents.Offer"/> containing the updated resource record.
             </returns>
             <exception cref="T:System.ArgumentNullException">If <paramref name="offer"/> is not set.</exception>
             <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
             <list type="table">
                 <listheader>
                     <term>StatusCode</term><description>Reason for exception</description>
                 </listheader>
                 <item>
                     <term>404</term><description>NotFound - This means the resource you tried to delete did not exist.</description>
                 </item>
                 <item>
                    <term>429</term><description>TooManyRequests - The replace offer is throttled as the offer scale down operation is attempted within the idle timeout period of 4 hours. Consult the DocumentClientException.RetryAfter value to see how long you should wait before retrying this operation.</description>
                 </item>
             </list>
             </exception>
             <example>
             <code language="c#">
             <![CDATA[
             //Fetch the resource to be updated
             Offer offer = client.CreateOfferQuery()
                                      .Where(r => r.ResourceLink == "collection selfLink")
                                      .AsEnumerable()
                                      .SingleOrDefault();
            
             //Create a new offer with the changed throughput
             OfferV2 newOffer = new OfferV2(offer, 5000);
            
             //Now persist these changes to the database by replacing the original resource
             Offer updated = await client.ReplaceOfferAsync(newOffer);
             ]]>
             </code>
             </example>
             <seealso cref="T:Microsoft.Azure.Documents.Offer"/>
             <seealso cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>
             <seealso cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/>
             <seealso cref="T:System.Threading.Tasks.Task"/>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.DocumentClient.ReplaceUserDefinedTypeAsync(Microsoft.Azure.Documents.UserDefinedType,Microsoft.Azure.Documents.Client.RequestOptions)">
             <summary>
             Replaces a <see cref="T:Microsoft.Azure.Documents.UserDefinedType"/> in the Azure Cosmos DB service as an asynchronous operation.
             </summary>
             <param name="userDefinedType">The updated <see cref="T:Microsoft.Azure.Documents.UserDefinedType"/> to replace the existing resource with.</param>
             <param name="options">(Optional) The request options for the request.</param>
             <returns>
             A <see cref="N:System.Threading.Tasks"/> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/> which wraps a <see cref="T:Microsoft.Azure.Documents.UserDefinedType"/> containing the updated resource record.
             </returns>
             <exception cref="T:System.ArgumentNullException">If <paramref name="userDefinedType"/> is not set.</exception>
             <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
             <list type="table">
                 <listheader>
                     <term>StatusCode</term><description>Reason for exception</description>
                 </listheader>
                 <item>
                     <term>404</term><description>NotFound - This means the resource you tried to delete did not exist.</description>
                 </item>
             </list>
             </exception>
             <example>
             <code language="c#">
             <![CDATA[
             //Fetch the resource to be updated
             UserDefinedType userDefinedType = client.CreateUserDefinedTypeQuery(userDefinedTypesLink)
                                      .Where(r => r.Id == "user defined type id")
                                      .AsEnumerable()
                                      .SingleOrDefault();
            
             //Now persist these changes to the database by replacing the original resource
             UserDefinedType updated = await client.ReplaceUserDefinedTypeAsync(userDefinedType);
             ]]>
             </code>
             </example>
             <seealso cref="T:Microsoft.Azure.Documents.UserDefinedType"/>
             <seealso cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>
             <seealso cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/>
             <seealso cref="T:System.Threading.Tasks.Task"/>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.DocumentClient.ReadDatabaseAsync(System.String,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Reads a <see cref="T:Microsoft.Azure.Documents.Database"/> from the Azure Cosmos DB service as an asynchronous operation.
            </summary>
            <param name="databaseLink">The link of the Database resource to be read.</param>
            <param name="options">(Optional) The request options for the request.</param>
            <returns>
            A <see cref="N:System.Threading.Tasks"/> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/> which wraps a <see cref="T:Microsoft.Azure.Documents.Database"/> containing the read resource record.
            </returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="databaseLink"/> is not set.</exception>
            <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
            <list type="table">
                <listheader>
                    <term>StatusCode</term><description>Reason for exception</description>
                </listheader>
                <item>
                    <term>404</term><description>NotFound - This means the resource you tried to read did not exist.</description>
                </item>
                <item>
                    <term>429</term><description>TooManyRequests - This means you have exceeded the number of request units per second. Consult the DocumentClientException.RetryAfter value to see how long you should wait before retrying this operation.</description>
                </item>
            </list>
            </exception>
            <example>
            <code language="c#">
            <![CDATA[
            //Reads a Database resource where
            // - database_id is the ID property of the Database resource you wish to read.
            var dbLink = "/dbs/database_id";
            Database database = await client.ReadDatabaseAsync(dbLink);
            ]]>
            </code>
            </example>
            <remarks>
            <para>
            Doing a read of a resource is the most efficient way to get a resource from the Database. If you know the resource's ID, do a read instead of a query by ID.
            </para>
            <para>
            The example shown uses ID-based links, where the link is composed of the ID properties used when the resources were created.
            You can still use the <see cref="P:Microsoft.Azure.Documents.Resource.SelfLink"/> property of the Database if you prefer. A self-link is a URI for a resource that is made up of Resource Identifiers  (or the _rid properties).
            ID-based links and SelfLink will both work.
            The format for <paramref name="databaseLink"/> is always "/dbs/{db identifier}" only
            the values within the {} change depending on which method you wish to use to address the resource.
            </para>
            </remarks>
            <seealso cref="T:Microsoft.Azure.Documents.Database"/>
            <seealso cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>
            <seealso cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/>
            <seealso cref="T:System.Threading.Tasks.Task"/>
            <seealso cref="T:System.Uri"/>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.DocumentClient.ReadDocumentAsync(System.String,Microsoft.Azure.Documents.Client.RequestOptions,System.Threading.CancellationToken)">
            <summary>
            Reads a <see cref="T:Microsoft.Azure.Documents.Document"/> from the Azure Cosmos DB service as an asynchronous operation.
            </summary>
            <param name="documentLink">The link for the document to be read.</param>
            <param name="options">(Optional) The request options for the request.</param>
            <param name="cancellationToken">(Optional) A <see cref="T:System.Threading.CancellationToken"/> that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>
            A <see cref="N:System.Threading.Tasks"/> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/> which wraps a <see cref="T:Microsoft.Azure.Documents.Document"/> containing the read resource record.
            </returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="documentLink"/> is not set.</exception>
            <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
            <list type="table">
                <listheader>
                    <term>StatusCode</term><description>Reason for exception</description>
                </listheader>
                <item>
                    <term>404</term><description>NotFound - This means the resource you tried to read did not exist.</description>
                </item>
                <item>
                    <term>429</term><description>TooManyRequests - This means you have exceeded the number of request units per second. Consult the DocumentClientException.RetryAfter value to see how long you should wait before retrying this operation.</description>
                </item>
            </list>
            </exception>
            <example>
            <code language="c#">
            <![CDATA[
            //This reads a document record from a database & collection where
            // - sample_database is the ID of the database
            // - sample_collection is the ID of the collection
            // - document_id is the ID of the document resource
            var docLink = "dbs/sample_database/colls/sample_collection/docs/document_id";
            Document doc = await client.ReadDocumentAsync(docLink);
            ]]>
            </code>
            </example>
            <remarks>
            <para>
            Doing a read of a resource is the most efficient way to get a resource from the Database. If you know the resource's ID, do a read instead of a query by ID.
            </para>
            <para>
            The example shown uses ID-based links, where the link is composed of the ID properties used when the resources were created.
            You can still use the <see cref="P:Microsoft.Azure.Documents.Resource.SelfLink"/> property of the Document if you prefer. A self-link is a URI for a resource that is made up of Resource Identifiers  (or the _rid properties).
            ID-based links and SelfLink will both work.
            The format for <paramref name="documentLink"/> is always "dbs/{db identifier}/colls/{coll identifier}/docs/{doc identifier}" only
            the values within the {} change depending on which method you wish to use to address the resource.
            </para>
            </remarks>
            <seealso cref="T:Microsoft.Azure.Documents.Document"/>
            <seealso cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>
            <seealso cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/>
            <seealso cref="T:System.Threading.Tasks.Task"/>
            <seealso cref="T:System.Uri"/>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.DocumentClient.ReadDocumentAsync``1(System.String,Microsoft.Azure.Documents.Client.RequestOptions,System.Threading.CancellationToken)">
            <summary>
            Reads a <see cref="T:Microsoft.Azure.Documents.Document"/> as a generic type T from the Azure Cosmos DB service as an asynchronous operation.
            </summary>
            <param name="documentLink">The link for the document to be read.</param>
            <param name="options">(Optional) The request options for the request.</param>
            <param name="cancellationToken">(Optional) A <see cref="T:System.Threading.CancellationToken"/> that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>
            A <see cref="N:System.Threading.Tasks"/> containing a <see cref="T:Microsoft.Azure.Documents.Client.DocumentResponse`1"/> which wraps a <see cref="T:Microsoft.Azure.Documents.Document"/> containing the read resource record.
            </returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="documentLink"/> is not set.</exception>
            <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
            <list type="table">
                <listheader>
                    <term>StatusCode</term><description>Reason for exception</description>
                </listheader>
                <item>
                    <term>404</term><description>NotFound - This means the resource you tried to read did not exist.</description>
                </item>
                <item>
                    <term>429</term><description>TooManyRequests - This means you have exceeded the number of request units per second. Consult the DocumentClientException.RetryAfter value to see how long you should wait before retrying this operation.</description>
                </item>
            </list>
            </exception>
            <example>
            <code language="c#">
            <![CDATA[
            //This reads a document record from a database & collection where
            // - sample_database is the ID of the database
            // - sample_collection is the ID of the collection
            // - document_id is the ID of the document resource
            var docLink = "dbs/sample_database/colls/sample_collection/docs/document_id";
            Customer customer = await client.ReadDocumentAsync<Customer>(docLink);
            ]]>
            </code>
            </example>
            <remarks>
            <para>
            Doing a read of a resource is the most efficient way to get a resource from the Database. If you know the resource's ID, do a read instead of a query by ID.
            </para>
            <para>
            The example shown uses ID-based links, where the link is composed of the ID properties used when the resources were created.
            You can still use the <see cref="P:Microsoft.Azure.Documents.Resource.SelfLink"/> property of the Document if you prefer. A self-link is a URI for a resource that is made up of Resource Identifiers  (or the _rid properties).
            ID-based links and SelfLink will both work.
            The format for <paramref name="documentLink"/> is always "dbs/{db identifier}/colls/{coll identifier}/docs/{doc identifier}" only
            the values within the {} change depending on which method you wish to use to address the resource.
            </para>
            </remarks>
            <seealso cref="T:Microsoft.Azure.Documents.Document"/>
            <seealso cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>
            <seealso cref="T:Microsoft.Azure.Documents.Client.DocumentResponse`1"/>
            <seealso cref="T:System.Threading.Tasks.Task"/>
            <seealso cref="T:System.Uri"/>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.DocumentClient.ReadDocumentCollectionAsync(System.String,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Reads a <see cref="T:Microsoft.Azure.Documents.DocumentCollection"/> from the Azure Cosmos DB service as an asynchronous operation.
            </summary>
            <param name="documentCollectionLink">The link for the DocumentCollection to be read.</param>
            <param name="options">(Optional) The request options for the request.</param>
            <returns>
            A <see cref="N:System.Threading.Tasks"/> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/> which wraps a <see cref="T:Microsoft.Azure.Documents.DocumentCollection"/> containing the read resource record.
            </returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="documentCollectionLink"/> is not set.</exception>
            <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
            <list type="table">
                <listheader>
                    <term>StatusCode</term><description>Reason for exception</description>
                </listheader>
                <item>
                    <term>404</term><description>NotFound - This means the resource you tried to read did not exist.</description>
                </item>
                <item>
                    <term>429</term><description>TooManyRequests - This means you have exceeded the number of request units per second. Consult the DocumentClientException.RetryAfter value to see how long you should wait before retrying this operation.</description>
                </item>
            </list>
            </exception>
            <example>
            <code language="c#">
            <![CDATA[
            //This reads a DocumentCollection record from a database where
            // - sample_database is the ID of the database
            // - collection_id is the ID of the collection resource to be read
            var collLink = "/dbs/sample_database/colls/collection_id";
            DocumentCollection coll = await client.ReadDocumentCollectionAsync(collLink);
            ]]>
            </code>
            </example>
            <remarks>
            <para>
            Doing a read of a resource is the most efficient way to get a resource from the Database. If you know the resource's ID, do a read instead of a query by ID.
            </para>
            <para>
            The example shown uses ID-based links, where the link is composed of the ID properties used when the resources were created.
            You can still use the <see cref="P:Microsoft.Azure.Documents.Resource.SelfLink"/> property of the DocumentCollection if you prefer. A self-link is a URI for a resource that is made up of Resource Identifiers  (or the _rid properties).
            ID-based links and SelfLink will both work.
            The format for <paramref name="documentCollectionLink"/> is always "/dbs/{db identifier}/colls/{coll identifier}" only
            the values within the {} change depending on which method you wish to use to address the resource.
            </para>
            </remarks>
            <seealso cref="T:Microsoft.Azure.Documents.DocumentCollection"/>
            <seealso cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>
            <seealso cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/>
            <seealso cref="T:System.Threading.Tasks.Task"/>
            <seealso cref="T:System.Uri"/>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.DocumentClient.ReadStoredProcedureAsync(System.String,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Reads a <see cref="T:Microsoft.Azure.Documents.StoredProcedure"/> from the Azure Cosmos DB service as an asynchronous operation.
            </summary>
            <param name="storedProcedureLink">The link of the stored procedure to be read.</param>
            <param name="options">(Optional) The request options for the request.</param>
            <returns>
            A <see cref="N:System.Threading.Tasks"/> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/> which wraps a <see cref="T:Microsoft.Azure.Documents.StoredProcedure"/> containing the read resource record.
            </returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="storedProcedureLink"/> is not set.</exception>
            <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
            <list type="table">
                <listheader>
                    <term>StatusCode</term><description>Reason for exception</description>
                </listheader>
                <item>
                    <term>404</term><description>NotFound - This means the resource you tried to read did not exist.</description>
                </item>
                <item>
                    <term>429</term><description>TooManyRequests - This means you have exceeded the number of request units per second. Consult the DocumentClientException.RetryAfter value to see how long you should wait before retrying this operation.</description>
                </item>
            </list>
            </exception>
            <example>
            <code language="c#">
            <![CDATA[
            //Reads a StoredProcedure from a Database and DocumentCollection where
            // - sample_database is the ID of the database
            // - sample_collection is the ID of the collection
            // - sproc_id is the ID of the stored procedure to be read
            var sprocLink = "/dbs/sample_database/colls/sample_collection/sprocs/sproc_id";
            StoredProcedure sproc = await client.ReadStoredProcedureAsync(sprocLink);
            ]]>
            </code>
            </example>
            <remarks>
            <para>
            Doing a read of a resource is the most efficient way to get a resource from the Database. If you know the resource's ID, do a read instead of a query by ID.
            </para>
            <para>
            The example shown uses ID-based links, where the link is composed of the ID properties used when the resources were created.
            You can still use the <see cref="P:Microsoft.Azure.Documents.Resource.SelfLink"/> property of the Stored Procedure if you prefer. A self-link is a URI for a resource that is made up of Resource Identifiers  (or the _rid properties).
            ID-based links and SelfLink will both work.
            The format for <paramref name="storedProcedureLink"/> is always "/dbs/{db identifier}/colls/{coll identifier}/sprocs/{sproc identifier}"
            only the values within the {...} change depending on which method you wish to use to address the resource.
            </para>
            </remarks>
            <seealso cref="T:Microsoft.Azure.Documents.StoredProcedure"/>
            <seealso cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>
            <seealso cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/>
            <seealso cref="T:System.Threading.Tasks.Task"/>
            <seealso cref="T:System.Uri"/>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.DocumentClient.ReadTriggerAsync(System.String,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Reads a <see cref="T:Microsoft.Azure.Documents.Trigger"/> from the Azure Cosmos DB service as an asynchronous operation.
            </summary>
            <param name="triggerLink">The link to the Trigger to be read.</param>
            <param name="options">(Optional) The request options for the request.</param>
            <returns>
            A <see cref="N:System.Threading.Tasks"/> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/> which wraps a <see cref="T:Microsoft.Azure.Documents.Trigger"/> containing the read resource record.
            </returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="triggerLink"/> is not set.</exception>
            <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
            <list type="table">
                <listheader>
                    <term>StatusCode</term><description>Reason for exception</description>
                </listheader>
                <item>
                    <term>404</term><description>NotFound - This means the resource you tried to read did not exist.</description>
                </item>
                <item>
                    <term>429</term><description>TooManyRequests - This means you have exceeded the number of request units per second. Consult the DocumentClientException.RetryAfter value to see how long you should wait before retrying this operation.</description>
                </item>
            </list>
            </exception>
            <example>
            <code language="c#">
            <![CDATA[
            //Reads a Trigger from a Database and DocumentCollection where
            // - sample_database is the ID of the database
            // - sample_collection is the ID of the collection
            // - trigger_id is the ID of the trigger to be read
            var triggerLink = "/dbs/sample_database/colls/sample_collection/triggers/trigger_id";
            Trigger trigger = await client.ReadTriggerAsync(triggerLink);
            ]]>
            </code>
            </example>
            <remarks>
            <para>
            Doing a read of a resource is the most efficient way to get a resource from the Database. If you know the resource's ID, do a read instead of a query by ID.
            </para>
            <para>
            The example shown uses ID-based links, where the link is composed of the ID properties used when the resources were created.
            You can still use the <see cref="P:Microsoft.Azure.Documents.Resource.SelfLink"/> property of the Trigger if you prefer. A self-link is a URI for a resource that is made up of Resource Identifiers  (or the _rid properties).
            ID-based links and SelfLink will both work.
            The format for <paramref name="triggerLink"/> is always "/dbs/{db identifier}/colls/{coll identifier}/triggers/{trigger identifier}"
            only the values within the {...} change depending on which method you wish to use to address the resource.
            </para>
            </remarks>
            <seealso cref="T:Microsoft.Azure.Documents.Trigger"/>
            <seealso cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>
            <seealso cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/>
            <seealso cref="T:System.Threading.Tasks.Task"/>
            <seealso cref="T:System.Uri"/>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.DocumentClient.ReadUserDefinedFunctionAsync(System.String,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Reads a <see cref="T:Microsoft.Azure.Documents.UserDefinedFunction"/> from the Azure Cosmos DB service as an asynchronous operation.
            </summary>
            <param name="functionLink">The link to the User Defined Function to be read.</param>
            <param name="options">(Optional) The request options for the request.</param>
            <returns>
            A <see cref="N:System.Threading.Tasks"/> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/> which wraps a <see cref="T:Microsoft.Azure.Documents.UserDefinedFunction"/> containing the read resource record.
            </returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="functionLink"/> is not set.</exception>
            <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
            <list type="table">
                <listheader>
                    <term>StatusCode</term><description>Reason for exception</description>
                </listheader>
                <item>
                    <term>404</term><description>NotFound - This means the resource you tried to read did not exist.</description>
                </item>
                <item>
                    <term>429</term><description>TooManyRequests - This means you have exceeded the number of request units per second. Consult the DocumentClientException.RetryAfter value to see how long you should wait before retrying this operation.</description>
                </item>
            </list>
            </exception>
            <example>
            <code language="c#">
            <![CDATA[
            //Reads a User Defined Function from a Database and DocumentCollection where
            // - sample_database is the ID of the database
            // - sample_collection is the ID of the collection
            // - udf_id is the ID of the user-defined function to be read
            var udfLink = "/dbs/sample_database/colls/sample_collection/udfs/udf_id";
            UserDefinedFunction udf = await client.ReadUserDefinedFunctionAsync(udfLink);
            ]]>
            </code>
            </example>
            <remarks>
            <para>
            Doing a read of a resource is the most efficient way to get a resource from the Database. If you know the resource's ID, do a read instead of a query by ID.
            </para>
            <para>
            The example shown uses ID-based links, where the link is composed of the ID properties used when the resources were created.
            You can still use the <see cref="P:Microsoft.Azure.Documents.Resource.SelfLink"/> property of the User Defined Function if you prefer. A self-link is a URI for a resource that is made up of Resource Identifiers  (or the _rid properties).
            ID-based links and SelfLink will both work.
            The format for <paramref name="functionLink"/> is always "/dbs/{db identifier}/colls/{coll identifier}/udfs/{udf identifier}"
            only the values within the {...} change depending on which method you wish to use to address the resource.
            </para>
            </remarks>
            <seealso cref="T:Microsoft.Azure.Documents.UserDefinedFunction"/>
            <seealso cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>
            <seealso cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/>
            <seealso cref="T:System.Threading.Tasks.Task"/>
            <seealso cref="T:System.Uri"/>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.DocumentClient.ReadConflictAsync(System.String,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Reads a <see cref="T:Microsoft.Azure.Documents.Conflict"/> from the Azure Cosmos DB service as an asynchronous operation.
            </summary>
            <param name="conflictLink">The link to the Conflict to be read.</param>
            <param name="options">(Optional) The request options for the request.</param>
            <returns>
            A <see cref="N:System.Threading.Tasks"/> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/> which wraps a <see cref="T:Microsoft.Azure.Documents.Conflict"/> containing the read resource record.
            </returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="conflictLink"/> is not set.</exception>
            <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
            <list type="table">
                <listheader>
                    <term>StatusCode</term><description>Reason for exception</description>
                </listheader>
                <item>
                    <term>404</term><description>NotFound - This means the resource you tried to read did not exist.</description>
                </item>
                <item>
                    <term>429</term><description>TooManyRequests - This means you have exceeded the number of request units per second. Consult the DocumentClientException.RetryAfter value to see how long you should wait before retrying this operation.</description>
                </item>
            </list>
            </exception>
            <example>
            <code language="c#">
            <![CDATA[
            //Reads a Conflict resource from a Database
            // - sample_database is the ID of the database
            // - sample_collection is the ID of the collection
            // - conflict_id is the ID of the conflict to be read
            var conflictLink = "/dbs/sample_database/colls/sample_collection/conflicts/conflict_id";
            Conflict conflict = await client.ReadConflictAsync(conflictLink);
            ]]>
            </code>
            </example>
            <remarks>
            <para>
            Doing a read of a resource is the most efficient way to get a resource from the Database. If you know the resource's ID, do a read instead of a query by ID.
            </para>
            <para>
            The example shown uses ID-based links, where the link is composed of the ID properties used when the resources were created.
            You can still use the <see cref="P:Microsoft.Azure.Documents.Resource.SelfLink"/> property of the Conflict if you prefer. A self-link is a URI for a resource that is made up of Resource Identifiers  (or the _rid properties).
            ID-based links and SelfLink will both work.
            The format for <paramref name="conflictLink"/> is always "/dbs/{db identifier}/colls/{collectioon identifier}/conflicts/{conflict identifier}"
            only the values within the {...} change depending on which method you wish to use to address the resource.
            </para>
            </remarks>
            <seealso cref="T:Microsoft.Azure.Documents.Conflict"/>
            <seealso cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>
            <seealso cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/>
            <seealso cref="T:System.Threading.Tasks.Task"/>
            <seealso cref="T:System.Uri"/>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.DocumentClient.ReadOfferAsync(System.String)">
            <summary>
            Reads an <see cref="T:Microsoft.Azure.Documents.Offer"/> from the Azure Cosmos DB service as an asynchronous operation.
            </summary>
            <param name="offerLink">The link to the Offer to be read.</param>
            <returns>
            A <see cref="N:System.Threading.Tasks"/> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/> which wraps a <see cref="T:Microsoft.Azure.Documents.Offer"/> containing the read resource record.
            </returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="offerLink"/> is not set.</exception>
            <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
            <list type="table">
                <listheader>
                    <term>StatusCode</term><description>Reason for exception</description>
                </listheader>
                <item>
                    <term>404</term><description>NotFound - This means the resource you tried to read did not exist.</description>
                </item>
                <item>
                    <term>429</term><description>TooManyRequests - This means you have exceeded the number of request units per second. Consult the DocumentClientException.RetryAfter value to see how long you should wait before retrying this operation.</description>
                </item>
            </list>
            </exception>
            <example>
            <code language="c#">
            <![CDATA[
            //Reads an Offer resource from a Database
            // - offer_id is the ID of the offer to be read
            var offerLink = "/offers/offer_id";
            Offer offer = await client.ReadOfferAsync(offerLink);
            ]]>
            </code>
            </example>
            <remarks>
            <para>
            Doing a read of a resource is the most efficient way to get a resource from the Database. If you know the resource's ID, do a read instead of a query by ID.
            </para>
            <para>
            For an Offer, id is always generated internally by the system when the linked resource is created. id and _rid are always the same for Offer.
            </para>
            <para>
            Refer to https://docs.microsoft.com/en-us/azure/cosmos-db/how-to-provision-container-throughput to learn more about 
            minimum throughput of a Cosmos container (or a database)
            To retrieve the minimum throughput for a collection/database, use the following sample 
            <code language="c#">
            <![CDATA[
            // Find the offer for the collection by SelfLink
            Offer offer = client.CreateOfferQuery(
                string.Format("SELECT * FROM offers o WHERE o.resource = '{0}'", collectionSelfLink)).AsEnumerable().FirstOrDefault();
            ResourceResponse<Offer> response = await client.ReadOfferAsync(offer.SelfLink);
            string minimumRUsForCollection = readResponse.Headers["x-ms-cosmos-min-throughput"];
            ]]>
            </code>
            </para>
            </remarks>
            <seealso cref="T:Microsoft.Azure.Documents.Conflict"/>
            <seealso cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>
            <seealso cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/>
            <seealso cref="T:System.Threading.Tasks.Task"/>
            <seealso cref="T:System.Uri"/>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.DocumentClient.ReadSchemaAsync(System.String,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Reads a <see cref="T:Microsoft.Azure.Documents.Schema"/> as an asynchronous operation.
            </summary>
            <param name="documentSchemaLink">The link for the schema to be read.</param>
            <param name="options">(Optional) The request options for the request.</param>
            <returns>
            A <see cref="N:System.Threading.Tasks"/> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/> which wraps a <see cref="T:Microsoft.Azure.Documents.Document"/> containing the read resource record.
            </returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="documentSchemaLink"/> is not set.</exception>
            <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when reading a Schema are:
            <list type="table">
                <listheader>
                    <term>StatusCode</term><description>Reason for exception</description>
                </listheader>
                <item>
                    <term>404</term><description>NotFound - This means the resource you tried to read did not exist.</description>
                </item>
                <item>
                    <term>429</term><description>TooManyRequests - This means you have exceeded the number of request units per second. Consult the DocumentClientException.RetryAfter value to see how long you should wait before retrying this operation.</description>
                </item>
            </list>
            </exception>
            <example>
            <code language="c#">
            <![CDATA[
            //This reads a schema record from a database & collection where
            // - sample_database is the ID of the database
            // - sample_collection is the ID of the collection
            // - schema_id is the ID of the document resource
            var docLink = "/dbs/sample_database/colls/sample_collection/schemas/schemas_id";
            Schema schema = await client.ReadSchemaAsync(docLink);
            ]]>
            </code>
            </example>
            <remarks>
            <para>
            Doing a read of a resource is the most efficient way to get a resource from the Database. If you know the resource's ID, do a read instead of a query by ID.
            </para>
            <para>
            The example shown uses ID-based links, where the link is composed of the ID properties used when the resources were created.
            You can still use the <see cref="P:Microsoft.Azure.Documents.Resource.SelfLink"/> property of the Document if you prefer. A self-link is a URI for a resource that is made up of Resource Identifiers  (or the _rid properties).
            ID-based links and SelfLink will both work.
            The format for <paramref name="documentSchemaLink"/> is always "/dbs/{db identifier}/colls/{coll identifier}/schema/{schema identifier}" only
            the values within the {} change depending on which method you wish to use to address the resource.
            </para>
            </remarks>
            <seealso cref="T:Microsoft.Azure.Documents.Schema"/>
            <seealso cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>
            <seealso cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/>
            <seealso cref="T:System.Threading.Tasks.Task"/>
            <seealso cref="T:System.Uri"/>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.DocumentClient.ReadUserDefinedTypeAsync(System.String,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Reads a <see cref="T:Microsoft.Azure.Documents.UserDefinedType"/> from the Azure Cosmos DB service as an asynchronous operation.
            </summary>
            <param name="userDefinedTypeLink">The link to the UserDefinedType resource to be read.</param>
            <param name="options">(Optional) The request options for the request.</param>
            <returns>
            A <see cref="N:System.Threading.Tasks"/> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/> which wraps a <see cref="T:Microsoft.Azure.Documents.UserDefinedType"/> containing the read resource record.
            </returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="userDefinedTypeLink"/> is not set.</exception>
            <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a UserDefinedType are:
            <list type="table">
                <listheader>
                    <term>StatusCode</term><description>Reason for exception</description>
                </listheader>
                <item>
                    <term>404</term><description>NotFound - This means the resource you tried to read did not exist.</description>
                </item>
                <item>
                    <term>429</term><description>TooManyRequests - This means you have exceeded the number of request units per second. Consult the DocumentClientException.RetryAfter value to see how long you should wait before retrying this operation.</description>
                </item>
            </list>
            </exception>
            <example>
            <code language="c#">
            <![CDATA[
            //Reads a User resource from a Database
            // - sample_database is the ID of the database
            // - userDefinedType_id is the ID of the user defined type to be read
            var userDefinedTypeLink = "/dbs/sample_database/udts/userDefinedType_id";
            UserDefinedType userDefinedType = await client.ReadUserDefinedTypeAsync(userDefinedTypeLink);
            ]]>
            </code>
            </example>
            <remarks>
            <para>
            Doing a read of a resource is the most efficient way to get a resource from the Database. If you know the resource's ID, do a read instead of a query by ID.
            </para>
            <para>
            The example shown user defined type ID-based links, where the link is composed of the ID properties used when the resources were created.
            You can still use the <see cref="P:Microsoft.Azure.Documents.Resource.SelfLink"/> property of the UserDefinedType if you prefer. A self-link is a URI for a resource that is made up of Resource Identifiers  (or the _rid properties).
            ID-based links and SelfLink will both work.
            The format for <paramref name="userDefinedTypeLink"/> is always "/dbs/{db identifier}/udts/{user defined type identifier}"
            only the values within the {...} change depending on which method you wish to use to address the resource.
            </para>
            </remarks>
            <seealso cref="T:Microsoft.Azure.Documents.UserDefinedType"/>
            <seealso cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>
            <seealso cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/>
            <seealso cref="T:System.Threading.Tasks.Task"/>
            <seealso cref="T:System.Uri"/>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.DocumentClient.ReadDatabaseFeedAsync(Microsoft.Azure.Cosmos.FeedOptions)">
             <summary>
             Reads the feed (sequence) of <see cref="T:Microsoft.Azure.Documents.Database"/> for a database account from the Azure Cosmos DB service as an asynchronous operation.
             </summary>
             <param name="options">(Optional) The request options for the request.</param>
             <returns>
             A <see cref="N:System.Threading.Tasks"/> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/> which wraps a <see cref="T:Microsoft.Azure.Documents.Database"/> containing the read resource record.
             </returns>
             <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
             <list type="table">
                 <listheader>
                     <term>StatusCode</term><description>Reason for exception</description>
                 </listheader>
                 <item>
                     <term>429</term><description>TooManyRequests - This means you have exceeded the number of request units per second. Consult the DocumentClientException.RetryAfter value to see how long you should wait before retrying this operation.</description>
                 </item>
             </list>
             </exception>
             <example>
             <code language="c#">
             <![CDATA[
             int count = 0;
             string continuation = string.Empty;
             do
             {
                 // Read the feed 10 items at a time until there are no more items to read
                 DoucmentFeedResponse<Database> response = await client.ReadDatabaseFeedAsync(new FeedOptions
                                                                             {
                                                                                 MaxItemCount = 10,
                                                                                 RequestContinuation = continuation
                                                                             });
            
                 // Append the item count
                 count += response.Count;
            
                 // Get the continuation so that we know when to stop.
                  continuation = response.ResponseContinuation;
             } while (!string.IsNullOrEmpty(continuation));
             ]]>
             </code>
             </example>
             <seealso cref="T:Microsoft.Azure.Documents.Database"/>
             <seealso cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>
             <seealso cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/>
             <seealso cref="T:System.Threading.Tasks.Task"/>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.DocumentClient.ReadPartitionKeyRangeFeedAsync(System.String,Microsoft.Azure.Cosmos.FeedOptions)">
            <summary>
            Reads the feed (sequence) of <see cref="T:Microsoft.Azure.Documents.PartitionKeyRange"/> for a database account from the Azure Cosmos DB service as an asynchronous operation.
            </summary>
            <param name="partitionKeyRangesOrCollectionLink">The link of the resources to be read, or owner collection link, SelfLink or AltLink. E.g. /dbs/db_rid/colls/coll_rid/pkranges</param>
            <param name="options">(Optional) The request options for the request.</param>
            <returns>
            A <see cref="N:System.Threading.Tasks"/> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/> which wraps a <see cref="T:Microsoft.Azure.Documents.Database"/> containing the read resource record.
            </returns>
            <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
            <list type="table">
                <listheader>
                    <term>StatusCode</term><description>Reason for exception</description>
                </listheader>
                <item>
                    <term>429</term><description>TooManyRequests - This means you have exceeded the number of request units per second. Consult the DocumentClientException.RetryAfter value to see how long you should wait before retrying this operation.</description>
                </item>
            </list>
            </exception>
            <example>
            <code language="c#">
            <![CDATA[
            DoucmentFeedResponse<PartitionKeyRange> response = null;
            List<string> ids = new List<string>();
            do
            {
                response = await client.ReadPartitionKeyRangeFeedAsync(collection.SelfLink, new FeedOptions { MaxItemCount = 1000 });
                foreach (var item in response)
                {
                    ids.Add(item.Id);
                }
            }
            while (!string.IsNullOrEmpty(response.ResponseContinuation));
            ]]>
            </code>
            </example>
            <seealso cref="T:Microsoft.Azure.Documents.PartitionKeyRange"/>
            <seealso cref="T:Microsoft.Azure.Cosmos.FeedOptions"/>
            <seealso cref="T:Microsoft.Azure.Cosmos.DocumentFeedResponse`1"/>
            <seealso cref="T:System.Threading.Tasks.Task"/>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.DocumentClient.ReadDocumentCollectionFeedAsync(System.String,Microsoft.Azure.Cosmos.FeedOptions)">
             <summary>
             Reads the feed (sequence) of <see cref="T:Microsoft.Azure.Documents.DocumentCollection"/> for a database from the Azure Cosmos DB service as an asynchronous operation.
             </summary>
             <param name="collectionsLink">The SelfLink of the resources to be read. E.g. /dbs/db_rid/colls/ </param>
             <param name="options">(Optional) The request options for the request.</param>
             <returns>
             A <see cref="N:System.Threading.Tasks"/> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/> which wraps a <see cref="T:Microsoft.Azure.Documents.DocumentCollection"/> containing the read resource record.
             </returns>
             <exception cref="T:System.ArgumentNullException">If <paramref name="collectionsLink"/> is not set.</exception>
             <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
             <list type="table">
                 <listheader>
                     <term>StatusCode</term><description>Reason for exception</description>
                 </listheader>
                 <item>
                     <term>404</term><description>NotFound - This means the resource feed you tried to read did not exist. Check the parent rids are correct.</description>
                 </item>
                 <item>
                     <term>429</term><description>TooManyRequests - This means you have exceeded the number of request units per second. Consult the DocumentClientException.RetryAfter value to see how long you should wait before retrying this operation.</description>
                 </item>
             </list>
             </exception>
             <example>
             <code language="c#">
             <![CDATA[
             int count = 0;
             string continuation = string.Empty;
             do
             {
                 // Read the feed 10 items at a time until there are no more items to read
                 DoucmentFeedResponse<DocumentCollection> response = await client.ReadDocumentCollectionFeedAsync("/dbs/db_rid/colls/",
                                                                 new FeedOptions
                                                                 {
                                                                     MaxItemCount = 10,
                                                                     RequestContinuation = continuation
                                                                 });
            
                 // Append the item count
                 count += response.Count;
            
                 // Get the continuation so that we know when to stop.
                  continuation = response.ResponseContinuation;
             } while (!string.IsNullOrEmpty(continuation));
             ]]>
             </code>
             </example>
             <seealso cref="T:Microsoft.Azure.Documents.DocumentCollection"/>
             <seealso cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>
             <seealso cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/>
             <seealso cref="T:System.Threading.Tasks.Task"/>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.DocumentClient.ReadStoredProcedureFeedAsync(System.String,Microsoft.Azure.Cosmos.FeedOptions)">
             <summary>
             Reads the feed (sequence) of <see cref="T:Microsoft.Azure.Documents.StoredProcedure"/> for a collection from the Azure Cosmos DB service as an asynchronous operation.
             </summary>
             <param name="storedProceduresLink">The SelfLink of the resources to be read. E.g. /dbs/db_rid/colls/col_rid/sprocs/ </param>
             <param name="options">(Optional) The request options for the request.</param>
             <returns>
             A <see cref="N:System.Threading.Tasks"/> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/> which wraps a <see cref="T:Microsoft.Azure.Documents.StoredProcedure"/> containing the read resource record.
             </returns>
             <exception cref="T:System.ArgumentNullException">If <paramref name="storedProceduresLink"/> is not set.</exception>
             <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
             <list type="table">
                 <listheader>
                     <term>StatusCode</term><description>Reason for exception</description>
                 </listheader>
                 <item>
                     <term>404</term><description>NotFound - This means the resource feed you tried to read did not exist. Check the parent rids are correct.</description>
                 </item>
                 <item>
                     <term>429</term><description>TooManyRequests - This means you have exceeded the number of request units per second. Consult the DocumentClientException.RetryAfter value to see how long you should wait before retrying this operation.</description>
                 </item>
             </list>
             </exception>
             <example>
             <code language="c#">
             <![CDATA[
             int count = 0;
             string continuation = string.Empty;
             do
             {
                 // Read the feed 10 items at a time until there are no more items to read
                 DoucmentFeedResponse<StoredProcedure> response = await client.ReadStoredProcedureFeedAsync("/dbs/db_rid/colls/col_rid/sprocs/",
                                                                 new FeedOptions
                                                                 {
                                                                     MaxItemCount = 10,
                                                                     RequestContinuation = continuation
                                                                 });
            
                 // Append the item count
                 count += response.Count;
            
                 // Get the continuation so that we know when to stop.
                  continuation = response.ResponseContinuation;
             } while (!string.IsNullOrEmpty(continuation));
             ]]>
             </code>
             </example>
             <seealso cref="T:Microsoft.Azure.Documents.StoredProcedure"/>
             <seealso cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>
             <seealso cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/>
             <seealso cref="T:System.Threading.Tasks.Task"/>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.DocumentClient.ReadTriggerFeedAsync(System.String,Microsoft.Azure.Cosmos.FeedOptions)">
             <summary>
             Reads the feed (sequence) of <see cref="T:Microsoft.Azure.Documents.Trigger"/> for a collection from the Azure Cosmos DB service as an asynchronous operation.
             </summary>
             <param name="triggersLink">The SelfLink of the resources to be read. E.g. /dbs/db_rid/colls/col_rid/triggers/ </param>
             <param name="options">(Optional) The request options for the request.</param>
             <returns>
             A <see cref="N:System.Threading.Tasks"/> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/> which wraps a <see cref="T:Microsoft.Azure.Documents.Trigger"/> containing the read resource record.
             </returns>
             <exception cref="T:System.ArgumentNullException">If <paramref name="triggersLink"/> is not set.</exception>
             <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
             <list type="table">
                 <listheader>
                     <term>StatusCode</term><description>Reason for exception</description>
                 </listheader>
                 <item>
                     <term>404</term><description>NotFound - This means the resource feed you tried to read did not exist. Check the parent rids are correct.</description>
                 </item>
                 <item>
                     <term>429</term><description>TooManyRequests - This means you have exceeded the number of request units per second. Consult the DocumentClientException.RetryAfter value to see how long you should wait before retrying this operation.</description>
                 </item>
             </list>
             </exception>
             <example>
             <code language="c#">
             <![CDATA[
             int count = 0;
             string continuation = string.Empty;
             do
             {
                 // Read the feed 10 items at a time until there are no more items to read
                 DoucmentFeedResponse<Trigger> response = await client.ReadTriggerFeedAsync("/dbs/db_rid/colls/col_rid/triggers/",
                                                                 new FeedOptions
                                                                 {
                                                                     MaxItemCount = 10,
                                                                     RequestContinuation = continuation
                                                                 });
            
                 // Append the item count
                 count += response.Count;
            
                 // Get the continuation so that we know when to stop.
                  continuation = response.ResponseContinuation;
             } while (!string.IsNullOrEmpty(continuation));
             ]]>
             </code>
             </example>
             <seealso cref="T:Microsoft.Azure.Documents.Trigger"/>
             <seealso cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>
             <seealso cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/>
             <seealso cref="T:System.Threading.Tasks.Task"/>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.DocumentClient.ReadUserDefinedFunctionFeedAsync(System.String,Microsoft.Azure.Cosmos.FeedOptions)">
             <summary>
             Reads the feed (sequence) of <see cref="T:Microsoft.Azure.Documents.UserDefinedFunction"/> for a collection from the Azure Cosmos DB service as an asynchronous operation.
             </summary>
             <param name="userDefinedFunctionsLink">The SelfLink of the resources to be read. E.g. /dbs/db_rid/colls/col_rid/udfs/ </param>
             <param name="options">(Optional) The request options for the request.</param>
             <returns>
             A <see cref="N:System.Threading.Tasks"/> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/> which wraps a <see cref="T:Microsoft.Azure.Documents.UserDefinedFunction"/> containing the read resource record.
             </returns>
             <exception cref="T:System.ArgumentNullException">If <paramref name="userDefinedFunctionsLink"/> is not set.</exception>
             <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
             <list type="table">
                 <listheader>
                     <term>StatusCode</term><description>Reason for exception</description>
                 </listheader>
                 <item>
                     <term>404</term><description>NotFound - This means the resource feed you tried to read did not exist. Check the parent rids are correct.</description>
                 </item>
                 <item>
                     <term>429</term><description>TooManyRequests - This means you have exceeded the number of request units per second. Consult the DocumentClientException.RetryAfter value to see how long you should wait before retrying this operation.</description>
                 </item>
             </list>
             </exception>
             <example>
             <code language="c#">
             <![CDATA[
             int count = 0;
             string continuation = string.Empty;
             do
             {
                 // Read the feed 10 items at a time until there are no more items to read
                 DoucmentFeedResponse<UserDefinedFunction> response = await client.ReadUserDefinedFunctionFeedAsync("/dbs/db_rid/colls/col_rid/udfs/",
                                                                 new FeedOptions
                                                                 {
                                                                     MaxItemCount = 10,
                                                                     RequestContinuation = continuation
                                                                 });
            
                 // Append the item count
                 count += response.Count;
            
                 // Get the continuation so that we know when to stop.
                  continuation = response.ResponseContinuation;
             } while (!string.IsNullOrEmpty(continuation));
             ]]>
             </code>
             </example>
             <seealso cref="T:Microsoft.Azure.Documents.UserDefinedFunction"/>
             <seealso cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>
             <seealso cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/>
             <seealso cref="T:System.Threading.Tasks.Task"/>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.DocumentClient.ReadDocumentFeedAsync(System.String,Microsoft.Azure.Cosmos.FeedOptions,System.Threading.CancellationToken)">
             <summary>
             Reads the feed (sequence) of documents for a specified collection from the Azure Cosmos DB service.
             This takes returns a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/> which will contain an enumerable list of dynamic objects.
             </summary>
             <param name="documentsLink">The SelfLink of the resources to be read. E.g. /dbs/db_rid/colls/coll_rid/docs/ </param>
             <param name="options">(Optional) The request options for the request.</param>
             <param name="cancellationToken">(Optional) A <see cref="T:System.Threading.CancellationToken"/> that can be used by other objects or threads to receive notice of cancellation.</param>
             <returns>
             A <see cref="N:System.Threading.Tasks"/> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/> containing dynamic objects representing the items in the feed.
             </returns>
             <exception cref="T:System.ArgumentNullException">If <paramref name="documentsLink"/> is not set.</exception>
             <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
             <list type="table">
                 <listheader>
                     <term>StatusCode</term><description>Reason for exception</description>
                 </listheader>
                 <item>
                     <term>404</term><description>NotFound - This means the resource feed you tried to read did not exist. Check the parent rids are correct.</description>
                 </item>
                 <item>
                     <term>429</term><description>TooManyRequests - This means you have exceeded the number of request units per second. Consult the DocumentClientException.RetryAfter value to see how long you should wait before retrying this operation.</description>
                 </item>
             </list>
             </exception>
             <example>
             <code language="c#">
             <![CDATA[
             int count = 0;
             string continuation = string.Empty;
             do
             {
                 // Read the feed 10 items at a time until there are no more items to read
                 DoucmentFeedResponse<dynamic> response = await client.ReadDocumentFeedAsync("/dbs/db_rid/colls/coll_rid/docs/",
                                                                 new FeedOptions
                                                                 {
                                                                     MaxItemCount = 10,
                                                                     RequestContinuation = continuation
                                                                 });
            
                 // Append the item count
                 count += response.Count;
            
                 // Get the continuation so that we know when to stop.
                  continuation = response.ResponseContinuation;
             } while (!string.IsNullOrEmpty(continuation));
             ]]>
             </code>
             </example>
             <remarks>
             Instead of DoucmentFeedResponse{Document} this method takes advantage of dynamic objects in .NET. This way a single feed result can contain any kind of Document, or POCO object.
             This is important becuse a DocumentCollection can contain different kinds of documents.
             </remarks>
             <seealso cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>
             <seealso cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/>
             <seealso cref="T:System.Threading.Tasks.Task"/>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.DocumentClient.ReadConflictFeedAsync(System.String,Microsoft.Azure.Cosmos.FeedOptions)">
             <summary>
             Reads the feed (sequence) of <see cref="T:Microsoft.Azure.Documents.Conflict"/> for a collection from the Azure Cosmos DB service as an asynchronous operation.
             </summary>
             <param name="conflictsLink">The SelfLink of the resources to be read. E.g. /dbs/db_rid/colls/coll_rid/conflicts/ </param>
             <param name="options">(Optional) The request options for the request.</param>
             <returns>
             A <see cref="N:System.Threading.Tasks"/> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/> which wraps a <see cref="T:Microsoft.Azure.Documents.Conflict"/> containing the read resource record.
             </returns>
             <exception cref="T:System.ArgumentNullException">If <paramref name="conflictsLink"/> is not set.</exception>
             <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
             <list type="table">
                 <listheader>
                     <term>StatusCode</term><description>Reason for exception</description>
                 </listheader>
                 <item>
                     <term>404</term><description>NotFound - This means the resource feed you tried to read did not exist. Check the parent rids are correct.</description>
                 </item>
                 <item>
                     <term>429</term><description>TooManyRequests - This means you have exceeded the number of request units per second. Consult the DocumentClientException.RetryAfter value to see how long you should wait before retrying this operation.</description>
                 </item>
             </list>
             </exception>
             <example>
             <code language="c#">
             <![CDATA[
             int count = 0;
             string continuation = string.Empty;
             do
             {
                 // Read the feed 10 items at a time until there are no more items to read
                 DoucmentFeedResponse<Conflict> response = await client.ReadConflictAsync("/dbs/db_rid/colls/coll_rid/conflicts/",
                                                                 new FeedOptions
                                                                 {
                                                                     MaxItemCount = 10,
                                                                     RequestContinuation = continuation
                                                                 });
            
                 // Append the item count
                 count += response.Count;
            
                 // Get the continuation so that we know when to stop.
                  continuation = response.ResponseContinuation;
             } while (!string.IsNullOrEmpty(continuation));
             ]]>
             </code>
             </example>
             <seealso cref="T:Microsoft.Azure.Documents.Conflict"/>
             <seealso cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>
             <seealso cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/>
             <seealso cref="T:System.Threading.Tasks.Task"/>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.DocumentClient.ReadOffersFeedAsync(Microsoft.Azure.Cosmos.FeedOptions)">
             <summary>
             Reads the feed (sequence) of <see cref="T:Microsoft.Azure.Documents.Offer"/> for a database account from the Azure Cosmos DB service
             as an asynchronous operation.
             </summary>
             <param name="options">(Optional) The request options for the request.</param>
             <returns>
             A <see cref="N:System.Threading.Tasks"/> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/> which wraps a <see cref="T:Microsoft.Azure.Documents.Offer"/> containing the read resource record.
             </returns>
             <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
             <list type="table">
                 <listheader>
                     <term>StatusCode</term><description>Reason for exception</description>
                 </listheader>
                 <item>
                     <term>429</term><description>TooManyRequests - This means you have exceeded the number of request units per second. Consult the DocumentClientException.RetryAfter value to see how long you should wait before retrying this operation.</description>
                 </item>
             </list>
             </exception>
             <example>
             <code language="c#">
             <![CDATA[
             int count = 0;
             string continuation = string.Empty;
             do
             {
                 // Read the feed 10 items at a time until there are no more items to read
                 DoucmentFeedResponse<Offer> response = await client.ReadOfferAsync(new FeedOptions
                                                                             {
                                                                                 MaxItemCount = 10,
                                                                                 RequestContinuation = continuation
                                                                             });
            
                 // Append the item count
                 count += response.Count;
            
                 // Get the continuation so that we know when to stop.
                  continuation = response.ResponseContinuation;
             } while (!string.IsNullOrEmpty(continuation));
             ]]>
             </code>
             </example>
             <seealso cref="T:Microsoft.Azure.Documents.Offer"/>
             <seealso cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>
             <seealso cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/>
             <seealso cref="T:System.Threading.Tasks.Task"/>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.DocumentClient.ReadSchemaFeedAsync(System.String,Microsoft.Azure.Cosmos.FeedOptions)">
             <summary>
             Reads the feed (sequence) of <see cref="T:Microsoft.Azure.Documents.Schema"/> for a collection as an asynchronous operation.
             </summary>
             <param name="documentCollectionSchemaLink">The SelfLink of the resources to be read. E.g. /dbs/db_rid/colls/coll_rid/schemas </param>
             <param name="options">(Optional) The request options for the request.</param>
             <returns>
             A <see cref="N:System.Threading.Tasks"/> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/> which wraps a <see cref="T:Microsoft.Azure.Documents.Schema"/> containing the read resource record.
             </returns>
             <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
             <list type="table">
                 <listheader>
                     <term>StatusCode</term><description>Reason for exception</description>
                 </listheader>
                 <item>
                     <term>404</term><description>NotFound - This means the resource feed you tried to read did not exist. Check the parent rids are correct.</description>
                 </item>
                 <item>
                     <term>429</term><description>TooManyRequests - This means you have exceeded the number of request units per second. Consult the DocumentClientException.RetryAfter value to see how long you should wait before retrying this operation.</description>
                 </item>
             </list>
             </exception>
             <example>
             <code language="c#">
             <![CDATA[
             int count = 0;
             string continuation = string.Empty;
             do
             {
                 // Read the feed 10 items at a time until there are no more items to read
                 DoucmentFeedResponse<User> response = await client.ReadUserFeedAsync("/dbs/db_rid/colls/coll_rid/schemas",
                                                                 new FeedOptions
                                                                 {
                                                                     MaxItemCount = 10,
                                                                     RequestContinuation = continuation
                                                                 });
            
                 // Append the item count
                 count += response.Count;
            
                 // Get the continuation so that we know when to stop.
                  continuation = response.ResponseContinuation;
             } while (!string.IsNullOrEmpty(continuation));
             ]]>
             </code>
             </example>
             <seealso cref="T:Microsoft.Azure.Documents.Schema"/>
             <seealso cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>
             <seealso cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/>
             <seealso cref="T:System.Threading.Tasks.Task"/>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.DocumentClient.ReadUserDefinedTypeFeedAsync(System.String,Microsoft.Azure.Cosmos.FeedOptions)">
             <summary>
             Reads the feed (sequence) of <see cref="T:Microsoft.Azure.Documents.UserDefinedType"/> for a database from the Azure Cosmos DB service as an asynchronous operation.
             </summary>
             <param name="userDefinedTypesLink">The SelfLink of the resources to be read. E.g. /dbs/db_rid/udts/ </param>
             <param name="options">(Optional) The request options for the request.</param>
             <returns>
             A <see cref="N:System.Threading.Tasks"/> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/> which wraps a <see cref="T:Microsoft.Azure.Documents.UserDefinedType"/> containing the read resource record.
             </returns>
             <exception cref="T:System.ArgumentNullException">If <paramref name="userDefinedTypesLink"/> is not set.</exception>
             <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a UserDefinedType are:
             <list type="table">
                 <listheader>
                     <term>StatusCode</term><description>Reason for exception</description>
                 </listheader>
                 <item>
                     <term>404</term><description>NotFound - This means the resource feed you tried to read did not exist. Check the parent rids are correct.</description>
                 </item>
                 <item>
                     <term>429</term><description>TooManyRequests - This means you have exceeded the number of request units per second. Consult the DocumentClientException.RetryAfter value to see how long you should wait before retrying this operation.</description>
                 </item>
             </list>
             </exception>
             <example>
             <code language="c#">
             <![CDATA[
             int count = 0;
             string continuation = string.Empty;
             do
             {
                 // Read the feed 10 items at a time until there are no more items to read
                 DoucmentFeedResponse<UserDefinedType> response = await client.ReadUserDefinedTypeFeedAsync("/dbs/db_rid/udts/",
                                                                 new FeedOptions
                                                                 {
                                                                     MaxItemCount = 10,
                                                                     RequestContinuation = continuation
                                                                 });
            
                 // Append the item count
                 count += response.Count;
            
                 // Get the continuation so that we know when to stop.
                  continuation = response.ResponseContinuation;
             } while (!string.IsNullOrEmpty(continuation));
             ]]>
             </code>
             </example>
             <seealso cref="T:Microsoft.Azure.Documents.UserDefinedType"/>
             <seealso cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>
             <seealso cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/>
             <seealso cref="T:System.Threading.Tasks.Task"/>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.DocumentClient.ExecuteStoredProcedureAsync``1(System.String,System.Object[])">
             <summary>
             Executes a stored procedure against a collection as an asynchronous operation in the Azure Cosmos DB service.
             </summary>
             <typeparam name="TValue">The type of the stored procedure's return value.</typeparam>
             <param name="storedProcedureLink">The link to the stored procedure to execute.</param>
             <param name="procedureParams">(Optional) An array of dynamic objects representing the parameters for the stored procedure.</param>
             <exception cref="T:System.ArgumentNullException">If <paramref name="storedProcedureLink"/> is not set.</exception>
             <returns>The task object representing the service response for the asynchronous operation which would contain any response set in the stored procedure.</returns>
             <example>
             <code language="c#">
             <![CDATA[
             //Execute a StoredProcedure with ResourceId of "sproc_rid" that takes two "Player" documents, does some stuff, and returns a bool
             StoredProcedureResponse<bool> sprocResponse = await client.ExecuteStoredProcedureAsync<bool>(
                                                                     "/dbs/db_rid/colls/col_rid/sprocs/sproc_rid/",
                                                                     new Player { id="1", name="joe" } ,
                                                                     new Player { id="2", name="john" }
                                                                 );
            
             if (sprocResponse.Response) Console.WriteLine("Congrats, the stored procedure did some stuff");
             ]]>
             </code>
             </example>
             <seealso cref="T:Microsoft.Azure.Documents.StoredProcedure"/>
             <seealso cref="T:Microsoft.Azure.Cosmos.StoredProcedureResponse`1"/>
             <seealso cref="T:System.Threading.Tasks.Task"/>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.DocumentClient.ExecuteStoredProcedureAsync``1(System.String,Microsoft.Azure.Documents.Client.RequestOptions,System.Object[])">
             <summary>
             Executes a stored procedure against a partitioned collection in the Azure Cosmos DB service as an asynchronous operation, specifiying a target partition.
             </summary>
             <typeparam name="TValue">The type of the stored procedure's return value.</typeparam>
             <param name="storedProcedureLink">The link to the stored procedure to execute.</param>
             <param name="options">(Optional) The request options for the request.</param>
             <param name="procedureParams">(Optional) An array of dynamic objects representing the parameters for the stored procedure.</param>
             <exception cref="T:System.ArgumentNullException">If <paramref name="storedProcedureLink"/> is not set.</exception>
             <returns>The task object representing the service response for the asynchronous operation which would contain any response set in the stored procedure.</returns>
             <example>
             <code language="c#">
             <![CDATA[
             //Execute a StoredProcedure with ResourceId of "sproc_rid" that takes two "Player" documents, does some stuff, and returns a bool
             StoredProcedureResponse<bool> sprocResponse = await client.ExecuteStoredProcedureAsync<bool>(
                                                                     "/dbs/db_rid/colls/col_rid/sprocs/sproc_rid/",
                                                                     new RequestOptions { PartitionKey = new PartitionKey(1) },
                                                                     new Player { id="1", name="joe" } ,
                                                                     new Player { id="2", name="john" }
                                                                 );
            
             if (sprocResponse.Response) Console.WriteLine("Congrats, the stored procedure did some stuff");
             ]]>
             </code>
             </example>
             <seealso cref="T:Microsoft.Azure.Documents.StoredProcedure"/>
             <seealso cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>
             <seealso cref="T:Microsoft.Azure.Cosmos.StoredProcedureResponse`1"/>
             <seealso cref="T:System.Threading.Tasks.Task"/>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.DocumentClient.ExecuteStoredProcedureAsync``1(System.String,Microsoft.Azure.Documents.Client.RequestOptions,System.Threading.CancellationToken,System.Object[])">
             <summary>
             Executes a stored procedure against a partitioned collection in the Azure Cosmos DB service as an asynchronous operation, specifiying a target partition.
             </summary>
             <typeparam name="TValue">The type of the stored procedure's return value.</typeparam>
             <param name="storedProcedureLink">The link to the stored procedure to execute.</param>
             <param name="options">(Optional) The request options for the request.</param>
             <param name="cancellationToken">(Optional) A <see cref="T:System.Threading.CancellationToken"/> that can be used by other objects or threads to receive notice of cancellation.</param>
             <param name="procedureParams">(Optional) An array of dynamic objects representing the parameters for the stored procedure.</param>
             <exception cref="T:System.ArgumentNullException">If <paramref name="storedProcedureLink"/> is not set.</exception>
             <returns>The task object representing the service response for the asynchronous operation which would contain any response set in the stored procedure.</returns>
             <example>
             <code language="c#">
             <![CDATA[
             //Execute a StoredProcedure with ResourceId of "sproc_rid" that takes two "Player" documents, does some stuff, and returns a bool
             StoredProcedureResponse<bool> sprocResponse = await client.ExecuteStoredProcedureAsync<bool>(
                                                                     "/dbs/db_rid/colls/col_rid/sprocs/sproc_rid/",
                                                                     new RequestOptions { PartitionKey = new PartitionKey(1) },
                                                                     new Player { id="1", name="joe" } ,
                                                                     new Player { id="2", name="john" }
                                                                 );
            
             if (sprocResponse.Response) Console.WriteLine("Congrats, the stored procedure did some stuff");
             ]]>
             </code>
             </example>
             <seealso cref="T:Microsoft.Azure.Documents.StoredProcedure"/>
             <seealso cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>
             <seealso cref="T:Microsoft.Azure.Cosmos.StoredProcedureResponse`1"/>
             <seealso cref="T:System.Threading.Tasks.Task"/>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.DocumentClient.UpsertDatabaseAsync(Microsoft.Azure.Documents.Database,Microsoft.Azure.Documents.Client.RequestOptions)">
             <summary>
             Upserts a database resource as an asychronous operation in the Azure Cosmos DB service.
             </summary>
             <param name="database">The specification for the <see cref="T:Microsoft.Azure.Cosmos.Database"/> to upsert.</param>
             <param name="options">(Optional) The <see cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/> for the request.</param>
             <returns>The <see cref="T:Microsoft.Azure.Cosmos.Database"/> that was upserted within a task object representing the service response for the asynchronous operation.</returns>
             <exception cref="T:System.ArgumentNullException">If <paramref name="database"/> is not set</exception>
             <exception cref="T:System.AggregateException">Represents a consolidation of failures that occured during async processing. Look within InnerExceptions to find the actual exception(s)</exception>
             <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Database are:
             <list type="table">
                 <listheader>
                     <term>StatusCode</term><description>Reason for exception</description>
                 </listheader>
                 <item>
                     <term>400</term><description>BadRequest - This means something was wrong with the database object supplied. It is likely that an id was not supplied for the new Database.</description>
                 </item>
                 <item>
                     <term>409</term><description>Conflict - This means a <see cref="T:Microsoft.Azure.Cosmos.Database"/> with an id matching the id field of <paramref name="database"/> already existed</description>
                 </item>
             </list>
             </exception>
             <example>
             The example below upserts a new <see cref="T:Microsoft.Azure.Cosmos.Database"/> with an Id property of 'MyDatabase'
             This code snippet is intended to be used from within an Asynchronous method as it uses the await keyword
             <code language="c#">
             <![CDATA[
             using (IDocumentClient client = new DocumentClient(new Uri("service endpoint"), "auth key"))
             {
                 Database db = await client.UpsertDatabaseAsync(new Database { Id = "MyDatabase" });
             }
             ]]>
             </code>
            
             </example>
             <seealso cref="T:Microsoft.Azure.Documents.Database"/>
             <seealso cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>
             <seealso cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/>
             <seealso cref="T:System.Threading.Tasks.Task"/>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.DocumentClient.UpsertDocumentAsync(System.String,System.Object,Microsoft.Azure.Documents.Client.RequestOptions,System.Boolean,System.Threading.CancellationToken)">
             <summary>
             Upserts a Document as an asychronous operation in the Azure Cosmos DB service.
             </summary>
             <param name="documentsFeedOrDatabaseLink">The link of the <see cref="T:Microsoft.Azure.Documents.DocumentCollection"/> to upsert the document in. E.g. dbs/db_rid/colls/coll_rid/ </param>
             <param name="document">The document object to upsert.</param>
             <param name="options">(Optional) Any request options you wish to set. E.g. Specifying a Trigger to execute when creating the document. <see cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/></param>
             <param name="disableAutomaticIdGeneration">(Optional) Disables the automatic id generation, If this is True the system will throw an exception if the id property is missing from the Document.</param>
             <param name="cancellationToken">(Optional) A <see cref="T:System.Threading.CancellationToken"/> that can be used by other objects or threads to receive notice of cancellation.</param>
             <returns>The <see cref="T:Microsoft.Azure.Documents.Document"/> that was upserted contained within a <see cref="T:System.Threading.Tasks.Task"/> object representing the service response for the asynchronous operation.</returns>
             <exception cref="T:System.ArgumentNullException">If either <paramref name="documentsFeedOrDatabaseLink"/> or <paramref name="document"/> is not set.</exception>
             <exception cref="T:System.AggregateException">Represents a consolidation of failures that occured during async processing. Look within InnerExceptions to find the actual exception(s)</exception>
             <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
             <list type="table">
                 <listheader>
                     <term>StatusCode</term><description>Reason for exception</description>
                 </listheader>
                 <item>
                     <term>400</term><description>BadRequest - This means something was wrong with the document supplied. It is likely that <paramref name="disableAutomaticIdGeneration"/> was true and an id was not supplied</description>
                 </item>
                 <item>
                     <term>403</term><description>Forbidden - This likely means the collection in to which you were trying to upsert the document is full.</description>
                 </item>
                 <item>
                     <term>409</term><description>Conflict - This means a <see cref="T:Microsoft.Azure.Documents.Document"/> with an id matching the id field of <paramref name="document"/> already existed</description>
                 </item>
                 <item>
                     <term>413</term><description>RequestEntityTooLarge - This means the <see cref="T:Microsoft.Azure.Documents.Document"/> exceeds the current max entity size. Consult documentation for limits and quotas.</description>
                 </item>
                 <item>
                     <term>429</term><description>TooManyRequests - This means you have exceeded the number of request units per second. Consult the DocumentClientException.RetryAfter value to see how long you should wait before retrying this operation.</description>
                 </item>
             </list>
             </exception>
             <example>
             Azure Cosmos DB supports a number of different ways to work with documents. A document can extend <see cref="T:Microsoft.Azure.Documents.Resource"/>
             <code language="c#">
             <![CDATA[
             public class MyObject : Resource
             {
                 public string MyProperty {get; set;}
             }
            
             using (IDocumentClient client = new DocumentClient(new Uri("service endpoint"), "auth key"))
             {
                 Document doc = await client.UpsertDocumentAsync("dbs/db_rid/colls/coll_rid/", new MyObject { MyProperty = "A Value" });
             }
             ]]>
             </code>
             </example>
             <example>
             A document can be any POCO object that can be serialized to JSON, even if it doesn't extend from <see cref="T:Microsoft.Azure.Documents.Resource"/>
             <code language="c#">
             <![CDATA[
             public class MyPOCO
             {
                 public string MyProperty {get; set;}
             }
            
             using (IDocumentClient client = new DocumentClient(new Uri("service endpoint"), "auth key"))
             {
                 Document doc = await client.UpsertDocumentAsync("dbs/db_rid/colls/coll_rid/", new MyPOCO { MyProperty = "A Value" });
             }
             ]]>
             </code>
             </example>
             <example>
             A Document can also be a dynamic object
             <code language="c#">
             <![CDATA[
             using (IDocumentClient client = new DocumentClient(new Uri("service endpoint"), "auth key"))
             {
                 Document doc = await client.UpsertDocumentAsync("dbs/db_rid/colls/coll_rid/", new { SomeProperty = "A Value" } );
             }
             ]]>
             </code>
             </example>
             <example>
             Upsert a Document and execute a Pre and Post Trigger
             <code language="c#">
             <![CDATA[
             using (IDocumentClient client = new DocumentClient(new Uri("service endpoint"), "auth key"))
             {
                 Document doc = await client.UpsertDocumentAsync(
                     "dbs/db_rid/colls/coll_rid/",
                     new { id = "DOC123213443" },
                     new RequestOptions
                     {
                         PreTriggerInclude = new List<string> { "MyPreTrigger" },
                         PostTriggerInclude = new List<string> { "MyPostTrigger" }
                     });
             }
             ]]>
             </code>
             </example>
             <seealso cref="T:Microsoft.Azure.Documents.Document"/>
             <seealso cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>
             <seealso cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/>
             <seealso cref="T:System.Threading.Tasks.Task"/>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.DocumentClient.UpsertDocumentCollectionAsync(System.String,Microsoft.Azure.Documents.DocumentCollection,Microsoft.Azure.Documents.Client.RequestOptions)">
             <summary>
             Upserts a collection as an asychronous operation in the Azure Cosmos DB service.
             </summary>
             <param name="databaseLink">The link of the database to upsert the collection in. E.g. dbs/db_rid/</param>
             <param name="documentCollection">The <see cref="T:Microsoft.Azure.Documents.DocumentCollection"/> object.</param>
             <param name="options">(Optional) Any <see cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/> you wish to provide when creating a Collection. E.g. RequestOptions.OfferThroughput = 400. </param>
             <returns>The <see cref="T:Microsoft.Azure.Documents.DocumentCollection"/> that was upserted contained within a <see cref="T:System.Threading.Tasks.Task"/> object representing the service response for the asynchronous operation.</returns>
             <exception cref="T:System.ArgumentNullException">If either <paramref name="databaseLink"/> or <paramref name="documentCollection"/> is not set.</exception>
             <exception cref="T:System.AggregateException">Represents a consolidation of failures that occured during async processing. Look within InnerExceptions to find the actual exception(s)</exception>
             <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
             <list type="table">
                 <listheader>
                     <term>StatusCode</term><description>Reason for exception</description>
                 </listheader>
                 <item>
                     <term>400</term><description>BadRequest - This means something was wrong with the request supplied. It is likely that an id was not supplied for the new collection.</description>
                 </item>
                 <item>
                     <term>403</term><description>Forbidden - This means you attempted to exceed your quota for collections. Contact support to have this quota increased.</description>
                 </item>
                 <item>
                     <term>409</term><description>Conflict - This means a <see cref="T:Microsoft.Azure.Documents.DocumentCollection"/> with an id matching the id you supplied already existed.</description>
                 </item>
             </list>
             </exception>
             <example>
            
             <code language="c#">
             <![CDATA[
             using (IDocumentClient client = new DocumentClient(new Uri("service endpoint"), "auth key"))
             {
                 //Upsert a new collection with an OfferThroughput set to 10000
                 //Not passing in RequestOptions.OfferThroughput will result in a collection with the default OfferThroughput set.
                 DocumentCollection coll = await client.UpsertDocumentCollectionAsync(databaseLink,
                     new DocumentCollection { Id = "My Collection" },
                     new RequestOptions { OfferThroughput = 10000} );
             }
             ]]>
             </code>
             </example>
             <seealso cref="T:Microsoft.Azure.Documents.DocumentCollection"/>
             <seealso cref="T:Microsoft.Azure.Documents.Offer"/>
             <seealso cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>
             <seealso cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/>
             <seealso cref="T:System.Threading.Tasks.Task"/>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.DocumentClient.UpsertStoredProcedureAsync(System.String,Microsoft.Azure.Documents.StoredProcedure,Microsoft.Azure.Documents.Client.RequestOptions)">
             <summary>
             Upserts a stored procedure as an asychronous operation in the Azure Cosmos DB service.
             </summary>
             <param name="collectionLink">The link of the collection to upsert the stored procedure in. E.g. dbs/db_rid/colls/col_rid/</param>
             <param name="storedProcedure">The <see cref="T:Microsoft.Azure.Documents.StoredProcedure"/> object to upsert.</param>
             <param name="options">(Optional) Any <see cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>for this request.</param>
             <returns>The <see cref="T:Microsoft.Azure.Documents.StoredProcedure"/> that was upserted contained within a <see cref="T:System.Threading.Tasks.Task"/> object representing the service response for the asynchronous operation.</returns>
             <exception cref="T:System.ArgumentNullException">If either <paramref name="collectionLink"/> or <paramref name="storedProcedure"/> is not set.</exception>
             <exception cref="T:System.AggregateException">Represents a consolidation of failures that occured during async processing. Look within InnerExceptions to find the actual exception(s)</exception>
             <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
             <list type="table">
                 <listheader>
                     <term>StatusCode</term><description>Reason for exception</description>
                 </listheader>
                 <item>
                     <term>400</term><description>BadRequest - This means something was wrong with the request supplied. It is likely that an Id was not supplied for the stored procedure or the Body was malformed.</description>
                 </item>
                 <item>
                     <term>403</term><description>Forbidden - You have reached your quota of stored procedures for the collection supplied. Contact support to have this quota increased.</description>
                 </item>
                 <item>
                     <term>409</term><description>Conflict - This means a <see cref="T:Microsoft.Azure.Documents.StoredProcedure"/> with an id matching the id you supplied already existed.</description>
                 </item>
                 <item>
                     <term>413</term><description>RequestEntityTooLarge - This means the body of the <see cref="T:Microsoft.Azure.Documents.StoredProcedure"/> you tried to upsert was too large.</description>
                 </item>
             </list>
             </exception>
             <example>
            
             <code language="c#">
             <![CDATA[
             //Upsert a new stored procedure called "HelloWorldSproc" that takes in a single param called "name".
             StoredProcedure sproc = await client.UpsertStoredProcedureAsync(collectionLink, new StoredProcedure
             {
                Id = "HelloWorldSproc",
                Body = @"function (name){
                            var response = getContext().getResponse();
                            response.setBody('Hello ' + name);
                         }"
             });
             ]]>
             </code>
             </example>
             <seealso cref="T:Microsoft.Azure.Documents.StoredProcedure"/>
             <seealso cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>
             <seealso cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/>
             <seealso cref="T:System.Threading.Tasks.Task"/>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.DocumentClient.UpsertTriggerAsync(System.String,Microsoft.Azure.Documents.Trigger,Microsoft.Azure.Documents.Client.RequestOptions)">
             <summary>
             Upserts a trigger as an asychronous operation in the Azure Cosmos DB service.
             </summary>
             <param name="collectionLink">The link of the <see cref="T:Microsoft.Azure.Documents.DocumentCollection"/> to upsert the trigger in. E.g. dbs/db_rid/colls/col_rid/ </param>
             <param name="trigger">The <see cref="T:Microsoft.Azure.Documents.Trigger"/> object to upsert.</param>
             <param name="options">(Optional) Any <see cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>for this request.</param>
             <returns>A task object representing the service response for the asynchronous operation.</returns>
             <exception cref="T:System.ArgumentNullException">If either <paramref name="collectionLink"/> or <paramref name="trigger"/> is not set.</exception>
             <exception cref="T:System.AggregateException">Represents a consolidation of failures that occured during async processing. Look within InnerExceptions to find the actual exception(s)</exception>
             <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
             <list type="table">
                 <listheader>
                     <term>StatusCode</term><description>Reason for exception</description>
                 </listheader>
                 <item>
                     <term>400</term><description>BadRequest - This means something was wrong with the request supplied. It is likely that an Id was not supplied for the new trigger or that the Body was malformed.</description>
                 </item>
                 <item>
                     <term>403</term><description>Forbidden - You have reached your quota of triggers for the collection supplied. Contact support to have this quota increased.</description>
                 </item>
                 <item>
                     <term>409</term><description>Conflict - This means a <see cref="T:Microsoft.Azure.Documents.Trigger"/> with an id matching the id you supplied already existed.</description>
                 </item>
                 <item>
                     <term>413</term><description>RequestEntityTooLarge - This means the body of the <see cref="T:Microsoft.Azure.Documents.Trigger"/> you tried to upsert was too large.</description>
                 </item>
             </list>
             </exception>
             <example>
            
             <code language="c#">
             <![CDATA[
             //Upsert a trigger that validates the contents of a document as it is created and adds a 'timestamp' property if one was not found.
             Trigger trig = await client.UpsertTriggerAsync(collectionLink, new Trigger
             {
                 Id = "ValidateDocuments",
                 Body = @"function validate() {
                                     var context = getContext();
                                     var request = context.getRequest();                                                             
                                     var documentToCreate = request.getBody();
                                     
                                     // validate properties
                                     if (!('timestamp' in documentToCreate)) {
                                         var ts = new Date();
                                         documentToCreate['timestamp'] = ts.getTime();
                                     }
                                     
                                     // update the document that will be created
                                     request.setBody(documentToCreate);
                                   }",
                 TriggerType = TriggerType.Pre,
                 TriggerOperation = TriggerOperation.Create
             });
             ]]>
             </code>
             </example>
             <seealso cref="T:Microsoft.Azure.Documents.Trigger"/>
             <seealso cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>
             <seealso cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/>
             <seealso cref="T:System.Threading.Tasks.Task"/>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.DocumentClient.UpsertUserDefinedFunctionAsync(System.String,Microsoft.Azure.Documents.UserDefinedFunction,Microsoft.Azure.Documents.Client.RequestOptions)">
             <summary>
             Upserts a user defined function as an asychronous operation in the Azure Cosmos DB service.
             </summary>
             <param name="collectionLink">The link of the <see cref="T:Microsoft.Azure.Documents.DocumentCollection"/> to upsert the user defined function in. E.g. dbs/db_rid/colls/col_rid/ </param>
             <param name="function">The <see cref="T:Microsoft.Azure.Documents.UserDefinedFunction"/> object to upsert.</param>
             <param name="options">(Optional) Any <see cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>for this request.</param>
             <returns>A task object representing the service response for the asynchronous operation.</returns>
             <exception cref="T:System.ArgumentNullException">If either <paramref name="collectionLink"/> or <paramref name="function"/> is not set.</exception>
             <exception cref="T:System.AggregateException">Represents a consolidation of failures that occured during async processing. Look within InnerExceptions to find the actual exception(s)</exception>
             <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
             <list type="table">
                 <listheader>
                     <term>StatusCode</term><description>Reason for exception</description>
                 </listheader>
                 <item>
                     <term>400</term><description>BadRequest - This means something was wrong with the request supplied. It is likely that an Id was not supplied for the new user defined function or that the Body was malformed.</description>
                 </item>
                 <item>
                     <term>403</term><description>Forbidden - You have reached your quota of user defined functions for the collection supplied. Contact support to have this quota increased.</description>
                 </item>
                 <item>
                     <term>409</term><description>Conflict - This means a <see cref="T:Microsoft.Azure.Documents.UserDefinedFunction"/> with an id matching the id you supplied already existed.</description>
                 </item>
                 <item>
                     <term>413</term><description>RequestEntityTooLarge - This means the body of the <see cref="T:Microsoft.Azure.Documents.UserDefinedFunction"/> you tried to upsert was too large.</description>
                 </item>
             </list>
             </exception>
             <example>
            
             <code language="c#">
             <![CDATA[
             //Upsert a user defined function that converts a string to upper case
             UserDefinedFunction udf = client.UpsertUserDefinedFunctionAsync(collectionLink, new UserDefinedFunction
             {
                Id = "ToUpper",
                Body = @"function toUpper(input) {
                                    return input.toUpperCase();
                                 }",
             });
             ]]>
             </code>
             </example>
             <seealso cref="T:Microsoft.Azure.Documents.UserDefinedFunction"/>
             <seealso cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>
             <seealso cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/>
             <seealso cref="T:System.Threading.Tasks.Task"/>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.DocumentClient.UpsertUserDefinedTypeAsync(System.String,Microsoft.Azure.Documents.UserDefinedType,Microsoft.Azure.Documents.Client.RequestOptions)">
             <summary>
             Upserts a user defined type object in the Azure Cosmos DB service as an asychronous operation.
             </summary>
             <param name="databaseLink">The link of the database to upsert the user defined type in. E.g. dbs/db_rid/ </param>
             <param name="userDefinedType">The <see cref="T:Microsoft.Azure.Documents.UserDefinedType"/> object to upsert.</param>
             <param name="options">(Optional) The request options for the request.</param>
             <returns>A task object representing the service response for the asynchronous operation which contains the upserted <see cref="T:Microsoft.Azure.Documents.UserDefinedType"/> object.</returns>
             <exception cref="T:System.ArgumentNullException">If either <paramref name="databaseLink"/> or <paramref name="userDefinedType"/> is not set.</exception>
             <exception cref="T:System.AggregateException">Represents a consolidation of failures that occured during async processing. Look within InnerExceptions to find the actual exception(s)</exception>
             <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
             <list type="table">
                 <listheader>
                     <term>StatusCode</term><description>Reason for exception</description>
                 </listheader>
                 <item>
                     <term>400</term><description>BadRequest - This means something was wrong with the request supplied.</description>
                 </item>
                 <item>
                     <term>403</term><description>Forbidden - You have reached your quota of user defined type objects for this database. Contact support to have this quota increased.</description>
                 </item>
                 <item>
                     <term>409</term><description>Conflict - This means a <see cref="T:Microsoft.Azure.Documents.UserDefinedType"/> with an id matching the id you supplied already existed.</description>
                 </item>
             </list>
             </exception>
             <example>
            
             <code language="c#">
             <![CDATA[
             //Upsert a new user defined type in the specified database
             UserDefinedType userDefinedType = await client.UpsertUserDefinedTypeAsync(databaseLink, new UserDefinedType { Id = "userDefinedTypeId5" });
             ]]>
             </code>
             </example>
             <seealso cref="T:Microsoft.Azure.Documents.UserDefinedType"/>
             <seealso cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>
             <seealso cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/>
             <seealso cref="T:System.Threading.Tasks.Task"/>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.DocumentClient.GetDatabaseAccountAsync">
            <summary>
            Read the <see cref="T:Microsoft.Azure.Cosmos.AccountProperties"/> from the Azure Cosmos DB service as an asynchronous operation.
            </summary>
            <returns>
            A <see cref="T:Microsoft.Azure.Cosmos.AccountProperties"/> wrapped in a <see cref="T:System.Threading.Tasks.Task"/> object.
            </returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.DocumentClient.Microsoft#Azure#Cosmos#IDocumentClientInternal#GetDatabaseAccountInternalAsync(System.Uri,System.Threading.CancellationToken)">
            <summary>
            Read the <see cref="T:Microsoft.Azure.Cosmos.AccountProperties"/> as an asynchronous operation
            given a specific reginal endpoint url.
            </summary>
            <param name="serviceEndpoint">The reginal url of the serice endpoint.</param>
            <param name="cancellationToken">The CancellationToken</param>
            <returns>
            A <see cref="T:Microsoft.Azure.Cosmos.AccountProperties"/> wrapped in a <see cref="T:System.Threading.Tasks.Task"/> object.
            </returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.DocumentClient.GetStoreProxy(Microsoft.Azure.Documents.DocumentServiceRequest)">
            <summary>
            Certain requests must be routed through gateway even when the client connectivity mode is direct.
            For e.g., DocumentCollection creation. This method returns the <see cref="T:Microsoft.Azure.Documents.IStoreModel"/> based
            on the input <paramref name="request"/>.
            </summary>
            <returns>Returns <see cref="T:Microsoft.Azure.Documents.IStoreModel"/> to which the request must be sent</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.DocumentClient.GetLinkForRouting(Microsoft.Azure.Documents.Resource)">
            <summary>
            The preferred link used in replace operation in SDK.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.DocumentClient.CreateDocumentAsync(System.Uri,System.Object,Microsoft.Azure.Documents.Client.RequestOptions,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Creates a document as an asychronous operation in the Azure Cosmos DB service.
            </summary>
            <param name="documentCollectionUri">the URI of the document collection to create the document in.</param>
            <param name="document">the document object.</param>
            <param name="options">The request options for the request.</param>
            <param name="disableAutomaticIdGeneration">Disables the automatic id generation, will throw an exception if id is missing.</param>
            <param name="cancellationToken">(Optional) <see cref="T:System.Threading.CancellationToken"/> representing request cancellation.</param>
            <returns>The task object representing the service response for the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.DocumentClient.CreateDocumentCollectionAsync(System.Uri,Microsoft.Azure.Documents.DocumentCollection,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Creates a collection as an asychronous operation in the Azure Cosmos DB service.
            </summary>
            <param name="databaseUri">the URI of the database to create the collection in.</param>
            <param name="documentCollection">the Microsoft.Azure.Documents.DocumentCollection object.</param>
            <param name="options">The request options for the request.</param>
            <returns>The task object representing the service response for the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.DocumentClient.CreateDocumentCollectionIfNotExistsAsync(System.Uri,Microsoft.Azure.Documents.DocumentCollection,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Creates(if doesn't exist) or gets(if already exists) a collection as an asychronous operation in the Azure Cosmos DB service.
            </summary>
            <param name="databaseUri">the URI of the database to create the collection in.</param>
            <param name="documentCollection">The <see cref="T:Microsoft.Azure.Documents.DocumentCollection"/> object.</param>
            <param name="options">(Optional) Any <see cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/> you wish to provide when creating a Collection. E.g. RequestOptions.OfferThroughput = 400. </param>
            <returns>The <see cref="T:Microsoft.Azure.Documents.DocumentCollection"/> that was created contained within a <see cref="T:System.Threading.Tasks.Task"/> object representing the service response for the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.DocumentClient.CreateStoredProcedureAsync(System.Uri,Microsoft.Azure.Documents.StoredProcedure,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Creates a stored procedure as an asychronous operation in the Azure Cosmos DB service.
            </summary>
            <param name="documentCollectionUri">the URI of the document collection to create the stored procedure in.</param>
            <param name="storedProcedure">the Microsoft.Azure.Documents.StoredProcedure object.</param>
            <param name="options">The request options for the request.</param>
            <returns>The task object representing the service response for the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.DocumentClient.CreateTriggerAsync(System.Uri,Microsoft.Azure.Documents.Trigger,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Creates a trigger as an asychronous operation in the Azure Cosmos DB service.
            </summary>
            <param name="documentCollectionUri">the URI of the document collection to create the trigger in.</param>
            <param name="trigger">the Microsoft.Azure.Documents.Trigger object.</param>
            <param name="options">The request options for the request.</param>
            <returns>The task object representing the service response for the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.DocumentClient.CreateUserDefinedFunctionAsync(System.Uri,Microsoft.Azure.Documents.UserDefinedFunction,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Creates a user defined function as an asychronous operation in the Azure Cosmos DB service.
            </summary>
            <param name="documentCollectionUri">the URI of the document collection to create the user defined function in.</param>
            <param name="function">the Microsoft.Azure.Documents.UserDefinedFunction object.</param>
            <param name="options">The request options for the request.</param>
            <returns>The task object representing the service response for the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.DocumentClient.CreateUserDefinedTypeAsync(System.Uri,Microsoft.Azure.Documents.UserDefinedType,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Creates a user defined type as an asychronous operation in the Azure Cosmos DB service.
            </summary>
            <param name="databaseUri">the URI of the database to create the user defined type in.</param>
            <param name="userDefinedType">the Microsoft.Azure.Documents.UserDefinedType object.</param>
            <param name="options">The request options for the request.</param>
            <returns>The task object representing the service response for the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.DocumentClient.UpsertDocumentAsync(System.Uri,System.Object,Microsoft.Azure.Documents.Client.RequestOptions,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Upserts a document as an asynchronous operation in the Azure Cosmos DB service.
            </summary>
            <param name="documentCollectionUri">the URI of the document collection to upsert the document in.</param>
            <param name="document">the document object.</param>
            <param name="options">The request options for the request.</param>
            <param name="disableAutomaticIdGeneration">Disables the automatic id generation, will throw an exception if id is missing.</param>
            <param name="cancellationToken">(Optional) <see cref="T:System.Threading.CancellationToken"/> representing request cancellation.</param>
            <returns>The task object representing the service response for the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.DocumentClient.UpsertStoredProcedureAsync(System.Uri,Microsoft.Azure.Documents.StoredProcedure,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Upserts a stored procedure as an asynchronous operation in the Azure Cosmos DB service.
            </summary>
            <param name="documentCollectionUri">the URI of the document collection to upsert the stored procedure in.</param>
            <param name="storedProcedure">the Microsoft.Azure.Documents.StoredProcedure object.</param>
            <param name="options">The request options for the request.</param>
            <returns>The task object representing the service response for the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.DocumentClient.UpsertTriggerAsync(System.Uri,Microsoft.Azure.Documents.Trigger,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Upserts a trigger as an asynchronous operation in the Azure Cosmos DB service.
            </summary>
            <param name="documentCollectionUri">the URI of the document collection to upsert the trigger in.</param>
            <param name="trigger">the Microsoft.Azure.Documents.Trigger object.</param>
            <param name="options">The request options for the request.</param>
            <returns>The task object representing the service response for the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.DocumentClient.UpsertUserDefinedFunctionAsync(System.Uri,Microsoft.Azure.Documents.UserDefinedFunction,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Upserts a user defined function as an asynchronous operation in the Azure Cosmos DB service.
            </summary>
            <param name="documentCollectionUri">the URI of the document collection to upsert the user defined function in.</param>
            <param name="function">the Microsoft.Azure.Documents.UserDefinedFunction object.</param>
            <param name="options">The request options for the request.</param>
            <returns>The task object representing the service response for the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.DocumentClient.UpsertUserDefinedTypeAsync(System.Uri,Microsoft.Azure.Documents.UserDefinedType,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Upserts a user defined type as an asynchronous operation  in the Azure Cosmos DB service.
            </summary>
            <param name="databaseUri">the URI of the database to upsert the user defined type in.</param>
            <param name="userDefinedType">the Microsoft.Azure.Documents.UserDefinedType object.</param>
            <param name="options">The request options for the request.</param>
            <returns>The task object representing the service response for the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.DocumentClient.DeleteDatabaseAsync(System.Uri,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Delete a database as an asynchronous operation from the Azure Cosmos DB service.
            </summary>
            <param name="databaseUri">the URI of the database to delete.</param>
            <param name="options">The request options for the request.</param>
            <returns>The task object representing the service response for the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.DocumentClient.DeleteDocumentAsync(System.Uri,Microsoft.Azure.Documents.Client.RequestOptions,System.Threading.CancellationToken)">
            <summary>
            Delete a document as an asynchronous operation from the Azure Cosmos DB service.
            </summary>
            <param name="documentUri">the URI of the document to delete.</param>
            <param name="options">The request options for the request.</param>
            <param name="cancellationToken">(Optional) <see cref="T:System.Threading.CancellationToken"/> representing request cancellation.</param>
            <returns>The task object representing the service response for the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.DocumentClient.DeleteDocumentCollectionAsync(System.Uri,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Delete a collection as an asynchronous operation from the Azure Cosmos DB service.
            </summary>
            <param name="documentCollectionUri">the URI of the document collection to delete.</param>
            <param name="options">The request options for the request.</param>
            <returns>The task object representing the service response for the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.DocumentClient.DeleteStoredProcedureAsync(System.Uri,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Delete a stored procedure as an asynchronous operation from the Azure Cosmos DB service.
            </summary>
            <param name="storedProcedureUri">the URI of the stored procedure to delete.</param>
            <param name="options">The request options for the request.</param>
            <returns>The task object representing the service response for the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.DocumentClient.DeleteTriggerAsync(System.Uri,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Delete a trigger as an asynchronous operation from the Azure Cosmos DB service.
            </summary>
            <param name="triggerUri">the URI of the trigger to delete.</param>
            <param name="options">The request options for the request.</param>
            <returns>The task object representing the service response for the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.DocumentClient.DeleteUserDefinedFunctionAsync(System.Uri,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Delete a user defined function as an asynchronous operation from the Azure Cosmos DB service.
            </summary>
            <param name="functionUri">the URI of the user defined function to delete.</param>
            <param name="options">The request options for the request.</param>
            <returns>The task object representing the service response for the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.DocumentClient.DeleteConflictAsync(System.Uri,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Delete a conflict as an asynchronous operation from the Azure Cosmos DB service.
            </summary>
            <param name="conflictUri">the URI of the conflict to delete.</param>
            <param name="options">The request options for the request.</param>
            <returns>The task object representing the service response for the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.DocumentClient.ReplaceDocumentAsync(System.Uri,System.Object,Microsoft.Azure.Documents.Client.RequestOptions,System.Threading.CancellationToken)">
            <summary>
            Replaces a document as an asynchronous operation in the Azure Cosmos DB service.
            </summary>
            <param name="documentUri">the URI of the document to be updated.</param>
            <param name="document">the updated document.</param>
            <param name="options">The request options for the request.</param>
            <param name="cancellationToken">(Optional) <see cref="T:System.Threading.CancellationToken"/> representing request cancellation.</param>
            <returns>The task object representing the service response for the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.DocumentClient.ReplaceDocumentCollectionAsync(System.Uri,Microsoft.Azure.Documents.DocumentCollection,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Replaces a document collection as an asynchronous operation in the Azure Cosmos DB service.
            </summary>
            <param name="documentCollectionUri">the URI of the document collection to be updated.</param>
            <param name="documentCollection">the updated document collection.</param>
            <param name="options">The request options for the request.</param>
            <returns>The task object representing the service response for the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.DocumentClient.ReplaceStoredProcedureAsync(System.Uri,Microsoft.Azure.Documents.StoredProcedure,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Replace the specified stored procedure in the Azure Cosmos DB service.
            </summary>
            <param name="storedProcedureUri">the URI for the stored procedure to be updated.</param>
            <param name="storedProcedure">the updated stored procedure.</param>
            <param name="options">The request options for the request.</param>
            <returns>The task object representing the service response for the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.DocumentClient.ReplaceTriggerAsync(System.Uri,Microsoft.Azure.Documents.Trigger,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Replaces a trigger as an asynchronous operation in the Azure Cosmos DB service.
            </summary>
            <param name="triggerUri">the URI for the trigger to be updated.</param>
            <param name="trigger">the updated trigger.</param>
            <param name="options">The request options for the request.</param>
            <returns>The task object representing the service response for the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.DocumentClient.ReplaceUserDefinedFunctionAsync(System.Uri,Microsoft.Azure.Documents.UserDefinedFunction,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Replaces a user defined function as an asynchronous operation in the Azure Cosmos DB service.
            </summary>
            <param name="userDefinedFunctionUri">the URI for the user defined function to be updated.</param>
            <param name="function">the updated user defined function.</param>
            <param name="options">The request options for the request.</param>
            <returns>The task object representing the service response for the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.DocumentClient.ReplaceUserDefinedTypeAsync(System.Uri,Microsoft.Azure.Documents.UserDefinedType,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Replaces a user defined type as an asynchronous operation in the Azure Cosmos DB service.
            </summary>
            <param name="userDefinedTypeUri">the URI for the user defined type to be updated.</param>
            <param name="userDefinedType">the updated user defined type.</param>
            <param name="options">The request options for the request.</param>
            <returns>The task object representing the service response for the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.DocumentClient.ReadDatabaseAsync(System.Uri,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Reads a <see cref="T:Microsoft.Azure.Cosmos.Database"/> as an asynchronous operation from the Azure Cosmos DB service.
            </summary>
            <param name="databaseUri">A URI to the Database resource to be read.</param>
            <param name="options">The request options for the request.</param>
            <returns>
            A <see cref="N:System.Threading.Tasks"/> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/> which wraps a <see cref="T:Microsoft.Azure.Cosmos.Database"/> containing the read resource record.
            </returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="databaseUri"/> is not set.</exception>
            <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
            <list type="table">
                <listheader>
                    <term>StatusCode</term><description>Reason for exception</description>
                </listheader>
                <item>
                    <term>404</term><description>NotFound - This means the resource you tried to read did not exist.</description>
                </item>
                <item>
                    <term>429</term><description>TooManyRequests - This means you have exceeded the number of request units per second. Consult the DocumentClientException.RetryAfter value to see how long you should wait before retrying this operation.</description>
                </item>
            </list>
            </exception>
            <example>
            <code language="c#">
            <![CDATA[
            //Reads a Database resource where 
            // - db_id is the ID property of the Database you wish to read. 
            var dbLink = UriFactory.CreateDatabaseUri("db_id");
            Database database = await client.ReadDatabaseAsync(dbLink);
            ]]>
            </code>
            </example>
            <remarks>
            <para>
            Doing a read of a resource is the most efficient way to get a resource from the service. If you know the resource's ID, do a read instead of a query by ID.
            </para>
            </remarks>
            <seealso cref="T:Microsoft.Azure.Cosmos.Database"/> 
            <seealso cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>
            <seealso cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/>
            <seealso cref="T:System.Threading.Tasks.Task"/>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.DocumentClient.ReadDocumentAsync(System.Uri,Microsoft.Azure.Documents.Client.RequestOptions,System.Threading.CancellationToken)">
            <summary>
            Reads a <see cref="T:Microsoft.Azure.Documents.Document"/> as an asynchronous operation from the Azure Cosmos DB service.
            </summary>
            <param name="documentUri">A URI to the Document resource to be read.</param>
            <param name="options">The request options for the request.</param>
            <param name="cancellationToken">(Optional) <see cref="T:System.Threading.CancellationToken"/> representing request cancellation.</param>
            <returns>
            A <see cref="N:System.Threading.Tasks"/> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/> which wraps a <see cref="T:Microsoft.Azure.Documents.Document"/> containing the read resource record.
            </returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="documentUri"/> is not set.</exception>
            <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when reading a Document are:
            <list type="table">
                <listheader>
                    <term>StatusCode</term><description>Reason for exception</description>
                </listheader>
                <item>
                    <term>404</term><description>NotFound - This means the resource you tried to read did not exist.</description>
                </item>
                <item>
                    <term>429</term><description>TooManyRequests - This means you have exceeded the number of request units per second. Consult the DocumentClientException.RetryAfter value to see how long you should wait before retrying this operation.</description>
                </item>
            </list>
            </exception>
            <example>
            <code language="c#">
            <![CDATA[
            //Reads a Document resource where 
            // - db_id is the ID property of the Database
            // - coll_id is the ID property of the DocumentCollection
            // - doc_id is the ID property of the Document you wish to read. 
            var docUri = UriFactory.CreateDocumentUri("db_id", "coll_id", "doc_id");
            Document document = await client.ReadDocumentAsync(docUri);
            ]]>
            </code>
            </example>
            <remarks>
            <para>
            Doing a read of a resource is the most efficient way to get a resource from the service. If you know the resource's ID, do a read instead of a query by ID.
            </para>
            </remarks>
            <seealso cref="T:Microsoft.Azure.Documents.Document"/> 
            <seealso cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>
            <seealso cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/>
            <seealso cref="T:System.Threading.Tasks.Task"/>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.DocumentClient.ReadDocumentAsync``1(System.Uri,Microsoft.Azure.Documents.Client.RequestOptions,System.Threading.CancellationToken)">
            <summary>
            Reads a <see cref="T:Microsoft.Azure.Documents.Document"/> as a generic type T from the Azure Cosmos DB service as an asynchronous operation.
            </summary>
            <param name="documentUri">A URI to the Document resource to be read.</param>
            <param name="options">The request options for the request.</param>
            <param name="cancellationToken">(Optional) <see cref="T:System.Threading.CancellationToken"/> representing request cancellation.</param>
            <returns>
            A <see cref="N:System.Threading.Tasks"/> containing a <see cref="T:Microsoft.Azure.Documents.Client.DocumentResponse`1"/> which wraps a <see cref="T:Microsoft.Azure.Documents.Document"/> containing the read resource record.
            </returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="documentUri"/> is not set.</exception>
            <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when reading a Document are:
            <list type="table">
                <listheader>
                    <term>StatusCode</term><description>Reason for exception</description>
                </listheader>
                <item>
                    <term>404</term><description>NotFound - This means the resource you tried to read did not exist.</description>
                </item>
                <item>
                    <term>429</term><description>TooManyRequests - This means you have exceeded the number of request units per second. Consult the DocumentClientException.RetryAfter value to see how long you should wait before retrying this operation.</description>
                </item>
            </list>
            </exception>
            <example>
            <code language="c#">
            <![CDATA[
            //Reads a Document resource where 
            // - db_id is the ID property of the Database
            // - coll_id is the ID property of the DocumentCollection
            // - doc_id is the ID property of the Document you wish to read. 
            var docUri = UriFactory.CreateDocumentUri("db_id", "coll_id", "doc_id");
            Customer customer = await client.ReadDocumentAsync<Customer>(docUri);
            ]]>
            </code>
            </example>
            <remarks>
            <para>
            Doing a read of a resource is the most efficient way to get a resource from the service. If you know the resource's ID, do a read instead of a query by ID.
            </para>
            </remarks>
            <seealso cref="T:Microsoft.Azure.Documents.Document"/> 
            <seealso cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>
            <seealso cref="T:Microsoft.Azure.Documents.Client.DocumentResponse`1"/>
            <seealso cref="T:System.Threading.Tasks.Task"/>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.DocumentClient.ReadDocumentCollectionAsync(System.Uri,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Reads a <see cref="T:Microsoft.Azure.Documents.DocumentCollection"/> as an asynchronous operation from the Azure Cosmos DB service.
            </summary>
            <param name="documentCollectionUri">A URI to the DocumentCollection resource to be read.</param>
            <param name="options">The request options for the request.</param>
            <returns>
            A <see cref="N:System.Threading.Tasks"/> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/> which wraps a <see cref="T:Microsoft.Azure.Documents.DocumentCollection"/> containing the read resource record.
            </returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="documentCollectionUri"/> is not set.</exception>
            <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
            <list type="table">
                <listheader>
                    <term>StatusCode</term><description>Reason for exception</description>
                </listheader>
                <item>
                    <term>404</term><description>NotFound - This means the resource you tried to read did not exist.</description>
                </item>
                <item>
                    <term>429</term><description>TooManyRequests - This means you have exceeded the number of request units per second. Consult the DocumentClientException.RetryAfter value to see how long you should wait before retrying this operation.</description>
                </item>
            </list>
            </exception>
            <example>
            <code language="c#">
            <![CDATA[
            //Reads a Document resource where 
            // - db_id is the ID property of the Database
            // - coll_id is the ID property of the DocumentCollection you wish to read. 
            var collLink = UriFactory.CreateCollectionUri("db_id", "coll_id");
            DocumentCollection coll = await client.ReadDocumentCollectionAsync(collLink);
            ]]>
            </code>
            </example>
            <remarks>
            <para>
            Doing a read of a resource is the most efficient way to get a resource from the service. If you know the resource's ID, do a read instead of a query by ID.
            </para>
            </remarks>
            <seealso cref="T:Microsoft.Azure.Documents.DocumentCollection"/> 
            <seealso cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>
            <seealso cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/>
            <seealso cref="T:System.Threading.Tasks.Task"/>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.DocumentClient.ReadStoredProcedureAsync(System.Uri,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Reads a <see cref="T:Microsoft.Azure.Documents.StoredProcedure"/> as an asynchronous operation from the Azure Cosmos DB service.
            </summary>
            <param name="storedProcedureUri">A URI to the StoredProcedure resource to be read.</param>
            <param name="options">The request options for the request.</param>
            <returns>
            A <see cref="N:System.Threading.Tasks"/> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/> which wraps a <see cref="T:Microsoft.Azure.Documents.StoredProcedure"/> containing the read resource record.
            </returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="storedProcedureUri"/> is not set.</exception>
            <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
            <list type="table">
                <listheader>
                    <term>StatusCode</term><description>Reason for exception</description>
                </listheader>
                <item>
                    <term>404</term><description>NotFound - This means the resource you tried to read did not exist.</description>
                </item>
                <item>
                    <term>429</term><description>TooManyRequests - This means you have exceeded the number of request units per second. Consult the DocumentClientException.RetryAfter value to see how long you should wait before retrying this operation.</description>
                </item>
            </list>
            </exception>
            <example>
            <code language="c#">
            <![CDATA[
            //Reads a StoredProcedure resource where 
            // - db_id is the ID property of the Database
            // - coll_id is the ID property of the DocumentCollection 
            // - sproc_id is the ID property of the StoredProcedure you wish to read. 
            var sprocLink = UriFactory.CreateStoredProcedureUri("db_id", "coll_id", "sproc_id");
            StoredProcedure sproc = await client.ReadStoredProcedureAsync(sprocLink);
            ]]>
            </code>
            </example>
            <remarks>
            <para>
            Doing a read of a resource is the most efficient way to get a resource from the service. If you know the resource's ID, do a read instead of a query by ID.
            </para>
            </remarks>
            <seealso cref="T:Microsoft.Azure.Documents.StoredProcedure"/> 
            <seealso cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>
            <seealso cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/>
            <seealso cref="T:System.Threading.Tasks.Task"/>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.DocumentClient.ReadTriggerAsync(System.Uri,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Reads a <see cref="T:Microsoft.Azure.Documents.Trigger"/> as an asynchronous operation from the Azure Cosmos DB service.
            </summary>
            <param name="triggerUri">A URI to the Trigger resource to be read.</param>
            <param name="options">The request options for the request.</param>
            <returns>
            A <see cref="N:System.Threading.Tasks"/> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/> which wraps a <see cref="T:Microsoft.Azure.Documents.Trigger"/> containing the read resource record.
            </returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="triggerUri"/> is not set.</exception>
            <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
            <list type="table">
                <listheader>
                    <term>StatusCode</term><description>Reason for exception</description>
                </listheader>
                <item>
                    <term>404</term><description>NotFound - This means the resource you tried to read did not exist.</description>
                </item>
                <item>
                    <term>429</term><description>TooManyRequests - This means you have exceeded the number of request units per second. Consult the DocumentClientException.RetryAfter value to see how long you should wait before retrying this operation.</description>
                </item>
            </list>
            </exception>
            <example>
            <code language="c#">
            <![CDATA[
            //Reads a Trigger resource where 
            // - db_id is the ID property of the Database
            // - coll_id is the ID property of the DocumentCollection 
            // - trigger_id is the ID property of the Trigger you wish to read. 
            var triggerLink = UriFactory.CreateTriggerUri("db_id", "coll_id", "trigger_id");
            Trigger trigger = await client.ReadTriggerAsync(triggerLink);
            ]]>
            </code>
            </example>
            <remarks>
            <para>
            Doing a read of a resource is the most efficient way to get a resource from the service. If you know the resource's ID, do a read instead of a query by ID.
            </para>
            </remarks>
            <seealso cref="T:Microsoft.Azure.Documents.Trigger"/> 
            <seealso cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>
            <seealso cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/>
            <seealso cref="T:System.Threading.Tasks.Task"/>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.DocumentClient.ReadUserDefinedFunctionAsync(System.Uri,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Reads a <see cref="T:Microsoft.Azure.Documents.UserDefinedFunction"/> as an asynchronous operation from the Azure Cosmos DB service.
            </summary>
            <param name="functionUri">A URI to the User Defined Function resource to be read.</param>
            <param name="options">The request options for the request.</param>
            <returns>
            A <see cref="N:System.Threading.Tasks"/> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/> which wraps a <see cref="T:Microsoft.Azure.Documents.UserDefinedFunction"/> containing the read resource record.
            </returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="functionUri"/> is not set.</exception>
            <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
            <list type="table">
                <listheader>
                    <term>StatusCode</term><description>Reason for exception</description>
                </listheader>
                <item>
                    <term>404</term><description>NotFound - This means the resource you tried to read did not exist.</description>
                </item>
                <item>
                    <term>429</term><description>TooManyRequests - This means you have exceeded the number of request units per second. Consult the DocumentClientException.RetryAfter value to see how long you should wait before retrying this operation.</description>
                </item>
            </list>
            </exception>
            <example>
            <code language="c#">
            <![CDATA[
            //Reads a UserDefinedFunction resource where 
            // - db_id is the ID property of the Database
            // - coll_id is the ID property of the DocumentCollection 
            // - udf_id is the ID property of the UserDefinedFunction you wish to read. 
            var udfLink = UriFactory.CreateUserDefinedFunctionUri("db_id", "coll_id", "udf_id");
            UserDefinedFunction udf = await client.ReadUserDefinedFunctionAsync(udfLink);
            ]]>
            </code>
            </example>
            <remarks>
            <para>
            Doing a read of a resource is the most efficient way to get a resource from the service. If you know the resource's ID, do a read instead of a query by ID.
            </para>
            </remarks>
            <seealso cref="T:Microsoft.Azure.Documents.UserDefinedFunction"/> 
            <seealso cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>
            <seealso cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/>
            <seealso cref="T:System.Threading.Tasks.Task"/>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.DocumentClient.ReadConflictAsync(System.Uri,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Reads a <see cref="T:Microsoft.Azure.Documents.Conflict"/> as an asynchronous operation from the Azure Cosmos DB service.
            </summary>
            <param name="conflictUri">A URI to the Conflict resource to be read.</param>
            <param name="options">The request options for the request.</param>
            <returns>
            A <see cref="N:System.Threading.Tasks"/> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/> which wraps a <see cref="T:Microsoft.Azure.Documents.Conflict"/> containing the read resource record.
            </returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="conflictUri"/> is not set.</exception>
            <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
            <list type="table">
                <listheader>
                    <term>StatusCode</term><description>Reason for exception</description>
                </listheader>
                <item>
                    <term>404</term><description>NotFound - This means the resource you tried to read did not exist.</description>
                </item>
                <item>
                    <term>429</term><description>TooManyRequests - This means you have exceeded the number of request units per second. Consult the DocumentClientException.RetryAfter value to see how long you should wait before retrying this operation.</description>
                </item>
            </list>
            </exception>
            <example>
            <code language="c#">
            <![CDATA[
            //Reads a Conflict resource where 
            // - db_id is the ID property of the Database
            // - coll_id is the ID property of the DocumentCollection
            // - conflict_id is the ID property of the Conflict you wish to read. 
            var conflictLink = UriFactory.CreateConflictUri("db_id", "coll_id", "conflict_id");
            Conflict conflict = await client.ReadConflictAsync(conflictLink);
            ]]>
            </code>
            </example>
            <remarks>
            <para>
            Doing a read of a resource is the most efficient way to get a resource from the service. If you know the resource's ID, do a read instead of a query by ID.
            </para>
            </remarks>
            <seealso cref="T:Microsoft.Azure.Documents.Conflict"/> 
            <seealso cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>
            <seealso cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/>
            <seealso cref="T:System.Threading.Tasks.Task"/>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.DocumentClient.ReadSchemaAsync(System.Uri,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Reads a <see cref="T:Microsoft.Azure.Documents.Schema"/> as an asynchronous operation.
            </summary>
            <param name="schemaUri">A URI to the Schema resource to be read.</param>
            <param name="options">The request options for the request.</param>
            <returns>
            A <see cref="N:System.Threading.Tasks"/> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/> which wraps a <see cref="T:Microsoft.Azure.Documents.Schema"/> containing the read resource record.
            </returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="schemaUri"/> is not set.</exception>
            <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when reading a Schema are:
            <list type="table">
                <listheader>
                    <term>StatusCode</term><description>Reason for exception</description>
                </listheader>
                <item>
                    <term>404</term><description>NotFound - This means the resource you tried to read did not exist.</description>
                </item>
                <item>
                    <term>429</term><description>TooManyRequests - This means you have exceeded the number of request units per second. Consult the DocumentClientException.RetryAfter value to see how long you should wait before retrying this operation.</description>
                </item>
            </list>
            </exception>
            <example>
            <code language="c#">
            <![CDATA[
            //Reads a Document resource where 
            // - db_id is the ID property of the Database
            // - coll_id is the ID property of the DocumentCollection
            // - schema_id is the ID property of the Document you wish to read. 
            var docLink = UriFactory.CreateDocumentUri("db_id", "coll_id", "schema_id");
            Schema schema = await client.ReadSchemaAsync(schemaLink);
            ]]>
            </code>
            </example>
            <remarks>
            <para>
            Doing a read of a resource is the most efficient way to get a resource from the service. If you know the resource's ID, do a read instead of a query by ID.
            </para>
            </remarks>
            <seealso cref="T:Microsoft.Azure.Documents.Schema"/> 
            <seealso cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>
            <seealso cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/>
            <seealso cref="T:System.Threading.Tasks.Task"/>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.DocumentClient.ReadUserDefinedTypeAsync(System.Uri,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Reads a <see cref="T:Microsoft.Azure.Documents.UserDefinedType"/> as an asynchronous operation from the Azure Cosmos DB service.
            </summary>
            <param name="userDefinedTypeUri">A URI to the UserDefinedType resource to be read.</param>
            <param name="options">The request options for the request.</param>
            <returns>
            A <see cref="N:System.Threading.Tasks"/> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/> which wraps a <see cref="T:Microsoft.Azure.Documents.UserDefinedType"/> containing the read resource record.
            </returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="userDefinedTypeUri"/> is not set.</exception>
            <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
            <list type="table">
                <listheader>
                    <term>StatusCode</term><description>Reason for exception</description>
                </listheader>
                <item>
                    <term>404</term><description>NotFound - This means the resource you tried to read did not exist.</description>
                </item>
                <item>
                    <term>429</term><description>TooManyRequests - This means you have exceeded the number of request units per second. Consult the DocumentClientException.RetryAfter value to see how long you should wait before retrying this operation.</description>
                </item>
            </list>
            </exception>
            <example>
            <code language="c#">
            <![CDATA[
            //Reads a UserDefinedType resource where 
            // - db_id is the ID property of the Database
            // - userDefinedType_id is the ID property of the UserDefinedType you wish to read. 
            var userDefinedTypeLink = UriFactory.CreateUserDefinedTypeUri("db_id", "userDefinedType_id");
            UserDefinedType userDefinedType = await client.ReadUserDefinedTypeAsync(userDefinedTypeLink);
            ]]>
            </code>
            </example>
            <remarks>
            <para>
            Doing a read of a resource is the most efficient way to get a resource from the service. If you know the resource's ID, do a read instead of a query by ID.
            </para>
            </remarks>
            <seealso cref="T:Microsoft.Azure.Documents.UserDefinedType"/> 
            <seealso cref="T:Microsoft.Azure.Cosmos.RequestOptions"/>
            <seealso cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/>
            <seealso cref="T:System.Threading.Tasks.Task"/>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.DocumentClient.ReadDocumentCollectionFeedAsync(System.Uri,Microsoft.Azure.Cosmos.FeedOptions)">
            <summary>
            Reads the feed (sequence) of collections for a database as an asynchronous operation from the Azure Cosmos DB service.
            </summary>
            <param name="documentCollectionsUri">the URI for the document collections.</param>
            <param name="options">The request options for the request.</param>
            <returns>The task object representing the service response for the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.DocumentClient.ReadStoredProcedureFeedAsync(System.Uri,Microsoft.Azure.Cosmos.FeedOptions)">
            <summary>
            Reads the feed (sequence) of stored procedures for a collection as an asynchronous operation from the Azure Cosmos DB service.
            </summary>
            <param name="storedProceduresUri">the URI for the stored procedures.</param>
            <param name="options">The request options for the request.</param>
            <returns>The task object representing the service response for the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.DocumentClient.ReadTriggerFeedAsync(System.Uri,Microsoft.Azure.Cosmos.FeedOptions)">
            <summary>
            Reads the feed (sequence) of triggers for a collection as an asynchronous operation from the Azure Cosmos DB service.
            </summary>
            <param name="triggersUri">the URI for the triggers.</param>
            <param name="options">The request options for the request.</param>
            <returns>The task object representing the service response for the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.DocumentClient.ReadUserDefinedFunctionFeedAsync(System.Uri,Microsoft.Azure.Cosmos.FeedOptions)">
            <summary>
            Reads the feed (sequence) of user defined functions for a collection as an asynchronous operation from the Azure Cosmos DB service.
            </summary>
            <param name="userDefinedFunctionsUri">the URI for the user defined functions.</param>
            <param name="options">The request options for the request.</param>
            <returns>The task object representing the service response for the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.DocumentClient.ReadDocumentFeedAsync(System.Uri,Microsoft.Azure.Cosmos.FeedOptions,System.Threading.CancellationToken)">
            <summary>
            Reads the feed (sequence) of documents for a collection as an asynchronous operation from the Azure Cosmos DB service.
            </summary>
            <param name="documentsUri">the URI for the documents.</param>
            <param name="options">The request options for the request.</param>
            <param name="cancellationToken">(Optional) <see cref="T:System.Threading.CancellationToken"/> representing request cancellation.</param>
            <returns>The task object representing the service response for the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.DocumentClient.ReadConflictFeedAsync(System.Uri,Microsoft.Azure.Cosmos.FeedOptions)">
            <summary>
            Reads the feed (sequence) of conflicts for a collection as an asynchronous operation from the Azure Cosmos DB service.
            </summary>
            <param name="conflictsUri">the URI for the conflicts.</param>
            <param name="options">The request options for the request.</param>
            <returns>The task object representing the service response for the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.DocumentClient.ReadPartitionKeyRangeFeedAsync(System.Uri,Microsoft.Azure.Cosmos.FeedOptions)">
            <summary>
            Reads the feed (sequence) of <see cref="T:Microsoft.Azure.Documents.PartitionKeyRange"/> for a database account from the Azure Cosmos DB service as an asynchronous operation.
            </summary>
            <param name="partitionKeyRangesOrCollectionUri">The Uri for partition key ranges, or owner collection.</param>
            <param name="options">(Optional) The request options for the request.</param>
            <returns>
            A <see cref="N:System.Threading.Tasks"/> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/> which wraps a <see cref="T:Microsoft.Azure.Documents.PartitionKeyRange"/> containing the read resource record.
            </returns>
            <example>
            <code language="c#">
            <![CDATA[
            Uri partitionKeyRangesUri = UriFactory.CreatePartitionKeyRangesUri(database.Id, collection.Id);
            DoucmentFeedResponse<PartitionKeyRange> response = null;
            List<string> ids = new List<string>();
            do
            {
                response = await client.ReadPartitionKeyRangeFeedAsync(partitionKeyRangesUri, new FeedOptions { MaxItemCount = 1000 });
                foreach (var item in response)
                {
                    ids.Add(item.Id);
                }
            }
            while (!string.IsNullOrEmpty(response.ResponseContinuation));
            ]]>
            </code>
            </example>
            <seealso cref="T:Microsoft.Azure.Documents.PartitionKeyRange"/>
            <seealso cref="T:Microsoft.Azure.Cosmos.FeedOptions"/>
            <seealso cref="T:Microsoft.Azure.Cosmos.DocumentFeedResponse`1"/>
            <seealso cref="M:Microsoft.Azure.Cosmos.UriFactory.CreatePartitionKeyRangesUri(System.String,System.String)"/>
            <seealso cref="T:System.Threading.Tasks.Task"/>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.DocumentClient.ReadUserDefinedTypeFeedAsync(System.Uri,Microsoft.Azure.Cosmos.FeedOptions)">
            <summary>
            Reads the feed (sequence) of user defined types for a database as an asynchronous operation from the Azure Cosmos DB service.
            </summary>
            <param name="userDefinedTypesUri">the URI for the user defined types.</param>
            <param name="options">The request options for the request.</param>
            <returns>The task object representing the service response for the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.DocumentClient.ExecuteStoredProcedureAsync``1(System.Uri,System.Object[])">
            <summary>
            Executes a stored procedure against a collection as an asynchronous operation from the Azure Cosmos DB service.
            </summary>
            <typeparam name="TValue">the type of the stored procedure's return value.</typeparam>
            <param name="storedProcedureUri">the URI of the stored procedure to be executed.</param>
            <param name="procedureParams">the parameters for the stored procedure execution.</param>
            <returns>The task object representing the service response for the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.DocumentClient.ExecuteStoredProcedureAsync``1(System.Uri,Microsoft.Azure.Documents.Client.RequestOptions,System.Object[])">
            <summary>
            Executes a stored procedure against a collection as an asynchronous operation from the Azure Cosmos DB service.
            </summary>
            <typeparam name="TValue">the type of the stored procedure's return value.</typeparam>
            <param name="storedProcedureUri">the URI of the stored procedure to be executed.</param>
            <param name="options">The request options for the request.</param>
            <param name="procedureParams">the parameters for the stored procedure execution.</param>
            <returns>The task object representing the service response for the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.DocumentClient.ExecuteStoredProcedureAsync``1(System.Uri,Microsoft.Azure.Documents.Client.RequestOptions,System.Threading.CancellationToken,System.Object[])">
            <summary>
            Executes a stored procedure against a collection as an asynchronous operation from the Azure Cosmos DB service.
            </summary>
            <typeparam name="TValue">the type of the stored procedure's return value.</typeparam>
            <param name="storedProcedureUri">the URI of the stored procedure to be executed.</param>
            <param name="options">The request options for the request.</param>
            <param name="cancellationToken">(Optional) <see cref="T:System.Threading.CancellationToken"/> representing request cancellation.</param>
            <param name="procedureParams">the parameters for the stored procedure execution.</param>
            <returns>The task object representing the service response for the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.DocumentClient.ReadSchemaFeedAsync(System.Uri,Microsoft.Azure.Cosmos.FeedOptions)">
            <summary>
            Reads the feed (sequence) of schemas for a collection as an asynchronous operation.
            </summary>
            <param name="schemasUri">the link for the schemas.</param>
            <param name="options">The request options for the request.</param>
            <returns>The task object representing the service response for the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.DocumentClient.CreateDocumentCollectionQuery(System.Uri,Microsoft.Azure.Cosmos.FeedOptions)">
            <summary>
            Extension method to create a query for document collections in the Azure Cosmos DB service.
            </summary>
            <param name="databaseUri">the URI to the database.</param>
            <param name="feedOptions">The options for processing the query results feed.</param>
            <returns>The query result set.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.DocumentClient.CreateDocumentCollectionQuery(System.Uri,System.String,Microsoft.Azure.Cosmos.FeedOptions)">
            <summary>
            Extension method to create a query for document collections in the Azure Cosmos DB service.
            </summary>
            <param name="databaseUri">the URI to the database.</param>
            <param name="sqlExpression">The sql query.</param>
            <param name="feedOptions">The options for processing the query results feed.</param>
            <returns>The query result set.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.DocumentClient.CreateDocumentCollectionQuery(System.Uri,Microsoft.Azure.Cosmos.SqlQuerySpec,Microsoft.Azure.Cosmos.FeedOptions)">
            <summary>
            Extension method to create a query for document collections in the Azure Cosmos DB service.
            </summary>
            <param name="databaseUri">the URI to the database.</param>
            <param name="querySpec">The sql query.</param>
            <param name="feedOptions">The options for processing the query results feed.</param>
            <returns>The query result set.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.DocumentClient.CreateDocumentCollectionChangeFeedQuery(System.Uri,Microsoft.Azure.Cosmos.ChangeFeedOptions)">
            <summary>
            Overloaded. This method creates a change feed query for collections under an Azure Cosmos DB database account
            in an Azure Cosmos DB service.
            </summary>
            <param name="databaseUri">Specifies the database to read collections from.</param>
            <param name="feedOptions">Specifies the options for processing the query results feed.</param>
            <returns>the query result set.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.DocumentClient.CreateStoredProcedureQuery(System.Uri,Microsoft.Azure.Cosmos.FeedOptions)">
            <summary>
            Extension method to create query for stored procedures in the Azure Cosmos DB service.
            </summary>
            <param name="storedProceduresUri">the URI to the stored procedures.</param>
            <param name="feedOptions">The options for processing the query results feed.</param>
            <returns>The query result set.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.DocumentClient.CreateStoredProcedureQuery(System.Uri,System.String,Microsoft.Azure.Cosmos.FeedOptions)">
            <summary>
            Extension method to create query for stored procedures in the Azure Cosmos DB service.
            </summary>
            <param name="storedProceduresUri">the URI to the stored procedures.</param>
            <param name="sqlExpression">The sql query.</param>
            <param name="feedOptions">The options for processing the query results feed.</param>
            <returns>The query result set.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.DocumentClient.CreateStoredProcedureQuery(System.Uri,Microsoft.Azure.Cosmos.SqlQuerySpec,Microsoft.Azure.Cosmos.FeedOptions)">
            <summary>
            Extension method to create query for stored procedures in the Azure Cosmos DB service.
            </summary>
            <param name="storedProceduresUri">the URI to the stored procedures.</param>
            <param name="querySpec">The sql query.</param>
            <param name="feedOptions">The options for processing the query results feed.</param>
            <returns>The query result set.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.DocumentClient.CreateTriggerQuery(System.Uri,Microsoft.Azure.Cosmos.FeedOptions)">
            <summary>
            Extension method to create query for triggers in the Azure Cosmos DB service.
            </summary>
            <param name="triggersUri">the URI to the triggers.</param>
            <param name="feedOptions">The options for processing the query results feed.</param>
            <returns>The query result set.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.DocumentClient.CreateTriggerQuery(System.Uri,System.String,Microsoft.Azure.Cosmos.FeedOptions)">
            <summary>
            Extension method to create query for triggers in the Azure Cosmos DB service.
            </summary>
            <param name="triggersUri">the URI to the triggers.</param>
            <param name="sqlExpression">The sql query.</param>
            <param name="feedOptions">The options for processing the query results feed.</param>
            <returns>The query result set.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.DocumentClient.CreateTriggerQuery(System.Uri,Microsoft.Azure.Cosmos.SqlQuerySpec,Microsoft.Azure.Cosmos.FeedOptions)">
            <summary>
            Extension method to create query for triggers in the Azure Cosmos DB service.
            </summary>
            <param name="triggersUri">the URI to the triggers.</param>
            <param name="querySpec">The sql query.</param>
            <param name="feedOptions">The options for processing the query results feed.</param>
            <returns>The query result set.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.DocumentClient.CreateUserDefinedFunctionQuery(System.Uri,Microsoft.Azure.Cosmos.FeedOptions)">
            <summary>
            Extension method to create a query for user-defined functions in the Azure Cosmos DB service.
            </summary>
            <param name="userDefinedFunctionsUri">the URI to the user-defined functions.</param>
            <param name="feedOptions">The options for processing the query results feed.</param>
            <returns>The query result set.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.DocumentClient.CreateUserDefinedFunctionQuery(System.Uri,System.String,Microsoft.Azure.Cosmos.FeedOptions)">
            <summary>
            Extension method to create a query for user-defined functions in the Azure Cosmos DB service.
            </summary>
            <param name="userDefinedFunctionsUri">the URI to the user-defined functions.</param>
            <param name="sqlExpression">The sql query.</param>
            <param name="feedOptions">The options for processing the query results feed.</param>
            <returns>The query result set.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.DocumentClient.CreateUserDefinedFunctionQuery(System.Uri,Microsoft.Azure.Cosmos.SqlQuerySpec,Microsoft.Azure.Cosmos.FeedOptions)">
            <summary>
            Extension method to create a query for user-defined functions in the Azure Cosmos DB service.
            </summary>
            <param name="userDefinedFunctionsUri">the URI to the user-defined functions.</param>
            <param name="querySpec">The sql query.</param>
            <param name="feedOptions">The options for processing the query results feed.</param>
            <returns>The query result set.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.DocumentClient.CreateConflictQuery(System.Uri,Microsoft.Azure.Cosmos.FeedOptions)">
            <summary>
            Extension method to create a query for conflicts in the Azure Cosmos DB service.
            </summary>
            <param name="conflictsUri">the URI to the conflicts.</param>
            <param name="feedOptions">The options for processing the query results feed.</param>
            <returns>The query result set.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.DocumentClient.CreateConflictQuery(System.Uri,System.String,Microsoft.Azure.Cosmos.FeedOptions)">
            <summary>
            Extension method to create a query for conflicts in the Azure Cosmos DB service.
            </summary>
            <param name="conflictsUri">the URI to the conflicts.</param>
            <param name="sqlExpression">The sql query.</param>
            <param name="feedOptions">The options for processing the query results feed.</param>
            <returns>The query result set.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.DocumentClient.CreateConflictQuery(System.Uri,Microsoft.Azure.Cosmos.SqlQuerySpec,Microsoft.Azure.Cosmos.FeedOptions)">
            <summary>
            Extension method to create a query for conflicts in the Azure Cosmos DB service.
            </summary>
            <param name="conflictsUri">the URI to the conflicts.</param>
            <param name="querySpec">The sql query.</param>
            <param name="feedOptions">The options for processing the query results feed.</param>
            <returns>The query result set.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.DocumentClient.CreateDocumentQuery``1(System.Uri,Microsoft.Azure.Cosmos.FeedOptions)">
            <summary>
            Extension method to create a query for documents in the Azure Cosmos DB service.
            </summary>
            <typeparam name="T">the type of object to query.</typeparam>
            <param name="documentCollectionUri">The URI of the document collection.</param>
            <param name="feedOptions">The options for processing the query results feed.</param>
            <returns>The query result set.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.DocumentClient.CreateDocumentQuery``1(System.Uri,Microsoft.Azure.Cosmos.FeedOptions,System.Object)">
            <summary>
            Extension method to create a query for documents in the Azure Cosmos DB service.
            </summary>
            <typeparam name="T">the type of object to query.</typeparam>
            <param name="documentCollectionOrDatabaseUri">The URI of the document collection, e.g. dbs/db_rid/colls/coll_rid/. 
            Alternatively, this can be a URI of the database when using an <see cref="T:Microsoft.Azure.Documents.Client.IPartitionResolver"/>, e.g. dbs/db_rid/</param>
            <param name="feedOptions">The options for processing the query results feed.</param>
            <param name="partitionKey">The partition key that can be used with an IPartitionResolver.</param>
            <returns>The query result set.</returns>
            <remarks>
            Support for IPartitionResolver based method overloads is now obsolete. It's recommended that you use 
            <a href="https://azure.microsoft.com/documentation/articles/documentdb-partition-data">Partitioned Collections</a> for higher storage and throughput.
            </remarks>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.DocumentClient.CreateDocumentQuery``1(System.Uri,System.String,Microsoft.Azure.Cosmos.FeedOptions)">
            <summary>
            Extension method to create a query for documents in the Azure Cosmos DB service.
            </summary>
            <typeparam name="T">the type of object to query.</typeparam>
            <param name="documentCollectionOrDatabaseUri">The URI of the document collection.</param>
            <param name="sqlExpression">The sql query.</param>
            <param name="feedOptions">The options for processing the query results feed.</param>
            <returns>The query result set.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.DocumentClient.CreateDocumentQuery``1(System.Uri,System.String,Microsoft.Azure.Cosmos.FeedOptions,System.Object)">
            <summary>
            Extension method to create a query for documents in the Azure Cosmos DB service.
            </summary>
            <typeparam name="T">The type of object to query.</typeparam>
            <param name="documentCollectionOrDatabaseUri">The URI of the document collection, e.g. dbs/db_rid/colls/coll_rid/. 
            Alternatively, this can be a URI of the database when using an <see cref="T:Microsoft.Azure.Documents.Client.IPartitionResolver"/>, e.g. dbs/db_rid/</param>
            <param name="sqlExpression">The sql query.</param>
            <param name="feedOptions">The options for processing the query results feed.</param>
            <param name="partitionKey">The partition key that can be used with an IPartitionResolver.</param>
            <returns>The query result set.</returns>
            <remarks>
            Support for IPartitionResolver based method overloads is now obsolete. It's recommended that you use 
            <a href="https://azure.microsoft.com/documentation/articles/documentdb-partition-data">Partitioned Collections</a> for higher storage and throughput.
            </remarks>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.DocumentClient.CreateDocumentQuery``1(System.Uri,Microsoft.Azure.Cosmos.SqlQuerySpec,Microsoft.Azure.Cosmos.FeedOptions)">
            <summary>
            Extension method to create a query for documents in the Azure Cosmos DB service.
            </summary>
            <typeparam name="T">The type of object to query.</typeparam>
            <param name="documentCollectionOrDatabaseUri">The URI of the document collection.</param>
            <param name="querySpec">The sql query.</param>
            <param name="feedOptions">The options for processing the query results feed.</param>
            <returns>The query result set.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.DocumentClient.CreateDocumentQuery``1(System.Uri,Microsoft.Azure.Cosmos.SqlQuerySpec,Microsoft.Azure.Cosmos.FeedOptions,System.Object)">
            <summary>
            Extension method to create a query for documents for the Azure Cosmos DB service.
            </summary>
            <typeparam name="T">The type of object to query.</typeparam>
            <param name="documentCollectionOrDatabaseUri">The URI of the document collection, e.g. dbs/db_rid/colls/coll_rid/. 
            Alternatively, this can be a URI of the database when using an <see cref="T:Microsoft.Azure.Documents.Client.IPartitionResolver"/>, e.g. dbs/db_rid/</param>
            <param name="querySpec">The sql query.</param>
            <param name="feedOptions">The options for processing the query results feed.</param>
            <param name="partitionKey">The partition key that can be used with an IPartitionResolver.</param>
            <returns>The query result set.</returns>
            <remarks>
            Support for IPartitionResolver based method overloads is now obsolete. It's recommended that you use 
            <a href="https://azure.microsoft.com/documentation/articles/documentdb-partition-data">Partitioned Collections</a> for higher storage and throughput.
            </remarks>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.DocumentClient.CreateDocumentQuery(System.Uri,Microsoft.Azure.Cosmos.FeedOptions)">
            <summary>
            Extension method to create a query for documents in the Azure Cosmos DB service.
            </summary>
            <param name="documentCollectionOrDatabaseUri">The URI of the document collection.</param>
            <param name="feedOptions">The options for processing the query results feed.</param>
            <returns>The query result set.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.DocumentClient.CreateDocumentQuery(System.Uri,Microsoft.Azure.Cosmos.FeedOptions,System.Object)">
            <summary>
            Extension method to create a query for documents in the Azure Cosmos DB service.
            </summary>
            <param name="documentCollectionOrDatabaseUri">The URI of the document collection, e.g. dbs/db_rid/colls/coll_rid/. 
            Alternatively, this can be a URI of the database when using an <see cref="T:Microsoft.Azure.Documents.Client.IPartitionResolver"/>, e.g. dbs/db_rid/</param>
            <param name="feedOptions">The options for processing the query results feed.</param>
            <param name="partitionKey">The partition key that can be used with an IPartitionResolver.</param>
            <returns>The query result set.</returns>
            <remarks>
            Support for IPartitionResolver based method overloads is now obsolete. It's recommended that you use 
            <a href="https://azure.microsoft.com/documentation/articles/documentdb-partition-data">Partitioned Collections</a> for higher storage and throughput.
            </remarks>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.DocumentClient.CreateDocumentQuery(System.Uri,System.String,Microsoft.Azure.Cosmos.FeedOptions)">
            <summary>
            Extension method to create a query for documents in the Azure Cosmos DB service.
            </summary>
            <param name="documentCollectionOrDatabaseUri">The URI of the document collection.</param>
            <param name="sqlExpression">The sql query.</param>
            <param name="feedOptions">The options for processing the query results feed.</param>
            <returns>The query result set.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.DocumentClient.CreateDocumentQuery(System.Uri,System.String,Microsoft.Azure.Cosmos.FeedOptions,System.Object)">
            <summary>
            Extension method to create a query for documents in the Azure Cosmos DB service.
            </summary>
            <param name="documentCollectionOrDatabaseUri">The URI of the document collection, e.g. dbs/db_rid/colls/coll_rid/. 
            Alternatively, this can be a URI of the database when using an <see cref="T:Microsoft.Azure.Documents.Client.IPartitionResolver"/>, e.g. dbs/db_rid/</param>
            <param name="sqlExpression">The sql query.</param>
            <param name="feedOptions">The options for processing the query results feed.</param>
            <param name="partitionKey">The partition key that can be used with an IPartitionResolver.</param>
            <returns>The query result set.</returns>
            <remarks>
            Support for IPartitionResolver based method overloads is now obsolete. It's recommended that you use 
            <a href="https://azure.microsoft.com/documentation/articles/documentdb-partition-data">Partitioned Collections</a> for higher storage and throughput.
            </remarks>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.DocumentClient.CreateDocumentQuery(System.Uri,Microsoft.Azure.Cosmos.SqlQuerySpec,Microsoft.Azure.Cosmos.FeedOptions)">
            <summary>
            Extension method to create a query for documents in the Azure Cosmos DB service.
            </summary>
            <param name="documentCollectionOrDatabaseUri">The URI of the document collection.</param>
            <param name="querySpec">The sql query.</param>
            <param name="feedOptions">The options for processing the query results feed.</param>
            <returns>The query result set.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.DocumentClient.CreateDocumentQuery(System.Uri,Microsoft.Azure.Cosmos.SqlQuerySpec,Microsoft.Azure.Cosmos.FeedOptions,System.Object)">
            <summary>
            Extension method to create a query for documents in the Azure Cosmos DB service.
            </summary>
            <param name="documentCollectionOrDatabaseUri">The URI of the document collection, e.g. dbs/db_rid/colls/coll_rid/. 
            Alternatively, this can be a URI of the database when using an <see cref="T:Microsoft.Azure.Documents.Client.IPartitionResolver"/>, e.g. dbs/db_rid/</param>
            <param name="querySpec">The sql query.</param>
            <param name="feedOptions">The options for processing the query results feed.</param>
            <param name="partitionKey">The partition key that can be used with an IPartitionResolver.</param>
            <returns>The query result set.</returns>
            <remarks>
            Support for IPartitionResolver based method overloads is now obsolete. It's recommended that you use 
            <a href="https://azure.microsoft.com/documentation/articles/documentdb-partition-data">Partitioned Collections</a> for higher storage and throughput.
            </remarks>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.DocumentClient.CreateDocumentChangeFeedQuery(System.Uri,Microsoft.Azure.Cosmos.ChangeFeedOptions)">
            <summary>
            Extension method to create a change feed query for documents in the Azure Cosmos DB service.
            </summary>
            <param name="collectionLink">Specifies the collection to read documents from.</param>
            <param name="feedOptions">The options for processing the query results feed.</param>
            <returns>the query result set.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.DocumentClient.CreateUserDefinedTypeQuery(System.Uri,Microsoft.Azure.Cosmos.FeedOptions)">
            <summary>
            Extension method to create a query for user defined types in the Azure Cosmos DB service.
            </summary>
            <param name="userDefinedTypesUri">the URI to the user defined types.</param>
            <param name="feedOptions">The options for processing the query results feed.</param>
            <returns>The query result set.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.DocumentClient.CreateUserDefinedTypeQuery(System.Uri,System.String,Microsoft.Azure.Cosmos.FeedOptions)">
            <summary>
            Extension method to create a query for user defined types in the Azure Cosmos DB service.
            </summary>
            <param name="userDefinedTypesUri">the URI to the user defined types.</param>
            <param name="sqlExpression">The sql query.</param>
            <param name="feedOptions">The options for processing the query results feed.</param>
            <returns>The query result set.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.DocumentClient.CreateUserDefinedTypeQuery(System.Uri,Microsoft.Azure.Cosmos.SqlQuerySpec,Microsoft.Azure.Cosmos.FeedOptions)">
            <summary>
            Extension method to create a query for user defined types in the Azure Cosmos DB service.
            </summary>
            <param name="userDefinedTypesUri">the URI to the user defined types.</param>
            <param name="querySpec">The sql query.</param>
            <param name="feedOptions">The options for processing the query results feed.</param>
            <returns>The query result set.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.DocumentClient.CreateUserDefinedTypeChangeFeedQuery(System.Uri,Microsoft.Azure.Cosmos.ChangeFeedOptions)">
            <summary>
            Overloaded. This method creates a change feed query for user defined types under an Azure Cosmos DB database account
            in an Azure Cosmos DB service.
            </summary>
            <param name="databaseUri">Specifies the database to read user defined types from.</param>
            <param name="feedOptions">Specifies the options for processing the query results feed.</param>
            <returns>the query result set.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.DocumentClient.CreateDatabaseQuery(Microsoft.Azure.Cosmos.FeedOptions)">
            <summary>
            Overloaded. This method creates a query for database resources under an account in the Azure Cosmos DB service. It returns An IOrderedQueryable{Database}.
            </summary>
            <param name="feedOptions">The options for processing the query result feed. For details, see <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions"/></param>
            <returns>An IOrderedQueryable{Database} that can evaluate the query with the provided SQL statement.</returns>
            <example>
            This example below queries for databases by id.
            <code language="c#">
            <![CDATA[
            Database database = client.CreateDatabaseQuery().Where(d => d.Id == "mydb").AsEnumerable().FirstOrDefault();
            ]]>
            </code>
            </example>
            <seealso cref="T:Microsoft.Azure.Cosmos.Database"/>
            <seealso cref="T:Microsoft.Azure.Cosmos.Linq.IDocumentQuery"/>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.DocumentClient.CreateDatabaseQuery(System.String,Microsoft.Azure.Cosmos.FeedOptions)">
            <summary>
            Overloaded. This method creates a query for database resources under an Azure Cosmos DB database account by using a SQL statement. It returns an IQueryable{dynamic}.
            </summary>
            <param name="sqlExpression">The SQL statement.</param>
            <param name="feedOptions">The options for processing the query result feed. For details, see <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions"/></param>
            <returns>An IQueryable{dynamic} that can evaluate the query with the provided SQL statement.</returns>
            <example>
            This example below queries for databases by id.
            <code language="c#">
            <![CDATA[
            Database database = client.CreateDatabaseQuery("SELECT * FROM dbs d WHERE d.id = 'mydb'").AsEnumerable().FirstOrDefault();
            ]]>
            </code>
            </example>
            <remarks>Refer to https://msdn.microsoft.com/en-us/library/azure/dn782250.aspx and http://azure.microsoft.com/documentation/articles/documentdb-sql-query/ for syntax and examples.</remarks>
            <seealso cref="T:Microsoft.Azure.Cosmos.Database"/>
            <seealso cref="T:Microsoft.Azure.Cosmos.Linq.IDocumentQuery"/>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.DocumentClient.CreateDatabaseQuery(Microsoft.Azure.Cosmos.SqlQuerySpec,Microsoft.Azure.Cosmos.FeedOptions)">
            <summary>
            Overloaded. This method creates a query for database resources under an Azure Cosmos DB database account by using a SQL statement with parameterized values. It returns an IQueryable{dynamic}.
             For more information on preparing SQL statements with parameterized values, please see <see cref="T:Microsoft.Azure.Cosmos.SqlQuerySpec"/>.
            </summary>
            <param name="querySpec">The SqlQuerySpec instance containing the SQL expression.</param>
            <param name="feedOptions">The options for processing the query result feed. For details, see <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions"/></param>
            <returns>An IQueryable{dynamic} that can evaluate the query with the provided SQL statement.</returns>
            <example>
            This example below queries for databases by id.
            <code language="c#">
            <![CDATA[
            var query = new SqlQuerySpec("SELECT * FROM dbs d WHERE d.id = @id",
                new SqlParameterCollection(new SqlParameter[] { new SqlParameter { Name = "@id", Value = "mydb" }}));
            dynamic database = client.CreateDatabaseQuery<dynamic>(query).AsEnumerable().FirstOrDefault();
            ]]>
            </code>
            </example>
            <remarks>Refer to https://msdn.microsoft.com/en-us/library/azure/dn782250.aspx and http://azure.microsoft.com/documentation/articles/documentdb-sql-query/ for syntax and examples.</remarks>
            <seealso cref="T:Microsoft.Azure.Cosmos.Database"/>
            <seealso cref="T:Microsoft.Azure.Cosmos.Linq.IDocumentQuery"/>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.DocumentClient.CreateDatabaseChangeFeedQuery(Microsoft.Azure.Cosmos.ChangeFeedOptions)">
            <summary>
            Overloaded. This method creates a change feed query for databases under an Azure Cosmos DB database account
            in an Azure Cosmos DB service.
            </summary>
            <param name="feedOptions">The options for processing the query results feed.</param>
            <returns>the query result set.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.DocumentClient.CreateDocumentCollectionQuery(System.String,Microsoft.Azure.Cosmos.FeedOptions)">
            <summary>
            Overloaded. This method creates a query for collections under an Azure Cosmos DB database. It returns An IOrderedQueryable{DocumentCollection}.
            </summary>
            <param name="databaseLink">The link to the parent database resource.</param>
            <param name="feedOptions">The options for processing the query result feed. For details, see <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions"/></param>
            <returns>An IOrderedQueryable{DocumentCollection} that can evaluate the query with the provided SQL statement.</returns>
            <example>
            This example below queries for collections by id.
            <code language="c#">
            <![CDATA[
            DocumentCollection collection = client.CreateDocumentCollectionQuery(databaseLink).Where(c => c.Id == "myColl").AsEnumerable().FirstOrDefault();
            ]]>
            </code>
            </example>
            <seealso cref="T:Microsoft.Azure.Documents.DocumentCollection"/>
            <seealso cref="T:Microsoft.Azure.Cosmos.Linq.IDocumentQuery"/>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.DocumentClient.CreateDocumentCollectionQuery(System.String,System.String,Microsoft.Azure.Cosmos.FeedOptions)">
            <summary>
            Overloaded. This method creates a query for collections under an Azure Cosmos DB database using a SQL statement.   It returns an IQueryable{DocumentCollection}.
            </summary>
            <param name="databaseLink">The link to the parent database resource.</param>
            <param name="sqlExpression">The SQL statement.</param>
            <param name="feedOptions">The options for processing the query result feed. For details, see <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions"/></param>
            <returns>An IQueryable{dynamic} that can evaluate the query with the provided SQL statement.</returns>
            <example>
            This example below queries for collections by id.
            <code language="c#">
            <![CDATA[
            DocumentCollection collection = client.CreateDocumentCollectionQuery(databaseLink, "SELECT * FROM colls c WHERE c.id = 'mycoll'").AsEnumerable().FirstOrDefault();
            ]]>
            </code>
            </example>
            <remarks>Refer to https://msdn.microsoft.com/en-us/library/azure/dn782250.aspx and http://azure.microsoft.com/documentation/articles/documentdb-sql-query/ for syntax and examples.</remarks>
            <seealso cref="T:Microsoft.Azure.Documents.DocumentCollection"/>
            <seealso cref="T:Microsoft.Azure.Cosmos.Linq.IDocumentQuery"/>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.DocumentClient.CreateDocumentCollectionQuery(System.String,Microsoft.Azure.Cosmos.SqlQuerySpec,Microsoft.Azure.Cosmos.FeedOptions)">
            <summary>
            Overloaded. This method creates a query for collections under an Azure Cosmos DB database using a SQL statement with parameterized values. It returns an IQueryable{dynamic}.
             For more information on preparing SQL statements with parameterized values, please see <see cref="T:Microsoft.Azure.Cosmos.SqlQuerySpec"/>.
            </summary>
            <param name="databaseLink">The link to the parent database resource.</param>
            <param name="querySpec">The SqlQuerySpec instance containing the SQL expression.</param>
            <param name="feedOptions">The options for processing the query result feed. For details, see <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions"/></param>
            <returns>An IQueryable{dynamic} that can evaluate the query with the provided SQL statement.</returns>
            <example>
            This example below queries for collections by id.
            <code language="c#">
            <![CDATA[
            var query = new SqlQuerySpec("SELECT * FROM colls c WHERE c.id = @id", new SqlParameterCollection(new SqlParameter[] { new SqlParameter { Name = "@id", Value = "mycoll" }}));
            DocumentCollection collection = client.CreateDocumentCollectionQuery(databaseLink, query).AsEnumerable().FirstOrDefault();
            ]]>
            </code>
            </example>
            <remarks>Refer to https://msdn.microsoft.com/en-us/library/azure/dn782250.aspx and http://azure.microsoft.com/documentation/articles/documentdb-sql-query/ for syntax and examples.</remarks>
            <seealso cref="T:Microsoft.Azure.Documents.DocumentCollection"/>
            <seealso cref="T:Microsoft.Azure.Cosmos.Linq.IDocumentQuery"/>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.DocumentClient.CreateDocumentCollectionChangeFeedQuery(System.String,Microsoft.Azure.Cosmos.ChangeFeedOptions)">
            <summary>
            Overloaded. This method creates a change feed query for collections under an Azure Cosmos DB database account
            in an Azure Cosmos DB service.
            </summary>
            <param name="databaseLink">Specifies the database to read collections from.</param>
            <param name="feedOptions">Specifies the options for processing the query results feed.</param>
            <returns>the query result set.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.DocumentClient.CreateStoredProcedureQuery(System.String,Microsoft.Azure.Cosmos.FeedOptions)">
            <summary>
            Overloaded. This method creates a query for stored procedures under a collection in an Azure Cosmos DB service. It returns An IOrderedQueryable{StoredProcedure}.
            </summary>
            <param name="collectionLink">The link to the parent collection resource.</param>
            <param name="feedOptions">The options for processing the query result feed. For details, see <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions"/></param>
            <returns>An IOrderedQueryable{StoredProcedure} that can evaluate the query with the provided SQL statement.</returns>
            <example>
            This example below queries for stored procedures by id.
            <code language="c#">
            <![CDATA[
            StoredProcedure storedProcedure = client.CreateStoredProcedureQuery(collectionLink).Where(c => c.Id == "helloWorld").AsEnumerable().FirstOrDefault();
            ]]>
            </code>
            </example>
            <seealso cref="T:Microsoft.Azure.Documents.StoredProcedure"/>
            <seealso cref="T:Microsoft.Azure.Cosmos.Linq.IDocumentQuery"/>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.DocumentClient.CreateStoredProcedureQuery(System.String,System.String,Microsoft.Azure.Cosmos.FeedOptions)">
            <summary>
            Overloaded. This method creates a query for stored procedures under a collection in an Azure Cosmos DB database using a SQL statement. It returns an IQueryable{dynamic}.
            </summary>
            <param name="collectionLink">The link to the parent collection resource.</param>
            <param name="sqlExpression">The SQL statement.</param>
            <param name="feedOptions">The options for processing the query result feed. For details, see <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions"/></param>
            <returns>An IQueryable{dynamic} that can evaluate the query with the provided SQL statement.</returns>
            <example>
            This example below queries for stored procedures by id.
            <code language="c#">
            <![CDATA[
            StoredProcedure storedProcedure = client.CreateStoredProcedureQuery(collectionLink, "SELECT * FROM sprocs s WHERE s.id = 'HelloWorld'").AsEnumerable().FirstOrDefault();
            ]]>
            </code>
            </example>
            <remarks>Refer to https://msdn.microsoft.com/en-us/library/azure/dn782250.aspx and http://azure.microsoft.com/documentation/articles/documentdb-sql-query/ for syntax and examples.</remarks>
            <seealso cref="T:Microsoft.Azure.Documents.StoredProcedure"/>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.DocumentClient.CreateStoredProcedureQuery(System.String,Microsoft.Azure.Cosmos.SqlQuerySpec,Microsoft.Azure.Cosmos.FeedOptions)">
            <summary>
            Overloaded. This method creates a query for stored procedures under a collection in an Azure Cosmos DB database using a SQL statement using a SQL statement with parameterized values. It returns an IQueryable{dynamic}.
             For more information on preparing SQL statements with parameterized values, please see <see cref="T:Microsoft.Azure.Cosmos.SqlQuerySpec"/>.
            </summary>
            <param name="collectionLink">The link to the parent collection resource.</param>
            <param name="querySpec">The SqlQuerySpec instance containing the SQL expression.</param>
            <param name="feedOptions">The options for processing the query result feed. For details, see <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions"/></param>
            <returns>An IQueryable{dynamic} that can evaluate the query with the provided SQL statement.</returns>
            <example>
            This example below queries for stored procedures by id.
            <code language="c#">
            <![CDATA[
            var query = new SqlQuerySpec("SELECT * FROM sprocs s WHERE s.id = @id", new SqlParameterCollection(new SqlParameter[] { new SqlParameter { Name = "@id", Value = "HelloWorld" }}));
            StoredProcedure storedProcedure = client.CreateStoredProcedureQuery(collectionLink, query).AsEnumerable().FirstOrDefault();
            ]]>
            </code>
            </example>
            <remarks>Refer to https://msdn.microsoft.com/en-us/library/azure/dn782250.aspx and http://azure.microsoft.com/documentation/articles/documentdb-sql-query/ for syntax and examples.</remarks>
            <seealso cref="T:Microsoft.Azure.Documents.StoredProcedure"/>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.DocumentClient.CreateTriggerQuery(System.String,Microsoft.Azure.Cosmos.FeedOptions)">
            <summary>
            Overloaded. This method creates a query for triggers under a collection in an Azure Cosmos DB service. It returns An IOrderedQueryable{Trigger}.
            </summary>
            <param name="collectionLink">The link to the parent collection resource.</param>
            <param name="feedOptions">The options for processing the query result feed. For details, see <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions"/></param>
            <returns>An IOrderedQueryable{Trigger} that can evaluate the query with the provided SQL statement.</returns>
            <example>
            This example below queries for triggers by id.
            <code language="c#">
            <![CDATA[
            Trigger trigger = client.CreateTriggerQuery(collectionLink).Where(t => t.Id == "validate").AsEnumerable().FirstOrDefault();
            ]]>
            </code>
            </example>
            <seealso cref="T:Microsoft.Azure.Documents.Trigger"/>
            <seealso cref="T:Microsoft.Azure.Cosmos.Linq.IDocumentQuery"/>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.DocumentClient.CreateTriggerQuery(System.String,System.String,Microsoft.Azure.Cosmos.FeedOptions)">
            <summary>
            Overloaded. This method creates a query for triggers under a collection in an Azure Cosmos DB service. It returns an IQueryable{dynamic}.
            </summary>
            <param name="collectionLink">The link to the parent collection resource.</param>
            <param name="sqlExpression">The SQL statement.</param>
            <param name="feedOptions">The options for processing the query result feed. For details, see <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions"/></param>
            <returns>An IQueryable{dynamic} that can evaluate the query with the provided SQL statement.</returns>
            <example>
            This example below queries for triggers by id.
            <code language="c#">
            <![CDATA[
            Trigger trigger = client.CreateTriggerQuery(collectionLink, "SELECT * FROM triggers t WHERE t.id = 'validate'").AsEnumerable().FirstOrDefault();
            ]]>
            </code>
            </example>
            <remarks>Refer to https://msdn.microsoft.com/en-us/library/azure/dn782250.aspx and http://azure.microsoft.com/documentation/articles/documentdb-sql-query/ for syntax and examples.</remarks>
            <seealso cref="T:Microsoft.Azure.Documents.Trigger"/>
            <seealso cref="T:Microsoft.Azure.Cosmos.Linq.IDocumentQuery"/>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.DocumentClient.CreateTriggerQuery(System.String,Microsoft.Azure.Cosmos.SqlQuerySpec,Microsoft.Azure.Cosmos.FeedOptions)">
            <summary>
            Overloaded. This method creates a query for triggers under a collection in an Azure Cosmos DB database using a SQL statement with parameterized values. It returns an IQueryable{dynamic}.
             For more information on preparing SQL statements with parameterized values, please see <see cref="T:Microsoft.Azure.Cosmos.SqlQuerySpec"/>.
            </summary>
            <param name="collectionLink">The link to the parent collection resource.</param>
            <param name="querySpec">The SqlQuerySpec instance containing the SQL expression.</param>
            <param name="feedOptions">The options for processing the query result feed. For details, see <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions"/></param>
            <returns>An IQueryable{Trigger} that can evaluate the query with the provided SQL statement.</returns>
            <example>
            This example below queries for triggers by id.
            <code language="c#">
            <![CDATA[
            var query = new SqlQuerySpec("SELECT * FROM triggers t WHERE t.id = @id", new SqlParameterCollection(new SqlParameter[] { new SqlParameter { Name = "@id", Value = "HelloWorld" }}));
            Trigger trigger = client.CreateTriggerQuery(collectionLink, query).AsEnumerable().FirstOrDefault();
            ]]>
            </code>
            </example>
            <remarks>Refer to https://msdn.microsoft.com/en-us/library/azure/dn782250.aspx and http://azure.microsoft.com/documentation/articles/documentdb-sql-query/ for syntax and examples.</remarks>
            <seealso cref="T:Microsoft.Azure.Documents.Trigger"/>
            <seealso cref="T:Microsoft.Azure.Cosmos.Linq.IDocumentQuery"/>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.DocumentClient.CreateUserDefinedFunctionQuery(System.String,Microsoft.Azure.Cosmos.FeedOptions)">
            <summary>
            Overloaded. This method creates a query for udfs under a collection in an Azure Cosmos DB service. It returns An IOrderedQueryable{UserDefinedFunction}.
            </summary>
            <param name="collectionLink">The link to the parent collection resource.</param>
            <param name="feedOptions">The options for processing the query result feed. For details, see <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions"/></param>
            <returns>An IOrderedQueryable{UserDefinedFunction} that can evaluate the query with the provided SQL statement.</returns>
            <example>
            This example below queries for user-defined functions by id.
            <code language="c#">
            <![CDATA[
            UserDefinedFunction udf = client.CreateUserDefinedFunctionQuery(collectionLink).Where(u => u.Id == "sqrt").AsEnumerable().FirstOrDefault();
            ]]>
            </code>
            </example>
            <seealso cref="T:Microsoft.Azure.Documents.UserDefinedFunction"/>
            <seealso cref="T:Microsoft.Azure.Cosmos.Linq.IDocumentQuery"/>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.DocumentClient.CreateUserDefinedFunctionQuery(System.String,System.String,Microsoft.Azure.Cosmos.FeedOptions)">
            <summary>
            Overloaded. This method creates a query for udfs under a collection in an Azure Cosmos DB database using a SQL statement. It returns an IQueryable{dynamic}.
            </summary>
            <param name="collectionLink">The link to the parent collection resource.</param>
            <param name="sqlExpression">The SQL statement.</param>
            <param name="feedOptions">The options for processing the query result feed. For details, see <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions"/></param>
            <returns>An IQueryable{dynamic} that can evaluate the query with the provided SQL statement.</returns>
            <example>
            This example below queries for user-defined functions by id.
            <code language="c#">
            <![CDATA[
            UserDefinedFunction udf = client.CreateUserDefinedFunctionQuery(collectionLink, "SELECT * FROM udfs u WHERE u.id = 'sqrt'").AsEnumerable().FirstOrDefault();
            ]]>
            </code>
            </example>
            <remarks>Refer to https://msdn.microsoft.com/en-us/library/azure/dn782250.aspx and http://azure.microsoft.com/documentation/articles/documentdb-sql-query/ for syntax and examples.</remarks>
            <seealso cref="T:Microsoft.Azure.Documents.UserDefinedFunction"/>
            <seealso cref="T:Microsoft.Azure.Cosmos.Linq.IDocumentQuery"/>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.DocumentClient.CreateUserDefinedFunctionQuery(System.String,Microsoft.Azure.Cosmos.SqlQuerySpec,Microsoft.Azure.Cosmos.FeedOptions)">
            <summary>
            Overloaded. This method creates a query for udfs under a collection in an Azure Cosmos DB database with parameterized values. It returns an IQueryable{dynamic}.
             For more information on preparing SQL statements with parameterized values, please see <see cref="T:Microsoft.Azure.Cosmos.SqlQuerySpec"/>.
            </summary>
            <param name="collectionLink">The link to the parent collection resource.</param>
            <param name="querySpec">The SqlQuerySpec instance containing the SQL expression.</param>
            <param name="feedOptions">The options for processing the query result feed. For details, see <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions"/></param>
            <returns>An IQueryable{dynamic} that can evaluate the query with the provided SQL statement.</returns>
            <example>
            This example below queries for user-defined functions by id.
            <code language="c#">
            <![CDATA[
            var query = new SqlQuerySpec("SELECT * FROM udfs u WHERE u.id = @id", new SqlParameterCollection(new SqlParameter[] { new SqlParameter { Name = "@id", Value = "sqrt" }}));
            UserDefinedFunction udf = client.CreateUserDefinedFunctionQuery(collectionLink, query).AsEnumerable().FirstOrDefault();
            ]]>
            </code>
            </example>
            <remarks>Refer to https://msdn.microsoft.com/en-us/library/azure/dn782250.aspx and http://azure.microsoft.com/documentation/articles/documentdb-sql-query/ for syntax and examples.</remarks>
            <seealso cref="T:Microsoft.Azure.Documents.UserDefinedFunction"/>
            <seealso cref="T:Microsoft.Azure.Cosmos.Linq.IDocumentQuery"/>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.DocumentClient.CreateConflictQuery(System.String,Microsoft.Azure.Cosmos.FeedOptions)">
            <summary>
            Overloaded. This method creates a query for conflicts under a collection in an Azure Cosmos DB service. It returns An IOrderedQueryable{Conflict}.
            </summary>
            <param name="collectionLink">The link to the parent collection resource.</param>
            <param name="feedOptions">The options for processing the query result feed. For details, see <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions"/></param>
            <returns>An IOrderedQueryable{Conflict} that can evaluate the query with the provided SQL statement.</returns>
            <example>
            This example below queries for conflicts by id.
            <code language="c#">
            <![CDATA[
            Conflict conflict = client.CreateConflictQuery(collectionLink).Where(c => c.Id == "summary").AsEnumerable().FirstOrDefault();
            ]]>
            </code>
            </example>
            <seealso cref="T:Microsoft.Azure.Cosmos.Linq.IDocumentQuery"/>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.DocumentClient.CreateConflictQuery(System.String,System.String,Microsoft.Azure.Cosmos.FeedOptions)">
            <summary>
            Overloaded. This method creates a query for conflicts under a collection in an Azure Cosmos DB service. It returns an IQueryable{Conflict}.
            </summary>
            <param name="collectionLink">The link to the parent collection resource.</param>
            <param name="sqlExpression">The SQL statement.</param>
            <param name="feedOptions">The options for processing the query result feed. For details, see <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions"/></param>
            <returns>An IQueryable{dynamic} that can evaluate the query with the the provided SQL statement.</returns>
            <example>
            This example below queries for conflicts by id.
            <code language="c#">
            <![CDATA[
            var query = new SqlQuerySpec("SELECT * FROM conflicts c WHERE c.id = @id", new SqlParameterCollection(new SqlParameter[] { new SqlParameter { Name = "@id", Value = "summary" }}));
            Conflict conflict = client.CreateConflictQuery(collectionLink, query).AsEnumerable().FirstOrDefault();
            ]]>
            </code>
            </example>
            <remarks>Refer to https://msdn.microsoft.com/en-us/library/azure/dn782250.aspx and http://azure.microsoft.com/documentation/articles/documentdb-sql-query/ for syntax and examples.</remarks>
            <seealso cref="T:Microsoft.Azure.Cosmos.Linq.IDocumentQuery"/>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.DocumentClient.CreateConflictQuery(System.String,Microsoft.Azure.Cosmos.SqlQuerySpec,Microsoft.Azure.Cosmos.FeedOptions)">
            <summary>
            Overloaded. This method creates a query for conflicts under a collection in an Azure Cosmos DB database with parameterized values. It returns an IQueryable{dynamic}.
             For more information on preparing SQL statements with parameterized values, please see <see cref="T:Microsoft.Azure.Cosmos.SqlQuerySpec"/>.
            </summary>
            <param name="collectionLink">The link to the parent collection resource.</param>
            <param name="querySpec">The SqlQuerySpec instance containing the SQL expression.</param>
            <param name="feedOptions">The options for processing the query result feed. For details, see <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions"/></param>
            <returns>An IQueryable{dynamic} that can evaluate the query with the provided SQL statement.</returns>
            <example>
            This example below queries for conflicts by id.
            <code language="c#">
            <![CDATA[
            var query = new SqlQuerySpec("SELECT * FROM conflicts c WHERE c.id = @id", new SqlParameterCollection(new SqlParameter[] { new SqlParameter { Name = "@id", Value = "summary" }}));
            dynamic conflict = client.CreateConflictQuery<dynamic>(collectionLink, query).AsEnumerable().FirstOrDefault();
            ]]>
            </code>
            </example>
            <remarks>Refer to https://msdn.microsoft.com/en-us/library/azure/dn782250.aspx and http://azure.microsoft.com/documentation/articles/documentdb-sql-query/ for syntax and examples.</remarks>
            <seealso cref="T:Microsoft.Azure.Documents.Document"/>
            <seealso cref="T:Microsoft.Azure.Cosmos.Linq.IDocumentQuery"/>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.DocumentClient.CreateDocumentQuery``1(System.String,Microsoft.Azure.Cosmos.FeedOptions)">
            <summary>
            Overloaded. This method creates a query for documents under a collection in an Azure Cosmos DB service.
            </summary>
            <typeparam name="T">The type of object to query.</typeparam>
            <param name="collectionLink">The link to the parent collection resource.</param>
            <param name="feedOptions">The options for processing the query result feed. For details, see <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions"/></param>
            <returns>An IOrderedQueryable{T} that can evaluate the query.</returns>
            <example>
            This example below queries for some book documents.
            <code language="c#">
            <![CDATA[
            public class Book 
            {
                [JsonProperty("title")]
                public string Title {get; set;}
                
                public Author Author {get; set;}
                
                public int Price {get; set;}
            }
            
            public class Author
            {
                public string FirstName {get; set;}
                public string LastName {get; set;}
            }
             
            // Query by the Title property
            Book book = client.CreateDocumentQuery<Book>(collectionLink).Where(b => b.Title == "War and Peace").AsEnumerable().FirstOrDefault();
            
            // Query a nested property
            Book otherBook = client.CreateDocumentQuery<Book>(collectionLink).Where(b => b.Author.FirstName == "Leo").AsEnumerable().FirstOrDefault();
            
            // Perform a range query (needs an IndexType.Range on price or FeedOptions.EnableScansInQuery)
            foreach (Book matchingBook in client.CreateDocumentQuery<Book>(collectionLink).Where(b => b.Price > 100))
            {
                // Iterate through books
            }
            
            // Query asychronously. Optionally set FeedOptions.MaxItemCount to control page size
            using (var queryable = client.CreateDocumentQuery<Book>(
                collectionLink,
                new FeedOptions { MaxItemCount = 10 })
                .Where(b => b.Title == "War and Peace")
                .AsDocumentQuery())
            {
                while (queryable.HasMoreResults) 
                {
                    foreach(Book b in await queryable.ExecuteNextAsync<Book>())
                    {
                        // Iterate through books
                    }
                }
            }
            ]]>
            </code>
            </example>
            <remarks>
            The Azure Cosmos DB LINQ provider compiles LINQ to SQL statements. Refer to http://azure.microsoft.com/documentation/articles/documentdb-sql-query/#linq-to-documentdb-sql for the list of expressions supported by the Azure Cosmos DB LINQ provider. ToString() on the generated IQueryable returns the translated SQL statement. The Azure Cosmos DB provider translates JSON.NET and DataContract serialization attributes for members to their JSON property names.
            </remarks>
            <seealso cref="T:Microsoft.Azure.Documents.Document"/>
            <seealso cref="T:Microsoft.Azure.Cosmos.Linq.IDocumentQuery"/>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.DocumentClient.CreateDocumentQuery``1(System.String,Microsoft.Azure.Cosmos.FeedOptions,System.Object)">
            <summary>
            Overloaded. This method creates a query for documents under a collection in an Azure Cosmos DB service.
            </summary>
            <typeparam name="T">The type of object to query.</typeparam>
            <param name="documentsFeedOrDatabaseLink">The path link for the documents under a collection, e.g. dbs/db_rid/colls/coll_rid/docs/. 
            Alternatively, this can be a path link to the database when using an IPartitionResolver, e.g. dbs/db_rid/</param>
            <param name="feedOptions">The options for processing the query result feed. For details, see <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions"/></param>
            <param name="partitionKey">The partition key that can be used with an IPartitionResolver.</param>
            <returns>An IOrderedQueryable{T} that can evaluate the query.</returns>
            <remarks>
            Support for IPartitionResolver based method overloads is now obsolete. It's recommended that you use 
            <a href="https://azure.microsoft.com/documentation/articles/documentdb-partition-data">Partitioned Collections</a> for higher storage and throughput.
            </remarks>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.DocumentClient.CreateDocumentQuery``1(System.String,System.String,Microsoft.Azure.Cosmos.FeedOptions)">
            <summary>
            Overloaded. This method creates a query for documents under a collection in an Azure Cosmos DB database using a SQL statement. It returns an IQueryable{T}.
            </summary>
            <typeparam name="T">The type of object to query.</typeparam>
            <param name="collectionLink">The link to the parent collection.</param>
            <param name="sqlExpression">The SQL statement.</param>
            <param name="feedOptions">The options for processing the query result feed. For details, see <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions"/></param>
            <returns>An IQueryable{T} that can evaluate the query.</returns>
            <example>
            This example below queries for some book documents.
            <code language="c#">
            <![CDATA[
            public class Book 
            {
                [JsonProperty("title")]
                public string Title {get; set;}
                
                public Author Author {get; set;}
                
                public int Price {get; set;}
            }
            
            public class Author
            {
                public string FirstName {get; set;}
                public string LastName {get; set;}
            }
            
            // Query by the Title property
            Book book = client.CreateDocumentQuery<Book>(collectionLink, 
                "SELECT * FROM books b WHERE b.title  = 'War and Peace'").AsEnumerable().FirstOrDefault();
            
            // Query a nested property
            Book otherBook = client.CreateDocumentQuery<Book>(collectionLink,
                "SELECT * FROM books b WHERE b.Author.FirstName = 'Leo'").AsEnumerable().FirstOrDefault();
            
            // Perform a range query (needs an IndexType.Range on price or FeedOptions.EnableScansInQuery)
            foreach (Book matchingBook in client.CreateDocumentQuery<Book>(
                collectionLink, "SELECT * FROM books b where b.Price > 1000"))
            {
                // Iterate through books
            }
            
            // Query asychronously. Optionally set FeedOptions.MaxItemCount to control page size
            using (var queryable = client.CreateDocumentQuery<Book>(collectionLink, 
                "SELECT * FROM books b WHERE b.title  = 'War and Peace'", 
                new FeedOptions { MaxItemCount = 10 }).AsDocumentQuery())
            {
                while (queryable.HasMoreResults) 
                {
                    foreach(Book b in await queryable.ExecuteNextAsync<Book>())
                    {
                        // Iterate through books
                    }
                }
            }
            ]]>
            </code>
            </example>
            <remarks>Refer to https://msdn.microsoft.com/en-us/library/azure/dn782250.aspx and http://azure.microsoft.com/documentation/articles/documentdb-sql-query/ for syntax and examples.</remarks>
            <seealso cref="T:Microsoft.Azure.Documents.Document"/>
            <seealso cref="T:Microsoft.Azure.Cosmos.Linq.IDocumentQuery"/>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.DocumentClient.CreateDocumentQuery``1(System.String,System.String,Microsoft.Azure.Cosmos.FeedOptions,System.Object)">
            <summary>
            Overloaded. This method creates a query for documents under a collection in an Azure Cosmos DB database using a SQL statement. It returns an IQueryable{T}.
            </summary>
            <typeparam name="T">The type of object to query.</typeparam>
            <param name="collectionLink">The path link for the documents under a collection, e.g. dbs/db_rid/colls/coll_rid/docs/. 
            Alternatively, this can be a path link to the database when using an IPartitionResolver, e.g. dbs/db_rid/</param>
            <param name="sqlExpression">The SQL statement.</param>
            <param name="feedOptions">The options for processing the query result feed. For details, see <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions"/></param>
            <param name="partitionKey">The partition key that can be used with an IPartitionResolver.</param>
            <returns>An IQueryable{T} that can evaluate the query.</returns>
            <remarks>
            Support for IPartitionResolver based method overloads is now obsolete. It's recommended that you use 
            <a href="https://azure.microsoft.com/documentation/articles/documentdb-partition-data">Partitioned Collections</a> for higher storage and throughput.
            </remarks>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.DocumentClient.CreateDocumentQuery``1(System.String,Microsoft.Azure.Cosmos.SqlQuerySpec,Microsoft.Azure.Cosmos.FeedOptions)">
            <summary>
            Overloaded. This method creates a query for documents under a collection in an Azure Cosmos DB database using a SQL statement with parameterized values. It returns an IQueryable{T}.
             For more information on preparing SQL statements with parameterized values, please see <see cref="T:Microsoft.Azure.Cosmos.SqlQuerySpec"/>.
            </summary>
            <typeparam name="T">The type of object to query.</typeparam>
            <param name="collectionLink">The link to the parent document collection.</param>
            <param name="querySpec">The SqlQuerySpec instance containing the SQL expression.</param>
            <param name="feedOptions">The options for processing the query result feed. For details, see <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions"/></param>
            <returns>An IQueryable{T} that can evaluate the query.</returns>
            <example>
            This example below queries for some book documents.
            <code language="c#">
            <![CDATA[
            public class Book 
            {
                [JsonProperty("title")]
                public string Title {get; set;}
                
                public Author Author {get; set;}
                
                public int Price {get; set;}
            }
            
            public class Author
            {
                public string FirstName {get; set;}
                public string LastName {get; set;}
            }
            
            // Query using Title
            Book book, otherBook;
            
            var query = new SqlQuerySpec(
                "SELECT * FROM books b WHERE b.title = @title", 
                new SqlParameterCollection(new SqlParameter[] { new SqlParameter { Name = "@title", Value = "War and Peace" }}));
            book = client.CreateDocumentQuery<Book>(collectionLink, query).AsEnumerable().FirstOrDefault();
            
            // Query a nested property
            query = new SqlQuerySpec(
                "SELECT * FROM books b WHERE b.Author.FirstName = @firstName", 
                new SqlParameterCollection(new SqlParameter[] { new SqlParameter { Name = "@firstName", Value = "Leo" }}));
            otherBook = client.CreateDocumentQuery<Book>(collectionLink, query).AsEnumerable().FirstOrDefault();
            
            // Perform a range query (needs an IndexType.Range on price or FeedOptions.EnableScansInQuery)
            query = new SqlQuerySpec(
                "SELECT * FROM books b WHERE b.Price > @minPrice", 
                new SqlParameterCollection(new SqlParameter[] { new SqlParameter { Name = "@minPrice", Value = 1000 }}));
            foreach (Book b in client.CreateDocumentQuery<Book>(
                collectionLink, query))
            {
                // Iterate through books
            }
            
            // Query asychronously. Optionally set FeedOptions.MaxItemCount to control page size
            query = new SqlQuerySpec(
                "SELECT * FROM books b WHERE b.title = @title", 
                new SqlParameterCollection(new SqlParameter[] { new SqlParameter { Name = "@title", Value = "War and Peace" }}));
                
            using (var queryable = client.CreateDocumentQuery<Book>(collectionLink, query, 
                new FeedOptions { MaxItemCount = 10 }).AsDocumentQuery())
            {
                while (queryable.HasMoreResults) 
                {
                    foreach(Book b in await queryable.ExecuteNextAsync<Book>())
                    {
                        // Iterate through books
                    }
                }
            }
            ]]>
            </code>
            </example>
            <remarks>Refer to https://msdn.microsoft.com/en-us/library/azure/dn782250.aspx and http://azure.microsoft.com/documentation/articles/documentdb-sql-query/ for syntax and examples.</remarks>
            <seealso cref="T:Microsoft.Azure.Documents.Document"/>
            <seealso cref="T:Microsoft.Azure.Cosmos.Linq.IDocumentQuery"/>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.DocumentClient.CreateDocumentQuery``1(System.String,Microsoft.Azure.Cosmos.SqlQuerySpec,Microsoft.Azure.Cosmos.FeedOptions,System.Object)">
            <summary>
            Overloaded. This method creates a query for documents under a collection in an Azure Cosmos DB database using a SQL statement with parameterized values. It returns an IQueryable{T}.
             For more information on preparing SQL statements with parameterized values, please see <see cref="T:Microsoft.Azure.Cosmos.SqlQuerySpec"/>.
            </summary>
            <typeparam name="T">The type of object to query.</typeparam>
            <param name="collectionLink">The link to the parent document collection.
            Alternatively, this can be a path link to the database when using an IPartitionResolver.</param>
            <param name="querySpec">The SqlQuerySpec instance containing the SQL expression.</param>
            <param name="feedOptions">The options for processing the query result feed. For details, see <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions"/></param>
            <param name="partitionKey">The partition key that can be used with an IPartitionResolver.</param>
            <returns>An IQueryable{T} that can evaluate the query.</returns>
            <remarks>
            Support for IPartitionResolver based method overloads is now obsolete. It's recommended that you use 
            <a href="https://azure.microsoft.com/documentation/articles/documentdb-partition-data">Partitioned Collections</a> for higher storage and throughput.
            </remarks>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.DocumentClient.CreateDocumentQuery(System.String,Microsoft.Azure.Cosmos.FeedOptions)">
             <summary>
             Overloaded. This method creates a query for documents under a collection in an Azure Cosmos DB service. It returns IOrderedQueryable{Document}.
             </summary>
             <param name="collectionLink">The link to the parent document collection.</param>
             <param name="feedOptions">The options for processing the query result feed. For details, see <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions"/></param>
             <returns>An IOrderedQueryable{Document} that can evaluate the query.</returns>
             <example>
             This example below queries for documents by id.
             <code language="c#">
             <![CDATA[
             Document document = client.CreateDocumentQuery<Document>(collectionLink)
                 .Where(d => d.Id == "War and Peace").AsEnumerable().FirstOrDefault();
            
             ]]>
             </code>
             </example>
             <remarks>
             This overload should be used when the schema of the queried documents is unknown or when querying by ID and replacing/deleting documents.
             Since Document is a DynamicObject, it can be dynamically cast back to the original C# object.
             </remarks>
             <seealso cref="T:Microsoft.Azure.Documents.Document"/>
             <seealso cref="T:Microsoft.Azure.Cosmos.Linq.IDocumentQuery"/>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.DocumentClient.CreateDocumentQuery(System.String,Microsoft.Azure.Cosmos.FeedOptions,System.Object)">
            <summary>
            Overloaded. This method creates a query for documents under a collection in an Azure Cosmos DB service. It returns IOrderedQueryable{Document}.
            </summary>
            <param name="collectionLink">The link to the parent document collection.
            Alternatively, this can be a path link to the database when using an IPartitionResolver.</param>
            <param name="feedOptions">The options for processing the query result feed. For details, see <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions"/></param>
            <param name="partitionKey">Optional partition key that can be used with an IPartitionResolver.</param>
            <returns>An IOrderedQueryable{Document} that can evaluate the query.</returns>
            <remarks>
            Support for IPartitionResolver based method overloads is now obsolete. It's recommended that you use 
            <a href="https://azure.microsoft.com/documentation/articles/documentdb-partition-data">Partitioned Collections</a> for higher storage and throughput.
            </remarks>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.DocumentClient.CreateDocumentQuery(System.String,System.String,Microsoft.Azure.Cosmos.FeedOptions)">
            <summary>
            Overloaded. This method creates a query for documents under a collection in an Azure Cosmos DB database using a SQL statement. It returns an IQueryable{dynamic}.
            </summary>
            <param name="collectionLink">The link to the parent document collection.</param>
            <param name="sqlExpression">The SQL statement.</param>
            <param name="feedOptions">The options for processing the query result feed. For details, see <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions"/></param>
            <returns>an IQueryable{dynamic> that can evaluate the query.</returns>
            <example>
            This example below queries for book documents.
            <code language="c#">
            <![CDATA[
            // SQL querying allows dynamic property access
            dynamic document = client.CreateDocumentQuery<dynamic>(collectionLink,
                "SELECT * FROM books b WHERE b.title == 'War and Peace'").AsEnumerable().FirstOrDefault();
            ]]>
            </code>
            </example>
            <remarks>Refer to https://msdn.microsoft.com/en-us/library/azure/dn782250.aspx and http://azure.microsoft.com/documentation/articles/documentdb-sql-query/ for syntax and examples.</remarks>
            <seealso cref="T:Microsoft.Azure.Documents.Document"/>
            <seealso cref="T:Microsoft.Azure.Cosmos.Linq.IDocumentQuery"/>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.DocumentClient.CreateDocumentQuery(System.String,System.String,Microsoft.Azure.Cosmos.FeedOptions,System.Object)">
            <summary>
            Overloaded. This method creates a query for documents under a collection in an Azure Cosmos DB database using a SQL statement. It returns an IQueryable{dynamic}.
            </summary>
            <param name="collectionLink">The link of the parent document collection.
            Alternatively, this can be a path link to the database when using an IPartitionResolver, e.g. dbs/db_rid/</param>
            <param name="sqlExpression">The SQL statement.</param>
            <param name="feedOptions">The options for processing the query result feed. For details, see <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions"/></param>
            <param name="partitionKey">The partition key that can be used with an IPartitionResolver.</param>
            <returns>an IQueryable{dynamic> that can evaluate the query.</returns>
            <remarks>
            Support for IPartitionResolver based method overloads is now obsolete. It's recommended that you use 
            <a href="https://azure.microsoft.com/documentation/articles/documentdb-partition-data">Partitioned Collections</a> for higher storage and throughput.
            </remarks>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.DocumentClient.CreateDocumentQuery(System.String,Microsoft.Azure.Cosmos.SqlQuerySpec,Microsoft.Azure.Cosmos.FeedOptions)">
            <summary>
            Overloaded. This method creates a query for documents under a collection in an Azure Cosmos DB database using a SQL statement with parameterized values. It returns an IQueryable{dynamic}.
            For more information on preparing SQL statements with parameterized values, please see <see cref="T:Microsoft.Azure.Cosmos.SqlQuerySpec"/>.
            </summary>
            <param name="collectionLink">The link to the parent document collection.</param>
            <param name="querySpec">The SqlQuerySpec instance containing the SQL expression.</param>
            <param name="feedOptions">The options for processing the query result feed. For details, see <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions"/></param>
            <returns>an IQueryable{dynamic> that can evaluate the query.</returns>
            <example>
            This example below queries for book documents.
            <code language="c#">
            <![CDATA[
            // SQL querying allows dynamic property access
            var query = new SqlQuerySpec(
                "SELECT * FROM books b WHERE b.title = @title", 
                new SqlParameterCollection(new SqlParameter[] { new SqlParameter { Name = "@title", Value = "War and Peace" }}));
                
            dynamic document = client.CreateDocumentQuery<dynamic>(collectionLink, query).AsEnumerable().FirstOrDefault();
            ]]>
            </code>
            </example>
            <remarks>Refer to https://msdn.microsoft.com/en-us/library/azure/dn782250.aspx and http://azure.microsoft.com/documentation/articles/documentdb-sql-query/ for syntax and examples.</remarks>
            <seealso cref="T:Microsoft.Azure.Documents.Document"/>
            <seealso cref="T:Microsoft.Azure.Cosmos.Linq.IDocumentQuery"/>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.DocumentClient.CreateDocumentQuery(System.String,Microsoft.Azure.Cosmos.SqlQuerySpec,Microsoft.Azure.Cosmos.FeedOptions,System.Object)">
            <summary>
            Overloaded. This method creates a query for documents under a collection in an Azure Cosmos DB database using a SQL statement with parameterized values. It returns an IQueryable{dynamic}.
            For more information on preparing SQL statements with parameterized values, please see <see cref="T:Microsoft.Azure.Cosmos.SqlQuerySpec"/>.
            </summary>
            <param name="collectionLink">The link to the parent document collection.
            Alternatively, this can be a path link to the database when using an IPartitionResolver, e.g. dbs/db_rid/</param>
            <param name="querySpec">The SqlQuerySpec instance containing the SQL expression.</param>
            <param name="feedOptions">The options for processing the query result feed. For details, see <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions"/></param>
            <param name="partitionKey">The partition key that can be used with an IPartitionResolver.</param>
            <returns>an IQueryable{dynamic> that can evaluate the query.</returns>
            <remarks>
            Support for IPartitionResolver based method overloads is now obsolete. It's recommended that you use 
            <a href="https://azure.microsoft.com/documentation/articles/documentdb-partition-data">Partitioned Collections</a> for higher storage and throughput.
            </remarks>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.DocumentClient.CreateDocumentChangeFeedQuery(System.String,Microsoft.Azure.Cosmos.ChangeFeedOptions)">
            <summary>
            Overloaded. This method creates a change feed query for documents under a collection in an Azure Cosmos DB service.
            </summary>
            <param name="collectionLink">Specifies the collection to read documents from.</param>
            <param name="feedOptions">The options for processing the query results feed.</param>
            <returns>the query result set.</returns>
            <remarks>ChangeFeedOptions.PartitionKeyRangeId must be provided.</remarks>
            <example>
            <code language="c#">
            <![CDATA[
            string partitionKeyRangeId = "0";   // Use client.ReadPartitionKeyRangeFeedAsync() to obtain the ranges.
            string checkpointContinuation = null;
            ChangeFeedOptions options = new ChangeFeedOptions
            {
                PartitionKeyRangeId = partitionKeyRangeId,
                RequestContinuation = checkpointContinuation,
                StartFromBeginning = true,
            };
            using(var query = client.CreateDocumentChangeFeedQuery(collection.SelfLink, options))
            {
                while (true)
                {
                    do
                    {
                        var response = await query.ExecuteNextAsync<Document>();
                        if (response.Count > 0)
                        {
                            var docs = new List<Document>();
                            docs.AddRange(response);
                            // Process the documents.
                            // Checkpoint response.ResponseContinuation.
                        }
                    }
                    while (query.HasMoreResults);
                    Task.Delay(TimeSpan.FromMilliseconds(500)); // Or break here and use checkpointed continuation token later.
                }       
            }
            ]]>
            </code>
            </example>
            <seealso cref="T:Microsoft.Azure.Cosmos.Linq.IDocumentQuery`1"/>
            <seealso cref="T:Microsoft.Azure.Cosmos.ChangeFeedOptions"/>
            <seealso cref="T:Microsoft.Azure.Documents.PartitionKeyRange"/>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.DocumentClient.CreateOfferQuery(Microsoft.Azure.Cosmos.FeedOptions)">
            <summary>
            Overloaded. This method creates a query for offers under an Azure Cosmos DB database account. It returns IOrderedQueryable{Offer}.
            </summary>
            <param name="feedOptions">The options for processing the query result feed. For details, see <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions"/></param>
            <returns>An IOrderedQueryable{Offer} that can evaluate the query.</returns>
            <example>
            This example below queries for offers
            <code language="c#">
            <![CDATA[
            // Find the offer for the collection by SelfLink
            Offer offer = client.CreateOfferQuery().Where(o => o.Resource == collectionSelfLink).AsEnumerable().FirstOrDefault();
            ]]>
            </code>
            </example>
            <remarks>Refer to https://msdn.microsoft.com/en-us/library/azure/dn782250.aspx and http://azure.microsoft.com/documentation/articles/documentdb-sql-query/ for syntax and examples.</remarks>
            <seealso cref="T:Microsoft.Azure.Documents.Offer"/>
            <seealso cref="T:Microsoft.Azure.Cosmos.Linq.IDocumentQuery"/>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.DocumentClient.CreateOfferQuery(System.String,Microsoft.Azure.Cosmos.FeedOptions)">
            <summary>
            Overloaded. This method creates a query for offers under an Azure Cosmos DB database account using a SQL statement. It returns IQueryable{dynamic}.
            </summary>
            <param name="sqlExpression">The SQL statement.</param>
            <param name="feedOptions">The options for processing the query result feed. For details, see <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions"/></param>
            <returns>an IQueryable{dynamic} that can evaluate the query.</returns>
            <example>
            This example below queries for offers
            <code language="c#">
            <![CDATA[
            // Find the offer for the collection by SelfLink
            Offer offer = client.CreateOfferQuery(
                string.Format("SELECT * FROM offers o WHERE o.resource = '{0}'", collectionSelfLink)).AsEnumerable().FirstOrDefault();
            ]]>
            </code>
            </example>
            <remarks>Refer to https://msdn.microsoft.com/en-us/library/azure/dn782250.aspx and http://azure.microsoft.com/documentation/articles/documentdb-sql-query/ for syntax and examples.</remarks>
            <seealso cref="T:Microsoft.Azure.Documents.Offer"/>
            <seealso cref="T:Microsoft.Azure.Cosmos.Linq.IDocumentQuery"/>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.DocumentClient.CreateOfferQuery(Microsoft.Azure.Cosmos.SqlQuerySpec,Microsoft.Azure.Cosmos.FeedOptions)">
            <summary>
            Overloaded. This method creates a query for offers under an Azure Cosmos DB database account using a SQL statement with parameterized values. It returns IQueryable{dynamic}.
            For more information on preparing SQL statements with parameterized values, please see <see cref="T:Microsoft.Azure.Cosmos.SqlQuerySpec"/>.
            </summary>
            <param name="querySpec">The SqlQuerySpec instance containing the SQL expression.</param>
            <param name="feedOptions">The options for processing the query result feed. For details, see <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions"/></param>
            <returns>an IQueryable{dynamic} that can evaluate the query.</returns>
            <example>
            This example below queries for offers
            <code language="c#">
            <![CDATA[
            // Find the offer for the collection by SelfLink
            Offer offer = client.CreateOfferQuery("SELECT * FROM offers o WHERE o.resource = @collectionSelfLink",
            new SqlParameterCollection(new SqlParameter[] { new SqlParameter { Name = "@collectionSelfLink", Value = collection.SelfLink }}))
            .AsEnumerable().FirstOrDefault();
            
            ]]>
            </code>
            </example>
            <remarks>Refer to https://msdn.microsoft.com/en-us/library/azure/dn782250.aspx and http://azure.microsoft.com/documentation/articles/documentdb-sql-query/ for syntax and examples.</remarks>
            <seealso cref="T:Microsoft.Azure.Documents.Offer"/>
            <seealso cref="T:Microsoft.Azure.Cosmos.Linq.IDocumentQuery"/>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.DocumentClient.CreateUserDefinedTypeQuery(System.String,Microsoft.Azure.Cosmos.FeedOptions)">
            <summary>
            Overloaded. This method creates a query for user defined types under an Azure Cosmos DB service. It returns IOrderedQueryable{UserDefinedType}.
            </summary>
            <param name="userDefinedTypesLink">The path link for the user defined types under a database, e.g. dbs/db_rid/udts/.</param>
            <param name="feedOptions">The options for processing the query result feed. For details, see <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions"/></param>
            <returns>An IOrderedQueryable{UserDefinedType} that can evaluate the query.</returns>
            <example>
            This example below queries for user defined types by id.
            <code language="c#">
            <![CDATA[
            UserDefinedType userDefinedTypes = client.CreateUserDefinedTypeQuery(userDefinedTypesLink).Where(u => u.Id == "userDefinedTypeId5").AsEnumerable().FirstOrDefault();
            ]]>
            </code>
            </example>
            <seealso cref="T:Microsoft.Azure.Documents.UserDefinedType"/>
            <seealso cref="T:Microsoft.Azure.Cosmos.Linq.IDocumentQuery"/>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.DocumentClient.CreateUserDefinedTypeQuery(System.String,System.String,Microsoft.Azure.Cosmos.FeedOptions)">
            <summary>
            Overloaded. This method creates a query for user defined types under an Azure Cosmos DB service. It returns IQueryable{dynamic}.
            </summary>
            <param name="userDefinedTypesLink">The path link for the user defined types under a database, e.g. dbs/db_rid/udts/.</param>
            <param name="sqlExpression">The SQL statement.</param>
            <param name="feedOptions">The options for processing the query result feed. For details, see <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions"/></param>
            <returns>an IQueryable{dynamic} that can evaluate the query.</returns>
            <example>
            This example below queries for user defined types by id.
            <code language="c#">
            <![CDATA[
            UserDefinedType userDefinedTypes = client.CreateUserDefinedTypeQuery(userDefinedTypesLink, "SELECT * FROM userDefinedTypes u WHERE u.id = 'userDefinedTypeId5'").AsEnumerable().FirstOrDefault();
            ]]>
            </code>
            </example>
            <remarks>Refer to https://msdn.microsoft.com/en-us/library/azure/dn782250.aspx and http://azure.microsoft.com/documentation/articles/documentdb-sql-query/ for syntax and examples.</remarks>
            <seealso cref="T:Microsoft.Azure.Documents.UserDefinedType"/>
            <seealso cref="T:Microsoft.Azure.Cosmos.Linq.IDocumentQuery"/>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.DocumentClient.CreateUserDefinedTypeQuery(System.String,Microsoft.Azure.Cosmos.SqlQuerySpec,Microsoft.Azure.Cosmos.FeedOptions)">
            <summary>
            Overloaded. This method creates a query for user defined types under an Azure Cosmos DB database using a SQL statement with parameterized values. It returns an IQueryable{dynamic}.
            For more information on preparing SQL statements with parameterized values, please see <see cref="T:Microsoft.Azure.Cosmos.SqlQuerySpec"/>.
            </summary>
            <param name="userDefinedTypesLink">The path link for the user defined types under a database, e.g. dbs/db_rid/udts/.</param>
            <param name="querySpec">The SqlQuerySpec instance containing the SQL expression.</param>
            <param name="feedOptions">The options for processing the query result feed. For details, see <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions"/></param>
            <returns>an IQueryable{dynamic} that can evaluate the query.</returns>
            <example>
            This example below queries for user defined types by id.
            <code language="c#">
            <![CDATA[
            var query = new SqlQuerySpec(
                "SELECT * FROM userDefinedTypes u WHERE u.id = @id", 
                new SqlParameterCollection(new SqlParameter[] { new SqlParameter { Name = "@id", Value = "userDefinedTypeId5" }}));
                
            UserDefinedType userDefinedType = client.CreateUserDefinedTypeQuery(userDefinedTypesLink, query).AsEnumerable().FirstOrDefault();
            ]]>
            </code>
            </example>
            <remarks>Refer to https://msdn.microsoft.com/en-us/library/azure/dn782250.aspx and http://azure.microsoft.com/documentation/articles/documentdb-sql-query/ for syntax and examples.</remarks>
            <seealso cref="T:Microsoft.Azure.Documents.UserDefinedType"/>
            <seealso cref="T:Microsoft.Azure.Cosmos.Linq.IDocumentQuery"/>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.DocumentClient.CreateUserDefinedTypeChangeFeedQuery(System.String,Microsoft.Azure.Cosmos.ChangeFeedOptions)">
            <summary>
            Overloaded. This method creates a change feed query for user defined types under an Azure Cosmos DB database account
            in an Azure Cosmos DB service.
            </summary>
            <param name="databaseLink">Specifies the database to read user defined types from.</param>
            <param name="feedOptions">Specifies the options for processing the query results feed.</param>
            <returns>the query result set.</returns>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.DocumentCollectionRestoreStatus">
            <summary>
            Provides status for a documention collection restore.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.DocumentCollectionRestoreStatus.State">
            <summary>
            Gets the <see cref="P:Microsoft.Azure.Cosmos.DocumentCollectionRestoreStatus.State"/> from the Azure Cosmos DB service. 
            </summary>
            <value>
            The state of the restore process.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.EnvironmentInformation.ClientId">
            <summary>
            Unique identifier of a client
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.EnvironmentInformation.DirectVersion">
            <summary>
            Version of the current direct package.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.EnvironmentInformation.ClientVersion">
            <summary>
            Version of the current client.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.EnvironmentInformation.OperatingSystem">
            <summary>
            Identifier of the Operating System.
            </summary>
            <seealso cref="P:System.Runtime.InteropServices.RuntimeInformation.FrameworkDescription"/>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.EnvironmentInformation.RuntimeFramework">
            <summary>
            Identifier of the Framework.
            </summary>
            <seealso cref="P:System.Runtime.InteropServices.RuntimeInformation.FrameworkDescription"/>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.EnvironmentInformation.ProcessArchitecture">
            <summary>
            Type of architecture being used.
            </summary>
            <seealso cref="P:System.Runtime.InteropServices.RuntimeInformation.ProcessArchitecture"/>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.FeedOptions">
            <summary>
            Specifies the options associated with feed methods (enumeration operations) in the Azure Cosmos DB service.
            </summary>
            <remarks>
            Used to manage query and ReadFeed execution. Can use FeedOptions to set page size (MaxItemCount)
            </remarks>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.FeedOptions.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.Cosmos.FeedOptions"/> class for the Azure Cosmos DB service.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.FeedOptions.MaxItemCount">
            <summary>
            Gets or sets the maximum number of items to be returned in the enumeration operation in the Azure Cosmos DB service.
            </summary>
            <value>
            The maximum number of items to be returned in the enumeration operation.
            </value> 
            <remarks>
            Used for query pagination.
            '-1' Used for dynamic page size.
            </remarks>
            <example>
            <code language="c#">
            <![CDATA[
            // Fetch query results 10 at a time.
            using (var queryable = client.CreateDocumentQuery<Book>(collectionLink, new FeedOptions { MaxItemCount = 10 }))
            {
                while (queryable.HasResults)
                {
                    DoucmentFeedResponse<Book> response = await queryable.ExecuteNext<Book>();
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.FeedOptions.RequestContinuationToken">
            <summary>
            Gets or sets the request continuation token in the Azure Cosmos DB service.
            </summary>
            <value>
            The request continuation token.
            </value>
            <example>
            <code language="c#">
            <![CDATA[
            // Resume query execution using the continuation from the previous query
            var queryable = client.CreateDocumentQuery<Book>(collectionLink, new FeedOptions { RequestContinuation = prevQuery.ResponseContinuation });
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.FeedOptions.SessionToken">
            <summary>
            Gets or sets the session token for use with session consistency in the Azure Cosmos DB service.
            </summary>
            <value>
            The session token for use with session consistency.
            </value>
            <remarks>
            Useful for applications that are load balanced across multiple Microsoft.Azure.Documents.Client.DocumentClient instances. 
            In this case, round-trip the token from end user to the application and then back to Azure Cosmos DB so that a session
            can be preserved across servers.
            </remarks>
            <example>
            <code language="c#">
            <![CDATA[
            var queryable = client.CreateDocumentQuery<Book>(
                collectionLink, new FeedOptions { SessionToken = lastSessionToken });
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.FeedOptions.EnableScanInQuery">
            <summary>
            Gets or sets the option to enable scans on the queries which couldn't be served
            as indexing was opted out on the requested paths in the Azure Cosmos DB service.
            </summary>
            <value>
            Option is true if scan on queries is enabled; otherwise, false.
            </value>
            <example>
            <code language="c#">
            <![CDATA[
            // Enable scan when Range index is not specified.
            var queryable = client.CreateDocumentQuery<Book>(
                collectionLink, new FeedOptions { EnableScanInQuery = true }).Where(b => b.Price > 1000);
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.FeedOptions.EnableCrossPartitionQuery">
            <summary>
            Gets or sets a value indicating whether users are enabled to send more than one request to execute
            the query in the Azure Cosmos DB service. More than one request is necessary if the query 
            is not scoped to single partition key value.
            </summary>
            <value>
            Option is true if cross-partition query execution is enabled; otherwise, false.
            </value>
            <remarks>
            <para>
            This option only applies to queries on documents and document attachments.
            </para>
            </remarks>
            <example>
            <code language="c#">
            <![CDATA[
            // Enable cross partition query.
            var queryable = client.CreateDocumentQuery<Book>(
                collectionLink, new FeedOptions { EnableCrossPartitionQuery = true }).Where(b => b.Price > 1000);
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.FeedOptions.EnableLowPrecisionOrderBy">
            <summary>
            Gets or sets the option to enable low precision order by in the Azure Cosmos DB service.
            </summary>
            <value>
            The option to enable low-precision order by.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.FeedOptions.PartitionKey">
            <summary>
            Gets or sets the <see cref="T:Microsoft.Azure.Documents.PartitionKey"/> for the current request in the Azure Cosmos DB service.
            </summary>
            <remarks>
            <para>
            Partition key is required when read documents or attachments feed in a partitioned collection. 
            Specifically Partition key is required for :
                <see cref="M:Microsoft.Azure.Cosmos.DocumentClient.ReadConflictFeedAsync(System.String,Microsoft.Azure.Cosmos.FeedOptions)"/>.  
            Only documents in partitions containing the <see cref="T:Microsoft.Azure.Documents.PartitionKey"/> is returned in the result.
            </para>
            </remarks>
            <example>
            The following example shows how to read a document feed in a partitioned collection using <see cref="T:Microsoft.Azure.Documents.PartitionKey"/>.
            The example assumes the collection is created with a <see cref="T:Microsoft.Azure.Documents.PartitionKeyDefinition"/> on the 'country' property in all the documents.
            <code language="c#">
            <![CDATA[
            await client.ReadDocumentFeedAsync(
                collection.SelfLink, 
                new RequestOptions { PartitionKey = new PartitionKey("USA") } );
            ]]>
            </code>
            </example>
            <seealso cref="T:Microsoft.Azure.Cosmos.ContainerProperties"/>
            <seealso cref="T:Microsoft.Azure.Documents.PartitionKeyDefinition"/>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.FeedOptions.PartitionKeyRangeId">
            <summary>
            Gets or sets the partition key range id for the current request.
            </summary>
            <remarks>
            <para>
            ReadFeed requests can use this to forward request to specific range.
            This is usefull in case of bulk export scenarios.
            </para>
            </remarks>
            <example>
            The following example shows how to read a document feed in a partitioned collection from partition key range "20".
            <code language="c#">
            <![CDATA[
            await client.ReadDocumentFeedAsync(
                collection.SelfLink, 
                new RequestOptions { PartitionKeyRangeId = "20" } );
            ]]>
            </code>
            </example>
            <seealso cref="T:Microsoft.Azure.Cosmos.ContainerProperties"/>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.FeedOptions.MaxDegreeOfParallelism">
            <summary>
            Gets or sets the number of concurrent operations run client side during 
            parallel query execution in the Azure Cosmos DB service. 
            A positive property value limits the number of 
            concurrent operations to the set value. If it is set to less than 0, the 
            system automatically decides the number of concurrent operations to run.
            </summary>
            <value>
            The maximum number of concurrent operations during parallel execution. Defaults to 0.
            </value> 
            <example>
            <code language="c#">
            <![CDATA[
            var queryable = client.CreateDocumentQuery<Book>(collectionLink, new FeedOptions { 
            MaxDegreeOfParallelism = 5});
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.FeedOptions.MaxBufferedItemCount">
            <summary>
            Gets or sets the maximum number of items that can be buffered client side during 
            parallel query execution in the Azure Cosmos DB service. 
            A positive property value limits the number of buffered 
            items to the set value. If it is set to less than 0, the system automatically 
            decides the number of items to buffer.
            </summary>
            <value>
            The maximum count of items that can be buffered during parallel query execution.
            </value> 
            <remarks>
            This is only suggestive and cannot be abided by in certain cases.
            </remarks>
            <example>
            <code language="c#">
            <![CDATA[
            var queryable = client.CreateDocumentQuery<Book>(collectionLink, new FeedOptions { 
            MaximumBufferSize = 10, MaxDegreeOfParallelism = 2 });
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.FeedOptions.EmitVerboseTracesInQuery">
            <summary>
            Gets or sets the option to allow queries to emit out verbose traces 
            for investigation in the Azure Cosmos DB service.
            </summary>
            <value>
            Option is true if query tracing is enabled; otherwise, false.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.FeedOptions.FilterBySchemaResourceId">
            <summary>
            Gets or sets the schema rid which could be used to filter the document feed response
            in order to focus on the documents for a particular schema.
            </summary>
            <value>
            By default, it is <c>null</c> which means no filtering will be applied.
            Otherwise, it must be a valid resource id of Schema resource.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.FeedOptions.PopulateQueryMetrics">
            <summary>
             Gets or sets the <see cref="P:Microsoft.Azure.Cosmos.FeedOptions.PopulateQueryMetrics"/> request option for document query requests in the Azure Cosmos DB service.
            </summary>
            <remarks>
            <para> 
            PopulateQueryMetrics is used to enable/disable getting metrics relating to query execution on document query requests.
            </para>
            </remarks>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.FeedOptions.ResponseContinuationTokenLimitInKb">
            <summary>
             Gets or sets the <see cref="P:Microsoft.Azure.Cosmos.FeedOptions.ResponseContinuationTokenLimitInKb"/> request option for document query requests in the Azure Cosmos DB service.
            </summary>
            <remarks>
            <para> 
            ResponseContinuationTokenLimitInKb is used to limit the length of continuation token in the query response. Valid values are >= 0.
            </para>
            </remarks>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.FeedOptions.JsonSerializerSettings">
            <summary>
            Gets or sets the <see cref="P:Microsoft.Azure.Cosmos.FeedOptions.JsonSerializerSettings"/> for the current request used to deserialize the document.
            If null, uses the default serializer settings set up in the DocumentClient.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.FeedOptions.ConsistencyLevel">
            <summary>
            Gets or sets the consistency level required for the feed (query/read feed) operation in the Azure Cosmos DB service.
            </summary>
            <value>
            The consistency level required for the request.
            </value>
            <remarks>
            Azure Cosmos DB offers 5 different consistency levels. Strong, Bounded Staleness, Session, Consistent Prefix and Eventual - in order of strongest to weakest consistency. <see cref="T:Microsoft.Azure.Cosmos.ConnectionPolicy"/>
            
            Azure Cosmos query/DB feed operations may be retrieved from many partitions, each accessed across many round trips. The consistency level is honored only within a partition and round trip. 
            <para>
            While this is set at a database account level, Azure Cosmos DB allows a developer to override the default consistency level
            for each individual request. 
            </para>
            </remarks>
            <example>
            This example uses FeedOptions to override the consistency level to Eventual. 
            <code language="c#">
            <![CDATA[
            Document doc = client.ReadDocumentFeedAsync(documentLink, new FeedOptions { ConsistencyLevel = ConsistencyLevel.Eventual });
            ]]>
            </code>
            </example>
            <seealso cref="P:Microsoft.Azure.Cosmos.FeedOptions.ConsistencyLevel"/>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.FeedOptions.ForceQueryScan">
            <summary>
            Gets or sets the flag that tells the backend to forces the query to perform a scan (at a request level).
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.FeedOptions.EnumerationDirection">
            <summary>
            Gets or sets the EnumerationDirection
            To be used along with Read feed operation
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.FeedOptions.ReadFeedKeyType">
            <summary>
            Gets or sets the ReadFeedKeyType
            To be used along with Read feed operation
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.FeedOptions.StartId">
            <summary>
            Gets or sets the StartId
            To be used along with Read feed operation
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.FeedOptions.EndId">
            <summary>
            Gets or sets the EndId
            To be used along with Read feed operation
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.FeedOptions.StartEpk">
            <summary>
            Gets or sets the StartEpk
            To be used along with Read feed operation
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.FeedOptions.EndEpk">
            <summary>
            Gets or sets the EndEpk
            To be used along with Read feed operation
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.FeedOptions.ContentSerializationFormat">
            <summary>
            Gets or sets the ContentSerializationFormat for the feed (query/read feed) operation in the Azure Cosmos DB service.
            </summary>
            <remarks>
            If the document is stored in a different serialization format then the one requested, then there will be a rewrite over the wire, but the source document will be untouched.
            </remarks>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.FeedOptions.MergeStaticId">
            <summary>
            Gets or sets the MergeStaticId.
            To be used along with Read feed operation when Static Column merge is desired.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.FeedOptions.CosmosSerializationFormatOptions">
            <summary>
            Gets or sets the custom serialization options for query
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.FeedResponseBinder.ConvertCosmosElementFeed``1(Microsoft.Azure.Cosmos.DocumentFeedResponse{Microsoft.Azure.Cosmos.CosmosElements.CosmosElement},Microsoft.Azure.Documents.ResourceType,Newtonsoft.Json.JsonSerializerSettings)">
            <summary>
            DEVNOTE: Need to refactor to use CosmosJsonSerializer
            </summary>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.Fluent.CosmosClientBuilder">
            <summary>
            This is a Builder class that creates a cosmos client
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Fluent.CosmosClientBuilder.#ctor(System.String,System.String)">
            <summary>
            Initialize a new CosmosConfiguration class that holds all the properties the CosmosClient requires.
            </summary>
            <param name="accountEndpoint">The Uri to the Cosmos Account. Example: https://{Cosmos Account Name}.documents.azure.com:443/ </param>
            <param name="authKeyOrResourceToken">The key to the account or resource token.</param>
            <example>
            The example below creates a new <see cref="T:Microsoft.Azure.Cosmos.Fluent.CosmosClientBuilder"/>
            <code language="c#">
            <![CDATA[
            CosmosClientBuilder cosmosClientBuilder = new CosmosClientBuilder(
                accountEndpoint: "https://testcosmos.documents.azure.com:443/",
                authKeyOrResourceToken: "SuperSecretKey");
            CosmosClient client = cosmosClientBuilder.Build();
            ]]>
            </code>
            </example>
            <example>
            The example below creates a new <see cref="T:Microsoft.Azure.Cosmos.Fluent.CosmosClientBuilder"/> with a ConsistencyLevel and a list of preferred locations.
            <code language="c#">
            <![CDATA[
            CosmosClientBuilder cosmosClientBuilder = new CosmosClientBuilder(
                accountEndpoint: "https://testcosmos.documents.azure.com:443/",
                authKeyOrResourceToken: "SuperSecretKey")
            .WithConsistencyLevel(ConsistencyLevel.Strong)
            .WithApplicationRegion("East US 2");
            CosmosClient client = cosmosClientBuilder.Build();
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Fluent.CosmosClientBuilder.#ctor(System.String)">
            <summary>
            Extracts the account endpoint and key from the connection string.
            </summary>
            <example>"AccountEndpoint=https://mytestcosmosaccount.documents.azure.com:443/;AccountKey={SecretAccountKey};"</example>
            <param name="connectionString">The connection string must contain AccountEndpoint and AccountKey or ResourceToken.</param>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Fluent.CosmosClientBuilder.Build">
            <summary>
            A method to create the cosmos client
            </summary>
            <remarks>
            Setting this property after sending any request won't have any effect.
            </remarks>
            <returns>An instance of <see cref="T:Microsoft.Azure.Cosmos.CosmosClient"/>.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Fluent.CosmosClientBuilder.Build(Microsoft.Azure.Cosmos.DocumentClient)">
            <summary>
            A method to create the cosmos client
            </summary>
            <remarks>
            Setting this property after sending any request won't have any effect.
            </remarks>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Fluent.CosmosClientBuilder.WithApplicationName(System.String)">
            <summary>
            A suffix to be added to the default user-agent for the Azure Cosmos DB service.
            </summary>
            <param name="applicationName">A string to use as suffix in the User Agent.</param>
            <remarks>
            Setting this property after sending any request won't have any effect.
            </remarks>
            <returns>The current <see cref="T:Microsoft.Azure.Cosmos.Fluent.CosmosClientBuilder"/>.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Fluent.CosmosClientBuilder.WithApplicationRegion(System.String)">
            <summary>
            Set the preferred geo-replicated region to be used in the Azure Cosmos DB service. 
            </summary>
            <param name="applicationRegion">Azure region where application is running. <see cref="T:Microsoft.Azure.Cosmos.Regions"/> lists valid Cosmos DB regions.</param>
            <example>
            The example below creates a new <see cref="T:Microsoft.Azure.Cosmos.Fluent.CosmosClientBuilder"/> with a of preferred region.
            <code language="c#">
            <![CDATA[
            CosmosClientBuilder cosmosClientBuilder = new CosmosClientBuilder(
                accountEndpoint: "https://testcosmos.documents.azure.com:443/",
                authKeyOrResourceToken: "SuperSecretKey")
            .WithApplicationRegion("East US 2");
            CosmosClient client = cosmosClientBuilder.Build();
            ]]>
            </code>
            </example>
            <returns>The current <see cref="T:Microsoft.Azure.Cosmos.Fluent.CosmosClientBuilder"/>.</returns>
            <seealso cref="P:Microsoft.Azure.Cosmos.CosmosClientOptions.ApplicationRegion"/>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Fluent.CosmosClientBuilder.WithLimitToEndpoint(System.Boolean)">
            <summary>
            Limits the operations to the provided endpoint on the CosmosClientBuilder constructor.
            </summary>
            <param name="limitToEndpoint">Whether operations are limited to the endpoint or not.</param>
            <value>Default value is false.</value>
            <remarks>
            When the value of <paramref name="limitToEndpoint"/> is false, the SDK will automatically discover all account write and read regions, and use them when the configured application region is not available.
            When set to true, availability is limited to the endpoint specified on the CosmosClientBuilder constructor.
            Using <see cref="M:Microsoft.Azure.Cosmos.Fluent.CosmosClientBuilder.WithApplicationRegion(System.String)"/> is not allowed when the value is true. </remarks>
            <example>
            The example below creates a new <see cref="T:Microsoft.Azure.Cosmos.Fluent.CosmosClientBuilder"/> to limit the endpoint to East US.
            <code language="c#">
            <![CDATA[
            CosmosClientBuilder cosmosClientBuilder = new CosmosClientBuilder(
                accountEndpoint: "https://testcosmos-eastus.documents.azure.com:443/",
                authKeyOrResourceToken: "SuperSecretKey")
            .WithLimitToEndpoint(true);
            CosmosClient client = cosmosClientBuilder.Build();
            ]]>
            </code>
            </example>
            <returns>The current <see cref="T:Microsoft.Azure.Cosmos.Fluent.CosmosClientBuilder"/>.</returns>
            <seealso href="https://docs.microsoft.com/azure/cosmos-db/high-availability"/>
            <seealso cref="P:Microsoft.Azure.Cosmos.CosmosClientOptions.LimitToEndpoint"/>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Fluent.CosmosClientBuilder.WithRequestTimeout(System.TimeSpan)">
            <summary>
            Sets the request timeout in seconds when connecting to the Azure Cosmos DB service.
            </summary>
            <param name="requestTimeout">A time to use as timeout for operations.</param>
            <value>Default value is 60 seconds.</value>
            <returns>The current <see cref="T:Microsoft.Azure.Cosmos.Fluent.CosmosClientBuilder"/>.</returns>
            <seealso cref="P:Microsoft.Azure.Cosmos.CosmosClientOptions.RequestTimeout"/>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Fluent.CosmosClientBuilder.WithConnectionModeDirect">
            <summary>
            Sets the connection mode to Direct. This is used by the client when connecting to the Azure Cosmos DB service.
            </summary>
            <remarks>
            For more information, see <see href="https://docs.microsoft.com/azure/documentdb/documentdb-performance-tips#direct-connection">Connection policy: Use direct connection mode</see>.
            </remarks>
            <returns>The current <see cref="T:Microsoft.Azure.Cosmos.Fluent.CosmosClientBuilder"/>.</returns>
            <seealso cref="P:Microsoft.Azure.Cosmos.CosmosClientOptions.ConnectionMode"/>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Fluent.CosmosClientBuilder.WithConnectionModeDirect(System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Sets the connection mode to Direct. This is used by the client when connecting to the Azure Cosmos DB service.
            </summary>
            <param name="idleTcpConnectionTimeout">
            Controls the amount of idle time after which unused connections are closed.
            By default, idle connections are kept open indefinitely. Value must be greater than or equal to 10 minutes. Recommended values are between 20 minutes and 24 hours.
            Mainly useful for sparse infrequent access to a large database account.
            </param>
            <param name="openTcpConnectionTimeout">
            Controls the amount of time allowed for trying to establish a connection.
            The default timeout is 5 seconds. Recommended values are greater than or equal to 5 seconds.
            When the time elapses, the attempt is cancelled and an error is returned. Longer timeouts will delay retries and failures.
            </param>
            <param name="maxRequestsPerTcpConnection">
            Controls the number of requests allowed simultaneously over a single TCP connection. When more requests are in flight simultaneously, the direct/TCP client will open additional connections.
            The default settings allow 30 simultaneous requests per connection.
            Do not set this value lower than 4 requests per connection or higher than 50-100 requests per connection.       
            The former can lead to a large number of connections to be created. 
            The latter can lead to head of line blocking, high latency and timeouts.
            Applications with a very high degree of parallelism per connection, with large requests or responses, or with very tight latency requirements might get better performance with 8-16 requests per connection.
            </param>
            <param name="maxTcpConnectionsPerEndpoint">
            Controls the maximum number of TCP connections that may be opened to each Cosmos DB back-end.
            Together with MaxRequestsPerTcpConnection, this setting limits the number of requests that are simultaneously sent to a single Cosmos DB back-end(MaxRequestsPerTcpConnection x MaxTcpConnectionPerEndpoint).
            The default value is 65,535. Value must be greater than or equal to 16.
            </param>
            <remarks>
            For more information, see <see href="https://docs.microsoft.com/azure/documentdb/documentdb-performance-tips#direct-connection">Connection policy: Use direct connection mode</see>.
            </remarks>
            <returns>The current <see cref="T:Microsoft.Azure.Cosmos.Fluent.CosmosClientBuilder"/>.</returns>
            <seealso cref="P:Microsoft.Azure.Cosmos.CosmosClientOptions.ConnectionMode"/>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Fluent.CosmosClientBuilder.WithConsistencyLevel(Microsoft.Azure.Cosmos.ConsistencyLevel)">
            <summary>
            This can be used to weaken the database account consistency level for read operations.
            If this is not set the database account consistency level will be used for all requests.
            </summary>
            <param name="consistencyLevel">The desired consistency level for the client.</param>
            <returns>The current <see cref="T:Microsoft.Azure.Cosmos.Fluent.CosmosClientBuilder"/>.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Fluent.CosmosClientBuilder.WithConnectionModeGateway(System.Nullable{System.Int32},System.Net.IWebProxy)">
            <summary>
            Sets the connection mode to Gateway. This is used by the client when connecting to the Azure Cosmos DB service.
            </summary>
            <param name="maxConnectionLimit">The number specifies the time to wait for response to come back from network peer. Default is 60 connections</param>
            <param name="webProxy">Get or set the proxy information used for web requests.</param>
            <remarks>
            For more information, see <see href="https://docs.microsoft.com/azure/documentdb/documentdb-performance-tips#direct-connection">Connection policy: Use direct connection mode</see>.
            </remarks>
            <returns>The current <see cref="T:Microsoft.Azure.Cosmos.Fluent.CosmosClientBuilder"/>.</returns>
            <seealso cref="P:Microsoft.Azure.Cosmos.CosmosClientOptions.ConnectionMode"/>
            <seealso cref="P:Microsoft.Azure.Cosmos.CosmosClientOptions.GatewayModeMaxConnectionLimit"/>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Fluent.CosmosClientBuilder.AddCustomHandlers(Microsoft.Azure.Cosmos.RequestHandler[])">
            <summary>
            Sets an array of custom handlers to the request. The handlers will be chained in
            the order listed. The InvokerHandler.InnerHandler is required to be null to allow the
            pipeline to chain the handlers.
            </summary>
            <returns>The current <see cref="T:Microsoft.Azure.Cosmos.Fluent.CosmosClientBuilder"/>.</returns>
            <param name="customHandlers">A list of <see cref="T:Microsoft.Azure.Cosmos.RequestHandler"/> instaces to add to the pipeline.</param>
            <seealso cref="P:Microsoft.Azure.Cosmos.CosmosClientOptions.CustomHandlers"/>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Fluent.CosmosClientBuilder.WithThrottlingRetryOptions(System.TimeSpan,System.Int32)">
            <summary>
            Sets the minimum time to wait between retry and the max number of times to retry on throttled requests.
            </summary>
            <param name="maxRetryWaitTimeOnThrottledRequests">The maximum retry time in seconds for the Azure Cosmos DB service. Any interval that is smaller than a second will be ignored.</param>
            <param name="maxRetryAttemptsOnThrottledRequests">The number specifies the times retry requests for throttled requests.</param>
            <para>
            When a request fails due to a rate limiting error, the service sends back a response that
            contains a value indicating the client should not retry before the time period has
            elapsed. This property allows the application to set a maximum wait time for all retry attempts.
            If the cumulative wait time exceeds the this value, the client will stop retrying and return the error to the application.
            </para>
            <para>
            For more information, see <see href="https://docs.microsoft.com/azure/documentdb/documentdb-performance-tips#429">Handle rate limiting/request rate too large</see>.
            </para>
            <returns>The current <see cref="T:Microsoft.Azure.Cosmos.Fluent.CosmosClientBuilder"/>.</returns>
            <seealso cref="P:Microsoft.Azure.Cosmos.CosmosClientOptions.MaxRetryWaitTimeOnRateLimitedRequests"/>
            <seealso cref="P:Microsoft.Azure.Cosmos.CosmosClientOptions.MaxRetryAttemptsOnRateLimitedRequests"/>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Fluent.CosmosClientBuilder.WithSerializerOptions(Microsoft.Azure.Cosmos.CosmosSerializationOptions)">
            <summary>
            Set a custom serializer option. 
            </summary>
            <param name="cosmosSerializerOptions">The custom class that implements <see cref="T:Microsoft.Azure.Cosmos.CosmosSerializer"/> </param>
            <returns>The <see cref="T:Microsoft.Azure.Cosmos.Fluent.CosmosClientBuilder"/> object</returns>
            <seealso cref="T:Microsoft.Azure.Cosmos.CosmosSerializer"/>
            <seealso cref="P:Microsoft.Azure.Cosmos.CosmosClientOptions.SerializerOptions"/>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Fluent.CosmosClientBuilder.WithCustomSerializer(Microsoft.Azure.Cosmos.CosmosSerializer)">
            <summary>
            Set a custom JSON serializer. 
            </summary>
            <param name="cosmosJsonSerializer">The custom class that implements <see cref="T:Microsoft.Azure.Cosmos.CosmosSerializer"/> </param>
            <returns>The <see cref="T:Microsoft.Azure.Cosmos.Fluent.CosmosClientBuilder"/> object</returns>
            <seealso cref="T:Microsoft.Azure.Cosmos.CosmosSerializer"/>
            <seealso cref="P:Microsoft.Azure.Cosmos.CosmosClientOptions.Serializer"/>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Fluent.CosmosClientBuilder.WithBulkexecution(System.Boolean)">
            <summary>
            Allows optimistic batching of requests to service. Setting this option might impact the latency of the operations. Hence this option is recommended for non-latency sensitive scenarios only.
            </summary>
            <param name="enabled">Whether <see cref="P:Microsoft.Azure.Cosmos.CosmosClientOptions.AllowBulkExecution"/> is enabled.</param>
            <returns>The <see cref="T:Microsoft.Azure.Cosmos.Fluent.CosmosClientBuilder"/> object</returns>
            <seealso cref="P:Microsoft.Azure.Cosmos.CosmosClientOptions.AllowBulkExecution"/>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Fluent.CosmosClientBuilder.WithSendingRequestEventArgs(System.EventHandler{Microsoft.Azure.Documents.SendingRequestEventArgs})">
            <summary>
            The event handler to be invoked before the request is sent.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Fluent.CosmosClientBuilder.WithTransportClientHandlerFactory(System.Func{Microsoft.Azure.Documents.TransportClient,Microsoft.Azure.Documents.TransportClient})">
            <summary>
            (Optional) transport interceptor factory
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Fluent.CosmosClientBuilder.WithApiType(Microsoft.Azure.Documents.ApiType)">
            <summary>
            ApiType for the account
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Fluent.CosmosClientBuilder.WithStoreClientFactory(Microsoft.Azure.Documents.IStoreClientFactory)">
            <summary>
            Specify a store client factory to use for all transport requests for cosmos client.
            </summary>
            <remarks>
            This method enables transport client sharing among multiple cosmos client instances inside a single process.
            </remarks>
            <param name="storeClientFactory">Instance of store client factory to use to create transport client for an instance of cosmos client.</param>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Fluent.CosmosClientBuilder.WithCpuMonitorDisabled">
            <summary>
            Disables CPU monitoring for transport client which will inhibit troubleshooting of timeout exceptions.
            </summary>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.Fluent.CompositeIndexDefinition`1">
            <summary>
            Composite Index fluent definition.
            </summary>
            <seealso cref="T:Microsoft.Azure.Cosmos.CompositePath"/>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Fluent.CompositeIndexDefinition`1.Path(System.String)">
            <summary>
            Add a path to the current <see cref="T:Microsoft.Azure.Cosmos.CompositePath"/> definition.
            </summary>
            <param name="path">Property path for the current definition. Example: /property</param>
            <returns>An instance of <see cref="T:Microsoft.Azure.Cosmos.Fluent.CompositeIndexDefinition`1"/>.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Fluent.CompositeIndexDefinition`1.Path(System.String,Microsoft.Azure.Cosmos.CompositePathSortOrder)">
            <summary>
            Add a path to the current <see cref="T:Microsoft.Azure.Cosmos.CompositePath"/> definition with a particular <see cref="T:Microsoft.Azure.Cosmos.CompositePathSortOrder"/>.
            </summary>
            <param name="path">Property path for the current definition. Example: /property</param>
            <param name="sortOrder"><see cref="T:Microsoft.Azure.Cosmos.CompositePathSortOrder"/> to apply on the path.</param>
            <returns>An instance of <see cref="T:Microsoft.Azure.Cosmos.Fluent.CompositeIndexDefinition`1"/>.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Fluent.CompositeIndexDefinition`1.Attach">
            <summary>
            Applies the current definition to the parent.
            </summary>
            <returns>An instance of the parent.</returns>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.Fluent.ConflictResolutionDefinition">
            <summary>
            <see cref="T:Microsoft.Azure.Cosmos.ConflictResolutionPolicy"/> fluent definition.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Fluent.ConflictResolutionDefinition.WithLastWriterWinsResolution(System.String)">
            <summary>
            Defines the path used to resolve LastWrtierWins resolution mode <see cref="T:Microsoft.Azure.Cosmos.ConflictResolutionPolicy"/>.
            </summary>
            <param name="conflictResolutionPath"> sets the path which is present in each item in the Azure Cosmos DB service for last writer wins conflict-resolution. <see cref="P:Microsoft.Azure.Cosmos.ConflictResolutionPolicy.ResolutionPath"/>.</param>
            <returns>An instance of the current <see cref="T:Microsoft.Azure.Cosmos.Fluent.UniqueKeyDefinition"/>.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Fluent.ConflictResolutionDefinition.WithCustomStoredProcedureResolution(System.String)">
            <summary>
            Defines the stored procedure to be used as custom conflict resolution mode <see cref="T:Microsoft.Azure.Cosmos.ConflictResolutionPolicy"/>.
            </summary>
            <param name="conflictResolutionProcedure"> Sets the stored procedure's name to be used for conflict-resolution.</param>
            <remarks>The stored procedure can be created later on, but needs to honor the name specified here.</remarks>
            <returns>An instance of the current <see cref="T:Microsoft.Azure.Cosmos.Fluent.UniqueKeyDefinition"/>.</returns>
            <example>
            This example below creates a <see cref="T:Microsoft.Azure.Cosmos.Container"/> with a Conflict Resolution policy that uses a stored procedure to resolve conflicts:
            <code language="c#">
            <![CDATA[
            await databaseForConflicts.DefineContainer("myContainer", "/id")
                .WithConflictResolution()
                    .WithCustomStoredProcedureResolution("myStoredProcedure")
                    .Attach()
                .CreateAsync();
            </example>
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Fluent.ConflictResolutionDefinition.Attach">
            <summary>
            Applies the current definition to the parent.
            </summary>
            <returns>An instance of the parent.</returns>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.Fluent.ContainerBuilder">
            <summary>
            <see cref="T:Microsoft.Azure.Cosmos.Container"/> fluent definition for creation flows.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Fluent.ContainerBuilder.#ctor">
            <summary>
            Creates an instance for unit-testing
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Fluent.ContainerBuilder.WithUniqueKey">
            <summary>
            Defines a Unique Key policy for this Azure Cosmos container.
            </summary>
            <returns>An instance of <see cref="T:Microsoft.Azure.Cosmos.Fluent.UniqueKeyDefinition"/>.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Fluent.ContainerBuilder.WithConflictResolution">
            <summary>
            Defined the conflict resoltuion for Azure Cosmos container
            </summary>
            <returns>An instance of <see cref="T:Microsoft.Azure.Cosmos.Fluent.ConflictResolutionDefinition"/>.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Fluent.ContainerBuilder.CreateAsync(System.Nullable{System.Int32})">
            <summary>
            Creates a container with the current fluent definition.
            </summary>
            <param name="throughput">Desired throughput for the container expressed in Request Units per second.</param>
            <returns>An asynchronous Task representing the creation of a <see cref="T:Microsoft.Azure.Cosmos.Container"/> based on the Fluent definition.</returns>
            <remarks>
            <seealso href="https://docs.microsoft.com/azure/cosmos-db/request-units"/> for details on provision throughput.
            </remarks>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Fluent.ContainerBuilder.CreateIfNotExistsAsync(System.Nullable{System.Int32})">
            <summary>
            Creates a container if it does not exist with the current fluent definition.
            </summary>
            <param name="throughput">Desired throughput for the container expressed in Request Units per second.</param>
            <returns>An asynchronous Task representing the creation of a <see cref="T:Microsoft.Azure.Cosmos.Container"/> based on the Fluent definition.</returns>
            <remarks>
            <seealso href="https://docs.microsoft.com/azure/cosmos-db/request-units"/> for details on provision throughput.
            </remarks>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Fluent.ContainerBuilder.Build">
            <summary>
            Applies the current Fluent definition and creates a container configuration.
            </summary>
            <returns>Builds the current Fluent configuration into an instance of <see cref="T:Microsoft.Azure.Cosmos.ContainerProperties"/>.</returns>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.Fluent.ContainerDefinition`1">
            <summary>
            Azure Cosmos container fluent definition.
            </summary>
            <seealso cref="T:Microsoft.Azure.Cosmos.Container"/>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Fluent.ContainerDefinition`1.#ctor">
            <summary>
            Creates an instance for unit-testing
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Fluent.ContainerDefinition`1.WithPartitionKeyDefinitionVersion(Microsoft.Azure.Cosmos.PartitionKeyDefinitionVersion)">
             <summary>
             Sets the <see cref="T:Microsoft.Azure.Cosmos.PartitionKeyDefinitionVersion"/>
            
             The partition key definition version 1 uses a hash function that computes
             hash based on the first 100 bytes of the partition key. This can cause
             conflicts for documents with partition keys greater than 100 bytes.
             
             The partition key definition version 2 uses a hash function that computes
             hash based on the first 2 KB of the partition key.
             </summary>
             <param name="partitionKeyDefinitionVersion">The partition key definition version</param>
             <returns>An instance of the current Fluent builder.</returns>
             <seealso cref="P:Microsoft.Azure.Cosmos.ContainerProperties.PartitionKeyDefinitionVersion"/>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Fluent.ContainerDefinition`1.WithDefaultTimeToLive(System.TimeSpan)">
            <summary>
            <see cref="P:Microsoft.Azure.Cosmos.ContainerProperties.DefaultTimeToLive"/> will be applied to all the items in the container as the default time-to-live policy.
            The individual item could override the default time-to-live policy by setting its time to live.
            </summary>
            <param name="defaultTtlTimeSpan">The default Time To Live.</param>
            <returns>An instance of the current Fluent builder.</returns>
            <seealso cref="P:Microsoft.Azure.Cosmos.ContainerProperties.DefaultTimeToLive"/>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Fluent.ContainerDefinition`1.WithDefaultTimeToLive(System.Int32)">
            <summary>
            <see cref="P:Microsoft.Azure.Cosmos.ContainerProperties.DefaultTimeToLive"/> will be applied to all the items in the container as the default time-to-live policy.
            The individual item could override the default time-to-live policy by setting its time to live.
            </summary>
            <param name="defaulTtlInSeconds">The default Time To Live.</param>
            <returns>An instance of the current Fluent builder.</returns>
            <seealso cref="P:Microsoft.Azure.Cosmos.ContainerProperties.DefaultTimeToLive"/>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Fluent.ContainerDefinition`1.WithTimeToLivePropertyPath(System.String)">
            <summary>
            Sets the time to live base timestamp property path.
            </summary>
            <param name="propertyPath">This property should be only present when DefaultTimeToLive is set. When this property is present, time to live for a item is decided based on the value of this property in an item. By default, time to live is based on the _ts property in an item. Example: /property</param>
            <returns>An instance of the current Fluent builder.</returns>
            <seealso cref="P:Microsoft.Azure.Cosmos.ContainerProperties.TimeToLivePropertyPath"/>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Fluent.ContainerDefinition`1.WithIndexingPolicy">
            <summary>
            <see cref="T:Microsoft.Azure.Cosmos.IndexingPolicy"/> definition for the current Azure Cosmos container.
            </summary>
            <returns>An instance of <see cref="T:Microsoft.Azure.Cosmos.Fluent.IndexingPolicyDefinition`1"/>.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Fluent.ContainerDefinition`1.Build">
            <summary>
            Applies the current Fluent definition and creates a container configuration.
            </summary>
            <returns>Builds the current Fluent configuration into an instance of <see cref="T:Microsoft.Azure.Cosmos.ContainerProperties"/>.</returns>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.Fluent.IndexingPolicyDefinition`1">
            <summary>
            Indexing Policy fluent definition.
            </summary>
            <seealso cref="T:Microsoft.Azure.Cosmos.IndexingPolicy"/>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Fluent.IndexingPolicyDefinition`1.#ctor">
            <summary>
            Creates an instance for unit-testing
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Fluent.IndexingPolicyDefinition`1.WithIndexingMode(Microsoft.Azure.Cosmos.IndexingMode)">
            <summary>
            Defines the <see cref="T:Microsoft.Azure.Cosmos.Container"/>'s <see cref="T:Microsoft.Azure.Cosmos.IndexingMode"/>.
            </summary>
            <param name="indexingMode">An <see cref="T:Microsoft.Azure.Cosmos.IndexingMode"/></param>
            <returns>An instance of <see cref="T:Microsoft.Azure.Cosmos.Fluent.IndexingPolicyDefinition`1"/>.</returns>
            <remarks>
            If multiple calls are made to this method within the same <see cref="T:Microsoft.Azure.Cosmos.Fluent.IndexingPolicyDefinition`1"/>, the last one will apply.
            </remarks>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Fluent.IndexingPolicyDefinition`1.WithAutomaticIndexing(System.Boolean)">
            <summary>
            Defines the <see cref="T:Microsoft.Azure.Cosmos.Container"/>'s automatic indexing.
            </summary>
            <param name="enabled">Defines whether Automatic Indexing is enabled or not.</param>
            <returns>An instance of <see cref="T:Microsoft.Azure.Cosmos.Fluent.IndexingPolicyDefinition`1"/>.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Fluent.IndexingPolicyDefinition`1.WithIncludedPaths">
            <summary>
            Defines the <see cref="T:Microsoft.Azure.Cosmos.Container"/>'s <see cref="P:Microsoft.Azure.Cosmos.IndexingPolicy.IncludedPaths"/>.
            </summary>
            <returns>An instance of <see cref="T:Microsoft.Azure.Cosmos.Fluent.PathsDefinition`1"/>.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Fluent.IndexingPolicyDefinition`1.WithExcludedPaths">
            <summary>
            Defines the <see cref="T:Microsoft.Azure.Cosmos.Container"/>'s <see cref="P:Microsoft.Azure.Cosmos.IndexingPolicy.ExcludedPaths"/>.
            </summary>
            <returns>An instance of <see cref="T:Microsoft.Azure.Cosmos.Fluent.PathsDefinition`1"/>.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Fluent.IndexingPolicyDefinition`1.WithCompositeIndex">
            <summary>
            Defines a Composite Index in the current <see cref="T:Microsoft.Azure.Cosmos.Container"/>'s definition.
            </summary>
            <returns>An instance of <see cref="T:Microsoft.Azure.Cosmos.Fluent.CompositeIndexDefinition`1"/>.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Fluent.IndexingPolicyDefinition`1.WithSpatialIndex">
            <summary>
            Defines a <see cref="T:Microsoft.Azure.Cosmos.SpatialIndex"/> in the current <see cref="T:Microsoft.Azure.Cosmos.Container"/>'s definition.
            </summary>
            <returns>An instance of <see cref="T:Microsoft.Azure.Cosmos.Fluent.SpatialIndexDefinition`1"/>.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Fluent.IndexingPolicyDefinition`1.Attach">
            <summary>
            Applies the current definition to the parent.
            </summary>
            <returns>An instance of the parent.</returns>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.Fluent.PathsDefinition`1">
            <summary>
            Fluent definition to specify paths.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Fluent.PathsDefinition`1.Path(System.String)">
            <summary>
            Adds a path to the current <see cref="T:Microsoft.Azure.Cosmos.Fluent.PathsDefinition`1"/>.
            </summary>
            <param name="path">Property path for the current definition. Example: /path/*</param>
            <returns>An instance of the current <see cref="T:Microsoft.Azure.Cosmos.Fluent.PathsDefinition`1"/>.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Fluent.PathsDefinition`1.Attach">
            <summary>
            Applies the current definition to the parent.
            </summary>
            <returns>An instance of the parent.</returns>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.Fluent.SpatialIndexDefinition`1">
            <summary>
            Spatial index fluent definition.
            </summary>
            <seealso cref="T:Microsoft.Azure.Cosmos.SpatialPath"/>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Fluent.SpatialIndexDefinition`1.Path(System.String)">
            <summary>
            Adds a path to the current <see cref="T:Microsoft.Azure.Cosmos.SpatialPath"/> definition.
            </summary>
            <param name="path">Property path for the current definition. Example: /property</param>
            <returns>An instance of the current <see cref="T:Microsoft.Azure.Cosmos.Fluent.SpatialIndexDefinition`1"/>.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Fluent.SpatialIndexDefinition`1.Path(System.String,Microsoft.Azure.Cosmos.SpatialType[])">
            <summary>
            Add a path to the current <see cref="T:Microsoft.Azure.Cosmos.SpatialPath"/> definition with a particular set of <see cref="T:Microsoft.Azure.Cosmos.SpatialType"/>s.
            </summary>
            <param name="path">Property path for the current definition. Example: /property</param>
            <param name="spatialTypes">Set of <see cref="T:Microsoft.Azure.Cosmos.SpatialType"/> to apply to the path.</param>
            <returns>An instance of the current <see cref="T:Microsoft.Azure.Cosmos.Fluent.SpatialIndexDefinition`1"/>.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Fluent.SpatialIndexDefinition`1.Attach">
            <summary>
            Applies the current definition to the parent.
            </summary>
            <returns>An instance of the parent.</returns>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.Fluent.UniqueKeyDefinition">
            <summary>
            <see cref="T:Microsoft.Azure.Cosmos.UniqueKeyPolicy"/> fluent definition.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Fluent.UniqueKeyDefinition.Path(System.String)">
            <summary>
            Adds a path to the current <see cref="T:Microsoft.Azure.Cosmos.Fluent.UniqueKeyDefinition"/>.
            </summary>
            <param name="path">Path for the property to add to the current <see cref="T:Microsoft.Azure.Cosmos.Fluent.UniqueKeyDefinition"/>. Example: /property</param>
            <returns>An instance of the current <see cref="T:Microsoft.Azure.Cosmos.Fluent.UniqueKeyDefinition"/>.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Fluent.UniqueKeyDefinition.Attach">
            <summary>
            Applies the current definition to the parent.
            </summary>
            <returns>An instance of the parent.</returns>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.Handlers.NamedCacheRetryHandler">
            <summary>
            Refreshed named cache in-case of Gone with NameCacheIsStale
            </summary>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.Handlers.PartitionKeyRangeGoneRetryHandler">
            <summary>
            Handler to ensure that CollectionCache and PartitionRoutingMap for a given collection exists
            </summary>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.Handlers.PartitionKeyRangeHandler">
            <summary>
            Handler which manages the continuation token and partition-key-range-id selection depending on a provided start and end epk and direction. 
            By default start is 00, end is FF and direction is forward. 
            It doesn't participates in split logic directly but on split retry, will select the new 
            appropriate partition-key-range id after a forced refresh of the CollectionRoutingMap.
            </summary>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.Handlers.RequestInvokerHandler">
            <summary>
            HttpMessageHandler can only be invoked by derived classed or internal classes inside http assembly
            </summary>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.Handlers.RetryHandler">
            <summary>
            Handler to wrap the pipeline into a retry mechanism defined by a <see cref="T:Microsoft.Azure.Cosmos.IDocumentClientRetryPolicy"/>
            </summary>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.Handlers.RouterHandler">
            <summary>
            Handler which selects the piepline for the requested resource operation
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.ClientPipelineBuilder.Build">
            <summary>
            This is the cosmos pipeline logic for the operations. 
            
                                               +-----------------------------+
                                               |                             |
                                               |    RequestInvokerHandler    |
                                               |                             |
                                               +-----------------------------+
                                                            |
                                                            |
                                                            |
                                               +-----------------------------+
                                               |                             |
                                               |       UserHandlers          |
                                               |                             |
                                               +-----------------------------+
                                                            |
                                                            |
                                                            |
                                               +-----------------------------+
                                               |                             |
                                               |       RetryHandler          |-> RetryPolicy -> ResetSessionTokenRetryPolicyFactory -> ClientRetryPolicy -> ResourceThrottleRetryPolicy
                                               |                             |
                                               +-----------------------------+
                                                            |
                                                            |
                                                            |
                                               +-----------------------------+
                                               |                             |
                                               |       RouteHandler          | 
                                               |                             |
                                               +-----------------------------+
                                               |                             |
                                               |                             |
                                               |                             |
                             +-----------------------------+         +---------------------------------------+
                             | !IsPartitionedFeedOperation |         |    IsPartitionedFeedOperation         |
                             |      TransportHandler       |         | invalidPartitionExceptionRetryHandler |
                             |                             |         |                                       |
                             +-----------------------------+         +---------------------------------------+
                                                                                     |
                                                                                     |
                                                                                     |
                                                                     +---------------------------------------+
                                                                     |                                       |
                                                                     |   partitionKeyRangeGoneRetryHandler   |
                                                                     |                                       |
                                                                     +---------------------------------------+
                                                                                     |
                                                                                     |
                                                                                     |
                                                                     +---------------------------------------+
                                                                     |                                       |
                                                                     |     PartitionKeyRangeHandler          |
                                                                     |                                       |
                                                                     +---------------------------------------+
                                                                                     |
                                                                                     |
                                                                                     |
                                                                     +---------------------------------------+
                                                                     |                                       |
                                                                     |         TransportHandler              |
                                                                     |                                       |
                                                                     +---------------------------------------+
            </summary>
            <returns>The request invoker handler used to do calls to Cosmos DB</returns>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.RequestHandler">
            <summary>
            Abstraction which allows defining of custom message handlers.
            </summary>
            <remarks>
            Custom implementations are required to be stateless.
            </remarks>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.RequestHandler.InnerHandler">
            <summary>
            Defines a next handler to be called in the chain.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.RequestHandler.SendAsync(Microsoft.Azure.Cosmos.RequestMessage,System.Threading.CancellationToken)">
            <summary>
            Processes the current <see cref="T:Microsoft.Azure.Cosmos.RequestMessage"/> in the current handler and sends the current <see cref="T:Microsoft.Azure.Cosmos.RequestMessage"/> to the next handler in the chain.
            </summary>
            <param name="request"><see cref="T:Microsoft.Azure.Cosmos.RequestMessage"/> received by the handler.</param>
            <param name="cancellationToken"><see cref="T:System.Threading.CancellationToken"/> received by the handler.</param>
            <returns>An instance of <see cref="T:Microsoft.Azure.Cosmos.ResponseMessage"/>.</returns>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.RequestMessage">
            <summary>
            Represents a request in the processing pipeline of the Azure Cosmos DB SDK.
            </summary>
            <remarks>
            It is expected that direct property access is used for properties that will be read and used within the Azure Cosmos SDK pipeline, for example <see cref="P:Microsoft.Azure.Cosmos.RequestMessage.OperationType"/>.
            <see cref="P:Microsoft.Azure.Cosmos.RequestMessage.Properties"/> should be used for any other property that needs to be sent to the backend but will not be read nor used within the Azure Cosmos DB SDK pipeline.
            <see cref="P:Microsoft.Azure.Cosmos.RequestMessage.Headers"/> should be used for HTTP headers that need to be passed down and sent to the backend.
            </remarks>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.RequestMessage.#ctor">
            <summary>
            Create a <see cref="T:Microsoft.Azure.Cosmos.RequestMessage"/>
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.RequestMessage.#ctor(System.Net.Http.HttpMethod,System.Uri)">
            <summary>
            Create a <see cref="T:Microsoft.Azure.Cosmos.RequestMessage"/>
            </summary>
            <param name="method">The http method</param>
            <param name="requestUri">The requested URI</param>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.RequestMessage.Method">
            <summary>
            Gets the <see cref="T:System.Net.Http.HttpMethod"/> for the current request.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.RequestMessage.RequestUri">
            <summary>
            Gets the <see cref="T:System.Uri"/> for the current request.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.RequestMessage.Headers">
            <summary>
            Gets the current <see cref="T:Microsoft.Azure.Cosmos.RequestMessage"/> HTTP headers.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.RequestMessage.Content">
            <summary>
            Gets or sets the current <see cref="T:Microsoft.Azure.Cosmos.RequestMessage"/> payload.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.RequestMessage.UseGatewayMode">
            <summary>
            Used to override the client default. This is used for scenarios
            in query where the service interop is not present.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.RequestMessage.IsPartitionKeyRangeHandlerRequired">
            <summary>
            The partition key range handler is only needed for read feed on partitioned resources 
            where the partition key range needs to be computed. 
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.RequestMessage.Properties">
            <summary>
            Request properties Per request context available to handlers. 
            These will not be automatically included into the wire.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.RequestMessage.Dispose">
            <summary>
            Disposes the current <see cref="T:Microsoft.Azure.Cosmos.RequestMessage"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.RequestMessage.Dispose(System.Boolean)">
            <summary>
            Disposes of the request message content
            </summary>
            <param name="disposing">True to dispose content</param>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.ResponseMessage">
            <summary>
            Represents a response from the Azure Cosmos DB service.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.ResponseMessage.#ctor">
            <summary>
            Create a <see cref="T:Microsoft.Azure.Cosmos.ResponseMessage"/>
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.ResponseMessage.#ctor(System.Net.HttpStatusCode,Microsoft.Azure.Cosmos.RequestMessage,System.String)">
            <summary>
            Create a <see cref="T:Microsoft.Azure.Cosmos.ResponseMessage"/>
            </summary>
            <param name="statusCode">The HttpStatusCode of the response</param>
            <param name="requestMessage">The <see cref="T:Microsoft.Azure.Cosmos.RequestMessage"/> object</param>
            <param name="errorMessage">The reason for failures if any.</param>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.ResponseMessage.#ctor(System.Net.HttpStatusCode,Microsoft.Azure.Cosmos.RequestMessage,System.String,Microsoft.Azure.Documents.Error,Microsoft.Azure.Cosmos.Headers)">
            <summary>
            Create a <see cref="T:Microsoft.Azure.Cosmos.ResponseMessage"/>
            </summary>
            <param name="statusCode">The HttpStatusCode of the response</param>
            <param name="requestMessage">The <see cref="T:Microsoft.Azure.Cosmos.RequestMessage"/> object</param>
            <param name="errorMessage">The reason for failures if any.</param>
            <param name="error">The inner error object</param>
            <param name="headers">The headers for the response.</param>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.ResponseMessage.StatusCode">
            <summary>
            Gets the <see cref="T:System.Net.HttpStatusCode"/> of the current response.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.ResponseMessage.Content">
            <summary>
            Gets the content as a <see cref="T:System.IO.Stream"/>, if any, of the current response.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.ResponseMessage.ErrorMessage">
            <summary>
            Gets the reason for a failure in the current response.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.ResponseMessage.Headers">
            <summary>
            Gets the current <see cref="T:Microsoft.Azure.Cosmos.ResponseMessage"/> HTTP headers.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.ResponseMessage.ContinuationToken">
            <summary>
            Gets the Continuation Token in the current <see cref="T:Microsoft.Azure.Cosmos.ResponseMessage"/>.
            </summary>
            <remarks>
            This is only used in feed operations like query and change feed
            </remarks>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.ResponseMessage.RequestMessage">
            <summary>
            Gets the original request message
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.ResponseMessage.Diagnostics">
            <summary>
            Gets the cosmos diagnostic information for the current request to Azure Cosmos DB service
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.ResponseMessage.Error">
            <summary>
            Gets the internal error object.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.ResponseMessage.IsSuccessStatusCode">
            <summary>
            Asserts if the current <see cref="T:System.Net.HttpStatusCode"/> is a success.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.ResponseMessage.EnsureSuccessStatusCode">
            <summary>
            Checks if the current <see cref="T:Microsoft.Azure.Cosmos.ResponseMessage"/> has a successful status code, otherwise, throws.
            </summary>
            <exception cref="T:Microsoft.Azure.Cosmos.CosmosException">An instance of <see cref="T:Microsoft.Azure.Cosmos.CosmosException"/> representing the error state.</exception>
            <returns>The current <see cref="T:Microsoft.Azure.Cosmos.ResponseMessage"/>.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.ResponseMessage.Dispose">
            <summary>
            Disposes the current <see cref="T:Microsoft.Azure.Cosmos.ResponseMessage"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.ResponseMessage.Dispose(System.Boolean)">
            <summary>
            Dispose of the response message content
            </summary>
            <param name="disposing">True to dispose of content</param>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.CosmosMessageHeadersInternal">
            <summary>
            Internal header class with priority access for known headers and support for dictionary-based access to other headers.
            </summary>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.CosmosQueryResponseMessageHeaders">
            <summary>
            HTTP headers in a <see cref="T:Microsoft.Azure.Cosmos.ResponseMessage"/>.
            </summary>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.Headers">
            <summary>
            Header implementation used for Request and Responses
            </summary>
            <seealso cref="T:Microsoft.Azure.Cosmos.ResponseMessage"/>
            <seealso cref="T:Microsoft.Azure.Cosmos.RequestMessage"/>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.Headers.ContinuationToken">
            <summary>
            Gets the Continuation Token in the current <see cref="T:Microsoft.Azure.Cosmos.ResponseMessage"/>.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.Headers.RequestCharge">
            <summary>
            Gets the request charge for this request from the Azure Cosmos DB service.
            </summary>
            <value>
            The request charge measured in request units.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.Headers.ActivityId">
            <summary>
            Gets the activity ID for the request from the Azure Cosmos DB service.
            </summary>
            <value>
            The activity ID for the request.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.Headers.ETag">
            <summary>
            Gets the entity tag associated with the resource from the Azure Cosmos DB service.
            </summary>
            <value>
            The entity tag associated with the resource.
            </value>
            <remarks>
            ETags are used for concurrency checking when updating resources. 
            </remarks>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.Headers.ContentType">
            <summary>
            Gets the Content Type for the current content in the <see cref="T:Microsoft.Azure.Cosmos.ResponseMessage"/>.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.Headers.Session">
            <summary>
            Gets the Session Token for the current <see cref="T:Microsoft.Azure.Cosmos.ResponseMessage"/>.
            </summary>
            <remarks>
            Session Token is used along with Session Consistency.
            </remarks>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.Headers.ContentLength">
            <summary>
            Gets the Content Length for the current content in the <see cref="T:Microsoft.Azure.Cosmos.ResponseMessage"/>.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.Headers.Location">
            <summary>
            Gets the Location for the current content in the <see cref="T:Microsoft.Azure.Cosmos.ResponseMessage"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Headers.#ctor">
            <summary>
            Creates a new instance of <see cref="T:Microsoft.Azure.Cosmos.Headers"/>.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.Headers.Item(System.String)">
            <summary>
            Gets the value of a particular header.
            </summary>
            <param name="headerName">Header name to look for.</param>
            <returns>The header value.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Headers.GetEnumerator">
            <summary>
            Enumerates all the HTTP headers names in the <see cref="T:Microsoft.Azure.Cosmos.Headers"/>.
            </summary>
            <returns>An enumator for all headers.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Headers.Add(System.String,System.String)">
            <summary>
            Adds a header to the Header collection.
            </summary>
            <param name="headerName">Header name.</param>
            <param name="value">Header value.</param>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Headers.Add(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Adds a header to the Header collection.
            </summary>
            <param name="headerName">Header name.</param>
            <param name="values">List of values to be added as a comma-separated list.</param>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Headers.Set(System.String,System.String)">
            <summary>
            Adds or updates a header in the Header collection.
            </summary>
            <param name="headerName">Header name.</param>
            <param name="value">Header value.</param>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Headers.Get(System.String)">
            <summary>
            Gets the value of a particular header.
            </summary>
            <param name="headerName">Header name.</param>
            <returns>The header value.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Headers.TryGetValue(System.String,System.String@)">
            <summary>
            Tries to get the value for a particular header.
            </summary>
            <param name="headerName">Header name.</param>
            <param name="value">Header value.</param>
            <returns>True or false if the header name existed in the header collection.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Headers.GetValueOrDefault(System.String)">
            <summary>
            Returns the header value or the default(string)
            </summary>
            <param name="headerName">Header Name</param>
            <returns>Returns the header value or the default(string).</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Headers.Remove(System.String)">
            <summary>
            Removes a header from the header collection.
            </summary>
            <param name="headerName">Header name.</param>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Headers.AllKeys">
            <summary>
            Obtains a list of all header names.
            </summary>
            <returns>An array with all the header names.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Headers.GetHeaderValue``1(System.String)">
            <summary>
            Gets a header value with a particular type.
            </summary>
            <typeparam name="T">Type of the header value.</typeparam>
            <param name="headerName">Header name.</param>
            <returns>The header value parsed for a particular type.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Headers.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Enumerates all the HTTP headers names in the <see cref="T:Microsoft.Azure.Cosmos.Headers"/>.
            </summary>
            <returns>An enumator for all headers.</returns>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.IDocumentClient">
            <summary>
            The IDocumentClient interface captures the API signatures of the Azure Cosmos DB service .NET SDK.
            See <see cref="T:Microsoft.Azure.Cosmos.DocumentClient"/> for implementation details.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.IDocumentClient.Session">
            <summary>
            Gets or sets the session object used for session consistency version tracking in the Azure Cosmos DB service.
            </summary>
            <remarks>
            <value>
            The session object used for version tracking when the consistency level is set to Session.
            </value>
            The session object can be saved and shared between two DocumentClient instances within the same AppDomain.
            </remarks>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.IDocumentClient.ServiceEndpoint">
            <summary>
            Gets the endpoint Uri for the service endpoint from the Azure Cosmos DB service.
            </summary>
            <value>
            The Uri for the service endpoint.
            </value>
            <seealso cref="T:System.Uri"/>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.IDocumentClient.WriteEndpoint">
            <summary>
            Gets the current write endpoint chosen based on availability and preference in the Azure Cosmos DB service.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.IDocumentClient.ReadEndpoint">
            <summary>
            Gets the current read endpoint chosen based on availability and preference in the Azure Cosmos DB service.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.IDocumentClient.ConnectionPolicy">
            <summary>
            Gets the Connection policy used by the client from the Azure Cosmos DB service.
            </summary>
            <value>
            The Connection policy used by the client.
            </value>
            <seealso cref="T:Microsoft.Azure.Cosmos.ConnectionPolicy"/>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.IDocumentClient.AuthKey">
            <summary>
            Gets the AuthKey used by the client from the Azure Cosmos DB service.
            </summary>
            <value>
            The AuthKey used by the client.
            </value>
            <seealso cref="T:System.Security.SecureString"/>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.IDocumentClient.ConsistencyLevel">
            <summary>
            Gets the configured consistency level of the client from the Azure Cosmos DB service.
            </summary>
            <value>
            The configured <see cref="T:Microsoft.Azure.Cosmos.ConsistencyLevel"/> of the client.
            </value>
            <seealso cref="T:Microsoft.Azure.Cosmos.ConsistencyLevel"/>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.IDocumentClient.GetDatabaseAccountAsync">
            <summary>
            Read the <see cref="T:Microsoft.Azure.Cosmos.AccountProperties"/> as an asynchronous operation in the Azure Cosmos DB service.
            </summary>
            <returns>
            A <see cref="T:Microsoft.Azure.Cosmos.AccountProperties"/> wrapped in a <see cref="T:System.Threading.Tasks.Task"/> object.
            </returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.IDocumentClient.CreateDatabaseAsync(Microsoft.Azure.Documents.Database,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Creates a database resource as an asychronous operation in the Azure Cosmos DB service.
            </summary>
            <param name="database">The specification for the <see cref="T:Microsoft.Azure.Cosmos.Database"/> to create.</param>
            <param name="options">(Optional) The <see cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/> for the request.</param>
            <returns>The <see cref="T:Microsoft.Azure.Cosmos.Database"/> that was created within a task object representing the service response for the asynchronous operation.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="database"/> is not set.</exception>
            <exception cref="T:System.AggregateException">Represents a consolidation of failures that occured during async processing. Look within InnerExceptions to find the actual exception(s).</exception>
            <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Database are:
            <list type="table">
                <listheader>
                    <term>StatusCode</term><description>Reason for exception</description>
                </listheader>
                <item>
                    <term>400</term><description>BadRequest - This means something was wrong with the database object supplied. It is likely that an id was not supplied for the new Database.</description>
                </item>
                <item>
                    <term>409</term><description>Conflict - This means a <see cref="T:Microsoft.Azure.Cosmos.Database"/> with an id matching the id field of <paramref name="database"/> already existed.</description>
                </item>
            </list>
            </exception>
            <example>
            The example below creates a new <see cref="T:Microsoft.Azure.Cosmos.Database"/> with an Id property of 'MyDatabase'
            This code snippet is intended to be used from within an asynchronous method as it uses the await keyword
            <code language="c#">
            <![CDATA[
            using (IDocumentClient client = new DocumentClient(new Uri("service endpoint"), "auth key"))
            {
                Database db = await client.CreateDatabaseAsync(new Database { Id = "MyDatabase" });
            }
            ]]>
            </code>
            </example>
            <example>
            If you would like to construct a <see cref="T:Microsoft.Azure.Cosmos.Database"/> from within a synchronous method then you need to use the following code
            <code language="c#">
            <![CDATA[
            using (IDocumentClient client = new DocumentClient(new Uri("service endpoint"), "auth key"))
            {
                Database db = client.CreateDatabaseAsync(new Database { Id = "MyDatabase" }).Result;
            }
            ]]>
            </code>
            </example>
            <seealso cref="T:Microsoft.Azure.Cosmos.Database"/>
            <seealso cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>
            <seealso cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/>
            <seealso cref="T:System.Threading.Tasks.Task"/>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.IDocumentClient.CreateDatabaseIfNotExistsAsync(Microsoft.Azure.Documents.Database,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Creates(if doesn't exist) or gets(if already exists) a database resource as an asychronous operation in the Azure Cosmos DB service.
            You can check the status code from the response to determine whether the database was newly created(201) or existing database was returned(200)
            </summary>
            <param name="database">The specification for the <see cref="T:Microsoft.Azure.Cosmos.Database"/> to create.</param>
            <param name="options">(Optional) The <see cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/> for the request.</param>
            <returns>The <see cref="T:Microsoft.Azure.Cosmos.Database"/> that was created within a task object representing the service response for the asynchronous operation.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="database"/> is not set.</exception>
            <exception cref="T:System.AggregateException">Represents a consolidation of failures that occured during async processing. Look within InnerExceptions to find the actual exception(s).</exception>
            <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property.</exception>
            <example>
            The example below creates a new <see cref="T:Microsoft.Azure.Cosmos.Database"/> with an Id property of 'MyDatabase'
            This code snippet is intended to be used from within an asynchronous method as it uses the await keyword
            <code language="c#">
            <![CDATA[
            using (IDocumentClient client = new DocumentClient(new Uri("service endpoint"), "auth key"))
            {
                Database db = await client.CreateDatabaseIfNotExistsAsync(new Database { Id = "MyDatabase" });
            }
            ]]>
            </code>
            </example>
            <example>
            If you would like to construct a <see cref="T:Microsoft.Azure.Cosmos.Database"/> from within a synchronous method then you need to use the following code
            <code language="c#">
            <![CDATA[
            using (IDocumentClient client = new DocumentClient(new Uri("service endpoint"), "auth key"))
            {
                Database db = client.CreateDatabaseIfNotExistsAsync(new Database { Id = "MyDatabase" }).Result;
            }
            ]]>
            </code>
            </example>
            <seealso cref="T:Microsoft.Azure.Cosmos.Database"/>
            <seealso cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>
            <seealso cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/>
            <seealso cref="T:System.Threading.Tasks.Task"/>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.IDocumentClient.CreateDocumentCollectionAsync(System.String,Microsoft.Azure.Documents.DocumentCollection,Microsoft.Azure.Documents.Client.RequestOptions)">
             <summary>
             Creates a collection as an asychronous operation in the Azure Cosmos DB service.
             </summary>
             <param name="databaseLink">The link of the database to create the collection in. E.g. dbs/db_rid/.</param>
             <param name="documentCollection">The <see cref="T:Microsoft.Azure.Documents.DocumentCollection"/> object.</param>
             <param name="options">(Optional) Any <see cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/> you wish to provide when creating a Collection. E.g. RequestOptions.OfferThroughput = 400. </param>
             <returns>The <see cref="T:Microsoft.Azure.Documents.DocumentCollection"/> that was created contained within a <see cref="T:System.Threading.Tasks.Task"/> object representing the service response for the asynchronous operation.</returns>
             <exception cref="T:System.ArgumentNullException">If either <paramref name="databaseLink"/> or <paramref name="documentCollection"/> is not set.</exception>
             <exception cref="T:System.AggregateException">Represents a consolidation of failures that occured during async processing. Look within InnerExceptions to find the actual exception(s).</exception>
             <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a collection are:
             <list type="table">
                 <listheader>
                     <term>StatusCode</term><description>Reason for exception</description>
                 </listheader>
                 <item>
                     <term>400</term><description>BadRequest - This means something was wrong with the request supplied. It is likely that an id was not supplied for the new collection.</description>
                 </item>
                 <item>
                     <term>403</term><description>Forbidden - This means you attempted to exceed your quota for collections. Contact support to have this quota increased.</description>
                 </item>
                 <item>
                     <term>409</term><description>Conflict - This means a <see cref="T:Microsoft.Azure.Documents.DocumentCollection"/> with an id matching the id you supplied already existed.</description>
                 </item>
             </list>
             </exception>
             <example>
            
             <code language="c#">
             <![CDATA[
             using (IDocumentClient client = new DocumentClient(new Uri("service endpoint"), "auth key"))
             {
                 //Create a new collection with an OfferThroughput set to 10000
                 //Not passing in RequestOptions.OfferThroughput will result in a collection with the default OfferThroughput set.
                 DocumentCollection coll = await client.CreateDocumentCollectionAsync(databaseLink,
                     new DocumentCollection { Id = "My Collection" },
                     new RequestOptions { OfferThroughput = 10000} );
             }
             ]]>
             </code>
             </example>
             <seealso cref="T:Microsoft.Azure.Documents.DocumentCollection"/>
             <seealso cref="T:Microsoft.Azure.Documents.Offer"/>
             <seealso cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>
             <seealso cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/>
             <seealso cref="T:System.Threading.Tasks.Task"/>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.IDocumentClient.CreateDocumentCollectionIfNotExistsAsync(System.String,Microsoft.Azure.Documents.DocumentCollection,Microsoft.Azure.Documents.Client.RequestOptions)">
             <summary>
             Creates (if doesn't exist) or gets (if already exists) a collection as an asychronous operation in the Azure Cosmos DB service.
             You can check the status code from the response to determine whether the collection was newly created (201) or existing collection was returned (200).
             </summary>
             <param name="databaseLink">The link of the database to create the collection in. E.g. dbs/db_rid/.</param>
             <param name="documentCollection">The <see cref="T:Microsoft.Azure.Documents.DocumentCollection"/> object.</param>
             <param name="options">(Optional) Any <see cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/> you wish to provide when creating a Collection. E.g. RequestOptions.OfferThroughput = 400. </param>
             <returns>The <see cref="T:Microsoft.Azure.Documents.DocumentCollection"/> that was created contained within a <see cref="T:System.Threading.Tasks.Task"/> object representing the service response for the asynchronous operation.</returns>
             <exception cref="T:System.ArgumentNullException">If either <paramref name="databaseLink"/> or <paramref name="documentCollection"/> is not set.</exception>
             <exception cref="T:System.AggregateException">Represents a consolidation of failures that occured during async processing. Look within InnerExceptions to find the actual exception(s).</exception>
             <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a DocumentCollection are:
             <list type="table">
                 <listheader>
                     <term>StatusCode</term><description>Reason for exception</description>
                 </listheader>
                 <item>
                     <term>400</term><description>BadRequest - This means something was wrong with the request supplied. It is likely that an id was not supplied for the new collection.</description>
                 </item>
                 <item>
                     <term>403</term><description>Forbidden - This means you attempted to exceed your quota for collections. Contact support to have this quota increased.</description>
                 </item>
             </list>
             </exception>
             <example>
            
             <code language="c#">
             <![CDATA[
             using (IDocumentClient client = new DocumentClient(new Uri("service endpoint"), "auth key"))
             {
                 //Create a new collection with an OfferThroughput set to 10000
                 //Not passing in RequestOptions.OfferThroughput will result in a collection with the default OfferThroughput set.
                 DocumentCollection coll = await client.CreateDocumentCollectionIfNotExistsAsync(databaseLink,
                     new DocumentCollection { Id = "My Collection" },
                     new RequestOptions { OfferThroughput = 10000} );
             }
             ]]>
             </code>
             </example>
             <seealso cref="T:Microsoft.Azure.Documents.DocumentCollection"/>
             <seealso cref="T:Microsoft.Azure.Documents.Offer"/>
             <seealso cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>
             <seealso cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/>
             <seealso cref="T:System.Threading.Tasks.Task"/>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.IDocumentClient.CreateDocumentCollectionAsync(System.Uri,Microsoft.Azure.Documents.DocumentCollection,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Creates a collection as an asychronous operation in the Azure Cosmos DB service.
            </summary>
            <param name="databaseUri">The URI of the database to create the collection in.</param>
            <param name="documentCollection">The <see cref="T:Microsoft.Azure.Documents.DocumentCollection"/> object.</param>
            <param name="options">(Optional) The <see cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/> for the request.</param>
            <returns>The task object representing the service response for the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.IDocumentClient.CreateDocumentCollectionIfNotExistsAsync(System.Uri,Microsoft.Azure.Documents.DocumentCollection,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Creates (if doesn't exist) or gets (if already exists) a collection as an asychronous operation in the Azure Cosmos DB service.
            </summary>
            <param name="databaseUri">the URI of the database to create the collection in.</param>
            <param name="documentCollection">The <see cref="T:Microsoft.Azure.Documents.DocumentCollection"/> object.</param>
            <param name="options">(Optional) Any <see cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/> you wish to provide when creating a Collection. E.g. RequestOptions.OfferThroughput = 400. </param>
            <returns>The <see cref="T:Microsoft.Azure.Documents.DocumentCollection"/> that was created contained within a <see cref="T:System.Threading.Tasks.Task"/> object representing the service response for the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.IDocumentClient.CreateDocumentAsync(System.String,System.Object,Microsoft.Azure.Documents.Client.RequestOptions,System.Boolean,System.Threading.CancellationToken)">
             <summary>
             Creates a Document as an asychronous operation in the Azure Cosmos DB service.
             </summary>
             <param name="collectionLink">The link of the <see cref="T:Microsoft.Azure.Documents.DocumentCollection"/> to create the document in. E.g. dbs/db_rid/colls/coll_rid/ </param>
             <param name="document">The document object to create.</param>
             <param name="options">(Optional) Any request options you wish to set. E.g. Specifying a Trigger to execute when creating the document. <see cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/></param>
             <param name="disableAutomaticIdGeneration">(Optional) Disables the automatic id generation, If this is True the system will throw an exception if the id property is missing from the Document.</param>
             <param name="cancellationToken">(Optional) A <see cref="T:System.Threading.CancellationToken"/> that can be used by other objects or threads to receive notice of cancellation.</param>
             <returns>The <see cref="T:Microsoft.Azure.Documents.Document"/> that was created contained within a <see cref="T:System.Threading.Tasks.Task"/> object representing the service response for the asynchronous operation.</returns>
             <exception cref="T:System.ArgumentNullException">If either <paramref name="collectionLink"/> or <paramref name="document"/> is not set.</exception>
             <exception cref="T:System.AggregateException">Represents a consolidation of failures that occured during async processing. Look within InnerExceptions to find the actual exception(s)</exception>
             <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
             <list type="table">
                 <listheader>
                     <term>StatusCode</term><description>Reason for exception</description>
                 </listheader>
                 <item>
                     <term>400</term><description>BadRequest - This means something was wrong with the document supplied. It is likely that <paramref name="disableAutomaticIdGeneration"/> was true and an id was not supplied</description>
                 </item>
                 <item>
                     <term>403</term><description>Forbidden - This likely means the collection in to which you were trying to create the document is full.</description>
                 </item>
                 <item>
                     <term>409</term><description>Conflict - This means a <see cref="T:Microsoft.Azure.Documents.Document"/> with an id matching the id field of <paramref name="document"/> already existed</description>
                 </item>
                 <item>
                     <term>413</term><description>RequestEntityTooLarge - This means the <see cref="T:Microsoft.Azure.Documents.Document"/> exceeds the current max entity size. Consult documentation for limits and quotas.</description>
                 </item>
                 <item>
                     <term>429</term><description>TooManyRequests - This means you have exceeded the number of request units per second. Consult the DocumentClientException.RetryAfter value to see how long you should wait before retrying this operation.</description>
                 </item>
             </list>
             </exception>
             <example>
             Azure Cosmos DB supports a number of different ways to work with documents. A document can extend <see cref="T:Microsoft.Azure.Documents.Resource"/>
             <code language="c#">
             <![CDATA[
             public class MyObject : Resource
             {
                 public string MyProperty {get; set;}
             }
            
             using (IDocumentClient client = new DocumentClient(new Uri("service endpoint"), "auth key"))
             {
                 Document doc = await client.CreateDocumentAsync("dbs/db_rid/colls/coll_rid/", new MyObject { MyProperty = "A Value" });
             }
             ]]>
             </code>
             </example>
             <example>
             A document can be any POCO object that can be serialized to JSON, even if it doesn't extend from <see cref="T:Microsoft.Azure.Documents.Resource"/>
             <code language="c#">
             <![CDATA[
             public class MyPOCO
             {
                 public string MyProperty {get; set;}
             }
            
             using (IDocumentClient client = new DocumentClient(new Uri("service endpoint"), "auth key"))
             {
                 Document doc = await client.CreateDocumentAsync("dbs/db_rid/colls/coll_rid/", new MyPOCO { MyProperty = "A Value" });
             }
             ]]>
             </code>
             </example>
             <example>
             Finally, a Document can also be a dynamic object
             <code language="c#">
             <![CDATA[
             using (IDocumentClient client = new DocumentClient(new Uri("service endpoint"), "auth key"))
             {
                 Document doc = await client.CreateDocumentAsync("dbs/db_rid/colls/coll_rid/", new { SomeProperty = "A Value" } );
             }
             ]]>
             </code>
             </example>
             <example>
             Create a Document and execute a Pre and Post Trigger
             <code language="c#">
             <![CDATA[
             using (IDocumentClient client = new DocumentClient(new Uri("service endpoint"), "auth key"))
             {
                 Document doc = await client.CreateDocumentAsync(
                     "dbs/db_rid/colls/coll_rid/",
                     new { id = "DOC123213443" },
                     new RequestOptions
                     {
                         PreTriggerInclude = new List<string> { "MyPreTrigger" },
                         PostTriggerInclude = new List<string> { "MyPostTrigger" }
                     });
             }
             ]]>
             </code>
             </example>
             <seealso cref="T:Microsoft.Azure.Documents.Document"/>
             <seealso cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>
             <seealso cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/>
             <seealso cref="T:System.Threading.Tasks.Task"/>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.IDocumentClient.CreateDocumentAsync(System.Uri,System.Object,Microsoft.Azure.Documents.Client.RequestOptions,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Creates a document as an asychronous operation in the Azure Cosmos DB service.
            </summary>
            <param name="documentCollectionUri">The URI of the document collection to create the document in.</param>
            <param name="document">The document object.</param>
            <param name="options">(Optional) The <see cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/> for the request.</param>
            <param name="disableAutomaticIdGeneration">A flag to disable automatic id generation.</param>
            <param name="cancellationToken">(Optional) A <see cref="T:System.Threading.CancellationToken"/> that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>The task object representing the service response for the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.IDocumentClient.CreateStoredProcedureAsync(System.String,Microsoft.Azure.Documents.StoredProcedure,Microsoft.Azure.Documents.Client.RequestOptions)">
             <summary>
             Creates a stored procedure as an asychronous operation in the Azure Cosmos DB service.
             </summary>
             <param name="collectionLink">The link of the collection to create the stored procedure in. E.g. dbs/db_rid/colls/col_rid/</param>
             <param name="storedProcedure">The <see cref="T:Microsoft.Azure.Documents.StoredProcedure"/> object to create.</param>
             <param name="options">(Optional) Any <see cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>for this request.</param>
             <returns>The <see cref="T:Microsoft.Azure.Documents.StoredProcedure"/> that was created contained within a <see cref="T:System.Threading.Tasks.Task"/> object representing the service response for the asynchronous operation.</returns>
             <exception cref="T:System.ArgumentNullException">If either <paramref name="collectionLink"/> or <paramref name="storedProcedure"/> is not set.</exception>
             <exception cref="T:System.AggregateException">Represents a consolidation of failures that occured during async processing. Look within InnerExceptions to find the actual exception(s)</exception>
             <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
             <list type="table">
                 <listheader>
                     <term>StatusCode</term><description>Reason for exception</description>
                 </listheader>
                 <item>
                     <term>400</term><description>BadRequest - This means something was wrong with the request supplied. It is likely that an Id was not supplied for the stored procedure or the Body was malformed.</description>
                 </item>
                 <item>
                     <term>403</term><description>Forbidden - You have reached your quota of stored procedures for the collection supplied. Contact support to have this quota increased.</description>
                 </item>
                 <item>
                     <term>409</term><description>Conflict - This means a <see cref="T:Microsoft.Azure.Documents.StoredProcedure"/> with an id matching the id you supplied already existed.</description>
                 </item>
                 <item>
                     <term>413</term><description>RequestEntityTooLarge - This means the body of the <see cref="T:Microsoft.Azure.Documents.StoredProcedure"/> you tried to create was too large.</description>
                 </item>
             </list>
             </exception>
             <example>
            
             <code language="c#">
             <![CDATA[
             //Create a new stored procedure called "HelloWorldSproc" that takes in a single param called "name".
             StoredProcedure sproc = await client.CreateStoredProcedureAsync(collectionLink, new StoredProcedure
             {
                Id = "HelloWorldSproc",
                Body = @"function (name){
                            var response = getContext().getResponse();
                            response.setBody('Hello ' + name);
                         }"
             });
             ]]>
             </code>
             </example>
             <seealso cref="T:Microsoft.Azure.Documents.StoredProcedure"/>
             <seealso cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>
             <seealso cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/>
             <seealso cref="T:System.Threading.Tasks.Task"/>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.IDocumentClient.CreateStoredProcedureAsync(System.Uri,Microsoft.Azure.Documents.StoredProcedure,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Creates a stored procedure as an asychronous operation in the Azure Cosmos DB service.
            </summary>
            <param name="documentCollectionUri">The URI of the document collection to create the stored procedure in.</param>
            <param name="storedProcedure">The <see cref="T:Microsoft.Azure.Documents.StoredProcedure"/> object.</param>
            <param name="options">(Optional) The <see cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/> for the request.</param>
            <returns>The task object representing the service response for the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.IDocumentClient.CreateTriggerAsync(System.String,Microsoft.Azure.Documents.Trigger,Microsoft.Azure.Documents.Client.RequestOptions)">
             <summary>
             Creates a trigger as an asychronous operation in the Azure Cosmos DB service.
             </summary>
             <param name="collectionLink">The link of the <see cref="T:Microsoft.Azure.Documents.DocumentCollection"/> to create the trigger in. E.g. dbs/db_rid/colls/col_rid/ </param>
             <param name="trigger">The <see cref="T:Microsoft.Azure.Documents.Trigger"/> object to create.</param>
             <param name="options">(Optional) Any <see cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>for this request.</param>
             <returns>A task object representing the service response for the asynchronous operation.</returns>
             <exception cref="T:System.ArgumentNullException">If either <paramref name="collectionLink"/> or <paramref name="trigger"/> is not set.</exception>
             <exception cref="T:System.AggregateException">Represents a consolidation of failures that occured during async processing. Look within InnerExceptions to find the actual exception(s)</exception>
             <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
             <list type="table">
                 <listheader>
                     <term>StatusCode</term><description>Reason for exception</description>
                 </listheader>
                 <item>
                     <term>400</term><description>BadRequest - This means something was wrong with the request supplied. It is likely that an Id was not supplied for the new trigger or that the Body was malformed.</description>
                 </item>
                 <item>
                     <term>403</term><description>Forbidden - You have reached your quota of triggers for the collection supplied. Contact support to have this quota increased.</description>
                 </item>
                 <item>
                     <term>409</term><description>Conflict - This means a <see cref="T:Microsoft.Azure.Documents.Trigger"/> with an id matching the id you supplied already existed.</description>
                 </item>
                 <item>
                     <term>413</term><description>RequestEntityTooLarge - This means the body of the <see cref="T:Microsoft.Azure.Documents.Trigger"/> you tried to create was too large.</description>
                 </item>
             </list>
             </exception>
             <example>
            
             <code language="c#">
             <![CDATA[
             //Create a trigger that validates the contents of a document as it is created and adds a 'timestamp' property if one was not found.
             Trigger trig = await client.CreateTriggerAsync(collectionLink, new Trigger
             {
                 Id = "ValidateDocuments",
                 Body = @"function validate() {
                                     var context = getContext();
                                     var request = context.getRequest();                                                             
                                     var documentToCreate = request.getBody();
                                     
                                     // validate properties
                                     if (!('timestamp' in documentToCreate)) {
                                         var ts = new Date();
                                         documentToCreate['timestamp'] = ts.getTime();
                                     }
                                     
                                     // update the document that will be created
                                     request.setBody(documentToCreate);
                                   }",
                 TriggerType = TriggerType.Pre,
                 TriggerOperation = TriggerOperation.Create
             });
             ]]>
             </code>
             </example>
             <seealso cref="T:Microsoft.Azure.Documents.Trigger"/>
             <seealso cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>
             <seealso cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/>
             <seealso cref="T:System.Threading.Tasks.Task"/>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.IDocumentClient.CreateTriggerAsync(System.Uri,Microsoft.Azure.Documents.Trigger,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Creates a trigger as an asychronous operation in the Azure Cosmos DB service.
            </summary>
            <param name="documentCollectionUri">The URI of the document collection to create the trigger in.</param>
            <param name="trigger">The <see cref="T:Microsoft.Azure.Documents.Trigger"/> object.</param>
            <param name="options">(Optional) The <see cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/> for the request.</param>
            <returns>The task object representing the service response for the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.IDocumentClient.CreateUserDefinedFunctionAsync(System.String,Microsoft.Azure.Documents.UserDefinedFunction,Microsoft.Azure.Documents.Client.RequestOptions)">
             <summary>
             Creates a user defined function as an asychronous operation in the Azure Cosmos DB service.
             </summary>
             <param name="collectionLink">The link of the <see cref="T:Microsoft.Azure.Documents.DocumentCollection"/> to create the user defined function in. E.g. dbs/db_rid/colls/col_rid/ </param>
             <param name="function">The <see cref="T:Microsoft.Azure.Documents.UserDefinedFunction"/> object to create.</param>
             <param name="options">(Optional) Any <see cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>for this request.</param>
             <returns>A task object representing the service response for the asynchronous operation.</returns>
             <exception cref="T:System.ArgumentNullException">If either <paramref name="collectionLink"/> or <paramref name="function"/> is not set.</exception>
             <exception cref="T:System.AggregateException">Represents a consolidation of failures that occured during async processing. Look within InnerExceptions to find the actual exception(s)</exception>
             <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
             <list type="table">
                 <listheader>
                     <term>StatusCode</term><description>Reason for exception</description>
                 </listheader>
                 <item>
                     <term>400</term><description>BadRequest - This means something was wrong with the request supplied. It is likely that an Id was not supplied for the new user defined function or that the Body was malformed.</description>
                 </item>
                 <item>
                     <term>403</term><description>Forbidden - You have reached your quota of user defined functions for the collection supplied. Contact support to have this quota increased.</description>
                 </item>
                 <item>
                     <term>409</term><description>Conflict - This means a <see cref="T:Microsoft.Azure.Documents.UserDefinedFunction"/> with an id matching the id you supplied already existed.</description>
                 </item>
                 <item>
                     <term>413</term><description>RequestEntityTooLarge - This means the body of the <see cref="T:Microsoft.Azure.Documents.UserDefinedFunction"/> you tried to create was too large.</description>
                 </item>
             </list>
             </exception>
             <example>
            
             <code language="c#">
             <![CDATA[
             //Create a user defined function that converts a string to upper case
             UserDefinedFunction udf = client.CreateUserDefinedFunctionAsync(collectionLink, new UserDefinedFunction
             {
                Id = "ToUpper",
                Body = @"function toUpper(input) {
                                    return input.toUpperCase();
                                 }",
             });
             ]]>
             </code>
             </example>
             <seealso cref="T:Microsoft.Azure.Documents.UserDefinedFunction"/>
             <seealso cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>
             <seealso cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/>
             <seealso cref="T:System.Threading.Tasks.Task"/>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.IDocumentClient.CreateUserDefinedFunctionAsync(System.Uri,Microsoft.Azure.Documents.UserDefinedFunction,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Creates a user defined function as an asychronous operation in the Azure Cosmos DB service.
            </summary>
            <param name="documentCollectionUri">The URI of the document collection to create the user defined function in.</param>
            <param name="function">The <see cref="T:Microsoft.Azure.Documents.UserDefinedFunction"/> object.</param>
            <param name="options">(Optional) The <see cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/> for the request.</param>
            <returns>The task object representing the service response for the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.IDocumentClient.DeleteDatabaseAsync(System.String,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Delete a <see cref="T:Microsoft.Azure.Cosmos.Database"/> from the Azure Cosmos DB service as an asynchronous operation.
            </summary>
            <param name="databaseLink">The link of the <see cref="T:Microsoft.Azure.Cosmos.Database"/> to delete. E.g. dbs/db_rid/ </param>
            <param name="options">(Optional) The request options for the request.</param>
            <returns>A <see cref="N:System.Threading.Tasks"/> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/> which will contain information about the request issued.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="databaseLink"/> is not set.</exception>
            <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
            <list type="table">
                <listheader>
                    <term>StatusCode</term><description>Reason for exception</description>
                </listheader>
                <item>
                    <term>404</term><description>NotFound - This means the resource you tried to delete did not exist.</description>
                </item>
            </list>
            </exception>
            <example>
            <code language="c#">
            <![CDATA[
            //Delete a database using its selfLink property
            //To get the databaseLink you would have to query for the Database, using CreateDatabaseQuery(),  and then refer to its .SelfLink property
            await client.DeleteDatabaseAsync(databaseLink);
            ]]>
            </code>
            </example>
            <seealso cref="T:Microsoft.Azure.Cosmos.Database"/>
            <seealso cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>
            <seealso cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/>
            <seealso cref="T:System.Threading.Tasks.Task"/>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.IDocumentClient.DeleteDatabaseAsync(System.Uri,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Delete a database as an asynchronous operation in the Azure Cosmos DB service.
            </summary>
            <param name="databaseUri">The URI of the database to delete.</param>
            <param name="options">(Optional) The <see cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/> for the request.</param>
            <returns>The task object representing the service response for the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.IDocumentClient.DeleteDocumentCollectionAsync(System.String,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Delete a <see cref="T:Microsoft.Azure.Documents.DocumentCollection"/> from the Azure Cosmos DB service as an asynchronous operation.
            </summary>
            <param name="documentCollectionLink">The link of the <see cref="T:Microsoft.Azure.Documents.Document"/> to delete. E.g. dbs/db_rid/colls/col_rid/ </param>
            <param name="options">(Optional) The request options for the request.</param>
            <returns>A <see cref="N:System.Threading.Tasks"/> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/> which will contain information about the request issued.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="documentCollectionLink"/> is not set.</exception>
            <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
            <list type="table">
                <listheader>
                    <term>StatusCode</term><description>Reason for exception</description>
                </listheader>
                <item>
                    <term>404</term><description>NotFound - This means the resource you tried to delete did not exist.</description>
                </item>
            </list>
            </exception>
            <example>
            <code language="c#">
            <![CDATA[
            //Delete a collection using its selfLink property
            //To get the collectionLink you would have to query for the Collection, using CreateDocumentCollectionQuery(),  and then refer to its .SelfLink property
            await client.DeleteDocumentCollectionAsync(collectionLink);
            ]]>
            </code>
            </example>
            <seealso cref="T:Microsoft.Azure.Documents.DocumentCollection"/>
            <seealso cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>
            <seealso cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/>
            <seealso cref="T:System.Threading.Tasks.Task"/>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.IDocumentClient.DeleteDocumentCollectionAsync(System.Uri,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Delete a collection as an asynchronous operation in the Azure Cosmos DB service.
            </summary>
            <param name="documentCollectionUri">The URI of the document collection to delete.</param>
            <param name="options">(Optional) The <see cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/> for the request.</param>
            <returns>The task object representing the service response for the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.IDocumentClient.DeleteDocumentAsync(System.String,Microsoft.Azure.Documents.Client.RequestOptions,System.Threading.CancellationToken)">
            <summary>
            Delete a <see cref="T:Microsoft.Azure.Documents.Document"/> from the Azure Cosmos DB service as an asynchronous operation.
            </summary>
            <param name="documentLink">The link of the <see cref="T:Microsoft.Azure.Documents.Document"/> to delete. E.g. dbs/db_rid/colls/col_rid/docs/doc_rid/ </param>
            <param name="options">(Optional) The request options for the request.</param>
            <param name="cancellationToken">(Optional) A <see cref="T:System.Threading.CancellationToken"/> that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>A <see cref="N:System.Threading.Tasks"/> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/> which will contain information about the request issued.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="documentLink"/> is not set.</exception>
            <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
            <list type="table">
                <listheader>
                    <term>StatusCode</term><description>Reason for exception</description>
                </listheader>
                <item>
                    <term>404</term><description>NotFound - This means the resource you tried to delete did not exist.</description>
                </item>
            </list>
            </exception>
            <example>
            <code language="c#">
            <![CDATA[
            //Delete a document using its selfLink property
            //To get the documentLink you would have to query for the Document, using CreateDocumentQuery(),  and then refer to its .SelfLink property
            await client.DeleteDocumentAsync(documentLink);
            ]]>
            </code>
            </example>
            <seealso cref="T:Microsoft.Azure.Cosmos.Database"/>
            <seealso cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>
            <seealso cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/>
            <seealso cref="T:System.Threading.Tasks.Task"/>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.IDocumentClient.DeleteDocumentAsync(System.Uri,Microsoft.Azure.Documents.Client.RequestOptions,System.Threading.CancellationToken)">
            <summary>
            Delete a document as an asynchronous operation in the Azure Cosmos DB service.
            </summary>
            <param name="documentUri">The URI of the document to delete.</param>
            <param name="options">(Optional) The <see cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/> for the request.</param>
            <param name="cancellationToken">(Optional) A <see cref="T:System.Threading.CancellationToken"/> that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>The task object representing the service response for the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.IDocumentClient.DeleteStoredProcedureAsync(System.String,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Delete a <see cref="T:Microsoft.Azure.Documents.StoredProcedure"/> from the Azure Cosmos DB service as an asynchronous operation.
            </summary>
            <param name="storedProcedureLink">The link of the <see cref="T:Microsoft.Azure.Documents.StoredProcedure"/> to delete. E.g. dbs/db_rid/colls/col_rid/sprocs/sproc_rid/ </param>
            <param name="options">(Optional) The request options for the request.</param>
            <returns>A <see cref="N:System.Threading.Tasks"/> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/> which will contain information about the request issued.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="storedProcedureLink"/> is not set.</exception>
            <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
            <list type="table">
                <listheader>
                    <term>StatusCode</term><description>Reason for exception</description>
                </listheader>
                <item>
                    <term>404</term><description>NotFound - This means the resource you tried to delete did not exist.</description>
                </item>
            </list>
            </exception>
            <example>
            <code language="c#">
            <![CDATA[
            //Delete a stored procedure using its selfLink property.
            //To get the sprocLink you would have to query for the Stored Procedure, using CreateStoredProcedureQuery(),  and then refer to its .SelfLink property
            await client.DeleteStoredProcedureAsync(sprocLink);
            ]]>
            </code>
            </example>
            <seealso cref="T:Microsoft.Azure.Documents.StoredProcedure"/>
            <seealso cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>
            <seealso cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/>
            <seealso cref="T:System.Threading.Tasks.Task"/>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.IDocumentClient.DeleteStoredProcedureAsync(System.Uri,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Delete a stored procedure as an asynchronous operation in the Azure Cosmos DB service.
            </summary>
            <param name="storedProcedureUri">The URI of the stored procedure to delete.</param>
            <param name="options">(Optional) The <see cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/> for the request.</param>
            <returns>The task object representing the service response for the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.IDocumentClient.DeleteTriggerAsync(System.String,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Delete a <see cref="T:Microsoft.Azure.Documents.Trigger"/> from the Azure Cosmos DB service as an asynchronous operation.
            </summary>
            <param name="triggerLink">The link of the <see cref="T:Microsoft.Azure.Documents.Trigger"/> to delete. E.g. dbs/db_rid/colls/col_rid/triggers/trigger_rid/ </param>
            <param name="options">(Optional) The request options for the request.</param>
            <returns>A <see cref="N:System.Threading.Tasks"/> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/> which will contain information about the request issued.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="triggerLink"/> is not set.</exception>
            <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
            <list type="table">
                <listheader>
                    <term>StatusCode</term><description>Reason for exception</description>
                </listheader>
                <item>
                    <term>404</term><description>NotFound - This means the resource you tried to delete did not exist.</description>
                </item>
            </list>
            </exception>
            <example>
            <code language="c#">
            <![CDATA[
            //Delete a trigger using its selfLink property.
            //To get the triggerLink you would have to query for the Trigger, using CreateTriggerQuery(),  and then refer to its .SelfLink property
            await client.DeleteTriggerAsync(triggerLink);
            ]]>
            </code>
            </example>
            <seealso cref="T:Microsoft.Azure.Documents.Trigger"/>
            <seealso cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>
            <seealso cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/>
            <seealso cref="T:System.Threading.Tasks.Task"/>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.IDocumentClient.DeleteTriggerAsync(System.Uri,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Delete a trigger as an asynchronous operation in the Azure Cosmos DB service.
            </summary>
            <param name="triggerUri">The URI of the trigger to delete.</param>
            <param name="options">(Optional) The <see cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/> for the request.</param>
            <returns>The task object representing the service response for the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.IDocumentClient.DeleteUserDefinedFunctionAsync(System.String,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Delete a <see cref="T:Microsoft.Azure.Documents.UserDefinedFunction"/> from the Azure Cosmos DB service as an asynchronous operation.
            </summary>
            <param name="functionLink">The link of the <see cref="T:Microsoft.Azure.Documents.UserDefinedFunction"/> to delete. E.g. dbs/db_rid/colls/col_rid/udfs/udf_rid/ </param>
            <param name="options">(Optional) The request options for the request.</param>
            <returns>A <see cref="N:System.Threading.Tasks"/> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/> which will contain information about the request issued.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="functionLink"/> is not set.</exception>
            <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
            <list type="table">
                <listheader>
                    <term>StatusCode</term><description>Reason for exception</description>
                </listheader>
                <item>
                    <term>404</term><description>NotFound - This means the resource you tried to delete did not exist.</description>
                </item>
            </list>
            </exception>
            <example>
            <code language="c#">
            <![CDATA[
            //Delete a user defined function using its selfLink property.
            //To get the functionLink you would have to query for the User Defined Function, using CreateUserDefinedFunctionQuery(),  and then refer to its .SelfLink property
            await client.DeleteUserDefinedFunctionAsync(functionLink);
            ]]>
            </code>
            </example>
            <seealso cref="T:Microsoft.Azure.Documents.UserDefinedFunction"/>
            <seealso cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>
            <seealso cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/>
            <seealso cref="T:System.Threading.Tasks.Task"/>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.IDocumentClient.DeleteUserDefinedFunctionAsync(System.Uri,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Delete a user defined function as an asynchronous operation in the Azure Cosmos DB service.
            </summary>
            <param name="functionUri">The URI of the user defined function to delete.</param>
            <param name="options">(Optional) The <see cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/> for the request.</param>
            <returns>The task object representing the service response for the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.IDocumentClient.DeleteConflictAsync(System.String,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Delete a <see cref="T:Microsoft.Azure.Documents.Conflict"/> from the Azure Cosmos DB service as an asynchronous operation.
            </summary>
            <param name="conflictLink">The link of the <see cref="T:Microsoft.Azure.Documents.Conflict"/> to delete. E.g. dbs/db_rid/colls/coll_rid/conflicts/ </param>
            <param name="options">(Optional) The request options for the request.</param>
            <returns>A <see cref="N:System.Threading.Tasks"/> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/> which will contain information about the request issued.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="conflictLink"/> is not set.</exception>
            <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
            <list type="table">
                <listheader>
                    <term>StatusCode</term><description>Reason for exception</description>
                </listheader>
                <item>
                    <term>404</term><description>NotFound - This means the resource you tried to delete did not exist.</description>
                </item>
            </list>
            </exception>
            <example>
            <code language="c#">
            <![CDATA[
            //Delete a conflict using its selfLink property.
            //To get the conflictLink you would have to query for the Conflict object, using CreateConflictQuery(), and then refer to its .SelfLink property
            await client.DeleteConflictAsync(conflictLink);
            ]]>
            </code>
            </example>
            <seealso cref="T:Microsoft.Azure.Documents.Conflict"/>
            <seealso cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>
            <seealso cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/>
            <seealso cref="T:System.Threading.Tasks.Task"/>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.IDocumentClient.DeleteConflictAsync(System.Uri,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Delete a conflict as an asynchronous operation in the Azure Cosmos DB service.
            </summary>
            <param name="conflictUri">The URI of the conflict to delete.</param>
            <param name="options">(Optional) The <see cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/> for the request.</param>
            <returns>The task object representing the service response for the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.IDocumentClient.ReplaceDocumentCollectionAsync(Microsoft.Azure.Documents.DocumentCollection,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Replaces a document collection in the Azure Cosmos DB service as an asynchronous operation.
            </summary>
            <param name="documentCollection">the updated document collection.</param>
            <param name="options">the request options for the request.</param>
            <returns>
            A <see cref="N:System.Threading.Tasks"/> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/> which wraps a <see cref="T:Microsoft.Azure.Documents.DocumentCollection"/> containing the updated resource record.
            </returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.IDocumentClient.ReplaceDocumentCollectionAsync(System.Uri,Microsoft.Azure.Documents.DocumentCollection,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Replaces a document collection as an asynchronous operation in the Azure Cosmos DB service.
            </summary>
            <param name="documentCollectionUri">The URI of the document collection to be updated.</param>
            <param name="documentCollection">The updated document collection.</param>
            <param name="options">(Optional) The <see cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/> for the request.</param>
            <returns>The task object representing the service response for the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.IDocumentClient.ReplaceDocumentAsync(System.String,System.Object,Microsoft.Azure.Documents.Client.RequestOptions,System.Threading.CancellationToken)">
             <summary>
             Replaces a <see cref="T:Microsoft.Azure.Documents.Document"/> in the Azure Cosmos DB service as an asynchronous operation.
             </summary>
             <param name="documentLink">The link of the document to be updated. E.g. dbs/db_rid/colls/col_rid/docs/doc_rid/ </param>
             <param name="document">The updated <see cref="T:Microsoft.Azure.Documents.Document"/> to replace the existing resource with.</param>
             <param name="options">(Optional) The request options for the request.</param>
             <param name="cancellationToken">(Optional) A <see cref="T:System.Threading.CancellationToken"/> that can be used by other objects or threads to receive notice of cancellation.</param>
             <returns>
             A <see cref="N:System.Threading.Tasks"/> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/> which wraps a <see cref="T:Microsoft.Azure.Documents.Document"/> containing the updated resource record.
             </returns>
             <exception cref="T:System.ArgumentNullException">If either <paramref name="documentLink"/> or <paramref name="document"/> is not set.</exception>
             <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
             <list type="table">
                 <listheader>
                     <term>StatusCode</term><description>Reason for exception</description>
                 </listheader>
                 <item>
                     <term>404</term><description>NotFound - This means the resource you tried to delete did not exist.</description>
                 </item>
             </list>
             </exception>
             <example>
             In this example, instead of using a strongly typed <see cref="T:Microsoft.Azure.Documents.Document"/>, we will work with our own POCO object and not rely on the dynamic nature of the Document class.
             <code language="c#">
             <![CDATA[
             public class MyPoco
             {
                 public string Id {get; set;}
                 public string MyProperty {get; set;}
             }
            
             //Get the doc back as a Document so you have access to doc.SelfLink
             Document doc = client.CreateDocumentQuery<Document>(collectionLink)
                                    .Where(r => r.Id == "doc id")
                                    .AsEnumerable()
                                    .SingleOrDefault();
            
             //Now dynamically cast doc back to your MyPoco
             MyPoco poco = (dynamic)doc;
            
             //Update some properties of the poco object
             poco.MyProperty = "updated value";
            
             //Now persist these changes to the database using doc.SelLink and the update poco object
             Document updated = await client.ReplaceDocumentAsync(doc.SelfLink, poco);
             ]]>
             </code>
             </example>
             <seealso cref="T:Microsoft.Azure.Documents.Document"/>
             <seealso cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>
             <seealso cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/>
             <seealso cref="T:System.Threading.Tasks.Task"/>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.IDocumentClient.ReplaceDocumentAsync(System.Uri,System.Object,Microsoft.Azure.Documents.Client.RequestOptions,System.Threading.CancellationToken)">
            <summary>
            Replaces a document as an asynchronous operation in the Azure Cosmos DB service.
            </summary>
            <param name="documentUri">The URI of the document to be updated.</param>
            <param name="document">The updated document.</param>
            <param name="options">(Optional) The <see cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/> for the request.</param>
            <param name="cancellationToken">(Optional) A <see cref="T:System.Threading.CancellationToken"/> that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>The task object representing the service response for the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.IDocumentClient.ReplaceDocumentAsync(Microsoft.Azure.Documents.Document,Microsoft.Azure.Documents.Client.RequestOptions,System.Threading.CancellationToken)">
             <summary>
             Replaces a <see cref="T:Microsoft.Azure.Documents.Document"/> in the Azure Cosmos DB service as an asynchronous operation.
             </summary>
             <param name="document">The updated <see cref="T:Microsoft.Azure.Documents.Document"/> to replace the existing resource with.</param>
             <param name="options">(Optional) The request options for the request.</param>
             <param name="cancellationToken">(Optional) A <see cref="T:System.Threading.CancellationToken"/> that can be used by other objects or threads to receive notice of cancellation.</param>
             <returns>
             A <see cref="N:System.Threading.Tasks"/> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/> which wraps a <see cref="T:Microsoft.Azure.Documents.Document"/> containing the updated resource record.
             </returns>
             <exception cref="T:System.ArgumentNullException">If <paramref name="document"/> is not set.</exception>
             <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
             <list type="table">
                 <listheader>
                     <term>StatusCode</term><description>Reason for exception</description>
                 </listheader>
                 <item>
                     <term>404</term><description>NotFound - This means the resource you tried to delete did not exist.</description>
                 </item>
             </list>
             </exception>
             <example>
             This example uses <see cref="T:Microsoft.Azure.Documents.Document"/> and takes advantage of the fact that it is a dynamic object and uses SetProperty to dynamically update properties on the document
             <code language="c#">
             <![CDATA[
             //Fetch the Document to be updated
             Document doc = client.CreateDocumentQuery<Document>(collectionLink)
                                         .Where(r => r.Id == "doc id")
                                         .AsEnumerable()
                                         .SingleOrDefault();
            
             //Update some properties on the found resource
             doc.SetPropertyValue("MyProperty", "updated value");
            
             //Now persist these changes to the database by replacing the original resource
             Document updated = await client.ReplaceDocumentAsync(doc);
             ]]>
             </code>
             </example>
             <seealso cref="T:Microsoft.Azure.Documents.Document"/>
             <seealso cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>
             <seealso cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/>
             <seealso cref="T:System.Threading.Tasks.Task"/>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.IDocumentClient.ReplaceStoredProcedureAsync(Microsoft.Azure.Documents.StoredProcedure,Microsoft.Azure.Documents.Client.RequestOptions)">
             <summary>
             Replaces a <see cref="T:Microsoft.Azure.Documents.StoredProcedure"/> in the Azure Cosmos DB service as an asynchronous operation.
             </summary>
             <param name="storedProcedure">The updated <see cref="T:Microsoft.Azure.Documents.StoredProcedure"/> to replace the existing resource with.</param>
             <param name="options">(Optional) The request options for the request.</param>
             <returns>
             A <see cref="N:System.Threading.Tasks"/> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/> which wraps a <see cref="T:Microsoft.Azure.Documents.StoredProcedure"/> containing the updated resource record.
             </returns>
             <exception cref="T:System.ArgumentNullException">If <paramref name="storedProcedure"/> is not set.</exception>
             <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
             <list type="table">
                 <listheader>
                     <term>StatusCode</term><description>Reason for exception</description>
                 </listheader>
                 <item>
                     <term>404</term><description>NotFound - This means the resource you tried to delete did not exist.</description>
                 </item>
             </list>
             </exception>
             <example>
             <code language="c#">
             <![CDATA[
             //Fetch the resource to be updated
             StoredProcedure sproc = client.CreateStoredProcedureQuery(sprocsLink)
                                              .Where(r => r.Id == "sproc id")
                                              .AsEnumerable()
                                              .SingleOrDefault();
            
             //Update some properties on the found resource
             sproc.Body = "function () {new javascript body for sproc}";
            
             //Now persist these changes to the database by replacing the original resource
             StoredProcedure updated = await client.ReplaceStoredProcedureAsync(sproc);
             ]]>
             </code>
             </example>
             <seealso cref="T:Microsoft.Azure.Documents.StoredProcedure"/>
             <seealso cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>
             <seealso cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/>
             <seealso cref="T:System.Threading.Tasks.Task"/>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.IDocumentClient.ReplaceStoredProcedureAsync(System.Uri,Microsoft.Azure.Documents.StoredProcedure,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Replace the specified stored procedure in the Azure Cosmos DB service.
            </summary>
            <param name="storedProcedureUri">The URI for the stored procedure to be updated.</param>
            <param name="storedProcedure">The updated stored procedure.</param>
            <param name="options">(Optional) The <see cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/> for the request.</param>
            <returns>The task object representing the service response for the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.IDocumentClient.ReplaceTriggerAsync(Microsoft.Azure.Documents.Trigger,Microsoft.Azure.Documents.Client.RequestOptions)">
             <summary>
             Replaces a <see cref="T:Microsoft.Azure.Documents.Trigger"/> in the Azure Cosmos DB service as an asynchronous operation.
             </summary>
             <param name="trigger">The updated <see cref="T:Microsoft.Azure.Documents.Trigger"/> to replace the existing resource with.</param>
             <param name="options">(Optional) The request options for the request.</param>
             <returns>
             A <see cref="N:System.Threading.Tasks"/> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/> which wraps a <see cref="T:Microsoft.Azure.Documents.Trigger"/> containing the updated resource record.
             </returns>
             <exception cref="T:System.ArgumentNullException">If <paramref name="trigger"/> is not set.</exception>
             <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
             <list type="table">
                 <listheader>
                     <term>StatusCode</term><description>Reason for exception</description>
                 </listheader>
                 <item>
                     <term>404</term><description>NotFound - This means the resource you tried to delete did not exist.</description>
                 </item>
             </list>
             </exception>
             <example>
             <code language="c#">
             <![CDATA[
             //Fetch the resource to be updated
             Trigger trigger = client.CreateTriggerQuery(sprocsLink)
                                           .Where(r => r.Id == "trigger id")
                                           .AsEnumerable()
                                           .SingleOrDefault();
            
             //Update some properties on the found resource
             trigger.Body = "function () {new javascript body for trigger}";
            
             //Now persist these changes to the database by replacing the original resource
             Trigger updated = await client.ReplaceTriggerAsync(sproc);
             ]]>
             </code>
             </example>
             <seealso cref="T:Microsoft.Azure.Documents.Trigger"/>
             <seealso cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>
             <seealso cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/>
             <seealso cref="T:System.Threading.Tasks.Task"/>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.IDocumentClient.ReplaceTriggerAsync(System.Uri,Microsoft.Azure.Documents.Trigger,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Replaces a trigger as an asynchronous operation in the Azure Cosmos DB service.
            </summary>
            <param name="triggerUri">The URI for the trigger to be updated.</param>
            <param name="trigger">The updated trigger.</param>
            <param name="options">(Optional) The <see cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/> for the request.</param>
            <returns>The task object representing the service response for the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.IDocumentClient.ReplaceUserDefinedFunctionAsync(Microsoft.Azure.Documents.UserDefinedFunction,Microsoft.Azure.Documents.Client.RequestOptions)">
             <summary>
             Replaces a <see cref="T:Microsoft.Azure.Documents.UserDefinedFunction"/> in the Azure Cosmos DB service as an asynchronous operation.
             </summary>
             <param name="function">The updated <see cref="T:Microsoft.Azure.Documents.UserDefinedFunction"/> to replace the existing resource with.</param>
             <param name="options">(Optional) The request options for the request.</param>
             <returns>
             A <see cref="N:System.Threading.Tasks"/> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/> which wraps a <see cref="T:Microsoft.Azure.Documents.UserDefinedFunction"/> containing the updated resource record.
             </returns>
             <exception cref="T:System.ArgumentNullException">If <paramref name="function"/> is not set.</exception>
             <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
             <list type="table">
                 <listheader>
                     <term>StatusCode</term><description>Reason for exception</description>
                 </listheader>
                 <item>
                     <term>404</term><description>NotFound - This means the resource you tried to delete did not exist.</description>
                 </item>
             </list>
             </exception>
             <example>
             <code language="c#">
             <![CDATA[
             //Fetch the resource to be updated
             UserDefinedFunction udf = client.CreateUserDefinedFunctionQuery(functionsLink)
                                                 .Where(r => r.Id == "udf id")
                                                 .AsEnumerable()
                                                 .SingleOrDefault();
            
             //Update some properties on the found resource
             udf.Body = "function () {new javascript body for udf}";
            
             //Now persist these changes to the database by replacing the original resource
             UserDefinedFunction updated = await client.ReplaceUserDefinedFunctionAsync(udf);
             ]]>
             </code>
             </example>
             <seealso cref="T:Microsoft.Azure.Documents.UserDefinedFunction"/>
             <seealso cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>
             <seealso cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/>
             <seealso cref="T:System.Threading.Tasks.Task"/>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.IDocumentClient.ReplaceUserDefinedFunctionAsync(System.Uri,Microsoft.Azure.Documents.UserDefinedFunction,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Replaces a user defined function as an asynchronous operation in the Azure Cosmos DB service.
            </summary>
            <param name="userDefinedFunctionUri">The URI for the user defined function to be updated.</param>
            <param name="function">The updated user defined function.</param>
            <param name="options">(Optional) The <see cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/> for the request.</param>
            <returns>The task object representing the service response for the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.IDocumentClient.ReplaceOfferAsync(Microsoft.Azure.Documents.Offer)">
             <summary>
             Replaces a <see cref="T:Microsoft.Azure.Documents.Offer"/> in the Azure Cosmos DB service as an asynchronous operation.
             </summary>
             <param name="offer">The updated <see cref="T:Microsoft.Azure.Documents.Offer"/> to replace the existing resource with.</param>
             <returns>
             A <see cref="N:System.Threading.Tasks"/> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/> which wraps a <see cref="T:Microsoft.Azure.Documents.Offer"/> containing the updated resource record.
             </returns>
             <exception cref="T:System.ArgumentNullException">If <paramref name="offer"/> is not set.</exception>
             <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
             <list type="table">
                 <listheader>
                     <term>StatusCode</term><description>Reason for exception</description>
                 </listheader>
                 <item>
                     <term>404</term><description>NotFound - This means the resource you tried to delete did not exist.</description>
                 </item>
             </list>
             </exception>
             <example>
             <code language="c#">
             <![CDATA[
             //Fetch the resource to be updated
             Offer offer = client.CreateOfferQuery()
                                      .Where(r => r.ResourceLink == "collection selfLink")
                                      .AsEnumerable()
                                      .SingleOrDefault();
            
             //Change the user mode to All
             offer.OfferType = "S3";
            
             //Now persist these changes to the database by replacing the original resource
             Offer updated = await client.ReplaceOfferAsync(offer);
             ]]>
             </code>
             </example>
             <seealso cref="T:Microsoft.Azure.Documents.Offer"/>
             <seealso cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>
             <seealso cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/>
             <seealso cref="T:System.Threading.Tasks.Task"/>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.IDocumentClient.ReadDatabaseAsync(System.String,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Reads a <see cref="T:Microsoft.Azure.Cosmos.Database"/> from the Azure Cosmos DB service as an asynchronous operation.
            </summary>
            <param name="databaseLink">The link of the Database resource to be read.</param>
            <param name="options">(Optional) The request options for the request.</param>
            <returns>
            A <see cref="N:System.Threading.Tasks"/> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/> which wraps a <see cref="T:Microsoft.Azure.Cosmos.Database"/> containing the read resource record.
            </returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="databaseLink"/> is not set.</exception>
            <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
            <list type="table">
                <listheader>
                    <term>StatusCode</term><description>Reason for exception</description>
                </listheader>
                <item>
                    <term>404</term><description>NotFound - This means the resource you tried to read did not exist.</description>
                </item>
                <item>
                    <term>429</term><description>TooManyRequests - This means you have exceeded the number of request units per second. Consult the DocumentClientException.RetryAfter value to see how long you should wait before retrying this operation.</description>
                </item>
            </list>
            </exception>
            <example>
            <code language="c#">
            <![CDATA[
            //Reads a Database resource where
            // - database_id is the ID property of the Database resource you wish to read.
            var dbLink = "/dbs/database_id";
            Database database = await client.ReadDatabaseAsync(dbLink);
            ]]>
            </code>
            </example>
            <remarks>
            <para>
            Doing a read of a resource is the most efficient way to get a resource from the Database. If you know the resource's ID, do a read instead of a query by ID.
            </para>
            <para>
            The example shown uses ID-based links, where the link is composed of the ID properties used when the resources were created.
            You can still use the <see cref="P:Microsoft.Azure.Documents.Resource.SelfLink"/> property of the Database if you prefer. A self-link is a URI for a resource that is made up of Resource Identifiers  (or the _rid properties).
            ID-based links and SelfLink will both work.
            The format for <paramref name="databaseLink"/> is always "/dbs/{db identifier}" only
            the values within the {} change depending on which method you wish to use to address the resource.
            </para>
            </remarks>
            <seealso cref="T:Microsoft.Azure.Cosmos.Database"/>
            <seealso cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>
            <seealso cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/>
            <seealso cref="T:System.Threading.Tasks.Task"/>
            <seealso cref="T:System.Uri"/>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.IDocumentClient.ReadDatabaseAsync(System.Uri,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Reads a <see cref="T:Microsoft.Azure.Cosmos.Database"/> as an asynchronous operation from the Azure Cosmos DB service.
            </summary>
            <param name="databaseUri">A URI to the Database resource to be read.</param>
            <param name="options">The request options for the request.</param>
            <returns>
            A <see cref="N:System.Threading.Tasks"/> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/> which wraps a <see cref="T:Microsoft.Azure.Cosmos.Database"/> containing the read resource record.
            </returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="databaseUri"/> is not set.</exception>
            <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
            <list type="table">
                <listheader>
                    <term>StatusCode</term><description>Reason for exception</description>
                </listheader>
                <item>
                    <term>404</term><description>NotFound - This means the resource you tried to read did not exist.</description>
                </item>
                <item>
                    <term>429</term><description>TooManyRequests - This means you have exceeded the number of request units per second. Consult the DocumentClientException.RetryAfter value to see how long you should wait before retrying this operation.</description>
                </item>
            </list>
            </exception>
            <example>
            <code language="c#">
            <![CDATA[
            //Reads a Database resource where 
            // - db_id is the ID property of the Database you wish to read. 
            var dbLink = UriFactory.CreateDatabaseUri("db_id");
            Database database = await client.ReadDatabaseAsync(dbLink);
            ]]>
            </code>
            </example>
            <remarks>
            <para>
            Doing a read of a resource is the most efficient way to get a resource from the service. If you know the resource's ID, do a read instead of a query by ID.
            </para>
            </remarks>
            <seealso cref="T:Microsoft.Azure.Documents.Database"/> 
            <seealso cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>
            <seealso cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/>
            <seealso cref="T:System.Threading.Tasks.Task"/>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.IDocumentClient.ReadDocumentCollectionAsync(System.String,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Reads a <see cref="T:Microsoft.Azure.Documents.DocumentCollection"/> from the Azure Cosmos DB service as an asynchronous operation.
            </summary>
            <param name="documentCollectionLink">The link for the DocumentCollection to be read.</param>
            <param name="options">(Optional) The request options for the request.</param>
            <returns>
            A <see cref="N:System.Threading.Tasks"/> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/> which wraps a <see cref="T:Microsoft.Azure.Documents.DocumentCollection"/> containing the read resource record.
            </returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="documentCollectionLink"/> is not set.</exception>
            <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
            <list type="table">
                <listheader>
                    <term>StatusCode</term><description>Reason for exception</description>
                </listheader>
                <item>
                    <term>404</term><description>NotFound - This means the resource you tried to read did not exist.</description>
                </item>
                <item>
                    <term>429</term><description>TooManyRequests - This means you have exceeded the number of request units per second. Consult the DocumentClientException.RetryAfter value to see how long you should wait before retrying this operation.</description>
                </item>
            </list>
            </exception>
            <example>
            <code language="c#">
            <![CDATA[
            //This reads a DocumentCollection record from a database where
            // - sample_database is the ID of the database
            // - collection_id is the ID of the collection resource to be read
            var collLink = "/dbs/sample_database/colls/collection_id";
            DocumentCollection coll = await client.ReadDocumentCollectionAsync(collLink);
            ]]>
            </code>
            </example>
            <remarks>
            <para>
            Doing a read of a resource is the most efficient way to get a resource from the Database. If you know the resource's ID, do a read instead of a query by ID.
            </para>
            <para>
            The example shown uses ID-based links, where the link is composed of the ID properties used when the resources were created.
            You can still use the <see cref="P:Microsoft.Azure.Documents.Resource.SelfLink"/> property of the DocumentCollection if you prefer. A self-link is a URI for a resource that is made up of Resource Identifiers  (or the _rid properties).
            ID-based links and SelfLink will both work.
            The format for <paramref name="documentCollectionLink"/> is always "/dbs/{db identifier}/colls/{coll identifier}" only
            the values within the {} change depending on which method you wish to use to address the resource.
            </para>
            </remarks>
            <seealso cref="T:Microsoft.Azure.Documents.DocumentCollection"/>
            <seealso cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>
            <seealso cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/>
            <seealso cref="T:System.Threading.Tasks.Task"/>
            <seealso cref="T:System.Uri"/>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.IDocumentClient.ReadDocumentCollectionAsync(System.Uri,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Reads a <see cref="T:Microsoft.Azure.Documents.DocumentCollection"/> as an asynchronous operation from the Azure Cosmos DB service.
            </summary>
            <param name="documentCollectionUri">A URI to the DocumentCollection resource to be read.</param>
            <param name="options">The request options for the request.</param>
            <returns>
            A <see cref="N:System.Threading.Tasks"/> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/> which wraps a <see cref="T:Microsoft.Azure.Documents.DocumentCollection"/> containing the read resource record.
            </returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="documentCollectionUri"/> is not set.</exception>
            <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
            <list type="table">
                <listheader>
                    <term>StatusCode</term><description>Reason for exception</description>
                </listheader>
                <item>
                    <term>404</term><description>NotFound - This means the resource you tried to read did not exist.</description>
                </item>
                <item>
                    <term>429</term><description>TooManyRequests - This means you have exceeded the number of request units per second. Consult the DocumentClientException.RetryAfter value to see how long you should wait before retrying this operation.</description>
                </item>
            </list>
            </exception>
            <example>
            <code language="c#">
            <![CDATA[
            //Reads a Document resource where 
            // - db_id is the ID property of the Database
            // - coll_id is the ID property of the DocumentCollection you wish to read. 
            var collLink = UriFactory.CreateCollectionUri("db_id", "coll_id");
            DocumentCollection coll = await client.ReadDocumentCollectionAsync(collLink);
            ]]>
            </code>
            </example>
            <remarks>
            <para>
            Doing a read of a resource is the most efficient way to get a resource from the service. If you know the resource's ID, do a read instead of a query by ID.
            </para>
            </remarks>
            <seealso cref="T:Microsoft.Azure.Documents.DocumentCollection"/> 
            <seealso cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>
            <seealso cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/>
            <seealso cref="T:System.Threading.Tasks.Task"/>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.IDocumentClient.ReadDocumentAsync(System.String,Microsoft.Azure.Documents.Client.RequestOptions,System.Threading.CancellationToken)">
            <summary>
            Reads a <see cref="T:Microsoft.Azure.Documents.Document"/> from the Azure Cosmos DB service as an asynchronous operation.
            </summary>
            <param name="documentLink">The link for the document to be read.</param>
            <param name="options">(Optional) The request options for the request.</param>
            <param name="cancellationToken">(Optional) A <see cref="T:System.Threading.CancellationToken"/> that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>
            A <see cref="N:System.Threading.Tasks"/> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/> which wraps a <see cref="T:Microsoft.Azure.Documents.Document"/> containing the read resource record.
            </returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="documentLink"/> is not set.</exception>
            <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
            <list type="table">
                <listheader>
                    <term>StatusCode</term><description>Reason for exception</description>
                </listheader>
                <item>
                    <term>404</term><description>NotFound - This means the resource you tried to read did not exist.</description>
                </item>
                <item>
                    <term>429</term><description>TooManyRequests - This means you have exceeded the number of request units per second. Consult the DocumentClientException.RetryAfter value to see how long you should wait before retrying this operation.</description>
                </item>
            </list>
            </exception>
            <example>
            <code language="c#">
            <![CDATA[
            //This reads a document record from a database & collection where
            // - sample_database is the ID of the database
            // - sample_collection is the ID of the collection
            // - document_id is the ID of the document resource
            var docLink = "dbs/sample_database/colls/sample_collection/docs/document_id";
            Document doc = await client.ReadDocumentAsync(docLink);
            ]]>
            </code>
            </example>
            <remarks>
            <para>
            Doing a read of a resource is the most efficient way to get a resource from the Database. If you know the resource's ID, do a read instead of a query by ID.
            </para>
            <para>
            The example shown uses ID-based links, where the link is composed of the ID properties used when the resources were created.
            You can still use the <see cref="P:Microsoft.Azure.Documents.Resource.SelfLink"/> property of the Document if you prefer. A self-link is a URI for a resource that is made up of Resource Identifiers  (or the _rid properties).
            ID-based links and SelfLink will both work.
            The format for <paramref name="documentLink"/> is always "dbs/{db identifier}/colls/{coll identifier}/docs/{doc identifier}" only
            the values within the {} change depending on which method you wish to use to address the resource.
            </para>
            </remarks>
            <seealso cref="T:Microsoft.Azure.Documents.Document"/>
            <seealso cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>
            <seealso cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/>
            <seealso cref="T:System.Threading.Tasks.Task"/>
            <seealso cref="T:System.Uri"/>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.IDocumentClient.ReadDocumentAsync(System.Uri,Microsoft.Azure.Documents.Client.RequestOptions,System.Threading.CancellationToken)">
            <summary>
            Reads a <see cref="T:Microsoft.Azure.Documents.Document"/> as an asynchronous operation from the Azure Cosmos DB service.
            </summary>
            <param name="documentUri">A URI to the Document resource to be read.</param>
            <param name="options">The request options for the request.</param>
            <param name="cancellationToken">(Optional) A <see cref="T:System.Threading.CancellationToken"/> that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>
            A <see cref="N:System.Threading.Tasks"/> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/> which wraps a <see cref="T:Microsoft.Azure.Documents.Document"/> containing the read resource record.
            </returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="documentUri"/> is not set.</exception>
            <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when reading a Document are:
            <list type="table">
                <listheader>
                    <term>StatusCode</term><description>Reason for exception</description>
                </listheader>
                <item>
                    <term>404</term><description>NotFound - This means the resource you tried to read did not exist.</description>
                </item>
                <item>
                    <term>429</term><description>TooManyRequests - This means you have exceeded the number of request units per second. Consult the DocumentClientException.RetryAfter value to see how long you should wait before retrying this operation.</description>
                </item>
            </list>
            </exception>
            <example>
            <code language="c#">
            <![CDATA[
            //Reads a Document resource where 
            // - db_id is the ID property of the Database
            // - coll_id is the ID property of the DocumentCollection
            // - doc_id is the ID property of the Document you wish to read. 
            var docUri = UriFactory.CreateDocumentUri("db_id", "coll_id", "doc_id");
            Document document = await client.ReadDocumentAsync(docUri);
            ]]>
            </code>
            </example>
            <remarks>
            <para>
            Doing a read of a resource is the most efficient way to get a resource from the service. If you know the resource's ID, do a read instead of a query by ID.
            </para>
            </remarks>
            <seealso cref="T:Microsoft.Azure.Documents.Document"/> 
            <seealso cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>
            <seealso cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/>
            <seealso cref="T:System.Threading.Tasks.Task"/>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.IDocumentClient.ReadDocumentAsync``1(System.String,Microsoft.Azure.Documents.Client.RequestOptions,System.Threading.CancellationToken)">
            <summary>
            Reads a <see cref="T:Microsoft.Azure.Documents.Document"/> as a generic type T from the Azure Cosmos DB service as an asynchronous operation.
            </summary>
            <param name="documentLink">The link for the document to be read.</param>
            <param name="options">(Optional) The request options for the request.</param>
            <param name="cancellationToken">(Optional) A <see cref="T:System.Threading.CancellationToken"/> that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>
            A <see cref="N:System.Threading.Tasks"/> containing a <see cref="T:Microsoft.Azure.Documents.Client.DocumentResponse`1"/> which wraps a <see cref="T:Microsoft.Azure.Documents.Document"/> containing the read resource record.
            </returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="documentLink"/> is not set.</exception>
            <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
            <list type="table">
                <listheader>
                    <term>StatusCode</term><description>Reason for exception</description>
                </listheader>
                <item>
                    <term>404</term><description>NotFound - This means the resource you tried to read did not exist.</description>
                </item>
                <item>
                    <term>429</term><description>TooManyRequests - This means you have exceeded the number of request units per second. Consult the DocumentClientException.RetryAfter value to see how long you should wait before retrying this operation.</description>
                </item>
            </list>
            </exception>
            <example>
            <code language="c#">
            <![CDATA[
            //This reads a document record from a database & collection where
            // - sample_database is the ID of the database
            // - sample_collection is the ID of the collection
            // - document_id is the ID of the document resource
            var docLink = "dbs/sample_database/colls/sample_collection/docs/document_id";
            Customer customer = await client.ReadDocumentAsync<Customer>(docLink);
            ]]>
            </code>
            </example>
            <remarks>
            <para>
            Doing a read of a resource is the most efficient way to get a resource from the Database. If you know the resource's ID, do a read instead of a query by ID.
            </para>
            <para>
            The example shown uses ID-based links, where the link is composed of the ID properties used when the resources were created.
            You can still use the <see cref="P:Microsoft.Azure.Documents.Resource.SelfLink"/> property of the Document if you prefer. A self-link is a URI for a resource that is made up of Resource Identifiers  (or the _rid properties).
            ID-based links and SelfLink will both work.
            The format for <paramref name="documentLink"/> is always "dbs/{db identifier}/colls/{coll identifier}/docs/{doc identifier}" only
            the values within the {} change depending on which method you wish to use to address the resource.
            </para>
            </remarks>
            <seealso cref="T:Microsoft.Azure.Documents.Document"/>
            <seealso cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>
            <seealso cref="T:Microsoft.Azure.Documents.Client.DocumentResponse`1"/>
            <seealso cref="T:System.Threading.Tasks.Task"/>
            <seealso cref="T:System.Uri"/>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.IDocumentClient.ReadDocumentAsync``1(System.Uri,Microsoft.Azure.Documents.Client.RequestOptions,System.Threading.CancellationToken)">
            <summary>
            Reads a <see cref="T:Microsoft.Azure.Documents.Document"/> as a generic type T from the Azure Cosmos DB service as an asynchronous operation.
            </summary>
            <param name="documentUri">A URI to the Document resource to be read.</param>
            <param name="options">The request options for the request.</param>
            <param name="cancellationToken">(Optional) A <see cref="T:System.Threading.CancellationToken"/> that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>
            A <see cref="N:System.Threading.Tasks"/> containing a <see cref="T:Microsoft.Azure.Documents.Client.DocumentResponse`1"/> which wraps a <see cref="T:Microsoft.Azure.Documents.Document"/> containing the read resource record.
            </returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="documentUri"/> is not set.</exception>
            <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when reading a Document are:
            <list type="table">
                <listheader>
                    <term>StatusCode</term><description>Reason for exception</description>
                </listheader>
                <item>
                    <term>404</term><description>NotFound - This means the resource you tried to read did not exist.</description>
                </item>
                <item>
                    <term>429</term><description>TooManyRequests - This means you have exceeded the number of request units per second. Consult the DocumentClientException.RetryAfter value to see how long you should wait before retrying this operation.</description>
                </item>
            </list>
            </exception>
            <example>
            <code language="c#">
            <![CDATA[
            //Reads a Document resource where 
            // - db_id is the ID property of the Database
            // - coll_id is the ID property of the DocumentCollection
            // - doc_id is the ID property of the Document you wish to read. 
            var docUri = UriFactory.CreateDocumentUri("db_id", "coll_id", "doc_id");
            Customer customer = await client.ReadDocumentAsync<Customer>(docUri);
            ]]>
            </code>
            </example>
            <remarks>
            <para>
            Doing a read of a resource is the most efficient way to get a resource from the service. If you know the resource's ID, do a read instead of a query by ID.
            </para>
            </remarks>
            <seealso cref="T:Microsoft.Azure.Documents.Document"/> 
            <seealso cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>
            <seealso cref="T:Microsoft.Azure.Documents.Client.DocumentResponse`1"/>
            <seealso cref="T:System.Threading.Tasks.Task"/>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.IDocumentClient.ReadStoredProcedureAsync(System.String,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Reads a <see cref="T:Microsoft.Azure.Documents.StoredProcedure"/> from the Azure Cosmos DB service as an asynchronous operation.
            </summary>
            <param name="storedProcedureLink">The link of the stored procedure to be read.</param>
            <param name="options">(Optional) The request options for the request.</param>
            <returns>
            A <see cref="N:System.Threading.Tasks"/> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/> which wraps a <see cref="T:Microsoft.Azure.Documents.StoredProcedure"/> containing the read resource record.
            </returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="storedProcedureLink"/> is not set.</exception>
            <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
            <list type="table">
                <listheader>
                    <term>StatusCode</term><description>Reason for exception</description>
                </listheader>
                <item>
                    <term>404</term><description>NotFound - This means the resource you tried to read did not exist.</description>
                </item>
                <item>
                    <term>429</term><description>TooManyRequests - This means you have exceeded the number of request units per second. Consult the DocumentClientException.RetryAfter value to see how long you should wait before retrying this operation.</description>
                </item>
            </list>
            </exception>
            <example>
            <code language="c#">
            <![CDATA[
            //Reads a StoredProcedure from a Database and DocumentCollection where
            // - sample_database is the ID of the database
            // - sample_collection is the ID of the collection
            // - sproc_id is the ID of the stored procedure to be read
            var sprocLink = "/dbs/sample_database/colls/sample_collection/sprocs/sproc_id";
            StoredProcedure sproc = await client.ReadStoredProcedureAsync(sprocLink);
            ]]>
            </code>
            </example>
            <remarks>
            <para>
            Doing a read of a resource is the most efficient way to get a resource from the Database. If you know the resource's ID, do a read instead of a query by ID.
            </para>
            <para>
            The example shown uses ID-based links, where the link is composed of the ID properties used when the resources were created.
            You can still use the <see cref="P:Microsoft.Azure.Documents.Resource.SelfLink"/> property of the Stored Procedure if you prefer. A self-link is a URI for a resource that is made up of Resource Identifiers  (or the _rid properties).
            ID-based links and SelfLink will both work.
            The format for <paramref name="storedProcedureLink"/> is always "/dbs/{db identifier}/colls/{coll identifier}/sprocs/{sproc identifier}"
            only the values within the {...} change depending on which method you wish to use to address the resource.
            </para>
            </remarks>
            <seealso cref="T:Microsoft.Azure.Documents.StoredProcedure"/>
            <seealso cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>
            <seealso cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/>
            <seealso cref="T:System.Threading.Tasks.Task"/>
            <seealso cref="T:System.Uri"/>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.IDocumentClient.ReadStoredProcedureAsync(System.Uri,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Reads a <see cref="T:Microsoft.Azure.Documents.StoredProcedure"/> as an asynchronous operation from the Azure Cosmos DB service.
            </summary>
            <param name="storedProcedureUri">A URI to the StoredProcedure resource to be read.</param>
            <param name="options">The request options for the request.</param>
            <returns>
            A <see cref="N:System.Threading.Tasks"/> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/> which wraps a <see cref="T:Microsoft.Azure.Documents.StoredProcedure"/> containing the read resource record.
            </returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="storedProcedureUri"/> is not set.</exception>
            <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
            <list type="table">
                <listheader>
                    <term>StatusCode</term><description>Reason for exception</description>
                </listheader>
                <item>
                    <term>404</term><description>NotFound - This means the resource you tried to read did not exist.</description>
                </item>
                <item>
                    <term>429</term><description>TooManyRequests - This means you have exceeded the number of request units per second. Consult the DocumentClientException.RetryAfter value to see how long you should wait before retrying this operation.</description>
                </item>
            </list>
            </exception>
            <example>
            <code language="c#">
            <![CDATA[
            //Reads a StoredProcedure resource where 
            // - db_id is the ID property of the Database
            // - coll_id is the ID property of the DocumentCollection 
            // - sproc_id is the ID property of the StoredProcedure you wish to read. 
            var sprocLink = UriFactory.CreateStoredProcedureUri("db_id", "coll_id", "sproc_id");
            StoredProcedure sproc = await client.ReadStoredProcedureAsync(sprocLink);
            ]]>
            </code>
            </example>
            <remarks>
            <para>
            Doing a read of a resource is the most efficient way to get a resource from the service. If you know the resource's ID, do a read instead of a query by ID.
            </para>
            </remarks>
            <seealso cref="T:Microsoft.Azure.Documents.StoredProcedure"/> 
            <seealso cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>
            <seealso cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/>
            <seealso cref="T:System.Threading.Tasks.Task"/>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.IDocumentClient.ReadTriggerAsync(System.String,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Reads a <see cref="T:Microsoft.Azure.Documents.Trigger"/> from the Azure Cosmos DB service as an asynchronous operation.
            </summary>
            <param name="triggerLink">The link to the Trigger to be read.</param>
            <param name="options">(Optional) The request options for the request.</param>
            <returns>
            A <see cref="N:System.Threading.Tasks"/> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/> which wraps a <see cref="T:Microsoft.Azure.Documents.Trigger"/> containing the read resource record.
            </returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="triggerLink"/> is not set.</exception>
            <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
            <list type="table">
                <listheader>
                    <term>StatusCode</term><description>Reason for exception</description>
                </listheader>
                <item>
                    <term>404</term><description>NotFound - This means the resource you tried to read did not exist.</description>
                </item>
                <item>
                    <term>429</term><description>TooManyRequests - This means you have exceeded the number of request units per second. Consult the DocumentClientException.RetryAfter value to see how long you should wait before retrying this operation.</description>
                </item>
            </list>
            </exception>
            <example>
            <code language="c#">
            <![CDATA[
            //Reads a Trigger from a Database and DocumentCollection where
            // - sample_database is the ID of the database
            // - sample_collection is the ID of the collection
            // - trigger_id is the ID of the trigger to be read
            var triggerLink = "/dbs/sample_database/colls/sample_collection/triggers/trigger_id";
            Trigger trigger = await client.ReadTriggerAsync(triggerLink);
            ]]>
            </code>
            </example>
            <remarks>
            <para>
            Doing a read of a resource is the most efficient way to get a resource from the Database. If you know the resource's ID, do a read instead of a query by ID.
            </para>
            <para>
            The example shown uses ID-based links, where the link is composed of the ID properties used when the resources were created.
            You can still use the <see cref="P:Microsoft.Azure.Documents.Resource.SelfLink"/> property of the Trigger if you prefer. A self-link is a URI for a resource that is made up of Resource Identifiers  (or the _rid properties).
            ID-based links and SelfLink will both work.
            The format for <paramref name="triggerLink"/> is always "/dbs/{db identifier}/colls/{coll identifier}/triggers/{trigger identifier}"
            only the values within the {...} change depending on which method you wish to use to address the resource.
            </para>
            </remarks>
            <seealso cref="T:Microsoft.Azure.Documents.Trigger"/>
            <seealso cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>
            <seealso cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/>
            <seealso cref="T:System.Threading.Tasks.Task"/>
            <seealso cref="T:System.Uri"/>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.IDocumentClient.ReadTriggerAsync(System.Uri,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Reads a <see cref="T:Microsoft.Azure.Documents.Trigger"/> as an asynchronous operation from the Azure Cosmos DB service.
            </summary>
            <param name="triggerUri">A URI to the Trigger resource to be read.</param>
            <param name="options">The request options for the request.</param>
            <returns>
            A <see cref="N:System.Threading.Tasks"/> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/> which wraps a <see cref="T:Microsoft.Azure.Documents.Trigger"/> containing the read resource record.
            </returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="triggerUri"/> is not set.</exception>
            <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
            <list type="table">
                <listheader>
                    <term>StatusCode</term><description>Reason for exception</description>
                </listheader>
                <item>
                    <term>404</term><description>NotFound - This means the resource you tried to read did not exist.</description>
                </item>
                <item>
                    <term>429</term><description>TooManyRequests - This means you have exceeded the number of request units per second. Consult the DocumentClientException.RetryAfter value to see how long you should wait before retrying this operation.</description>
                </item>
            </list>
            </exception>
            <example>
            <code language="c#">
            <![CDATA[
            //Reads a Trigger resource where 
            // - db_id is the ID property of the Database
            // - coll_id is the ID property of the DocumentCollection 
            // - trigger_id is the ID property of the Trigger you wish to read. 
            var triggerLink = UriFactory.CreateTriggerUri("db_id", "coll_id", "trigger_id");
            Trigger trigger = await client.ReadTriggerAsync(triggerLink);
            ]]>
            </code>
            </example>
            <remarks>
            <para>
            Doing a read of a resource is the most efficient way to get a resource from the service. If you know the resource's ID, do a read instead of a query by ID.
            </para>
            </remarks>
            <seealso cref="T:Microsoft.Azure.Documents.Trigger"/> 
            <seealso cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>
            <seealso cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/>
            <seealso cref="T:System.Threading.Tasks.Task"/>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.IDocumentClient.ReadUserDefinedFunctionAsync(System.String,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Reads a <see cref="T:Microsoft.Azure.Documents.UserDefinedFunction"/> from the Azure Cosmos DB service as an asynchronous operation.
            </summary>
            <param name="functionLink">The link to the User Defined Function to be read.</param>
            <param name="options">(Optional) The request options for the request.</param>
            <returns>
            A <see cref="N:System.Threading.Tasks"/> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/> which wraps a <see cref="T:Microsoft.Azure.Documents.UserDefinedFunction"/> containing the read resource record.
            </returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="functionLink"/> is not set.</exception>
            <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
            <list type="table">
                <listheader>
                    <term>StatusCode</term><description>Reason for exception</description>
                </listheader>
                <item>
                    <term>404</term><description>NotFound - This means the resource you tried to read did not exist.</description>
                </item>
                <item>
                    <term>429</term><description>TooManyRequests - This means you have exceeded the number of request units per second. Consult the DocumentClientException.RetryAfter value to see how long you should wait before retrying this operation.</description>
                </item>
            </list>
            </exception>
            <example>
            <code language="c#">
            <![CDATA[
            //Reads a User Defined Function from a Database and DocumentCollection where
            // - sample_database is the ID of the database
            // - sample_collection is the ID of the collection
            // - udf_id is the ID of the user-defined function to be read
            var udfLink = "/dbs/sample_database/colls/sample_collection/udfs/udf_id";
            UserDefinedFunction udf = await client.ReadUserDefinedFunctionAsync(udfLink);
            ]]>
            </code>
            </example>
            <remarks>
            <para>
            Doing a read of a resource is the most efficient way to get a resource from the Database. If you know the resource's ID, do a read instead of a query by ID.
            </para>
            <para>
            The example shown uses ID-based links, where the link is composed of the ID properties used when the resources were created.
            You can still use the <see cref="P:Microsoft.Azure.Documents.Resource.SelfLink"/> property of the User Defined Function if you prefer. A self-link is a URI for a resource that is made up of Resource Identifiers  (or the _rid properties).
            ID-based links and SelfLink will both work.
            The format for <paramref name="functionLink"/> is always "/dbs/{db identifier}/colls/{coll identifier}/udfs/{udf identifier}"
            only the values within the {...} change depending on which method you wish to use to address the resource.
            </para>
            </remarks>
            <seealso cref="T:Microsoft.Azure.Documents.UserDefinedFunction"/>
            <seealso cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>
            <seealso cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/>
            <seealso cref="T:System.Threading.Tasks.Task"/>
            <seealso cref="T:System.Uri"/>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.IDocumentClient.ReadUserDefinedFunctionAsync(System.Uri,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Reads a <see cref="T:Microsoft.Azure.Documents.UserDefinedFunction"/> as an asynchronous operation from the Azure Cosmos DB service.
            </summary>
            <param name="functionUri">A URI to the User Defined Function resource to be read.</param>
            <param name="options">The request options for the request.</param>
            <returns>
            A <see cref="N:System.Threading.Tasks"/> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/> which wraps a <see cref="T:Microsoft.Azure.Documents.UserDefinedFunction"/> containing the read resource record.
            </returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="functionUri"/> is not set.</exception>
            <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
            <list type="table">
                <listheader>
                    <term>StatusCode</term><description>Reason for exception</description>
                </listheader>
                <item>
                    <term>404</term><description>NotFound - This means the resource you tried to read did not exist.</description>
                </item>
                <item>
                    <term>429</term><description>TooManyRequests - This means you have exceeded the number of request units per second. Consult the DocumentClientException.RetryAfter value to see how long you should wait before retrying this operation.</description>
                </item>
            </list>
            </exception>
            <example>
            <code language="c#">
            <![CDATA[
            //Reads a UserDefinedFunction resource where 
            // - db_id is the ID property of the Database
            // - coll_id is the ID property of the DocumentCollection 
            // - udf_id is the ID property of the UserDefinedFunction you wish to read. 
            var udfLink = UriFactory.CreateUserDefinedFunctionUri("db_id", "coll_id", "udf_id");
            UserDefinedFunction udf = await client.ReadUserDefinedFunctionAsync(udfLink);
            ]]>
            </code>
            </example>
            <remarks>
            <para>
            Doing a read of a resource is the most efficient way to get a resource from the service. If you know the resource's ID, do a read instead of a query by ID.
            </para>
            </remarks>
            <seealso cref="T:Microsoft.Azure.Documents.UserDefinedFunction"/> 
            <seealso cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>
            <seealso cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/>
            <seealso cref="T:System.Threading.Tasks.Task"/>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.IDocumentClient.ReadConflictAsync(System.String,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Reads a <see cref="T:Microsoft.Azure.Documents.Conflict"/> from the Azure Cosmos DB service as an asynchronous operation.
            </summary>
            <param name="conflictLink">The link to the Conflict to be read.</param>
            <param name="options">(Optional) The request options for the request.</param>
            <returns>
            A <see cref="N:System.Threading.Tasks"/> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/> which wraps a <see cref="T:Microsoft.Azure.Documents.Conflict"/> containing the read resource record.
            </returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="conflictLink"/> is not set.</exception>
            <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
            <list type="table">
                <listheader>
                    <term>StatusCode</term><description>Reason for exception</description>
                </listheader>
                <item>
                    <term>404</term><description>NotFound - This means the resource you tried to read did not exist.</description>
                </item>
                <item>
                    <term>429</term><description>TooManyRequests - This means you have exceeded the number of request units per second. Consult the DocumentClientException.RetryAfter value to see how long you should wait before retrying this operation.</description>
                </item>
            </list>
            </exception>
            <example>
            <code language="c#">
            <![CDATA[
            //Reads a Conflict resource from a Database
            // - sample_database is the ID of the database
            // - sample_collection is the ID of the collection
            // - conflict_id is the ID of the conflict to be read
            var conflictLink = "/dbs/sample_database/colls/sample_collection/conflicts/conflict_id";
            Conflict conflict = await client.ReadConflictAsync(conflictLink);
            ]]>
            </code>
            </example>
            <remarks>
            <para>
            Doing a read of a resource is the most efficient way to get a resource from the Database. If you know the resource's ID, do a read instead of a query by ID.
            </para>
            <para>
            The example shown uses ID-based links, where the link is composed of the ID properties used when the resources were created.
            You can still use the <see cref="P:Microsoft.Azure.Documents.Resource.SelfLink"/> property of the Conflict if you prefer. A self-link is a URI for a resource that is made up of Resource Identifiers  (or the _rid properties).
            ID-based links and SelfLink will both work.
            The format for <paramref name="conflictLink"/> is always "/dbs/{db identifier}/colls/{collectioon identifier}/conflicts/{conflict identifier}"
            only the values within the {...} change depending on which method you wish to use to address the resource.
            </para>
            </remarks>
            <seealso cref="T:Microsoft.Azure.Documents.Conflict"/>
            <seealso cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>
            <seealso cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/>
            <seealso cref="T:System.Threading.Tasks.Task"/>
            <seealso cref="T:System.Uri"/>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.IDocumentClient.ReadConflictAsync(System.Uri,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Reads a <see cref="T:Microsoft.Azure.Documents.Conflict"/> as an asynchronous operation from the Azure Cosmos DB service.
            </summary>
            <param name="conflictUri">A URI to the Conflict resource to be read.</param>
            <param name="options">The request options for the request.</param>
            <returns>
            A <see cref="N:System.Threading.Tasks"/> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/> which wraps a <see cref="T:Microsoft.Azure.Documents.Conflict"/> containing the read resource record.
            </returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="conflictUri"/> is not set.</exception>
            <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
            <list type="table">
                <listheader>
                    <term>StatusCode</term><description>Reason for exception</description>
                </listheader>
                <item>
                    <term>404</term><description>NotFound - This means the resource you tried to read did not exist.</description>
                </item>
                <item>
                    <term>429</term><description>TooManyRequests - This means you have exceeded the number of request units per second. Consult the DocumentClientException.RetryAfter value to see how long you should wait before retrying this operation.</description>
                </item>
            </list>
            </exception>
            <example>
            <code language="c#">
            <![CDATA[
            //Reads a Conflict resource where 
            // - db_id is the ID property of the Database
            // - coll_id is the ID property of the DocumentCollection
            // - conflict_id is the ID property of the Conflict you wish to read. 
            var conflictLink = UriFactory.CreateConflictUri("db_id", "coll_id", "conflict_id");
            Conflict conflict = await client.ReadConflictAsync(conflictLink);
            ]]>
            </code>
            </example>
            <remarks>
            <para>
            Doing a read of a resource is the most efficient way to get a resource from the service. If you know the resource's ID, do a read instead of a query by ID.
            </para>
            </remarks>
            <seealso cref="T:Microsoft.Azure.Documents.Conflict"/> 
            <seealso cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>
            <seealso cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/>
            <seealso cref="T:System.Threading.Tasks.Task"/>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.IDocumentClient.ReadOfferAsync(System.String)">
            <summary>
            Reads an <see cref="T:Microsoft.Azure.Documents.Offer"/> from the Azure Cosmos DB service as an asynchronous operation.
            </summary>
            <param name="offerLink">The link to the Offer to be read.</param>
            <returns>
            A <see cref="N:System.Threading.Tasks"/> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/> which wraps a <see cref="T:Microsoft.Azure.Documents.Offer"/> containing the read resource record.
            </returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="offerLink"/> is not set.</exception>
            <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
            <list type="table">
                <listheader>
                    <term>StatusCode</term><description>Reason for exception</description>
                </listheader>
                <item>
                    <term>404</term><description>NotFound - This means the resource you tried to read did not exist.</description>
                </item>
                <item>
                    <term>429</term><description>TooManyRequests - This means you have exceeded the number of request units per second. Consult the DocumentClientException.RetryAfter value to see how long you should wait before retrying this operation.</description>
                </item>
            </list>
            </exception>
            <example>
            <code language="c#">
            <![CDATA[
            //Reads an Offer resource from a Database
            // - offer_id is the ID of the conflict to be read
            var offerLink = "/offers/offer_id";
            Offer offer = await client.ReadOfferAsync(offerLink);
            ]]>
            </code>
            </example>
            <remarks>
            <para>
            Doing a read of a resource is the most efficient way to get a resource from the Database. If you know the resource's ID, do a read instead of a query by ID.
            </para>
            <para>
            For an Offer, id is always generated internally by the system when the linked resource is created. id and _rid are always the same for Offer.
            </para>
            <para>
            The format for <paramref name="offerLink"/> is always "/offers/{offer identifier}"
            </para>
            </remarks>
            <seealso cref="T:Microsoft.Azure.Documents.Conflict"/>
            <seealso cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>
            <seealso cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/>
            <seealso cref="T:System.Threading.Tasks.Task"/>
            <seealso cref="T:System.Uri"/>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.IDocumentClient.ReadDatabaseFeedAsync(Microsoft.Azure.Cosmos.FeedOptions)">
             <summary>
             Reads the feed (sequence) of <see cref="T:Microsoft.Azure.Cosmos.Database"/> for a database account from the Azure Cosmos DB service as an asynchronous operation.
             </summary>
             <param name="options">(Optional) The request options for the request.</param>
             <returns>
             A <see cref="N:System.Threading.Tasks"/> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/> which wraps a <see cref="T:Microsoft.Azure.Cosmos.Database"/> containing the read resource record.
             </returns>
             <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
             <list type="table">
                 <listheader>
                     <term>StatusCode</term><description>Reason for exception</description>
                 </listheader>
                 <item>
                     <term>429</term><description>TooManyRequests - This means you have exceeded the number of request units per second. Consult the DocumentClientException.RetryAfter value to see how long you should wait before retrying this operation.</description>
                 </item>
             </list>
             </exception>
             <example>
             <code language="c#">
             <![CDATA[
             int count = 0;
             string continuation = string.Empty;
             do
             {
                 // Read the feed 10 items at a time until there are no more items to read
                 DoucmentFeedResponse<Database> response = await client.ReadDatabaseFeedAsync(new FeedOptions
                                                                             {
                                                                                 MaxItemCount = 10,
                                                                                 RequestContinuation = continuation
                                                                             });
            
                 // Append the item count
                 count += response.Count;
            
                 // Get the continuation so that we know when to stop.
                  continuation = response.ResponseContinuation;
             } while (!string.IsNullOrEmpty(continuation));
             ]]>
             </code>
             </example>
             <seealso cref="T:Microsoft.Azure.Cosmos.Database"/>
             <seealso cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>
             <seealso cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/>
             <seealso cref="T:System.Threading.Tasks.Task"/>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.IDocumentClient.ReadPartitionKeyRangeFeedAsync(System.String,Microsoft.Azure.Cosmos.FeedOptions)">
            <summary>
            Reads the feed (sequence) of <see cref="T:Microsoft.Azure.Documents.PartitionKeyRange"/> for a database account from the Azure Cosmos DB service as an asynchronous operation.
            </summary>
            <param name="partitionKeyRangesOrCollectionLink">The link of the resources to be read, or owner collection link, SelfLink or AltLink. E.g. /dbs/db_rid/colls/coll_rid/pkranges</param>
            <param name="options">(Optional) The request options for the request.</param>
            <returns>
            A <see cref="N:System.Threading.Tasks"/> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/> which wraps a <see cref="T:Microsoft.Azure.Cosmos.Database"/> containing the read resource record.
            </returns>
            <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
            <list type="table">
                <listheader>
                    <term>StatusCode</term><description>Reason for exception</description>
                </listheader>
                <item>
                    <term>429</term><description>TooManyRequests - This means you have exceeded the number of request units per second. Consult the DocumentClientException.RetryAfter value to see how long you should wait before retrying this operation.</description>
                </item>
            </list>
            </exception>
            <example>
            <code language="c#">
            <![CDATA[
            DoucmentFeedResponse<PartitionKeyRange> response = null;
            List<string> ids = new List<string>();
            do
            {
                response = await client.ReadPartitionKeyRangeFeedAsync(collection.SelfLink, new FeedOptions { MaxItemCount = 1000 });
                foreach (var item in response)
                {
                    ids.Add(item.Id);
                }
            }
            while (!string.IsNullOrEmpty(response.ResponseContinuation));
            ]]>
            </code>
            </example>
            <seealso cref="T:Microsoft.Azure.Documents.PartitionKeyRange"/>
            <seealso cref="T:Microsoft.Azure.Cosmos.FeedOptions"/>
            <seealso cref="T:Microsoft.Azure.Cosmos.DocumentFeedResponse`1"/>
            <seealso cref="T:System.Threading.Tasks.Task"/>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.IDocumentClient.ReadPartitionKeyRangeFeedAsync(System.Uri,Microsoft.Azure.Cosmos.FeedOptions)">
            <summary>
            Reads the feed (sequence) of <see cref="T:Microsoft.Azure.Documents.PartitionKeyRange"/> for a database account from the Azure Cosmos DB service as an asynchronous operation.
            </summary>
            <param name="partitionKeyRangesOrCollectionUri">The Uri for partition key ranges, or owner collection.</param>
            <param name="options">(Optional) The request options for the request.</param>
            <returns>
            A <see cref="N:System.Threading.Tasks"/> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/> which wraps a <see cref="T:Microsoft.Azure.Documents.PartitionKeyRange"/> containing the read resource record.
            </returns>
            <example>
            <code language="c#">
            <![CDATA[
            Uri partitionKeyRangesUri = UriFactory.CreatePartitionKeyRangesUri(database.Id, collection.Id);
            DoucmentFeedResponse<PartitionKeyRange> response = null;
            List<string> ids = new List<string>();
            do
            {
                response = await client.ReadPartitionKeyRangeFeedAsync(partitionKeyRangesUri, new FeedOptions { MaxItemCount = 1000 });
                foreach (var item in response)
                {
                    ids.Add(item.Id);
                }
            }
            while (!string.IsNullOrEmpty(response.ResponseContinuation));
            ]]>
            </code>
            </example>
            <seealso cref="T:Microsoft.Azure.Documents.PartitionKeyRange"/>
            <seealso cref="T:Microsoft.Azure.Cosmos.FeedOptions"/>
            <seealso cref="T:Microsoft.Azure.Cosmos.DocumentFeedResponse`1"/>
            <seealso cref="M:Microsoft.Azure.Cosmos.UriFactory.CreatePartitionKeyRangesUri(System.String,System.String)"/>
            <seealso cref="T:System.Threading.Tasks.Task"/>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.IDocumentClient.ReadDocumentCollectionFeedAsync(System.String,Microsoft.Azure.Cosmos.FeedOptions)">
             <summary>
             Reads the feed (sequence) of <see cref="T:Microsoft.Azure.Documents.DocumentCollection"/> for a database from the Azure Cosmos DB service as an asynchronous operation.
             </summary>
             <param name="collectionsLink">The SelfLink of the resources to be read. E.g. /dbs/db_rid/colls/ </param>
             <param name="options">(Optional) The request options for the request.</param>
             <returns>
             A <see cref="N:System.Threading.Tasks"/> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/> which wraps a <see cref="T:Microsoft.Azure.Documents.DocumentCollection"/> containing the read resource record.
             </returns>
             <exception cref="T:System.ArgumentNullException">If <paramref name="collectionsLink"/> is not set.</exception>
             <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
             <list type="table">
                 <listheader>
                     <term>StatusCode</term><description>Reason for exception</description>
                 </listheader>
                 <item>
                     <term>404</term><description>NotFound - This means the resource feed you tried to read did not exist. Check the parent rids are correct.</description>
                 </item>
                 <item>
                     <term>429</term><description>TooManyRequests - This means you have exceeded the number of request units per second. Consult the DocumentClientException.RetryAfter value to see how long you should wait before retrying this operation.</description>
                 </item>
             </list>
             </exception>
             <example>
             <code language="c#">
             <![CDATA[
             int count = 0;
             string continuation = string.Empty;
             do
             {
                 // Read the feed 10 items at a time until there are no more items to read
                 DoucmentFeedResponse<DocumentCollection> response = await client.ReadDocumentCollectionFeedAsync("/dbs/db_rid/colls/",
                                                                 new FeedOptions
                                                                 {
                                                                     MaxItemCount = 10,
                                                                     RequestContinuation = continuation
                                                                 });
            
                 // Append the item count
                 count += response.Count;
            
                 // Get the continuation so that we know when to stop.
                  continuation = response.ResponseContinuation;
             } while (!string.IsNullOrEmpty(continuation));
             ]]>
             </code>
             </example>
             <seealso cref="T:Microsoft.Azure.Documents.DocumentCollection"/>
             <seealso cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>
             <seealso cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/>
             <seealso cref="T:System.Threading.Tasks.Task"/>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.IDocumentClient.ReadDocumentCollectionFeedAsync(System.Uri,Microsoft.Azure.Cosmos.FeedOptions)">
            <summary>
            Reads the feed (sequence) of collections for a database as an asynchronous operation in the Azure Cosmos DB service.
            </summary>
            <param name="databaseUri">The URI of the parent Database.</param>
            <param name="options">(Optional) The <see cref="T:Microsoft.Azure.Cosmos.FeedOptions"/> for the request.</param>
            <returns>The task object representing the service response for the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.IDocumentClient.ReadDocumentFeedAsync(System.String,Microsoft.Azure.Cosmos.FeedOptions,System.Threading.CancellationToken)">
             <summary>
             Reads the feed (sequence) of documents for a specified collection from the Azure Cosmos DB service.
             This takes returns a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/> which will contain an enumerable list of dynamic objects.
             </summary>
             <param name="documentsLink">The SelfLink of the resources to be read. E.g. /dbs/db_rid/colls/coll_rid/docs/ </param>
             <param name="options">(Optional) The request options for the request.</param>
             <param name="cancellationToken">(Optional) A <see cref="T:System.Threading.CancellationToken"/> that can be used by other objects or threads to receive notice of cancellation.</param>
             <returns>
             A <see cref="N:System.Threading.Tasks"/> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/> containing dynamic objects representing the items in the feed.
             </returns>
             <exception cref="T:System.ArgumentNullException">If <paramref name="documentsLink"/> is not set.</exception>
             <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
             <list type="table">
                 <listheader>
                     <term>StatusCode</term><description>Reason for exception</description>
                 </listheader>
                 <item>
                     <term>404</term><description>NotFound - This means the resource feed you tried to read did not exist. Check the parent rids are correct.</description>
                 </item>
                 <item>
                     <term>429</term><description>TooManyRequests - This means you have exceeded the number of request units per second. Consult the DocumentClientException.RetryAfter value to see how long you should wait before retrying this operation.</description>
                 </item>
             </list>
             </exception>
             <example>
             <code language="c#">
             <![CDATA[
             int count = 0;
             string continuation = string.Empty;
             do
             {
                 // Read the feed 10 items at a time until there are no more items to read
                 DoucmentFeedResponse<dynamic> response = await client.ReadDocumentFeedAsync("/dbs/db_rid/colls/coll_rid/docs/",
                                                                 new FeedOptions
                                                                 {
                                                                     MaxItemCount = 10,
                                                                     RequestContinuation = continuation
                                                                 });
            
                 // Append the item count
                 count += response.Count;
            
                 // Get the continuation so that we know when to stop.
                  continuation = response.ResponseContinuation;
             } while (!string.IsNullOrEmpty(continuation));
             ]]>
             </code>
             </example>
             <remarks>
             Instead of DoucmentFeedResponse{Document} this method takes advantage of dynamic objects in .NET. This way a single feed result can contain any kind of Document, or POCO object.
             This is important becuse a DocumentCollection can contain different kinds of documents.
             </remarks>
             <seealso cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>
             <seealso cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/>
             <seealso cref="T:System.Threading.Tasks.Task"/>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.IDocumentClient.ReadDocumentFeedAsync(System.Uri,Microsoft.Azure.Cosmos.FeedOptions,System.Threading.CancellationToken)">
            <summary>
            Reads the feed (sequence) of documents for a collection as an asynchronous operation in the Azure Cosmos DB service.
            </summary>
            <param name="documentCollectionUri">The URI of the parent document collection.</param>
            <param name="options">(Optional) The <see cref="T:Microsoft.Azure.Cosmos.FeedOptions"/> for the request.</param>
            <param name="cancellationToken">(Optional) A <see cref="T:System.Threading.CancellationToken"/> that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>The task object representing the service response for the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.IDocumentClient.ReadStoredProcedureFeedAsync(System.String,Microsoft.Azure.Cosmos.FeedOptions)">
             <summary>
             Reads the feed (sequence) of <see cref="T:Microsoft.Azure.Documents.StoredProcedure"/> for a collection from the Azure Cosmos DB service as an asynchronous operation.
             </summary>
             <param name="storedProceduresLink">The SelfLink of the resources to be read. E.g. /dbs/db_rid/colls/col_rid/sprocs/ </param>
             <param name="options">(Optional) The request options for the request.</param>
             <returns>
             A <see cref="N:System.Threading.Tasks"/> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/> which wraps a <see cref="T:Microsoft.Azure.Documents.StoredProcedure"/> containing the read resource record.
             </returns>
             <exception cref="T:System.ArgumentNullException">If <paramref name="storedProceduresLink"/> is not set.</exception>
             <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
             <list type="table">
                 <listheader>
                     <term>StatusCode</term><description>Reason for exception</description>
                 </listheader>
                 <item>
                     <term>404</term><description>NotFound - This means the resource feed you tried to read did not exist. Check the parent rids are correct.</description>
                 </item>
                 <item>
                     <term>429</term><description>TooManyRequests - This means you have exceeded the number of request units per second. Consult the DocumentClientException.RetryAfter value to see how long you should wait before retrying this operation.</description>
                 </item>
             </list>
             </exception>
             <example>
             <code language="c#">
             <![CDATA[
             int count = 0;
             string continuation = string.Empty;
             do
             {
                 // Read the feed 10 items at a time until there are no more items to read
                 DoucmentFeedResponse<StoredProcedure> response = await client.ReadStoredProcedureFeedAsync("/dbs/db_rid/colls/col_rid/sprocs/",
                                                                 new FeedOptions
                                                                 {
                                                                     MaxItemCount = 10,
                                                                     RequestContinuation = continuation
                                                                 });
            
                 // Append the item count
                 count += response.Count;
            
                 // Get the continuation so that we know when to stop.
                  continuation = response.ResponseContinuation;
             } while (!string.IsNullOrEmpty(continuation));
             ]]>
             </code>
             </example>
             <seealso cref="T:Microsoft.Azure.Documents.StoredProcedure"/>
             <seealso cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>
             <seealso cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/>
             <seealso cref="T:System.Threading.Tasks.Task"/>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.IDocumentClient.ReadStoredProcedureFeedAsync(System.Uri,Microsoft.Azure.Cosmos.FeedOptions)">
            <summary>
            Reads the feed (sequence) of stored procedures for a collection as an asynchronous operation in the Azure Cosmos DB service.
            </summary>
            <param name="documentCollectionUri">The URI of the parent document collection.</param>
            <param name="options">(Optional) The <see cref="T:Microsoft.Azure.Cosmos.FeedOptions"/> for the request.</param>
            <returns>The task object representing the service response for the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.IDocumentClient.ReadTriggerFeedAsync(System.String,Microsoft.Azure.Cosmos.FeedOptions)">
             <summary>
             Reads the feed (sequence) of <see cref="T:Microsoft.Azure.Documents.Trigger"/> for a collection from the Azure Cosmos DB service as an asynchronous operation.
             </summary>
             <param name="triggersLink">The SelfLink of the resources to be read. E.g. /dbs/db_rid/colls/col_rid/triggers/ </param>
             <param name="options">(Optional) The request options for the request.</param>
             <returns>
             A <see cref="N:System.Threading.Tasks"/> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/> which wraps a <see cref="T:Microsoft.Azure.Documents.Trigger"/> containing the read resource record.
             </returns>
             <exception cref="T:System.ArgumentNullException">If <paramref name="triggersLink"/> is not set.</exception>
             <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
             <list type="table">
                 <listheader>
                     <term>StatusCode</term><description>Reason for exception</description>
                 </listheader>
                 <item>
                     <term>404</term><description>NotFound - This means the resource feed you tried to read did not exist. Check the parent rids are correct.</description>
                 </item>
                 <item>
                     <term>429</term><description>TooManyRequests - This means you have exceeded the number of request units per second. Consult the DocumentClientException.RetryAfter value to see how long you should wait before retrying this operation.</description>
                 </item>
             </list>
             </exception>
             <example>
             <code language="c#">
             <![CDATA[
             int count = 0;
             string continuation = string.Empty;
             do
             {
                 // Read the feed 10 items at a time until there are no more items to read
                 DoucmentFeedResponse<Trigger> response = await client.ReadTriggerFeedAsync("/dbs/db_rid/colls/col_rid/triggers/",
                                                                 new FeedOptions
                                                                 {
                                                                     MaxItemCount = 10,
                                                                     RequestContinuation = continuation
                                                                 });
            
                 // Append the item count
                 count += response.Count;
            
                 // Get the continuation so that we know when to stop.
                  continuation = response.ResponseContinuation;
             } while (!string.IsNullOrEmpty(continuation));
             ]]>
             </code>
             </example>
             <seealso cref="T:Microsoft.Azure.Documents.Trigger"/>
             <seealso cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>
             <seealso cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/>
             <seealso cref="T:System.Threading.Tasks.Task"/>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.IDocumentClient.ReadTriggerFeedAsync(System.Uri,Microsoft.Azure.Cosmos.FeedOptions)">
            <summary>
            Reads the feed (sequence) of triggers for a collection as an asynchronous operation in the Azure Cosmos DB service.
            </summary>
            <param name="documentCollectionUri">The URI of the parent document collection.</param>
            <param name="options">(Optional) The <see cref="T:Microsoft.Azure.Cosmos.FeedOptions"/> for the request.</param>
            <returns>The task object representing the service response for the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.IDocumentClient.ReadUserDefinedFunctionFeedAsync(System.String,Microsoft.Azure.Cosmos.FeedOptions)">
             <summary>
             Reads the feed (sequence) of <see cref="T:Microsoft.Azure.Documents.UserDefinedFunction"/> for a collection from the Azure Cosmos DB service as an asynchronous operation.
             </summary>
             <param name="userDefinedFunctionsLink">The SelfLink of the resources to be read. E.g. /dbs/db_rid/colls/col_rid/udfs/ </param>
             <param name="options">(Optional) The request options for the request.</param>
             <returns>
             A <see cref="N:System.Threading.Tasks"/> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/> which wraps a <see cref="T:Microsoft.Azure.Documents.UserDefinedFunction"/> containing the read resource record.
             </returns>
             <exception cref="T:System.ArgumentNullException">If <paramref name="userDefinedFunctionsLink"/> is not set.</exception>
             <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
             <list type="table">
                 <listheader>
                     <term>StatusCode</term><description>Reason for exception</description>
                 </listheader>
                 <item>
                     <term>404</term><description>NotFound - This means the resource feed you tried to read did not exist. Check the parent rids are correct.</description>
                 </item>
                 <item>
                     <term>429</term><description>TooManyRequests - This means you have exceeded the number of request units per second. Consult the DocumentClientException.RetryAfter value to see how long you should wait before retrying this operation.</description>
                 </item>
             </list>
             </exception>
             <example>
             <code language="c#">
             <![CDATA[
             int count = 0;
             string continuation = string.Empty;
             do
             {
                 // Read the feed 10 items at a time until there are no more items to read
                 DoucmentFeedResponse<UserDefinedFunction> response = await client.ReadUserDefinedFunctionFeedAsync("/dbs/db_rid/colls/col_rid/udfs/",
                                                                 new FeedOptions
                                                                 {
                                                                     MaxItemCount = 10,
                                                                     RequestContinuation = continuation
                                                                 });
            
                 // Append the item count
                 count += response.Count;
            
                 // Get the continuation so that we know when to stop.
                  continuation = response.ResponseContinuation;
             } while (!string.IsNullOrEmpty(continuation));
             ]]>
             </code>
             </example>
             <seealso cref="T:Microsoft.Azure.Documents.UserDefinedFunction"/>
             <seealso cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>
             <seealso cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/>
             <seealso cref="T:System.Threading.Tasks.Task"/>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.IDocumentClient.ReadUserDefinedFunctionFeedAsync(System.Uri,Microsoft.Azure.Cosmos.FeedOptions)">
            <summary>
            Reads the feed (sequence) of user defined functions for a collection as an asynchronous operation in the Azure Cosmos DB service.
            </summary>
            <param name="documentCollectionUri">The URI of the parent document collection.</param>
            <param name="options">(Optional) The <see cref="T:Microsoft.Azure.Cosmos.FeedOptions"/> for the request.</param>
            <returns>The task object representing the service response for the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.IDocumentClient.ReadConflictFeedAsync(System.String,Microsoft.Azure.Cosmos.FeedOptions)">
             <summary>
             Reads the feed (sequence) of <see cref="T:Microsoft.Azure.Documents.Conflict"/> for a collection from the Azure Cosmos DB service as an asynchronous operation.
             </summary>
             <param name="conflictsLink">The SelfLink of the resources to be read. E.g. /dbs/db_rid/colls/coll_rid/conflicts/ </param>
             <param name="options">(Optional) The request options for the request.</param>
             <returns>
             A <see cref="N:System.Threading.Tasks"/> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/> which wraps a <see cref="T:Microsoft.Azure.Documents.Conflict"/> containing the read resource record.
             </returns>
             <exception cref="T:System.ArgumentNullException">If <paramref name="conflictsLink"/> is not set.</exception>
             <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
             <list type="table">
                 <listheader>
                     <term>StatusCode</term><description>Reason for exception</description>
                 </listheader>
                 <item>
                     <term>404</term><description>NotFound - This means the resource feed you tried to read did not exist. Check the parent rids are correct.</description>
                 </item>
                 <item>
                     <term>429</term><description>TooManyRequests - This means you have exceeded the number of request units per second. Consult the DocumentClientException.RetryAfter value to see how long you should wait before retrying this operation.</description>
                 </item>
             </list>
             </exception>
             <example>
             <code language="c#">
             <![CDATA[
             int count = 0;
             string continuation = string.Empty;
             do
             {
                 // Read the feed 10 items at a time until there are no more items to read
                 DoucmentFeedResponse<Conflict> response = await client.ReadConflictAsync("/dbs/db_rid/colls/coll_rid/conflicts/",
                                                                 new FeedOptions
                                                                 {
                                                                     MaxItemCount = 10,
                                                                     RequestContinuation = continuation
                                                                 });
            
                 // Append the item count
                 count += response.Count;
            
                 // Get the continuation so that we know when to stop.
                  continuation = response.ResponseContinuation;
             } while (!string.IsNullOrEmpty(continuation));
             ]]>
             </code>
             </example>
             <seealso cref="T:Microsoft.Azure.Documents.Conflict"/>
             <seealso cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>
             <seealso cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/>
             <seealso cref="T:System.Threading.Tasks.Task"/>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.IDocumentClient.ReadConflictFeedAsync(System.Uri,Microsoft.Azure.Cosmos.FeedOptions)">
            <summary>
            Reads the feed (sequence) of conflicts for a collection as an asynchronous operation in the Azure Cosmos DB service.
            </summary>
            <param name="documentCollectionUri">The URI of the parent document collection.</param>
            <param name="options">(Optional) The <see cref="T:Microsoft.Azure.Cosmos.FeedOptions"/> for the request.</param>
            <returns>The task object representing the service response for the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.IDocumentClient.ReadOffersFeedAsync(Microsoft.Azure.Cosmos.FeedOptions)">
             <summary>
             Reads the feed (sequence) of <see cref="T:Microsoft.Azure.Documents.Offer"/> for a database account from the Azure Cosmos DB service
             as an asynchronous operation.
             </summary>
             <param name="options">(Optional) The request options for the request.</param>
             <returns>
             A <see cref="N:System.Threading.Tasks"/> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/> which wraps a <see cref="T:Microsoft.Azure.Documents.Offer"/> containing the read resource record.
             </returns>
             <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
             <list type="table">
                 <listheader>
                     <term>StatusCode</term><description>Reason for exception</description>
                 </listheader>
                 <item>
                     <term>429</term><description>TooManyRequests - This means you have exceeded the number of request units per second. Consult the DocumentClientException.RetryAfter value to see how long you should wait before retrying this operation.</description>
                 </item>
             </list>
             </exception>
             <example>
             <code language="c#">
             <![CDATA[
             int count = 0;
             string continuation = string.Empty;
             do
             {
                 // Read the feed 10 items at a time until there are no more items to read
                 DoucmentFeedResponse<Offer> response = await client.ReadOfferAsync(new FeedOptions
                                                                             {
                                                                                 MaxItemCount = 10,
                                                                                 RequestContinuation = continuation
                                                                             });
            
                 // Append the item count
                 count += response.Count;
            
                 // Get the continuation so that we know when to stop.
                  continuation = response.ResponseContinuation;
             } while (!string.IsNullOrEmpty(continuation));
             ]]>
             </code>
             </example>
             <seealso cref="T:Microsoft.Azure.Documents.Offer"/>
             <seealso cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>
             <seealso cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/>
             <seealso cref="T:System.Threading.Tasks.Task"/>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.IDocumentClient.ExecuteStoredProcedureAsync``1(System.String,System.Object[])">
             <summary>
             Executes a stored procedure against a collection as an asynchronous operation in the Azure Cosmos DB service.
             </summary>
             <typeparam name="TValue">The type of the stored procedure's return value.</typeparam>
             <param name="storedProcedureLink">The link to the stored procedure to execute.</param>
             <param name="procedureParams">(Optional) An array of dynamic objects representing the parameters for the stored procedure.</param>
             <exception cref="T:System.ArgumentNullException">If <paramref name="storedProcedureLink"/> is not set.</exception>
             <returns>The task object representing the service response for the asynchronous operation which would contain any response set in the stored procedure.</returns>
             <example>
             <code language="c#">
             <![CDATA[
             //Execute a StoredProcedure with ResourceId of "sproc_rid" that takes two "Player" documents, does some stuff, and returns a bool
             StoredProcedureResponse<bool> sprocResponse = await client.ExecuteStoredProcedureAsync<bool>(
                                                                     "/dbs/db_rid/colls/col_rid/sprocs/sproc_rid/",
                                                                     new Player { id="1", name="joe" } ,
                                                                     new Player { id="2", name="john" }
                                                                 );
            
             if (sprocResponse.Response) Console.WriteLine("Congrats, the stored procedure did some stuff");
             ]]>
             </code>
             </example>
             <seealso cref="T:Microsoft.Azure.Documents.StoredProcedure"/>
             <seealso cref="T:Microsoft.Azure.Cosmos.StoredProcedureResponse`1"/>
             <seealso cref="T:System.Threading.Tasks.Task"/>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.IDocumentClient.ExecuteStoredProcedureAsync``1(System.Uri,System.Object[])">
            <summary>
            Executes a stored procedure against a collection as an asynchronous operation in the Azure Cosmos DB service.
            </summary>
            <typeparam name="TValue">The type of the stored procedure's return value.</typeparam>
            <param name="storedProcedureUri">The URI of the stored procedure to be executed.</param>
            <param name="procedureParams">The parameters for the stored procedure execution.</param>
            <returns>The task object representing the service response for the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.IDocumentClient.ExecuteStoredProcedureAsync``1(System.String,Microsoft.Azure.Documents.Client.RequestOptions,System.Object[])">
             <summary>
             Executes a stored procedure against a partitioned collection in the Azure Cosmos DB service as an asynchronous operation, specifiying a target partition.
             </summary>
             <typeparam name="TValue">The type of the stored procedure's return value.</typeparam>
             <param name="storedProcedureLink">The link to the stored procedure to execute.</param>
             <param name="options">(Optional) The request options for the request.</param>
             <param name="procedureParams">(Optional) An array of dynamic objects representing the parameters for the stored procedure.</param>
             <exception cref="T:System.ArgumentNullException">If <paramref name="storedProcedureLink"/> is not set.</exception>
             <returns>The task object representing the service response for the asynchronous operation which would contain any response set in the stored procedure.</returns>
             <example>
             <code language="c#">
             <![CDATA[
             //Execute a StoredProcedure with ResourceId of "sproc_rid" that takes two "Player" documents, does some stuff, and returns a bool
             StoredProcedureResponse<bool> sprocResponse = await client.ExecuteStoredProcedureAsync<bool>(
                                                                     "/dbs/db_rid/colls/col_rid/sprocs/sproc_rid/",
                                                                     new RequestOptions { PartitionKey = new PartitionKey(1) },
                                                                     new Player { id="1", name="joe" } ,
                                                                     new Player { id="2", name="john" }
                                                                 );
            
             if (sprocResponse.Response) Console.WriteLine("Congrats, the stored procedure did some stuff");
             ]]>
             </code>
             </example>
             <seealso cref="T:Microsoft.Azure.Documents.StoredProcedure"/>
             <seealso cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>
             <seealso cref="T:Microsoft.Azure.Cosmos.StoredProcedureResponse`1"/>
             <seealso cref="T:System.Threading.Tasks.Task"/>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.IDocumentClient.ExecuteStoredProcedureAsync``1(System.Uri,Microsoft.Azure.Documents.Client.RequestOptions,System.Object[])">
            <summary>
            Executes a stored procedure against a collection as an asynchronous operation in the Azure Cosmos DB service.
            </summary>
            <typeparam name="TValue">The type of the stored procedure's return value.</typeparam>
            <param name="storedProcedureUri">The URI of the stored procedure to be executed.</param>
            <param name="options">(Optional) The <see cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/> for the request.</param>
            <param name="procedureParams">The parameters for the stored procedure execution.</param>
            <returns>The task object representing the service response for the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.IDocumentClient.ExecuteStoredProcedureAsync``1(System.String,Microsoft.Azure.Documents.Client.RequestOptions,System.Threading.CancellationToken,System.Object[])">
             <summary>
             Executes a stored procedure against a partitioned collection in the Azure Cosmos DB service as an asynchronous operation, specifiying a target partition.
             </summary>
             <typeparam name="TValue">The type of the stored procedure's return value.</typeparam>
             <param name="storedProcedureLink">The link to the stored procedure to execute.</param>
             <param name="options">(Optional) The request options for the request.</param>
             <param name="cancellationToken">(Optional) A <see cref="T:System.Threading.CancellationToken"/> that can be used by other objects or threads to receive notice of cancellation.</param>
             <param name="procedureParams">(Optional) An array of dynamic objects representing the parameters for the stored procedure.</param>
             <exception cref="T:System.ArgumentNullException">If <paramref name="storedProcedureLink"/> is not set.</exception>
             <returns>The task object representing the service response for the asynchronous operation which would contain any response set in the stored procedure.</returns>
             <example>
             <code language="c#">
             <![CDATA[
             //Execute a StoredProcedure with ResourceId of "sproc_rid" that takes two "Player" documents, does some stuff, and returns a bool
             StoredProcedureResponse<bool> sprocResponse = await client.ExecuteStoredProcedureAsync<bool>(
                                                                     "/dbs/db_rid/colls/col_rid/sprocs/sproc_rid/",
                                                                     new RequestOptions { PartitionKey = new PartitionKey(1) },
                                                                     new Player { id="1", name="joe" } ,
                                                                     new Player { id="2", name="john" }
                                                                 );
            
             if (sprocResponse.Response) Console.WriteLine("Congrats, the stored procedure did some stuff");
             ]]>
             </code>
             </example>
             <seealso cref="T:Microsoft.Azure.Documents.StoredProcedure"/>
             <seealso cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>
             <seealso cref="T:Microsoft.Azure.Cosmos.StoredProcedureResponse`1"/>
             <seealso cref="T:System.Threading.Tasks.Task"/>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.IDocumentClient.ExecuteStoredProcedureAsync``1(System.Uri,Microsoft.Azure.Documents.Client.RequestOptions,System.Threading.CancellationToken,System.Object[])">
            <summary>
            Executes a stored procedure against a collection as an asynchronous operation in the Azure Cosmos DB service.
            </summary>
            <typeparam name="TValue">The type of the stored procedure's return value.</typeparam>
            <param name="storedProcedureUri">The URI of the stored procedure to be executed.</param>
            <param name="options">(Optional) The <see cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/> for the request.</param>
            <param name="cancellationToken">(Optional) A <see cref="T:System.Threading.CancellationToken"/> that can be used by other objects or threads to receive notice of cancellation.</param>
            <param name="procedureParams">The parameters for the stored procedure execution.</param>
            <returns>The task object representing the service response for the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.IDocumentClient.UpsertDocumentAsync(System.String,System.Object,Microsoft.Azure.Documents.Client.RequestOptions,System.Boolean,System.Threading.CancellationToken)">
             <summary>
             Upserts a Document as an asychronous operation in the Azure Cosmos DB service.
             </summary>
             <param name="collectionLink">The link of the <see cref="T:Microsoft.Azure.Documents.DocumentCollection"/> to upsert the document in. E.g. dbs/db_rid/colls/coll_rid/ </param>
             <param name="document">The document object to upsert.</param>
             <param name="options">(Optional) Any request options you wish to set. E.g. Specifying a Trigger to execute when creating the document. <see cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/></param>
             <param name="disableAutomaticIdGeneration">(Optional) Disables the automatic id generation, If this is True the system will throw an exception if the id property is missing from the Document.</param>
             <param name="cancellationToken">(Optional) A <see cref="T:System.Threading.CancellationToken"/> that can be used by other objects or threads to receive notice of cancellation.</param>
             <returns>The <see cref="T:Microsoft.Azure.Documents.Document"/> that was upserted contained within a <see cref="T:System.Threading.Tasks.Task"/> object representing the service response for the asynchronous operation.</returns>
             <exception cref="T:System.ArgumentNullException">If either <paramref name="collectionLink"/> or <paramref name="document"/> is not set.</exception>
             <exception cref="T:System.AggregateException">Represents a consolidation of failures that occured during async processing. Look within InnerExceptions to find the actual exception(s)</exception>
             <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
             <list type="table">
                 <listheader>
                     <term>StatusCode</term><description>Reason for exception</description>
                 </listheader>
                 <item>
                     <term>400</term><description>BadRequest - This means something was wrong with the document supplied. It is likely that <paramref name="disableAutomaticIdGeneration"/> was true and an id was not supplied</description>
                 </item>
                 <item>
                     <term>403</term><description>Forbidden - This likely means the collection in to which you were trying to upsert the document is full.</description>
                 </item>
                 <item>
                     <term>409</term><description>Conflict - This means a <see cref="T:Microsoft.Azure.Documents.Document"/> with an id matching the id field of <paramref name="document"/> already existed</description>
                 </item>
                 <item>
                     <term>413</term><description>RequestEntityTooLarge - This means the <see cref="T:Microsoft.Azure.Documents.Document"/> exceeds the current max entity size. Consult documentation for limits and quotas.</description>
                 </item>
                 <item>
                     <term>429</term><description>TooManyRequests - This means you have exceeded the number of request units per second. Consult the DocumentClientException.RetryAfter value to see how long you should wait before retrying this operation.</description>
                 </item>
             </list>
             </exception>
             <example>
             Azure Cosmos DB supports a number of different ways to work with documents. A document can extend <see cref="T:Microsoft.Azure.Documents.Resource"/>
             <code language="c#">
             <![CDATA[
             public class MyObject : Resource
             {
                 public string MyProperty {get; set;}
             }
            
             using (IDocumentClient client = new DocumentClient(new Uri("service endpoint"), "auth key"))
             {
                 Document doc = await client.UpsertDocumentAsync("dbs/db_rid/colls/coll_rid/", new MyObject { MyProperty = "A Value" });
             }
             ]]>
             </code>
             </example>
             <example>
             A document can be any POCO object that can be serialized to JSON, even if it doesn't extend from <see cref="T:Microsoft.Azure.Documents.Resource"/>
             <code language="c#">
             <![CDATA[
             public class MyPOCO
             {
                 public string MyProperty {get; set;}
             }
            
             using (IDocumentClient client = new DocumentClient(new Uri("service endpoint"), "auth key"))
             {
                 Document doc = await client.UpsertDocumentAsync("dbs/db_rid/colls/coll_rid/", new MyPOCO { MyProperty = "A Value" });
             }
             ]]>
             </code>
             </example>
             <example>
             A Document can also be a dynamic object
             <code language="c#">
             <![CDATA[
             using (IDocumentClient client = new DocumentClient(new Uri("service endpoint"), "auth key"))
             {
                 Document doc = await client.UpsertDocumentAsync("dbs/db_rid/colls/coll_rid/", new { SomeProperty = "A Value" } );
             }
             ]]>
             </code>
             </example>
             <example>
             Upsert a Document and execute a Pre and Post Trigger
             <code language="c#">
             <![CDATA[
             using (IDocumentClient client = new DocumentClient(new Uri("service endpoint"), "auth key"))
             {
                 Document doc = await client.UpsertDocumentAsync(
                     "dbs/db_rid/colls/coll_rid/",
                     new { id = "DOC123213443" },
                     new RequestOptions
                     {
                         PreTriggerInclude = new List<string> { "MyPreTrigger" },
                         PostTriggerInclude = new List<string> { "MyPostTrigger" }
                     });
             }
             ]]>
             </code>
             </example>
             <seealso cref="T:Microsoft.Azure.Documents.Document"/>
             <seealso cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>
             <seealso cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/>
             <seealso cref="T:System.Threading.Tasks.Task"/>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.IDocumentClient.UpsertDocumentAsync(System.Uri,System.Object,Microsoft.Azure.Documents.Client.RequestOptions,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Upserts a document as an asychronous operation in the Azure Cosmos DB service.
            </summary>
            <param name="documentCollectionUri">The URI of the document collection to upsert the document in.</param>
            <param name="document">The document object.</param>
            <param name="options">(Optional) The <see cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/> for the request.</param>
            <param name="disableAutomaticIdGeneration">A flag to disable the automatic id generation.</param>
            <param name="cancellationToken">(Optional) A <see cref="T:System.Threading.CancellationToken"/> that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>The task object representing the service response for the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.IDocumentClient.UpsertStoredProcedureAsync(System.String,Microsoft.Azure.Documents.StoredProcedure,Microsoft.Azure.Documents.Client.RequestOptions)">
             <summary>
             Upserts a stored procedure as an asychronous operation in the Azure Cosmos DB service.
             </summary>
             <param name="collectionLink">The link of the collection to upsert the stored procedure in. E.g. dbs/db_rid/colls/col_rid/</param>
             <param name="storedProcedure">The <see cref="T:Microsoft.Azure.Documents.StoredProcedure"/> object to upsert.</param>
             <param name="options">(Optional) Any <see cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>for this request.</param>
             <returns>The <see cref="T:Microsoft.Azure.Documents.StoredProcedure"/> that was upserted contained within a <see cref="T:System.Threading.Tasks.Task"/> object representing the service response for the asynchronous operation.</returns>
             <exception cref="T:System.ArgumentNullException">If either <paramref name="collectionLink"/> or <paramref name="storedProcedure"/> is not set.</exception>
             <exception cref="T:System.AggregateException">Represents a consolidation of failures that occured during async processing. Look within InnerExceptions to find the actual exception(s)</exception>
             <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
             <list type="table">
                 <listheader>
                     <term>StatusCode</term><description>Reason for exception</description>
                 </listheader>
                 <item>
                     <term>400</term><description>BadRequest - This means something was wrong with the request supplied. It is likely that an Id was not supplied for the stored procedure or the Body was malformed.</description>
                 </item>
                 <item>
                     <term>403</term><description>Forbidden - You have reached your quota of stored procedures for the collection supplied. Contact support to have this quota increased.</description>
                 </item>
                 <item>
                     <term>409</term><description>Conflict - This means a <see cref="T:Microsoft.Azure.Documents.StoredProcedure"/> with an id matching the id you supplied already existed.</description>
                 </item>
                 <item>
                     <term>413</term><description>RequestEntityTooLarge - This means the body of the <see cref="T:Microsoft.Azure.Documents.StoredProcedure"/> you tried to upsert was too large.</description>
                 </item>
             </list>
             </exception>
             <example>
            
             <code language="c#">
             <![CDATA[
             //Upsert a new stored procedure called "HelloWorldSproc" that takes in a single param called "name".
             StoredProcedure sproc = await client.UpsertStoredProcedureAsync(collectionLink, new StoredProcedure
             {
                Id = "HelloWorldSproc",
                Body = @"function (name){
                            var response = getContext().getResponse();
                            response.setBody('Hello ' + name);
                         }"
             });
             ]]>
             </code>
             </example>
             <seealso cref="T:Microsoft.Azure.Documents.StoredProcedure"/>
             <seealso cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>
             <seealso cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/>
             <seealso cref="T:System.Threading.Tasks.Task"/>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.IDocumentClient.UpsertStoredProcedureAsync(System.Uri,Microsoft.Azure.Documents.StoredProcedure,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Upserts a stored procedure as an asychronous operation in the Azure Cosmos DB service.
            </summary>
            <param name="documentCollectionUri">The URI of the document collection to upsert the stored procedure in.</param>
            <param name="storedProcedure">The <see cref="T:Microsoft.Azure.Documents.StoredProcedure"/> object.</param>
            <param name="options">(Optional) The <see cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/> for the request.</param>
            <returns>The task object representing the service response for the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.IDocumentClient.UpsertTriggerAsync(System.String,Microsoft.Azure.Documents.Trigger,Microsoft.Azure.Documents.Client.RequestOptions)">
             <summary>
             Upserts a trigger as an asychronous operation in the Azure Cosmos DB service.
             </summary>
             <param name="collectionLink">The link of the <see cref="T:Microsoft.Azure.Documents.DocumentCollection"/> to upsert the trigger in. E.g. dbs/db_rid/colls/col_rid/ </param>
             <param name="trigger">The <see cref="T:Microsoft.Azure.Documents.Trigger"/> object to upsert.</param>
             <param name="options">(Optional) Any <see cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>for this request.</param>
             <returns>A task object representing the service response for the asynchronous operation.</returns>
             <exception cref="T:System.ArgumentNullException">If either <paramref name="collectionLink"/> or <paramref name="trigger"/> is not set.</exception>
             <exception cref="T:System.AggregateException">Represents a consolidation of failures that occured during async processing. Look within InnerExceptions to find the actual exception(s)</exception>
             <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
             <list type="table">
                 <listheader>
                     <term>StatusCode</term><description>Reason for exception</description>
                 </listheader>
                 <item>
                     <term>400</term><description>BadRequest - This means something was wrong with the request supplied. It is likely that an Id was not supplied for the new trigger or that the Body was malformed.</description>
                 </item>
                 <item>
                     <term>403</term><description>Forbidden - You have reached your quota of triggers for the collection supplied. Contact support to have this quota increased.</description>
                 </item>
                 <item>
                     <term>409</term><description>Conflict - This means a <see cref="T:Microsoft.Azure.Documents.Trigger"/> with an id matching the id you supplied already existed.</description>
                 </item>
                 <item>
                     <term>413</term><description>RequestEntityTooLarge - This means the body of the <see cref="T:Microsoft.Azure.Documents.Trigger"/> you tried to upsert was too large.</description>
                 </item>
             </list>
             </exception>
             <example>
            
             <code language="c#">
             <![CDATA[
             //Upsert a trigger that validates the contents of a document as it is created and adds a 'timestamp' property if one was not found.
             Trigger trig = await client.UpsertTriggerAsync(collectionLink, new Trigger
             {
                 Id = "ValidateDocuments",
                 Body = @"function validate() {
                                     var context = getContext();
                                     var request = context.getRequest();                                                             
                                     var documentToCreate = request.getBody();
                                     
                                     // validate properties
                                     if (!('timestamp' in documentToCreate)) {
                                         var ts = new Date();
                                         documentToCreate['timestamp'] = ts.getTime();
                                     }
                                     
                                     // update the document that will be created
                                     request.setBody(documentToCreate);
                                   }",
                 TriggerType = TriggerType.Pre,
                 TriggerOperation = TriggerOperation.Create
             });
             ]]>
             </code>
             </example>
             <seealso cref="T:Microsoft.Azure.Documents.Trigger"/>
             <seealso cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>
             <seealso cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/>
             <seealso cref="T:System.Threading.Tasks.Task"/>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.IDocumentClient.UpsertTriggerAsync(System.Uri,Microsoft.Azure.Documents.Trigger,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Upserts a trigger as an asychronous operation in the Azure Cosmos DB service.
            </summary>
            <param name="documentCollectionUri">The URI of the document collection to upsert the trigger in.</param>
            <param name="trigger">The <see cref="T:Microsoft.Azure.Documents.Trigger"/> object.</param>
            <param name="options">(Optional) The <see cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/> for the request.</param>
            <returns>The task object representing the service response for the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.IDocumentClient.UpsertUserDefinedFunctionAsync(System.String,Microsoft.Azure.Documents.UserDefinedFunction,Microsoft.Azure.Documents.Client.RequestOptions)">
             <summary>
             Upserts a user defined function as an asychronous operation in the Azure Cosmos DB service.
             </summary>
             <param name="collectionLink">The link of the <see cref="T:Microsoft.Azure.Documents.DocumentCollection"/> to upsert the user defined function in. E.g. dbs/db_rid/colls/col_rid/ </param>
             <param name="function">The <see cref="T:Microsoft.Azure.Documents.UserDefinedFunction"/> object to upsert.</param>
             <param name="options">(Optional) Any <see cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>for this request.</param>
             <returns>A task object representing the service response for the asynchronous operation.</returns>
             <exception cref="T:System.ArgumentNullException">If either <paramref name="collectionLink"/> or <paramref name="function"/> is not set.</exception>
             <exception cref="T:System.AggregateException">Represents a consolidation of failures that occured during async processing. Look within InnerExceptions to find the actual exception(s)</exception>
             <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
             <list type="table">
                 <listheader>
                     <term>StatusCode</term><description>Reason for exception</description>
                 </listheader>
                 <item>
                     <term>400</term><description>BadRequest - This means something was wrong with the request supplied. It is likely that an Id was not supplied for the new user defined function or that the Body was malformed.</description>
                 </item>
                 <item>
                     <term>403</term><description>Forbidden - You have reached your quota of user defined functions for the collection supplied. Contact support to have this quota increased.</description>
                 </item>
                 <item>
                     <term>409</term><description>Conflict - This means a <see cref="T:Microsoft.Azure.Documents.UserDefinedFunction"/> with an id matching the id you supplied already existed.</description>
                 </item>
                 <item>
                     <term>413</term><description>RequestEntityTooLarge - This means the body of the <see cref="T:Microsoft.Azure.Documents.UserDefinedFunction"/> you tried to upsert was too large.</description>
                 </item>
             </list>
             </exception>
             <example>
            
             <code language="c#">
             <![CDATA[
             //Upsert a user defined function that converts a string to upper case
             UserDefinedFunction udf = client.UpsertUserDefinedFunctionAsync(collectionLink, new UserDefinedFunction
             {
                Id = "ToUpper",
                Body = @"function toUpper(input) {
                                    return input.toUpperCase();
                                 }",
             });
             ]]>
             </code>
             </example>
             <seealso cref="T:Microsoft.Azure.Documents.UserDefinedFunction"/>
             <seealso cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>
             <seealso cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/>
             <seealso cref="T:System.Threading.Tasks.Task"/>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.IDocumentClient.UpsertUserDefinedFunctionAsync(System.Uri,Microsoft.Azure.Documents.UserDefinedFunction,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Upserts a user defined function as an asychronous operation in the Azure Cosmos DB service.
            </summary>
            <param name="documentCollectionUri">The URI of the document collection to upsert the user defined function in.</param>
            <param name="function">The <see cref="T:Microsoft.Azure.Documents.UserDefinedFunction"/> object.</param>
            <param name="options">(Optional) The <see cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/> for the request.</param>
            <returns>The task object representing the service response for the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.IDocumentClient.CreateDocumentCollectionQuery(System.Uri,Microsoft.Azure.Cosmos.FeedOptions)">
            <summary>
            Method to create a query for document collections in the Azure Cosmos DB service.
            </summary>
            <param name="databaseUri">The URI of the parent database.</param>
            <param name="feedOptions">(Optional) The <see cref="T:Microsoft.Azure.Cosmos.FeedOptions"/> for processing the query results feed.</param>
            <returns>The query result set.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.IDocumentClient.CreateDocumentCollectionQuery(System.Uri,System.String,Microsoft.Azure.Cosmos.FeedOptions)">
            <summary>
            Method to create a query for document collections in the Azure Cosmos DB service.
            </summary>
            <param name="databaseUri">The URI to the database.</param>
            <param name="sqlExpression">The sql query.</param>
            <param name="feedOptions">(Optional) The <see cref="T:Microsoft.Azure.Cosmos.FeedOptions"/> for processing the query results feed.</param>
            <returns>The query result set.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.IDocumentClient.CreateDocumentCollectionQuery(System.Uri,Microsoft.Azure.Cosmos.SqlQuerySpec,Microsoft.Azure.Cosmos.FeedOptions)">
            <summary>
            Method to create a query for document collections in the Azure Cosmos DB service.
            </summary>
            <param name="databaseUri">The URI to the database.</param>
            <param name="querySpec">The sql query.</param>
            <param name="feedOptions">(Optional) The <see cref="T:Microsoft.Azure.Cosmos.FeedOptions"/> for processing the query results feed.</param>
            <returns>The query result set.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.IDocumentClient.CreateStoredProcedureQuery(System.Uri,Microsoft.Azure.Cosmos.FeedOptions)">
            <summary>
            Method to create query for stored procedures in the Azure Cosmos DB service.
            </summary>
            <param name="documentCollectionUri">The URI of the parent document collection.</param>
            <param name="feedOptions">(Optional) The <see cref="T:Microsoft.Azure.Cosmos.FeedOptions"/> for processing the query results feed.</param>
            <returns>The query result set.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.IDocumentClient.CreateStoredProcedureQuery(System.Uri,System.String,Microsoft.Azure.Cosmos.FeedOptions)">
            <summary>
            Method to create query for stored procedures in the Azure Cosmos DB service.
            </summary>
            <param name="documentCollectionUri">The URI of the parent document collection.</param>
            <param name="sqlExpression">The sql query.</param>
            <param name="feedOptions">(Optional) The <see cref="T:Microsoft.Azure.Cosmos.FeedOptions"/> for processing the query results feed.</param>
            <returns>The query result set.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.IDocumentClient.CreateStoredProcedureQuery(System.Uri,Microsoft.Azure.Cosmos.SqlQuerySpec,Microsoft.Azure.Cosmos.FeedOptions)">
            <summary>
            Method to create query for stored procedures in the Azure Cosmos DB service.
            </summary>
            <param name="documentCollectionUri">The URI of the parent document collection.</param>
            <param name="querySpec">The sql query.</param>
            <param name="feedOptions">(Optional) The <see cref="T:Microsoft.Azure.Cosmos.FeedOptions"/> for processing the query results feed.</param>
            <returns>The query result set.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.IDocumentClient.CreateTriggerQuery(System.Uri,Microsoft.Azure.Cosmos.FeedOptions)">
            <summary>
            Method to create query for triggers in the Azure Cosmos DB service.
            </summary>
            <param name="documentCollectionUri">The URI of the parent document collection.</param>
            <param name="feedOptions">(Optional) The <see cref="T:Microsoft.Azure.Cosmos.FeedOptions"/> for processing the query results feed.</param>
            <returns>The query result set.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.IDocumentClient.CreateTriggerQuery(System.Uri,System.String,Microsoft.Azure.Cosmos.FeedOptions)">
            <summary>
            Method to create query for triggers in the Azure Cosmos DB service.
            </summary>
            <param name="documentCollectionUri">The URI of the parent document collection.</param>
            <param name="sqlExpression">The sql query.</param>
            <param name="feedOptions">(Optional) The <see cref="T:Microsoft.Azure.Cosmos.FeedOptions"/> for processing the query results feed.</param>
            <returns>The query result set.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.IDocumentClient.CreateTriggerQuery(System.Uri,Microsoft.Azure.Cosmos.SqlQuerySpec,Microsoft.Azure.Cosmos.FeedOptions)">
            <summary>
            Method to create query for triggers in the Azure Cosmos DB service.
            </summary>
            <param name="documentCollectionUri">The URI of the parent document collection.</param>
            <param name="querySpec">The sql query.</param>
            <param name="feedOptions">(Optional) The <see cref="T:Microsoft.Azure.Cosmos.FeedOptions"/> for processing the query results feed.</param>
            <returns>The query result set.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.IDocumentClient.CreateUserDefinedFunctionQuery(System.Uri,Microsoft.Azure.Cosmos.FeedOptions)">
            <summary>
            Method to create a query for user-defined functions in the Azure Cosmos DB service.
            </summary>
            <param name="documentCollectionUri">The URI of the parent document collection.</param>
            <param name="feedOptions">(Optional) The <see cref="T:Microsoft.Azure.Cosmos.FeedOptions"/> for processing the query results feed.</param>
            <returns>The query result set.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.IDocumentClient.CreateUserDefinedFunctionQuery(System.Uri,System.String,Microsoft.Azure.Cosmos.FeedOptions)">
            <summary>
            Method to create a query for user-defined functions in the Azure Cosmos DB service.
            </summary>
            <param name="documentCollectionUri">The URI of the parent document collection.</param>
            <param name="sqlExpression">The sql query.</param>
            <param name="feedOptions">(Optional) The <see cref="T:Microsoft.Azure.Cosmos.FeedOptions"/> for processing the query results feed.</param>
            <returns>The query result set.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.IDocumentClient.CreateUserDefinedFunctionQuery(System.Uri,Microsoft.Azure.Cosmos.SqlQuerySpec,Microsoft.Azure.Cosmos.FeedOptions)">
            <summary>
            Method to create a query for user-defined functions in the Azure Cosmos DB service.
            </summary>
            <param name="documentCollectionUri">The URI of the parent document collection.</param>
            <param name="querySpec">The sql query.</param>
            <param name="feedOptions">(Optional) The <see cref="T:Microsoft.Azure.Cosmos.FeedOptions"/> for processing the query results feed.</param>
            <returns>The query result set.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.IDocumentClient.CreateConflictQuery(System.Uri,Microsoft.Azure.Cosmos.FeedOptions)">
            <summary>
            Method to create a query for conflicts in the Azure Cosmos DB service.
            </summary>
            <param name="documentCollectionUri">The URI of the parent document collection.</param>
            <param name="feedOptions">(Optional) The <see cref="T:Microsoft.Azure.Cosmos.FeedOptions"/> for processing the query results feed.</param>
            <returns>The query result set.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.IDocumentClient.CreateConflictQuery(System.Uri,System.String,Microsoft.Azure.Cosmos.FeedOptions)">
            <summary>
            Method to create a query for conflicts in the Azure Cosmos DB service.
            </summary>
            <param name="documentCollectionUri">The URI of the parent document collection.</param>
            <param name="sqlExpression">The sql query.</param>
            <param name="feedOptions">(Optional) The <see cref="T:Microsoft.Azure.Cosmos.FeedOptions"/> for processing the query results feed.</param>
            <returns>The query result set.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.IDocumentClient.CreateConflictQuery(System.Uri,Microsoft.Azure.Cosmos.SqlQuerySpec,Microsoft.Azure.Cosmos.FeedOptions)">
            <summary>
            Method to create a query for conflicts in the Azure Cosmos DB service.
            </summary>
            <param name="documentCollectionUri">The URI of the parent document collection.</param>
            <param name="querySpec">The sql query.</param>
            <param name="feedOptions">(Optional) The <see cref="T:Microsoft.Azure.Cosmos.FeedOptions"/> for processing the query results feed.</param>
            <returns>The query result set.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.IDocumentClient.CreateDocumentQuery``1(System.Uri,Microsoft.Azure.Cosmos.FeedOptions)">
            <summary>
            Method to create a query for documents in the Azure Cosmos DB service.
            </summary>
            <typeparam name="T">The type of object to query.</typeparam>
            <param name="documentCollectionUri">The URI of the parent document collection.</param>
            <param name="feedOptions">(Optional) The <see cref="T:Microsoft.Azure.Cosmos.FeedOptions"/> for processing the query results feed.</param>
            <returns>The query result set.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.IDocumentClient.CreateDocumentQuery``1(System.Uri,System.String,Microsoft.Azure.Cosmos.FeedOptions)">
            <summary>
            Method to create a query for documents in the Azure Cosmos DB service.
            </summary>
            <typeparam name="T">The type of object to query.</typeparam>
            <param name="documentCollectionUri">The URI of the document collection.</param>
            <param name="sqlExpression">The sql query.</param>
            <param name="feedOptions">(Optional) The <see cref="T:Microsoft.Azure.Cosmos.FeedOptions"/> for processing the query results feed.</param>
            <returns>The query result set.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.IDocumentClient.CreateDocumentQuery``1(System.Uri,Microsoft.Azure.Cosmos.SqlQuerySpec,Microsoft.Azure.Cosmos.FeedOptions)">
            <summary>
            Method to create a query for documents in the Azure Cosmos DB service.
            </summary>
            <typeparam name="T">The type of object to query.</typeparam>
            <param name="documentCollectionUri">The URI of the document collection.</param>
            <param name="querySpec">The sql query.</param>
            <param name="feedOptions">(Optional) The <see cref="T:Microsoft.Azure.Cosmos.FeedOptions"/> for processing the query results feed.</param>
            <returns>The query result set.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.IDocumentClient.CreateDocumentQuery(System.Uri,Microsoft.Azure.Cosmos.FeedOptions)">
            <summary>
            Method to create a query for documents in the Azure Cosmos DB service.
            </summary>
            <param name="documentCollectionUri">The URI of the document collection.</param>
            <param name="feedOptions">(Optional) The <see cref="T:Microsoft.Azure.Cosmos.FeedOptions"/> for processing the query results feed.</param>
            <returns>The query result set.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.IDocumentClient.CreateDocumentQuery(System.Uri,System.String,Microsoft.Azure.Cosmos.FeedOptions)">
            <summary>
            Method to create a query for documents in the Azure Cosmos DB service.
            </summary>
            <param name="documentCollectionUri">The URI of the document collection.</param>
            <param name="sqlExpression">The sql query.</param>
            <param name="feedOptions">(Optional) The <see cref="T:Microsoft.Azure.Cosmos.FeedOptions"/> for processing the query results feed.</param>
            <returns>The query result set.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.IDocumentClient.CreateDocumentQuery(System.Uri,Microsoft.Azure.Cosmos.SqlQuerySpec,Microsoft.Azure.Cosmos.FeedOptions)">
            <summary>
            Method to create a query for documents in the Azure Cosmos DB service.
            </summary>
            <param name="documentCollectionUri">The URI of the document collection.</param>
            <param name="querySpec">The sql query.</param>
            <param name="feedOptions">(Optional) The <see cref="T:Microsoft.Azure.Cosmos.FeedOptions"/> for processing the query results feed.</param>
            <returns>The query result set.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.IDocumentClient.CreateDocumentChangeFeedQuery(System.Uri,Microsoft.Azure.Cosmos.ChangeFeedOptions)">
            <summary>
            Extension method to create a change feed query for documents in the Azure Cosmos DB service.
            </summary>
            <param name="collectionLink">Specifies the collection to read documents from.</param>
            <param name="feedOptions">The options for processing the query results feed.</param>
            <returns>the query result set.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.IDocumentClient.CreateDatabaseQuery(Microsoft.Azure.Cosmos.FeedOptions)">
            <summary>
            Overloaded. This method creates a query for database resources under an account in the Azure Cosmos DB service. It returns An IOrderedQueryable{Database}.
            </summary>
            <param name="feedOptions">The options for processing the query result feed. For details, see <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions"/></param>
            <returns>An IOrderedQueryable{Database} that can evaluate the query with the provided SQL statement.</returns>
            <example>
            This example below queries for databases by id.
            <code language="c#">
            <![CDATA[
            Database database = client.CreateDatabaseQuery().Where(d => d.Id == "mydb").AsEnumerable().FirstOrDefault();
            ]]>
            </code>
            </example>
            <seealso cref="T:Microsoft.Azure.Cosmos.Database"/>
            <seealso cref="T:Microsoft.Azure.Cosmos.Linq.IDocumentQuery"/>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.IDocumentClient.CreateDatabaseQuery(System.String,Microsoft.Azure.Cosmos.FeedOptions)">
            <summary>
            Overloaded. This method creates a query for database resources under an Azure Cosmos DB database account by using a SQL statement. It returns an IQueryable{dynamic}.
            </summary>
            <param name="sqlExpression">The SQL statement.</param>
            <param name="feedOptions">The options for processing the query result feed. For details, see <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions"/></param>
            <returns>An IQueryable{dynamic} that can evaluate the query with the provided SQL statement.</returns>
            <example>
            This example below queries for databases by id.
            <code language="c#">
            <![CDATA[
            Database database = client.CreateDatabaseQuery("SELECT * FROM dbs d WHERE d.id = 'mydb'").AsEnumerable().FirstOrDefault();
            ]]>
            </code>
            </example>
            <remarks>Refer to https://msdn.microsoft.com/en-us/library/azure/dn782250.aspx and http://azure.microsoft.com/documentation/articles/documentdb-sql-query/ for syntax and examples.</remarks>
            <seealso cref="T:Microsoft.Azure.Documents.Database"/>
            <seealso cref="T:Microsoft.Azure.Cosmos.Linq.IDocumentQuery"/>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.IDocumentClient.CreateDatabaseQuery(Microsoft.Azure.Cosmos.SqlQuerySpec,Microsoft.Azure.Cosmos.FeedOptions)">
            <summary>
            Overloaded. This method creates a query for database resources under an Azure Cosmos DB database account by using a SQL statement with parameterized values. It returns an IQueryable{dynamic}.
             For more information on preparing SQL statements with parameterized values, please see <see cref="T:Microsoft.Azure.Cosmos.SqlQuerySpec"/>.
            </summary>
            <param name="querySpec">The SqlQuerySpec instance containing the SQL expression.</param>
            <param name="feedOptions">The options for processing the query result feed. For details, see <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions"/></param>
            <returns>An IQueryable{dynamic} that can evaluate the query with the provided SQL statement.</returns>
            <example>
            This example below queries for databases by id.
            <code language="c#">
            <![CDATA[
            var query = new SqlQuerySpec("SELECT * FROM dbs d WHERE d.id = @id",
                new SqlParameterCollection(new SqlParameter[] { new SqlParameter { Name = "@id", Value = "mydb" }}));
            dynamic database = client.CreateDatabaseQuery<dynamic>(query).AsEnumerable().FirstOrDefault();
            ]]>
            </code>
            </example>
            <remarks>Refer to https://msdn.microsoft.com/en-us/library/azure/dn782250.aspx and http://azure.microsoft.com/documentation/articles/documentdb-sql-query/ for syntax and examples.</remarks>
            <seealso cref="T:Microsoft.Azure.Cosmos.Database"/>
            <seealso cref="T:Microsoft.Azure.Cosmos.Linq.IDocumentQuery"/>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.IDocumentClient.CreateDocumentCollectionQuery(System.String,Microsoft.Azure.Cosmos.FeedOptions)">
            <summary>
            Overloaded. This method creates a query for collections under an Azure Cosmos DB database. It returns An IOrderedQueryable{DocumentCollection}.
            </summary>
            <param name="databaseLink">The link to the parent database resource.</param>
            <param name="feedOptions">The options for processing the query result feed. For details, see <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions"/></param>
            <returns>An IOrderedQueryable{DocumentCollection} that can evaluate the query with the provided SQL statement.</returns>
            <example>
            This example below queries for collections by id.
            <code language="c#">
            <![CDATA[
            DocumentCollection collection = client.CreateDocumentCollectionQuery(databaseLink).Where(c => c.Id == "myColl").AsEnumerable().FirstOrDefault();
            ]]>
            </code>
            </example>
            <seealso cref="T:Microsoft.Azure.Documents.DocumentCollection"/>
            <seealso cref="T:Microsoft.Azure.Cosmos.Linq.IDocumentQuery"/>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.IDocumentClient.CreateDocumentCollectionQuery(System.String,System.String,Microsoft.Azure.Cosmos.FeedOptions)">
            <summary>
            Overloaded. This method creates a query for collections under an Azure Cosmos DB database using a SQL statement.   It returns an IQueryable{DocumentCollection}.
            </summary>
            <param name="databaseLink">The link to the parent database resource.</param>
            <param name="sqlExpression">The SQL statement.</param>
            <param name="feedOptions">The options for processing the query result feed. For details, see <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions"/></param>
            <returns>An IQueryable{dynamic} that can evaluate the query with the provided SQL statement.</returns>
            <example>
            This example below queries for collections by id.
            <code language="c#">
            <![CDATA[
            DocumentCollection collection = client.CreateDocumentCollectionQuery(databaseLink, "SELECT * FROM colls c WHERE c.id = 'mycoll'").AsEnumerable().FirstOrDefault();
            ]]>
            </code>
            </example>
            <remarks>Refer to https://msdn.microsoft.com/en-us/library/azure/dn782250.aspx and http://azure.microsoft.com/documentation/articles/documentdb-sql-query/ for syntax and examples.</remarks>
            <seealso cref="T:Microsoft.Azure.Documents.DocumentCollection"/>
            <seealso cref="T:Microsoft.Azure.Cosmos.Linq.IDocumentQuery"/>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.IDocumentClient.CreateDocumentCollectionQuery(System.String,Microsoft.Azure.Cosmos.SqlQuerySpec,Microsoft.Azure.Cosmos.FeedOptions)">
            <summary>
            Overloaded. This method creates a query for collections under an Azure Cosmos DB database using a SQL statement with parameterized values. It returns an IQueryable{dynamic}.
             For more information on preparing SQL statements with parameterized values, please see <see cref="T:Microsoft.Azure.Cosmos.SqlQuerySpec"/>.
            </summary>
            <param name="databaseLink">The link to the parent database resource.</param>
            <param name="querySpec">The SqlQuerySpec instance containing the SQL expression.</param>
            <param name="feedOptions">The options for processing the query result feed. For details, see <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions"/></param>
            <returns>An IQueryable{dynamic} that can evaluate the query with the provided SQL statement.</returns>
            <example>
            This example below queries for collections by id.
            <code language="c#">
            <![CDATA[
            var query = new SqlQuerySpec("SELECT * FROM colls c WHERE c.id = @id", new SqlParameterCollection(new SqlParameter[] { new SqlParameter { Name = "@id", Value = "mycoll" }}));
            DocumentCollection collection = client.CreateDocumentCollectionQuery(databaseLink, query).AsEnumerable().FirstOrDefault();
            ]]>
            </code>
            </example>
            <remarks>Refer to https://msdn.microsoft.com/en-us/library/azure/dn782250.aspx and http://azure.microsoft.com/documentation/articles/documentdb-sql-query/ for syntax and examples.</remarks>
            <seealso cref="T:Microsoft.Azure.Documents.DocumentCollection"/>
            <seealso cref="T:Microsoft.Azure.Cosmos.Linq.IDocumentQuery"/>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.IDocumentClient.CreateStoredProcedureQuery(System.String,Microsoft.Azure.Cosmos.FeedOptions)">
            <summary>
            Overloaded. This method creates a query for stored procedures under a collection in an Azure Cosmos DB service. It returns An IOrderedQueryable{StoredProcedure}.
            </summary>
            <param name="collectionLink">The link to the parent collection resource.</param>
            <param name="feedOptions">The options for processing the query result feed. For details, see <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions"/></param>
            <returns>An IOrderedQueryable{StoredProcedure} that can evaluate the query with the provided SQL statement.</returns>
            <example>
            This example below queries for stored procedures by id.
            <code language="c#">
            <![CDATA[
            StoredProcedure storedProcedure = client.CreateStoredProcedureQuery(collectionLink).Where(c => c.Id == "helloWorld").AsEnumerable().FirstOrDefault();
            ]]>
            </code>
            </example>
            <seealso cref="T:Microsoft.Azure.Documents.StoredProcedure"/>
            <seealso cref="T:Microsoft.Azure.Cosmos.Linq.IDocumentQuery"/>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.IDocumentClient.CreateStoredProcedureQuery(System.String,System.String,Microsoft.Azure.Cosmos.FeedOptions)">
            <summary>
            Overloaded. This method creates a query for stored procedures under a collection in an Azure Cosmos DB database using a SQL statement. It returns an IQueryable{dynamic}.
            </summary>
            <param name="collectionLink">The link to the parent collection resource.</param>
            <param name="sqlExpression">The SQL statement.</param>
            <param name="feedOptions">The options for processing the query result feed. For details, see <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions"/></param>
            <returns>An IQueryable{dynamic} that can evaluate the query with the provided SQL statement.</returns>
            <example>
            This example below queries for stored procedures by id.
            <code language="c#">
            <![CDATA[
            StoredProcedure storedProcedure = client.CreateStoredProcedureQuery(collectionLink, "SELECT * FROM sprocs s WHERE s.id = 'HelloWorld'").AsEnumerable().FirstOrDefault();
            ]]>
            </code>
            </example>
            <remarks>Refer to https://msdn.microsoft.com/en-us/library/azure/dn782250.aspx and http://azure.microsoft.com/documentation/articles/documentdb-sql-query/ for syntax and examples.</remarks>
            <seealso cref="T:Microsoft.Azure.Documents.StoredProcedure"/>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.IDocumentClient.CreateStoredProcedureQuery(System.String,Microsoft.Azure.Cosmos.SqlQuerySpec,Microsoft.Azure.Cosmos.FeedOptions)">
            <summary>
            Overloaded. This method creates a query for stored procedures under a collection in an Azure Cosmos DB database using a SQL statement using a SQL statement with parameterized values. It returns an IQueryable{dynamic}.
             For more information on preparing SQL statements with parameterized values, please see <see cref="T:Microsoft.Azure.Cosmos.SqlQuerySpec"/>.
            </summary>
            <param name="collectionLink">The link to the parent collection resource.</param>
            <param name="querySpec">The SqlQuerySpec instance containing the SQL expression.</param>
            <param name="feedOptions">The options for processing the query result feed. For details, see <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions"/></param>
            <returns>An IQueryable{dynamic} that can evaluate the query with the provided SQL statement.</returns>
            <example>
            This example below queries for stored procedures by id.
            <code language="c#">
            <![CDATA[
            var query = new SqlQuerySpec("SELECT * FROM sprocs s WHERE s.id = @id", new SqlParameterCollection(new SqlParameter[] { new SqlParameter { Name = "@id", Value = "HelloWorld" }}));
            StoredProcedure storedProcedure = client.CreateStoredProcedureQuery(collectionLink, query).AsEnumerable().FirstOrDefault();
            ]]>
            </code>
            </example>
            <remarks>Refer to https://msdn.microsoft.com/en-us/library/azure/dn782250.aspx and http://azure.microsoft.com/documentation/articles/documentdb-sql-query/ for syntax and examples.</remarks>
            <seealso cref="T:Microsoft.Azure.Documents.StoredProcedure"/>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.IDocumentClient.CreateTriggerQuery(System.String,Microsoft.Azure.Cosmos.FeedOptions)">
            <summary>
            Overloaded. This method creates a query for triggers under a collection in an Azure Cosmos DB service. It returns An IOrderedQueryable{Trigger}.
            </summary>
            <param name="collectionLink">The link to the parent collection resource.</param>
            <param name="feedOptions">The options for processing the query result feed. For details, see <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions"/></param>
            <returns>An IOrderedQueryable{Trigger} that can evaluate the query with the provided SQL statement.</returns>
            <example>
            This example below queries for triggers by id.
            <code language="c#">
            <![CDATA[
            Trigger trigger = client.CreateTriggerQuery(collectionLink).Where(t => t.Id == "validate").AsEnumerable().FirstOrDefault();
            ]]>
            </code>
            </example>
            <seealso cref="T:Microsoft.Azure.Documents.Trigger"/>
            <seealso cref="T:Microsoft.Azure.Cosmos.Linq.IDocumentQuery"/>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.IDocumentClient.CreateTriggerQuery(System.String,System.String,Microsoft.Azure.Cosmos.FeedOptions)">
            <summary>
            Overloaded. This method creates a query for triggers under a collection in an Azure Cosmos DB service. It returns an IQueryable{dynamic}.
            </summary>
            <param name="collectionLink">The link to the parent collection resource.</param>
            <param name="sqlExpression">The SQL statement.</param>
            <param name="feedOptions">The options for processing the query result feed. For details, see <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions"/></param>
            <returns>An IQueryable{dynamic} that can evaluate the query with the provided SQL statement.</returns>
            <example>
            This example below queries for triggers by id.
            <code language="c#">
            <![CDATA[
            Trigger trigger = client.CreateTriggerQuery(collectionLink, "SELECT * FROM triggers t WHERE t.id = 'validate'").AsEnumerable().FirstOrDefault();
            ]]>
            </code>
            </example>
            <remarks>Refer to https://msdn.microsoft.com/en-us/library/azure/dn782250.aspx and http://azure.microsoft.com/documentation/articles/documentdb-sql-query/ for syntax and examples.</remarks>
            <seealso cref="T:Microsoft.Azure.Documents.Trigger"/>
            <seealso cref="T:Microsoft.Azure.Cosmos.Linq.IDocumentQuery"/>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.IDocumentClient.CreateTriggerQuery(System.String,Microsoft.Azure.Cosmos.SqlQuerySpec,Microsoft.Azure.Cosmos.FeedOptions)">
            <summary>
            Overloaded. This method creates a query for triggers under a collection in the Azure Cosmos DB service using a SQL statement with parameterized values. It returns an IQueryable{dynamic}.
             For more information on preparing SQL statements with parameterized values, please see <see cref="T:Microsoft.Azure.Cosmos.SqlQuerySpec"/>.
            </summary>
            <param name="collectionLink">The link to the parent collection resource.</param>
            <param name="querySpec">The SqlQuerySpec instance containing the SQL expression.</param>
            <param name="feedOptions">The options for processing the query result feed. For details, see <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions"/></param>
            <returns>An IQueryable{Trigger} that can evaluate the query with the provided SQL statement.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.IDocumentClient.CreateUserDefinedFunctionQuery(System.String,Microsoft.Azure.Cosmos.FeedOptions)">
            <summary>
            Overloaded. This method creates a query for udfs under a collection in an Azure Cosmos DB service. It returns An IOrderedQueryable{UserDefinedFunction}.
            </summary>
            <param name="collectionLink">The link to the parent collection resource.</param>
            <param name="feedOptions">The options for processing the query result feed. For details, see <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions"/></param>
            <returns>An IOrderedQueryable{UserDefinedFunction} that can evaluate the query with the provided SQL statement.</returns>
            <example>
            This example below queries for user-defined functions by id.
            <code language="c#">
            <![CDATA[
            UserDefinedFunction udf = client.CreateUserDefinedFunctionQuery(collectionLink).Where(u => u.Id == "sqrt").AsEnumerable().FirstOrDefault();
            ]]>
            </code>
            </example>
            <seealso cref="T:Microsoft.Azure.Documents.UserDefinedFunction"/>
            <seealso cref="T:Microsoft.Azure.Cosmos.Linq.IDocumentQuery"/>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.IDocumentClient.CreateUserDefinedFunctionQuery(System.String,System.String,Microsoft.Azure.Cosmos.FeedOptions)">
            <summary>
            Overloaded. This method creates a query for udfs under a collection in an Azure Cosmos DB database using a SQL statement. It returns an IQueryable{dynamic}.
            </summary>
            <param name="collectionLink">The link to the parent collection resource.</param>
            <param name="sqlExpression">The SQL statement.</param>
            <param name="feedOptions">The options for processing the query result feed. For details, see <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions"/></param>
            <returns>An IQueryable{dynamic} that can evaluate the query with the provided SQL statement.</returns>
            <example>
            This example below queries for user-defined functions by id.
            <code language="c#">
            <![CDATA[
            UserDefinedFunction udf = client.CreateUserDefinedFunctionQuery(collectionLink, "SELECT * FROM udfs u WHERE u.id = 'sqrt'").AsEnumerable().FirstOrDefault();
            ]]>
            </code>
            </example>
            <remarks>Refer to https://msdn.microsoft.com/en-us/library/azure/dn782250.aspx and http://azure.microsoft.com/documentation/articles/documentdb-sql-query/ for syntax and examples.</remarks>
            <seealso cref="T:Microsoft.Azure.Documents.UserDefinedFunction"/>
            <seealso cref="T:Microsoft.Azure.Cosmos.Linq.IDocumentQuery"/>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.IDocumentClient.CreateUserDefinedFunctionQuery(System.String,Microsoft.Azure.Cosmos.SqlQuerySpec,Microsoft.Azure.Cosmos.FeedOptions)">
            <summary>
            Overloaded. This method creates a query for udfs under a collection in the Azure Cosmos DB service with parameterized values. It returns an IQueryable{dynamic}.
             For more information on preparing SQL statements with parameterized values, please see <see cref="T:Microsoft.Azure.Cosmos.SqlQuerySpec"/>.
            </summary>
            <param name="collectionLink">The link to the parent collection resource.</param>
            <param name="querySpec">The SqlQuerySpec instance containing the SQL expression.</param>
            <param name="feedOptions">The options for processing the query result feed. For details, see <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions"/></param>
            <returns>An IQueryable{dynamic} that can evaluate the query with the provided SQL statement.</returns>
            <example>
            This example below queries for user-defined functions by id.
            <code language="c#">
            <![CDATA[
            var query = new SqlQuerySpec("SELECT * FROM udfs u WHERE u.id = @id", new SqlParameterCollection(new SqlParameter[] { new SqlParameter { Name = "@id", Value = "sqrt" }}));
            UserDefinedFunction udf = client.CreateUserDefinedFunctionQuery(collectionLink, query).AsEnumerable().FirstOrDefault();
            ]]>
            </code>
            </example>
            <remarks>Refer to https://msdn.microsoft.com/en-us/library/azure/dn782250.aspx and http://azure.microsoft.com/documentation/articles/documentdb-sql-query/ for syntax and examples.</remarks>
            <seealso cref="T:Microsoft.Azure.Documents.UserDefinedFunction"/>
            <seealso cref="T:Microsoft.Azure.Cosmos.Linq.IDocumentQuery"/>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.IDocumentClient.CreateConflictQuery(System.String,Microsoft.Azure.Cosmos.FeedOptions)">
            <summary>
            Overloaded. This method creates a query for conflicts under a collection in an Azure Cosmos DB service. It returns An IOrderedQueryable{Conflict}.
            </summary>
            <param name="collectionLink">The link to the parent collection resource.</param>
            <param name="feedOptions">The options for processing the query result feed. For details, see <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions"/></param>
            <returns>An IOrderedQueryable{Conflict} that can evaluate the query with the provided SQL statement.</returns>
            <example>
            This example below queries for conflicts by id.
            <code language="c#">
            <![CDATA[
            Conflict conflict = client.CreateConflictQuery(collectionLink).Where(c => c.Id == "summary").AsEnumerable().FirstOrDefault();
            ]]>
            </code>
            </example>
            <seealso cref="T:Microsoft.Azure.Documents.Conflict"/>
            <seealso cref="T:Microsoft.Azure.Cosmos.Linq.IDocumentQuery"/>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.IDocumentClient.CreateConflictQuery(System.String,System.String,Microsoft.Azure.Cosmos.FeedOptions)">
            <summary>
            Overloaded. This method creates a query for conflicts under a collection in an Azure Cosmos DB service. It returns an IQueryable{Conflict}.
            </summary>
            <param name="collectionLink">The link to the parent collection resource.</param>
            <param name="sqlExpression">The SQL statement.</param>
            <param name="feedOptions">The options for processing the query result feed. For details, see <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions"/></param>
            <returns>An IQueryable{dynamic} that can evaluate the query with the the provided SQL statement.</returns>
            <example>
            This example below queries for conflicts by id.
            <code language="c#">
            <![CDATA[
            var query = new SqlQuerySpec("SELECT * FROM conflicts c WHERE c.id = @id", new SqlParameterCollection(new SqlParameter[] { new SqlParameter { Name = "@id", Value = "summary" }}));
            Conflict conflict = client.CreateConflictQuery(collectionLink, query).AsEnumerable().FirstOrDefault();
            ]]>
            </code>
            </example>
            <remarks>Refer to https://msdn.microsoft.com/en-us/library/azure/dn782250.aspx and http://azure.microsoft.com/documentation/articles/documentdb-sql-query/ for syntax and examples.</remarks>
            <seealso cref="T:Microsoft.Azure.Documents.Conflict"/>
            <seealso cref="T:Microsoft.Azure.Cosmos.Linq.IDocumentQuery"/>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.IDocumentClient.CreateConflictQuery(System.String,Microsoft.Azure.Cosmos.SqlQuerySpec,Microsoft.Azure.Cosmos.FeedOptions)">
            <summary>
            Overloaded. This method creates a query for conflicts under a collection in an Azure Cosmos DB database with parameterized values. It returns an IQueryable{dynamic}.
             For more information on preparing SQL statements with parameterized values, please see <see cref="T:Microsoft.Azure.Cosmos.SqlQuerySpec"/>.
            </summary>
            <param name="collectionLink">The link to the parent collection resource.</param>
            <param name="querySpec">The SqlQuerySpec instance containing the SQL expression.</param>
            <param name="feedOptions">The options for processing the query result feed. For details, see <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions"/></param>
            <returns>An IQueryable{dynamic} that can evaluate the query with the provided SQL statement.</returns>
            <example>
            This example below queries for conflicts by id.
            <code language="c#">
            <![CDATA[
            var query = new SqlQuerySpec("SELECT * FROM conflicts c WHERE c.id = @id", new SqlParameterCollection(new SqlParameter[] { new SqlParameter { Name = "@id", Value = "summary" }}));
            dynamic conflict = client.CreateConflictQuery<dynamic>(collectionLink, query).AsEnumerable().FirstOrDefault();
            ]]>
            </code>
            </example>
            <remarks>Refer to https://msdn.microsoft.com/en-us/library/azure/dn782250.aspx and http://azure.microsoft.com/documentation/articles/documentdb-sql-query/ for syntax and examples.</remarks>
            <seealso cref="T:Microsoft.Azure.Documents.Document"/>
            <seealso cref="T:Microsoft.Azure.Cosmos.Linq.IDocumentQuery"/>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.IDocumentClient.CreateDocumentQuery``1(System.String,Microsoft.Azure.Cosmos.FeedOptions)">
            <summary>
            Overloaded. This method creates a query for documents under a collection in an Azure Cosmos DB service.
            </summary>
            <typeparam name="T">The type of object to query.</typeparam>
            <param name="collectionLink">The link to the parent collection resource.</param>
            <param name="feedOptions">The options for processing the query result feed. For details, see <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions"/></param>
            <returns>An IOrderedQueryable{T} that can evaluate the query.</returns>
            <example>
            This example below queries for some book documents.
            <code language="c#">
            <![CDATA[
            public class Book 
            {
                [JsonProperty("title")]
                public string Title {get; set;}
                
                public Author Author {get; set;}
                
                public int Price {get; set;}
            }
            
            public class Author
            {
                public string FirstName {get; set;}
                public string LastName {get; set;}
            }
             
            // Query by the Title property
            Book book = client.CreateDocumentQuery<Book>(collectionLink).Where(b => b.Title == "War and Peace").AsEnumerable().FirstOrDefault();
            
            // Query a nested property
            Book otherBook = client.CreateDocumentQuery<Book>(collectionLink).Where(b => b.Author.FirstName == "Leo").AsEnumerable().FirstOrDefault();
            
            // Perform a range query (needs an IndexType.Range on price or FeedOptions.EnableScansInQuery)
            foreach (Book matchingBook in client.CreateDocumentQuery<Book>(collectionLink).Where(b => b.Price > 100))
            {
                // Iterate through books
            }
            
            // Query asychronously. Optionally set FeedOptions.MaxItemCount to control page size
            using (var queryable = client.CreateDocumentQuery<Book>(
                collectionLink,
                new FeedOptions { MaxItemCount = 10 })
                .Where(b => b.Title == "War and Peace")
                .AsDocumentQuery())
            {
                while (queryable.HasMoreResults) 
                {
                    foreach(Book b in await queryable.ExecuteNextAsync<Book>())
                    {
                        // Iterate through books
                    }
                }
            }
            ]]>
            </code>
            </example>
            <remarks>
            The Azure Cosmos DB LINQ provider compiles LINQ to SQL statements. Refer to http://azure.microsoft.com/documentation/articles/documentdb-sql-query/#linq-to-documentdb-sql for the list of expressions supported by the Azure Cosmos DB LINQ provider. ToString() on the generated IQueryable returns the translated SQL statement. The Azure Cosmos DB provider translates JSON.NET and DataContract serialization attributes for members to their JSON property names.
            </remarks>
            <seealso cref="T:Microsoft.Azure.Documents.Document"/>
            <seealso cref="T:Microsoft.Azure.Cosmos.Linq.IDocumentQuery"/>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.IDocumentClient.CreateDocumentQuery``1(System.String,System.String,Microsoft.Azure.Cosmos.FeedOptions)">
            <summary>
            Overloaded. This method creates a query for documents under a collection in an Azure Cosmos DB database using a SQL statement. It returns an IQueryable{T}.
            </summary>
            <typeparam name="T">The type of object to query.</typeparam>
            <param name="collectionLink">The link to the parent collection.</param>
            <param name="sqlExpression">The SQL statement.</param>
            <param name="feedOptions">The options for processing the query result feed. For details, see <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions"/></param>
            <returns>An IQueryable{T} that can evaluate the query.</returns>
            <example>
            This example below queries for some book documents.
            <code language="c#">
            <![CDATA[
            public class Book 
            {
                [JsonProperty("title")]
                public string Title {get; set;}
                
                public Author Author {get; set;}
                
                public int Price {get; set;}
            }
            
            public class Author
            {
                public string FirstName {get; set;}
                public string LastName {get; set;}
            }
            
            // Query by the Title property
            Book book = client.CreateDocumentQuery<Book>(collectionLink, 
                "SELECT * FROM books b WHERE b.title  = 'War and Peace'").AsEnumerable().FirstOrDefault();
            
            // Query a nested property
            Book otherBook = client.CreateDocumentQuery<Book>(collectionLink,
                "SELECT * FROM books b WHERE b.Author.FirstName = 'Leo'").AsEnumerable().FirstOrDefault();
            
            // Perform a range query (needs an IndexType.Range on price or FeedOptions.EnableScansInQuery)
            foreach (Book matchingBook in client.CreateDocumentQuery<Book>(
                collectionLink, "SELECT * FROM books b where b.Price > 1000"))
            {
                // Iterate through books
            }
            
            // Query asychronously. Optionally set FeedOptions.MaxItemCount to control page size
            using (var queryable = client.CreateDocumentQuery<Book>(collectionLink, 
                "SELECT * FROM books b WHERE b.title  = 'War and Peace'", 
                new FeedOptions { MaxItemCount = 10 }).AsDocumentQuery())
            {
                while (queryable.HasMoreResults) 
                {
                    foreach(Book b in await queryable.ExecuteNextAsync<Book>())
                    {
                        // Iterate through books
                    }
                }
            }
            ]]>
            </code>
            </example>
            <remarks>Refer to https://msdn.microsoft.com/en-us/library/azure/dn782250.aspx and http://azure.microsoft.com/documentation/articles/documentdb-sql-query/ for syntax and examples.</remarks>
            <seealso cref="T:Microsoft.Azure.Documents.Document"/>
            <seealso cref="T:Microsoft.Azure.Cosmos.Linq.IDocumentQuery"/>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.IDocumentClient.CreateDocumentQuery``1(System.String,Microsoft.Azure.Cosmos.SqlQuerySpec,Microsoft.Azure.Cosmos.FeedOptions)">
            <summary>
            Overloaded. This method creates a query for documents under a collection in an Azure Cosmos DB database using a SQL statement with parameterized values. It returns an IQueryable{T}.
             For more information on preparing SQL statements with parameterized values, please see <see cref="T:Microsoft.Azure.Cosmos.SqlQuerySpec"/>.
            </summary>
            <typeparam name="T">The type of object to query.</typeparam>
            <param name="collectionLink">The link to the parent document collection.</param>
            <param name="querySpec">The SqlQuerySpec instance containing the SQL expression.</param>
            <param name="feedOptions">The options for processing the query result feed. For details, see <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions"/></param>
            <returns>An IQueryable{T} that can evaluate the query.</returns>
            <example>
            This example below queries for some book documents.
            <code language="c#">
            <![CDATA[
            public class Book 
            {
                [JsonProperty("title")]
                public string Title {get; set;}
                
                public Author Author {get; set;}
                
                public int Price {get; set;}
            }
            
            public class Author
            {
                public string FirstName {get; set;}
                public string LastName {get; set;}
            }
            
            // Query using Title
            Book book, otherBook;
            
            var query = new SqlQuerySpec(
                "SELECT * FROM books b WHERE b.title = @title", 
                new SqlParameterCollection(new SqlParameter[] { new SqlParameter { Name = "@title", Value = "War and Peace" }}));
            book = client.CreateDocumentQuery<Book>(collectionLink, query).AsEnumerable().FirstOrDefault();
            
            // Query a nested property
            query = new SqlQuerySpec(
                "SELECT * FROM books b WHERE b.Author.FirstName = @firstName", 
                new SqlParameterCollection(new SqlParameter[] { new SqlParameter { Name = "@firstName", Value = "Leo" }}));
            otherBook = client.CreateDocumentQuery<Book>(collectionLink, query).AsEnumerable().FirstOrDefault();
            
            // Perform a range query (needs an IndexType.Range on price or FeedOptions.EnableScansInQuery)
            query = new SqlQuerySpec(
                "SELECT * FROM books b WHERE b.Price > @minPrice", 
                new SqlParameterCollection(new SqlParameter[] { new SqlParameter { Name = "@minPrice", Value = 1000 }}));
            foreach (Book b in client.CreateDocumentQuery<Book>(
                collectionLink, query))
            {
                // Iterate through books
            }
            
            // Query asychronously. Optionally set FeedOptions.MaxItemCount to control page size
            query = new SqlQuerySpec(
                "SELECT * FROM books b WHERE b.title = @title", 
                new SqlParameterCollection(new SqlParameter[] { new SqlParameter { Name = "@title", Value = "War and Peace" }}));
                
            using (var queryable = client.CreateDocumentQuery<Book>(collectionLink, query, 
                new FeedOptions { MaxItemCount = 10 }).AsDocumentQuery())
            {
                while (queryable.HasMoreResults) 
                {
                    foreach(Book b in await queryable.ExecuteNextAsync<Book>())
                    {
                        // Iterate through books
                    }
                }
            }
            ]]>
            </code>
            </example>
            <remarks>Refer to https://msdn.microsoft.com/en-us/library/azure/dn782250.aspx and http://azure.microsoft.com/documentation/articles/documentdb-sql-query/ for syntax and examples.</remarks>
            <seealso cref="T:Microsoft.Azure.Documents.Document"/>
            <seealso cref="T:Microsoft.Azure.Cosmos.Linq.IDocumentQuery"/>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.IDocumentClient.CreateDocumentQuery(System.String,Microsoft.Azure.Cosmos.FeedOptions)">
             <summary>
             Overloaded. This method creates a query for documents under a collection in an Azure Cosmos DB service. It returns IOrderedQueryable{Document}.
             </summary>
             <param name="collectionLink">The link to the parent document collection.</param>
             <param name="feedOptions">The options for processing the query result feed. For details, see <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions"/></param>
             <returns>An IOrderedQueryable{Document} that can evaluate the query.</returns>
             <example>
             This example below queries for documents by id.
             <code language="c#">
             <![CDATA[
             Document document = client.CreateDocumentQuery<Document>(collectionLink)
                 .Where(d => d.Id == "War and Peace").AsEnumerable().FirstOrDefault();
            
             ]]>
             </code>
             </example>
             <remarks>
             This overload should be used when the schema of the queried documents is unknown or when querying by ID and replacing/deleting documents.
             Since Document is a DynamicObject, it can be dynamically cast back to the original C# object.
             </remarks>
             <seealso cref="T:Microsoft.Azure.Documents.Document"/>
             <seealso cref="T:Microsoft.Azure.Cosmos.Linq.IDocumentQuery"/>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.IDocumentClient.CreateDocumentQuery(System.String,System.String,Microsoft.Azure.Cosmos.FeedOptions)">
            <summary>
            Overloaded. This method creates a query for documents under a collection in an Azure Cosmos DB database using a SQL statement. It returns an IQueryable{dynamic}.
            </summary>
            <param name="collectionLink">The link to the parent document collection.</param>
            <param name="sqlExpression">The SQL statement.</param>
            <param name="feedOptions">The options for processing the query result feed. For details, see <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions"/></param>
            <returns>an IQueryable{dynamic> that can evaluate the query.</returns>
            <example>
            This example below queries for book documents.
            <code language="c#">
            <![CDATA[
            // SQL querying allows dynamic property access
            dynamic document = client.CreateDocumentQuery<dynamic>(collectionLink,
                "SELECT * FROM books b WHERE b.title == 'War and Peace'").AsEnumerable().FirstOrDefault();
            ]]>
            </code>
            </example>
            <remarks>Refer to https://msdn.microsoft.com/en-us/library/azure/dn782250.aspx and http://azure.microsoft.com/documentation/articles/documentdb-sql-query/ for syntax and examples.</remarks>
            <seealso cref="T:Microsoft.Azure.Documents.Document"/>
            <seealso cref="T:Microsoft.Azure.Cosmos.Linq.IDocumentQuery"/>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.IDocumentClient.CreateDocumentQuery(System.String,Microsoft.Azure.Cosmos.SqlQuerySpec,Microsoft.Azure.Cosmos.FeedOptions)">
            <summary>
            Overloaded. This method creates a query for documents under a collection in an Azure Cosmos DB database using a SQL statement with parameterized values. It returns an IQueryable{dynamic}.
            For more information on preparing SQL statements with parameterized values, please see <see cref="T:Microsoft.Azure.Cosmos.SqlQuerySpec"/>.
            </summary>
            <param name="collectionLink">The link to the parent document collection.</param>
            <param name="querySpec">The SqlQuerySpec instance containing the SQL expression.</param>
            <param name="feedOptions">The options for processing the query result feed. For details, see <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions"/></param>
            <returns>an IQueryable{dynamic> that can evaluate the query.</returns>
            <example>
            This example below queries for book documents.
            <code language="c#">
            <![CDATA[
            // SQL querying allows dynamic property access
            var query = new SqlQuerySpec(
                "SELECT * FROM books b WHERE b.title = @title", 
                new SqlParameterCollection(new SqlParameter[] { new SqlParameter { Name = "@title", Value = "War and Peace" }}));
                
            dynamic document = client.CreateDocumentQuery<dynamic>(collectionLink, query).AsEnumerable().FirstOrDefault();
            ]]>
            </code>
            </example>
            <remarks>Refer to https://msdn.microsoft.com/en-us/library/azure/dn782250.aspx and http://azure.microsoft.com/documentation/articles/documentdb-sql-query/ for syntax and examples.</remarks>
            <seealso cref="T:Microsoft.Azure.Documents.Document"/>
            <seealso cref="T:Microsoft.Azure.Cosmos.Linq.IDocumentQuery"/>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.IDocumentClient.CreateDocumentChangeFeedQuery(System.String,Microsoft.Azure.Cosmos.ChangeFeedOptions)">
            <summary>
            Overloaded. This method creates a change feed query for documents under a collection in an Azure Cosmos DB service.
            </summary>
            <param name="collectionLink">Specifies the collection to read documents from.</param>
            <param name="feedOptions">The options for processing the query results feed.</param>
            <returns>the query result set.</returns>
            <remarks>ChangeFeedOptions.PartitionKeyRangeId must be provided.</remarks>
            <example>
            <code language="c#">
            <![CDATA[
            string partitionKeyRangeId = "0";   // Use client.ReadPartitionKeyRangeFeedAsync() to obtain the ranges.
            string checkpointContinuation = null;
            ChangeFeedOptions options = new ChangeFeedOptions
            {
                PartitionKeyRangeId = partitionKeyRangeId,
                RequestContinuation = checkpointContinuation,
                StartFromBeginning = true,
            };
            using(var query = client.CreateDocumentChangeFeedQuery(collection.SelfLink, options))
            {
                while (true)
                {
                    do
                    {
                        var response = await query.ExecuteNextAsync<Document>();
                        if (response.Count > 0)
                        {
                            var docs = new List<Document>();
                            docs.AddRange(response);
                            // Process the documents.
                            // Checkpoint response.ResponseContinuation.
                        }
                    }
                    while (query.HasMoreResults);
                    Task.Delay(TimeSpan.FromMilliseconds(500)); // Or break here and use checkpointed continuation token later.
                }       
            }
            ]]>
            </code>
            </example>
            <seealso cref="T:Microsoft.Azure.Cosmos.Linq.IDocumentQuery`1"/>
            <seealso cref="T:Microsoft.Azure.Cosmos.ChangeFeedOptions"/>
            <seealso cref="T:Microsoft.Azure.Documents.PartitionKeyRange"/>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.IDocumentClient.CreateOfferQuery(Microsoft.Azure.Cosmos.FeedOptions)">
            <summary>
            Overloaded. This method creates a query for offers under an Azure Cosmos DB database account. It returns IOrderedQueryable{Offer}.
            </summary>
            <param name="feedOptions">The options for processing the query result feed. For details, see <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions"/></param>
            <returns>An IOrderedQueryable{Offer} that can evaluate the query.</returns>
            <example>
            This example below queries for offers
            <code language="c#">
            <![CDATA[
            // Find the first collection with the S3 offer type
            Offer offer = client.CreateOfferQuery().Where(o => o.OfferType == "S3").AsEnumerable().FirstOrDefault();
            
            // Find the offer for the collection by SelfLink
            Offer offer = client.CreateOfferQuery().Where(o => o.Resource == collectionSelfLink).AsEnumerable().FirstOrDefault();
            ]]>
            </code>
            </example>
            <remarks>Refer to https://msdn.microsoft.com/en-us/library/azure/dn782250.aspx and http://azure.microsoft.com/documentation/articles/documentdb-sql-query/ for syntax and examples.</remarks>
            <seealso cref="T:Microsoft.Azure.Documents.Offer"/>
            <seealso cref="T:Microsoft.Azure.Cosmos.Linq.IDocumentQuery"/>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.IDocumentClient.CreateOfferQuery(System.String,Microsoft.Azure.Cosmos.FeedOptions)">
            <summary>
            Overloaded. This method creates a query for offers under an Azure Cosmos DB database account using a SQL statement. It returns IQueryable{dynamic}.
            </summary>
            <param name="sqlExpression">The SQL statement.</param>
            <param name="feedOptions">The options for processing the query result feed. For details, see <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions"/></param>
            <returns>an IQueryable{dynamic} that can evaluate the query.</returns>
            <example>
            This example below queries for offers
            <code language="c#">
            <![CDATA[
            // Find the first collection with the S3 offer type
            Offer offer = client.CreateOfferQuery("SELECT * FROM offers o WHERE o.offerType = 'S3'").AsEnumerable().FirstOrDefault();
            
            // Find the offer for the collection by SelfLink
            Offer offer = client.CreateOfferQuery(
                string.Format("SELECT * FROM offers o WHERE o.resource = '{0}'", collectionSelfLink)).AsEnumerable().FirstOrDefault();
            ]]>
            </code>
            </example>
            <remarks>Refer to https://msdn.microsoft.com/en-us/library/azure/dn782250.aspx and http://azure.microsoft.com/documentation/articles/documentdb-sql-query/ for syntax and examples.</remarks>
            <seealso cref="T:Microsoft.Azure.Documents.Offer"/>
            <seealso cref="T:Microsoft.Azure.Cosmos.Linq.IDocumentQuery"/>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.IDocumentClient.CreateOfferQuery(Microsoft.Azure.Cosmos.SqlQuerySpec,Microsoft.Azure.Cosmos.FeedOptions)">
            <summary>
            Overloaded. This method creates a query for offers under an Azure Cosmos DB database account using a SQL statement with parameterized values. It returns IQueryable{dynamic}.
            For more information on preparing SQL statements with parameterized values, please see <see cref="T:Microsoft.Azure.Cosmos.SqlQuerySpec"/>.
            </summary>
            <param name="querySpec">The SqlQuerySpec instance containing the SQL expression.</param>
            <param name="feedOptions">The options for processing the query result feed. For details, see <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions"/></param>
            <returns>an IQueryable{dynamic} that can evaluate the query.</returns>
            <example>
            This example below queries for offers
            <code language="c#">
            <![CDATA[
            // Find the first collection with the S3 offer type
            Offer offer = client.CreateOfferQuery("SELECT * FROM offers o WHERE o.offerType = @offerType",
            new SqlParameterCollection(new SqlParameter[] { new SqlParameter { Name = "@offerType", Value = "S3" }}))
            .AsEnumerable().FirstOrDefault();
            
            ]]>
            </code>
            </example>
            <remarks>Refer to https://msdn.microsoft.com/en-us/library/azure/dn782250.aspx and http://azure.microsoft.com/documentation/articles/documentdb-sql-query/ for syntax and examples.</remarks>
            <seealso cref="T:Microsoft.Azure.Documents.Offer"/>
            <seealso cref="T:Microsoft.Azure.Cosmos.Linq.IDocumentQuery"/>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.IDocumentClientRetryPolicy.OnBeforeSendRequest(Microsoft.Azure.Documents.DocumentServiceRequest)">
            <summary>
            Method that is called before a request is sent to allow the retry policy implementation
            to modify the state of the request.
            </summary>
            <param name="request">The request being sent to the service.</param>
            <remarks>
            Currently only read operations will invoke this method. There is no scenario for write
            operations to modify requests before retrying.
            </remarks>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.IDocumentClientRetryPolicy.ShouldRetryAsync(Microsoft.Azure.Cosmos.ResponseMessage,System.Threading.CancellationToken)">
            <summary>
            Method that is called to determine from the policy that needs to retry on the a particular status code
            </summary>
            <param name="cosmosResponseMessage"><see cref="T:Microsoft.Azure.Cosmos.ResponseMessage"/> in return of the request</param>
            <param name="cancellationToken"></param>
            <returns>If the retry needs to be attempted or not</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.IRetryPolicyFactory.GetRequestPolicy">
            <summary>
            Method that is called to get the retry policy for a non-query request.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.IMediaHandler.HeadMediaAsync(System.String,Microsoft.Azure.Documents.Collections.INameValueCollection)">
            <returns>
            ResponseHeaders,
            Media Attributes
            </returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.IMediaHandler.DownloadMediaAsync(System.String,Microsoft.Azure.Documents.Collections.INameValueCollection,System.TimeSpan)">
            <returns>
            Stream,
            ResponseHeaders,
            Media Attributes
            </returns>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.IMediaResponse">
            <summary>
            Captures the APIs for responses associated with media resource in the Azure Cosmos DB service.
            Interface exposed for mocking purposes.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.IMediaResponse.ActivityId">
            <summary> 
            Gets the Activity ID for the request associated with the media resource in the Azure Cosmos DB service.
            </summary>
            <value>The Activity ID for the request.</value>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.IMediaResponse.ContentLength">
            <summary>
            Gets the HTTP ContentLength header value for the response associated with the media resource in the Azure Cosmos DB service.
            </summary>
            <value>The HTTP ContentLength header value.</value>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.IMediaResponse.ContentType">
            <summary>
            Gets the HTTP ContentType header value for the response associated with the media resource in the Azure Cosmos DB service.
            </summary>
            <value>The HTTP ContentType header value.</value>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.IMediaResponse.CurrentMediaStorageUsageInMB">
            <summary>
            Gets the current attachment content (media) usage in megabytes for the media resource in the Azure Cosmos DB service.
            </summary>
            <value>The current attachment content (media) usage in megabytes.</value>
            <remarks>This value is retrieved from the gateway. The value is returned from
            cached information updated periodically and is not guaranteed to be real time.
            </remarks>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.IMediaResponse.MaxMediaStorageUsageInMB">
            <summary>
            Gets the attachment content (media) storage quota in megabytes for the media resource in the Azure Cosmos DB service. Retrieved from gateway.
            </summary>
            <value>The attachment content (media) storage quota in megabytes.</value>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.IMediaResponse.Media">
            <summary>
            Gets the attachment content stream for the media resource in the Azure Cosmos DB service.
            </summary>
            <value>The attachment content stream.</value>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.IMediaResponse.ResponseHeaders">
            <summary>
            Gets the headers associated with the response associated with the media resource in the Azure Cosmos DB service.
            </summary>
            <value>The headers associated with the response.</value>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.IMediaResponse.Slug">
            <summary>
            Gets the HTTP slug header value for the response associcated with the media resource in the Azure Cosmos DB service.
            </summary>
            <value>The HTTP slug header value.</value>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.Common.AsyncCache`2">
            <summary>
            Cache which supports asynchronous value initialization.
            It ensures that for given key only single inintialization funtion is running at any point in time.
            </summary>
            <typeparam name="TKey">Type of keys.</typeparam>
            <typeparam name="TValue">Type of values.</typeparam>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Common.AsyncCache`2.GetAsync(`0,`1,System.Func{System.Threading.Tasks.Task{`1}},System.Threading.CancellationToken,System.Boolean)">
            <summary>
            <para>
            Gets value corresponding to <paramref name="key"/>.
            </para>
            <para>
            If another initialization function is already running, new initialization function will not be started.
            The result will be result of currently running initialization function.
            </para>
            <para>
            If previous initialization function is successfully completed - value returned by it will be returned unless
            it is equal to <paramref name="obsoleteValue"/>, in which case new initialization function will be started.
            </para>
            <para>
            If previous initialization function failed - new one will be launched.
            </para>
            </summary>
            <param name="key">Key for which to get a value.</param>
            <param name="obsoleteValue">Value which is obsolete and needs to be refreshed.</param>
            <param name="singleValueInitFunc">Initialization function.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <param name="forceRefresh">Skip cached value and generate new value.</param>
            <returns>Cached value or value returned by initialization function.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Common.AsyncCache`2.RemoveAsync(`0)">
            <summary>
            Remove value from cache and return it if present.
            </summary>
            <param name="key"></param>
            <returns>Value if present, default value if not present.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Common.AsyncCache`2.BackgroundRefreshNonBlocking(`0,System.Func{System.Threading.Tasks.Task{`1}})">
            <summary>
            Runs a background task that will started refreshing the cached value for a given key.
            This observes the same logic as GetAsync - a running value will still take precedence over a call to this.
            </summary>
            <param name="key">Key.</param>
            <param name="singleValueInitFunc">Generator function.</param>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.Common.CollectionCache">
            <summary>
            Cache to provide resource id lookup based on resource name
            </summary>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.Common.CollectionCache.InternalCache">
            <summary>
            Master Service returns collection definition based on API Version and may not be always same for all API Versions.
            Here the InternalCache stores collection information related to a particular API Version
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Common.CollectionCache.cacheByApiList">
            <summary>
            cacheByApiList caches the collection information by API Version. In general it is expected that only a single version is populated
            for a collection, but this handles the situation if customer is using multiple API versions from different applications
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Common.CollectionCache.ResolveCollectionAsync(Microsoft.Azure.Documents.DocumentServiceRequest,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Resolve the ContainerProperties object from the cache. If the collection was read before "refreshAfter" Timespan, force a cache refresh by reading from the backend.
            </summary>
            <param name="request">Request to resolve.</param>
            <param name="refreshAfter"> Time duration to refresh</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>Instance of <see cref="T:Microsoft.Azure.Cosmos.ContainerProperties"/>.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Common.CollectionCache.ResolveCollectionAsync(Microsoft.Azure.Documents.DocumentServiceRequest,System.Threading.CancellationToken)">
            <summary>
            Resolves a request to a collection in a sticky manner.
            Unless request.ForceNameCacheRefresh is equal to true, it will return the same collection.
            </summary>
            <param name="request">Request to resolve.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>Instance of <see cref="T:Microsoft.Azure.Cosmos.ContainerProperties"/>.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Common.CollectionCache.Refresh(System.String,System.String)">
            <summary>
            This method is only used in client SDK in retry policy as it doesn't have request handy.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Common.CollectionCache.GetCache(System.String)">
            <summary>
            The function selects the right cache based on apiVersion. 
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Common.IAddressCache.TryGetAddressesAsync(Microsoft.Azure.Documents.DocumentServiceRequest,Microsoft.Azure.Documents.PartitionKeyRangeIdentity,Microsoft.Azure.Documents.ServiceIdentity,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Resolves physical addresses by either PartitionKeyRangeIdentity or by ServiceIdentity.
            Client SDK would resolve by PartitionKeyRangeIdentity. Gateway would resolve by ServiceIdentity.
            </summary>
            <param name="request">
            Request is needed only by GatewayAddressCache in the only case when request is name based and user has name based auth token.
            Neither PartitionkeyRangeIdentity nor ServiceIdentity can be used to locate auth token in this case.
            </param>
            <param name="partitionKeyRangeIdentity">This parameter will be supplied in both client SDK and Gateway. In Gateway it will be absent only in case <see cref="P:Microsoft.Azure.Documents.DocumentServiceRequest.ServiceIdentity"/> is not <c>null</c>.</param>
            <param name="serviceIdentity">This parameter will be only supplied in Gateway. FabricAddressCache ignores <paramref name="partitionKeyRangeIdentity"/>.</param>
            <param name="forceRefreshPartitionAddresses">Whether addresses need to be refreshed as previously resolved addresses were determined to be outdated.</param>
            <param name="cancellationToken">Instance of <see cref="T:System.Threading.CancellationToken"/>.</param>
            <returns>Physical addresses.</returns>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.IResourceResponseBase">
            <summary>
            Represents the non-resource specific service response headers returned by any request in the Azure Cosmos DB service.
            </summary>
            <remarks>
            Interface exposed for mocking purposes for the Azure Cosmos DB service.
            </remarks>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.IResourceResponseBase.DatabaseQuota">
            <summary>
            Gets the maximum quota for database resources within the account. 
            </summary>
            <value>
            The maximum quota for the account.
            </value>
            <remarks>
            This is exposed for mocking purposes for the Azure Cosmos DB service.
            </remarks>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.IResourceResponseBase.DatabaseUsage">
            <summary>
            The current number of database resources within the account.
            </summary>
            <value>
            The number of databases.
            </value>
            <remarks>
            This is exposed for mocking purposes for the Azure Cosmos DB service.
            </remarks>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.IResourceResponseBase.CollectionQuota">
            <summary>
            Gets the maximum quota for collection resources within an account.
            </summary>
            <value>
            The maximum quota for the account.
            </value>
            <remarks>
            This is exposed for mocking purposes for the Azure Cosmos DB service.
            </remarks>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.IResourceResponseBase.CollectionUsage">
            <summary>
            The current number of collection resources within the account.
            </summary>
            <value>
            The number of collections.
            </value>
            <remarks>
            This is exposed for mocking purposes for the Azure Cosmos DB service.
            </remarks>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.IResourceResponseBase.UserQuota">
            <summary>
            Gets the maximum quota for user resources within an account.
            </summary>
            <value>
            The maximum quota for the account.
            </value>
            <remarks>
            This is exposed for mocking purposes for the Azure Cosmos DB service.
            </remarks>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.IResourceResponseBase.UserUsage">
            <summary>
            The current number of user resources within the account.
            </summary>
            <value>
            The number of users.
            </value>
            <remarks>
            This is exposed for mocking purposes for the Azure Cosmos DB service.
            </remarks>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.IResourceResponseBase.PermissionQuota">
            <summary>
            Gets the maximum quota for permission resources within an account.
            </summary>
            <value>
            The maximum quota for the account.
            </value>
            <remarks>
            This is exposed for mocking purposes for the Azure Cosmos DB service.
            </remarks>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.IResourceResponseBase.PermissionUsage">
            <summary>
            The current number of permission resources within the account. 
            </summary>
            <value>
            The number of permissions.
            </value>
            <remarks>
            This is exposed for mocking purposes for the Azure Cosmos DB service.
            </remarks>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.IResourceResponseBase.CollectionSizeQuota">
            <summary>
            Maximum size of a collection in kilobytes.
            </summary>
            <value>
            Quota in kilobytes.
            </value>
            <remarks>
            This is exposed for mocking purposes for the Azure Cosmos DB service.
            </remarks>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.IResourceResponseBase.CollectionSizeUsage">
            <summary>
            Current size of a collection in kilobytes. 
            </summary>
            <value>
            Current collection size in kilobytes.
            </value>
            <remarks>
            This is exposed for mocking purposes for the Azure Cosmos DB service.
            </remarks>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.IResourceResponseBase.DocumentQuota">
            <summary>
            Maximum size of a documents within a collection in kilobytes.
            </summary>
            <value>
            Quota in kilobytes.
            </value>
            <remarks>
            This is exposed for mocking purposes for the Azure Cosmos DB service.
            </remarks>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.IResourceResponseBase.DocumentUsage">
            <summary>
            Current size of documents within a collection in kilobytes. 
            </summary>
            <value>
            Current documents size in kilobytes.
            </value>
            <remarks>
            This is exposed for mocking purposes for the Azure Cosmos DB service.
            </remarks>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.IResourceResponseBase.StoredProceduresQuota">
            <summary>
            Gets the maximum quota of stored procedures for a collection.
            </summary>
            <value>
            The maximum quota.
            </value>
            <remarks>
            This is exposed for mocking purposes for the Azure Cosmos DB service.
            </remarks>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.IResourceResponseBase.StoredProceduresUsage">
            <summary>
            The current number of stored procedures for a collection.
            </summary>
            <value>
            Current number of stored procedures.
            </value>
            <remarks>
            This is exposed for mocking purposes for the Azure Cosmos DB service.
            </remarks>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.IResourceResponseBase.TriggersQuota">
            <summary>
            Gets the maximum quota of triggers for a collection. 
            </summary>
            <value>
            The maximum quota.
            </value>
            <remarks>
            This is exposed for mocking purposes for the Azure Cosmos DB service.
            </remarks>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.IResourceResponseBase.TriggersUsage">
            <summary>
            The current number of triggers for a collection.
            </summary>
            <value>
            Current number of triggers.
            </value>
            <remarks>
            This is exposed for mocking purposes for the Azure Cosmos DB service.
            </remarks>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.IResourceResponseBase.UserDefinedFunctionsQuota">
            <summary>
            Gets the maximum quota of user defined functions for a collection. 
            </summary>
            <value>
            Maximum quota.
            </value>
            <remarks>
            This is exposed for mocking purposes for the Azure Cosmos DB service.
            </remarks>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.IResourceResponseBase.UserDefinedFunctionsUsage">
            <summary>
            The current number of user defined functions for a collection.
            </summary>
            <value>
            Current number of user defined functions.
            </value>
            <remarks>
            This is exposed for mocking purposes for the Azure Cosmos DB service.
            </remarks>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.IResourceResponseBase.ActivityId">
            <summary>
            Gets the activity ID for the request.
            </summary>
            <value>
            The activity ID for the request.
            </value>
            <remarks>
            This is exposed for mocking purposes for the Azure Cosmos DB service.
            </remarks>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.IResourceResponseBase.SessionToken">
            <summary>
            Gets the session token for use in sesssion consistency reads.
            </summary>
            <value>
            The session token for use in session consistency.
            </value>
            <remarks>
            This is exposed for mocking purposes for the Azure Cosmos DB service.
            </remarks>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.IResourceResponseBase.StatusCode">
            <summary>
            Gets the HTTP status code associated with the response.
            </summary>
            <value>
            The HTTP status code associated with the response.
            </value>
            <remarks>
            This is exposed for mocking purposes for the Azure Cosmos DB service.
            </remarks>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.IResourceResponseBase.MaxResourceQuota">
            <summary>
            Gets the maximum size limit for this entity.
            </summary>
            <value>
            The maximum size limit for this entity. Measured in kilobytes for document resources 
            and in counts for other resources.
            </value>
            <remarks>
            This is exposed for mocking purposes for the Azure Cosmos DB service.
            </remarks>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.IResourceResponseBase.CurrentResourceQuotaUsage">
            <summary>
            Gets the current size of this entity.
            </summary>
            <value>
            The current size for this entity. Measured in kilobytes for document resources 
            and in counts for other resources.
            </value>
            <remarks>
            This is exposed for mocking purposes for the Azure Cosmos DB service.
            </remarks>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.IResourceResponseBase.ResponseStream">
            <summary>
            Gets the underlying stream of the response.
            </summary>
            <remarks>
            This is exposed for mocking purposes for the Azure Cosmos DB service.
            </remarks>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.IResourceResponseBase.RequestCharge">
            <summary>
            Gets the request charge for this request.
            </summary>
            <value>
            The request charge measured in reqest units.
            </value>
            <remarks>
            This is exposed for mocking purposes for the Azure Cosmos DB service.
            </remarks>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.IResourceResponseBase.ResponseHeaders">
            <summary>
            Gets the response headers.
            </summary>
            <value>
            The response headers.
            </value>
            <remarks>
            This is exposed for mocking purposes for the Azure Cosmos DB service.
            </remarks>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.IResourceResponseBase.ContentLocation">
            <summary>
            The content parent location, for example, dbs/foo/colls/bar
            </summary>
            <remarks>
            This is exposed for mocking purposes for the Azure Cosmos DB service.
            </remarks>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.IResourceResponseBase.IndexTransformationProgress">
            <summary>
            Gets the progress of an index transformation, if one is underway.
            </summary>
            <value>
            An integer from 0 to 100 representing percentage completion of the index transformation process.
            Returns -1 if the index transformation progress header could not be found.
            </value>
            <remarks>
            An index will be rebuilt when the IndexPolicy of a collection is updated.
            This is exposed for mocking purposes for the Azure Cosmos DB service.
            </remarks>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.IResourceResponseBase.LazyIndexingProgress">
            <summary>
            Gets the progress of lazy indexing.
            </summary>
            <value>
            An integer from 0 to 100 representing percentage completion of the lazy indexing process.
            Returns -1 if the lazy indexing progress header could not be found.
            </value>
            <remarks>
            Lazy indexing progress only applies to the collection with indexing mode Lazy.
            This is exposed for mocking purposes for the Azure Cosmos DB service.
            </remarks>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.IStoredProcedureResponse`1">
            <summary>
            Interface exposed for mocking purposes for the Azure Cosmos DB service.
            </summary>
            <typeparam name="TValue">The returned value type of the stored procedure.</typeparam>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.IStoredProcedureResponse`1.ActivityId">
            <summary>
            Gets the Activity ID of the request.
            </summary>
            <value>
            The Activity ID of the request.
            </value>
            <remarks>Every request is traced with a globally unique ID. 
            Include activity ID in tracing application failures and when contacting Azure Cosmos DB support.
            This is exposed for mocking purposes for the Azure Cosmos DB service.
            </remarks>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.IStoredProcedureResponse`1.CurrentResourceQuotaUsage">
            <summary>
            Gets the delimited string containing the usage of each resource type within the collection.
            </summary>
            <value>The delimited string containing the number of used units per resource type within the collection.</value>
            <remarks>
            This is exposed for mocking purposes for the Azure Cosmos DB service.
            </remarks>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.IStoredProcedureResponse`1.MaxResourceQuota">
            <summary>
            Gets the delimited string containing the quota of each resource type within the collection.
            </summary>
            <value>The delimited string containing the number of used units per resource type within the collection.</value>
            <remarks>
            This is exposed for mocking purposes for the Azure Cosmos DB service.
            </remarks>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.IStoredProcedureResponse`1.RequestCharge">
            <summary>
            Gets the number of normalized request units (RUs) charged.
            </summary>
            <value>
            The number of normalized request units (RUs) charged.
            </value>
            <remarks>
            This is exposed for mocking purposes for the Azure Cosmos DB service.
            </remarks>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.IStoredProcedureResponse`1.Response">
            <summary>
            Gets the response of a stored procedure, serialized into the given type.
            </summary>
            <value>The response of a stored procedure, serialized into the given type.</value>
            <remarks>
            This is exposed for mocking purposes for the Azure Cosmos DB service.
            </remarks>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.IStoredProcedureResponse`1.ResponseHeaders">
            <summary>
            Gets the headers associated with the response.
            </summary>
            <value>
            Headers associated with the response.
            </value>
            <remarks>
            Provides access to all HTTP response headers returned from the 
            Azure Cosmos DB API.
            This is exposed for mocking purposes for the Azure Cosmos DB service.
            </remarks>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.IStoredProcedureResponse`1.SessionToken">
            <summary>
            Gets the token for use with session consistency requests.
            </summary>
            <value>
            The token for use with session consistency requests.
            </value>
            <remarks>
            This is exposed for mocking purposes for the Azure Cosmos DB service.
            </remarks>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.IStoredProcedureResponse`1.ScriptLog">
            <summary>
            Gets the output from stored procedure console.log() statements.
            </summary>
            <value>
            Output from console.log() statements in a stored procedure.
            </value>
            <remarks>
            This is exposed for mocking purposes for the Azure Cosmos DB service.
            </remarks>
            <seealso cref="P:Microsoft.Azure.Cosmos.Scripts.StoredProcedureRequestOptions.EnableScriptLogging"/>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.IStoredProcedureResponse`1.StatusCode">
            <summary>
            Gets the request completion status code.
            </summary>
            <value>The request completion status code</value>
            <remarks>
            This is exposed for mocking purposes for the Azure Cosmos DB service.
            </remarks>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.Json.ByteOrder">
            <summary>
            The ByteOrder class is capable of reversing the bytes of any primitive type.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.ByteOrder.Reverse(System.Byte)">
            <summary>
            Reverses a single byte.
            </summary>
            <param name="value">The byte to reverse</param>
            <returns>The reversed byte.</returns>
            <remarks>Since a single byte has no byte order, so the value itself is returned so this is essentially a NO-OP.</remarks>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.ByteOrder.Reverse(System.Boolean)">
            <summary>
            Reverses a bool.
            </summary>
            <param name="value">The bool to reverse</param>
            <returns>The reversed bool.</returns>
            <remarks>Since a bool has no byte order, so the value itself is returned so this is essentially a NO-OP.</remarks>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.ByteOrder.Reverse(System.Char)">
            <summary>
            Reverses a char.
            </summary>
            <param name="value">The char to reverse.</param>
            <returns>The reversed char.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.ByteOrder.Reverse(System.Int16)">
            <summary>
            Reverses a short.
            </summary>
            <param name="value">The short to reverse.</param>
            <returns>The reversed short.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.ByteOrder.Reverse(System.UInt16)">
            <summary>
            Reverses a ushort.
            </summary>
            <param name="value">The ushort to reverse.</param>
            <returns>The reversed ushort.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.ByteOrder.Reverse(System.Int32)">
            <summary>
            Reverses a int.
            </summary>
            <param name="value">The int to reverse.</param>
            <returns>The reversed int.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.ByteOrder.Reverse(System.UInt32)">
            <summary>
            Reverses a uint.
            </summary>
            <param name="value">The uint to reverse.</param>
            <returns>The reversed uint.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.ByteOrder.Reverse(System.Int64)">
            <summary>
            Reverses a long.
            </summary>
            <param name="value">The long to reverse.</param>
            <returns>The reversed long.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.ByteOrder.Reverse(System.UInt64)">
            <summary>
            Reverses a ulong.
            </summary>
            <param name="value">The ulong to reverse.</param>
            <returns>The reversed ulong.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.ByteOrder.Reverse(System.Single)">
            <summary>
            Reverses a float.
            </summary>
            <param name="value">The float to reverse.</param>
            <returns>The reversed float.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.ByteOrder.Reverse(System.Double)">
            <summary>
            Reverses a double.
            </summary>
            <param name="value">The double to reverse.</param>
            <returns>The reversed double.</returns>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.Json.IJsonNavigator">
            <summary>
            JsonNavigator interface for classes that can navigate jsons.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.Json.IJsonNavigator.SerializationFormat">
            <summary>
            Gets the <see cref="T:Microsoft.Azure.Cosmos.Json.JsonSerializationFormat"/> for the IJsonNavigator.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.IJsonNavigator.GetRootNode">
            <summary>
            Gets <see cref="T:Microsoft.Azure.Cosmos.Json.IJsonNavigatorNode"/> of the root node.
            </summary>
            <returns><see cref="T:Microsoft.Azure.Cosmos.Json.IJsonNavigatorNode"/> corresponding to the root node.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.IJsonNavigator.GetNodeType(Microsoft.Azure.Cosmos.Json.IJsonNavigatorNode)">
            <summary>
            Gets the <see cref="T:Microsoft.Azure.Cosmos.Json.JsonNodeType"/> type for a particular node
            </summary>
            <param name="node">The <see cref="T:Microsoft.Azure.Cosmos.Json.IJsonNavigatorNode"/> of the node you want to know the type of</param>
            <returns><see cref="T:Microsoft.Azure.Cosmos.Json.JsonNodeType"/> for the node</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.IJsonNavigator.GetNumberValue(Microsoft.Azure.Cosmos.Json.IJsonNavigatorNode)">
            <summary>
            Gets the numeric value for a node
            </summary>
            <param name="numberNode">The <see cref="T:Microsoft.Azure.Cosmos.Json.IJsonNavigatorNode"/> of the node you want the number value from.</param>
            <returns>A double that represents the number value in the node.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.IJsonNavigator.TryGetBufferedStringValue(Microsoft.Azure.Cosmos.Json.IJsonNavigatorNode,System.Collections.Generic.IReadOnlyList{System.Byte}@)">
            <summary>
            Tries to get the buffered string value from a node.
            </summary>
            <param name="stringNode">The <see cref="T:Microsoft.Azure.Cosmos.Json.IJsonNavigatorNode"/> of the node to get the buffered string from.</param>
            <param name="bufferedStringValue">The buffered string value if possible</param>
            <returns><code>true</code> if the JsonNavigator successfully got the buffered string value; <code>false</code> if the JsonNavigator failed to get the buffered string value.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.IJsonNavigator.GetStringValue(Microsoft.Azure.Cosmos.Json.IJsonNavigatorNode)">
            <summary>
            Gets a string value from a node.
            </summary>
            <param name="stringNode">The <see cref="T:Microsoft.Azure.Cosmos.Json.IJsonNavigatorNode"/> of the node to get the string value from.</param>
            <returns>The string value from the node.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.IJsonNavigator.GetInt8Value(Microsoft.Azure.Cosmos.Json.IJsonNavigatorNode)">
            <summary>
            Gets the numeric value for a node as a signed byte.
            </summary>
            <param name="numberNode">The <see cref="T:Microsoft.Azure.Cosmos.Json.IJsonNavigatorNode"/> of the node you want the number value from.</param>
            <returns>A sbyte value that represents the number value in the node.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.IJsonNavigator.GetInt16Value(Microsoft.Azure.Cosmos.Json.IJsonNavigatorNode)">
            <summary>
            Gets the numeric value for a node as a 16-bit signed integer.
            </summary>
            <param name="numberNode">The <see cref="T:Microsoft.Azure.Cosmos.Json.IJsonNavigatorNode"/> of the node you want the number value from.</param>
            <returns>A short value that represents the number value in the node.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.IJsonNavigator.GetInt32Value(Microsoft.Azure.Cosmos.Json.IJsonNavigatorNode)">
            <summary>
            Gets the numeric value for a node as a 32-bit signed integer.
            </summary>
            <param name="numberNode">The <see cref="T:Microsoft.Azure.Cosmos.Json.IJsonNavigatorNode"/> of the node you want the number value from.</param>
            <returns>An int value that represents the number value in the node.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.IJsonNavigator.GetInt64Value(Microsoft.Azure.Cosmos.Json.IJsonNavigatorNode)">
            <summary>
            Gets the numeric value for a node as a 64-bit signed integer.
            </summary>
            <param name="numberNode">The <see cref="T:Microsoft.Azure.Cosmos.Json.IJsonNavigatorNode"/> of the node you want the number value from.</param>
            <returns>A long value that represents the number value in the node.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.IJsonNavigator.GetFloat32Value(Microsoft.Azure.Cosmos.Json.IJsonNavigatorNode)">
            <summary>
            Gets the numeric value for a node as a single precision number if the number is expressed as a floating point.
            </summary>
            <param name="numberNode">The <see cref="T:Microsoft.Azure.Cosmos.Json.IJsonNavigatorNode"/> of the node you want the number value from.</param>
            <returns>A double that represents the number value in the node.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.IJsonNavigator.GetFloat64Value(Microsoft.Azure.Cosmos.Json.IJsonNavigatorNode)">
            <summary>
            Gets the numeric value for a node as double precision number if the number is expressed as a floating point.
            </summary>
            <param name="numberNode">The <see cref="T:Microsoft.Azure.Cosmos.Json.IJsonNavigatorNode"/> of the node you want the number value from.</param>
            <returns>A double that represents the number value in the node.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.IJsonNavigator.GetUInt32Value(Microsoft.Azure.Cosmos.Json.IJsonNavigatorNode)">
            <summary>
            Gets the numeric value for a node as an unsigned 32 bit integer if the node is expressed as an uint32.
            </summary>
            <param name="numberNode">The <see cref="T:Microsoft.Azure.Cosmos.Json.IJsonNavigatorNode"/> of the node you want the number value from.</param>
            <returns>An unsigned integer that represents the number value in the node.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.IJsonNavigator.GetGuidValue(Microsoft.Azure.Cosmos.Json.IJsonNavigatorNode)">
            <summary>
            Gets the Guid value for a node.
            </summary>
            <param name="guidNode">The <see cref="T:Microsoft.Azure.Cosmos.Json.IJsonNavigatorNode"/> of the node you want the guid value from.</param>
            <returns>A guid read from the node.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.IJsonNavigator.GetBinaryValue(Microsoft.Azure.Cosmos.Json.IJsonNavigatorNode)">
            <summary>
            Gets a binary value for a given node from the input.
            </summary>
            <param name="binaryNode">The <see cref="T:Microsoft.Azure.Cosmos.Json.IJsonNavigatorNode"/> of the node to get the binary value from.</param>
            <returns>The binary value from the node</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.IJsonNavigator.TryGetBufferedBinaryValue(Microsoft.Azure.Cosmos.Json.IJsonNavigatorNode,System.Collections.Generic.IReadOnlyList{System.Byte}@)">
            <summary>
            Tries to get the buffered binary value from a node.
            </summary>
            <param name="binaryNode">The <see cref="T:Microsoft.Azure.Cosmos.Json.IJsonNavigatorNode"/> of the node to get the buffered binary from.</param>
            <param name="bufferedBinaryValue">The buffered binary value if possible</param>
            <returns><code>true</code> if the JsonNavigator successfully got the buffered binary value; <code>false</code> if the JsonNavigator failed to get the buffered binary value.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.IJsonNavigator.GetArrayItemCount(Microsoft.Azure.Cosmos.Json.IJsonNavigatorNode)">
            <summary>
            Gets the number of elements in an array node.
            </summary>
            <param name="arrayNode">The <see cref="T:Microsoft.Azure.Cosmos.Json.IJsonNavigatorNode"/> of the (array) node to get the count of.</param>
            <returns>The number of elements in the array node.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.IJsonNavigator.GetArrayItemAt(Microsoft.Azure.Cosmos.Json.IJsonNavigatorNode,System.Int32)">
            <summary>
            Gets the node at a particular index of an array node
            </summary>
            <param name="arrayNode">The <see cref="T:Microsoft.Azure.Cosmos.Json.IJsonNavigatorNode"/> of the (array) node to index from.</param>
            <param name="index">The offset into the array</param>
            <returns>The <see cref="T:Microsoft.Azure.Cosmos.Json.IJsonNavigatorNode"/> of the node at a particular index of an array node</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.IJsonNavigator.GetArrayItems(Microsoft.Azure.Cosmos.Json.IJsonNavigatorNode)">
            <summary>
            Gets an IEnumerable of <see cref="T:Microsoft.Azure.Cosmos.Json.IJsonNavigatorNode"/>s for an arrayNode.
            </summary>
            <param name="arrayNode">The <see cref="T:Microsoft.Azure.Cosmos.Json.IJsonNavigatorNode"/> of the array to get the items from</param>
            <returns>The IEnumerable of <see cref="T:Microsoft.Azure.Cosmos.Json.IJsonNavigatorNode"/>s for an arrayNode.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.IJsonNavigator.GetObjectPropertyCount(Microsoft.Azure.Cosmos.Json.IJsonNavigatorNode)">
            <summary>
            Gets the number of properties in an object node.
            </summary>
            <param name="objectNode">The <see cref="T:Microsoft.Azure.Cosmos.Json.IJsonNavigatorNode"/> of node to get the property count from.</param>
            <returns>The number of properties in an object node.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.IJsonNavigator.TryGetObjectProperty(Microsoft.Azure.Cosmos.Json.IJsonNavigatorNode,System.String,Microsoft.Azure.Cosmos.Json.ObjectProperty@)">
            <summary>
            Tries to get a object property from an object with a particular property name.
            </summary>
            <param name="objectNode">The <see cref="T:Microsoft.Azure.Cosmos.Json.IJsonNavigatorNode"/> of object node to get a property from.</param>
            <param name="propertyName">The name of the property to search for.</param>
            <param name="objectProperty">The <see cref="T:Microsoft.Azure.Cosmos.Json.ObjectProperty"/> with the specified property name if it exists.</param>
            <returns><code>true</code> if the JsonNavigator successfully found the <see cref="T:Microsoft.Azure.Cosmos.Json.IJsonNavigatorNode"/> with the specified property name; <code>false</code> otherwise.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.IJsonNavigator.GetObjectProperties(Microsoft.Azure.Cosmos.Json.IJsonNavigatorNode)">
            <summary>
            Gets an IEnumerable of <see cref="T:Microsoft.Azure.Cosmos.Json.ObjectProperty"/> properties from an object node.
            </summary>
            <param name="objectNode">The <see cref="T:Microsoft.Azure.Cosmos.Json.IJsonNavigatorNode"/> of object node to get the properties from.</param>
            <returns>The IEnumerable of <see cref="T:Microsoft.Azure.Cosmos.Json.ObjectProperty"/> properties from an object node.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.IJsonNavigator.TryGetBufferedRawJson(Microsoft.Azure.Cosmos.Json.IJsonNavigatorNode,System.Collections.Generic.IReadOnlyList{System.Byte}@)">
            <summary>
            Tries to get the buffered raw json
            </summary>
            <param name="jsonNode">The json node of interest</param>
            <param name="bufferedRawJson">The raw json.</param>
            <returns>True if bufferedRawJson was set. False otherwise.</returns>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.Json.IJsonNavigatorNode">
            <summary>
            Interface that describes a Node within a JSON document in a <see cref="T:Microsoft.Azure.Cosmos.Json.IJsonNavigator"/>
            </summary>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.Json.IJsonReader">
            <summary>
            Interface for all JsonReaders that know how to read jsons.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.Json.IJsonReader.SerializationFormat">
            <summary>
            Gets the <see cref="T:Microsoft.Azure.Cosmos.Json.JsonSerializationFormat"/> for the JsonReader
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.Json.IJsonReader.CurrentDepth">
            <summary>
            Gets the current level of nesting of the JSON that the JsonReader is reading.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.Json.IJsonReader.CurrentTokenType">
            <summary>
            Gets the <see cref="T:Microsoft.Azure.Cosmos.Json.JsonTokenType"/> of the current token that the JsonReader is about to read.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.IJsonReader.Read">
            <summary>
            Advances the JsonReader by one token.
            </summary>
            <returns><code>true</code> if the JsonReader successfully advanced to the next token; <code>false</code> if the JsonReader has passed the end of the JSON.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.IJsonReader.GetNumberValue">
            <summary>
            Gets the next JSON token from the JsonReader as a double.
            </summary>
            <returns>The next JSON token from the JsonReader as a double.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.IJsonReader.GetStringValue">
            <summary>
            Gets the next JSON token from the JsonReader as a string.
            </summary>
            <returns>The next JSON token from the JsonReader as a string.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.IJsonReader.GetBufferedRawJsonToken">
            <summary>
            Gets current JSON token from the JsonReader as a raw series of bytes that is buffered.
            </summary>
            <returns>The current JSON token from the JsonReader as a raw series of bytes that is buffered.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.IJsonReader.GetInt8Value">
            <summary>
            Gets the next JSON token from the JsonReader as a 1 byte signed integer.
            </summary>
            <returns>The next JSON token from the JsonReader as a 1 byte signed integer.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.IJsonReader.GetInt16Value">
            <summary>
            Gets the next JSON token from the JsonReader as a 2 byte signed integer.
            </summary>
            <returns>The next JSON token from the JsonReader as a 2 byte signed integer.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.IJsonReader.GetInt32Value">
            <summary>
            Gets the next JSON token from the JsonReader as a 4 byte signed integer.
            </summary>
            <returns>The next JSON token from the JsonReader as a 4 byte signed integer.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.IJsonReader.GetInt64Value">
            <summary>
            Gets the next JSON token from the JsonReader as a 8 byte signed integer.
            </summary>
            <returns>The next JSON token from the JsonReader as a 8 byte signed integer.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.IJsonReader.GetUInt32Value">
            <summary>
            Gets the next JSON token from the JsonReader as a 4 byte unsigned integer.
            </summary>
            <returns>The next JSON token from the JsonReader as a 4 byte unsigned integer.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.IJsonReader.GetFloat32Value">
            <summary>
            Gets the next JSON token from the JsonReader as a single precision floating point.
            </summary>
            <returns>The next JSON token from the JsonReader as a single precision floating point.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.IJsonReader.GetFloat64Value">
            <summary>
            Gets the next JSON token from the JsonReader as a double precision floating point.
            </summary>
            <returns>The next JSON token from the JsonReader as a double precision floating point.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.IJsonReader.GetGuidValue">
            <summary>
            Gets the next JSON token from the JsonReader as a GUID.
            </summary>
            <returns>The next JSON token from the JsonReader as a GUID.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.IJsonReader.GetBinaryValue">
            <summary>
            Gets the next JSON token from the JsonReader as a binary list.
            </summary>
            <returns>The next JSON token from the JsonReader as a binary list.</returns>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.Json.IJsonWriter">
            <summary>
            Interface for all JsonWriters that know how to write jsons of a specific serialization format.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.Json.IJsonWriter.SerializationFormat">
            <summary>
            Gets the SerializationFormat of the JsonWriter.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.Json.IJsonWriter.CurrentLength">
            <summary>
            Gets the current length of the internal buffer.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.IJsonWriter.WriteObjectStart">
            <summary>
            Writes the object start symbol to internal buffer.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.IJsonWriter.WriteObjectEnd">
            <summary>
            Writes the object end symbol to the internal buffer.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.IJsonWriter.WriteArrayStart">
            <summary>
            Writes the array start symbol to the internal buffer.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.IJsonWriter.WriteArrayEnd">
            <summary>
            Writes the array end symbol to the internal buffer.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.IJsonWriter.WriteFieldName(System.String)">
            <summary>
            Writes a field name to the the internal buffer.
            </summary>
            <param name="fieldName">The name of the field to write.</param>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.IJsonWriter.WriteStringValue(System.String)">
            <summary>
            Writes a string to the internal buffer.
            </summary>
            <param name="value">The value of the string to write.</param>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.IJsonWriter.WriteNumberValue(Microsoft.Azure.Cosmos.Number64)">
            <summary>
            Writes a number to the internal buffer.
            </summary>
            <param name="value">The value of the number to write.</param>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.IJsonWriter.WriteBoolValue(System.Boolean)">
            <summary>
            Writes a boolean to the internal buffer.
            </summary>
            <param name="value">The value of the boolean to write.</param>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.IJsonWriter.WriteNullValue">
            <summary>
            Writes a null to the internal buffer.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.IJsonWriter.WriteInt8Value(System.SByte)">
            <summary>
            Writes an single signed byte integer to the internal buffer.
            </summary>
            <param name="value">The value of the integer to write.</param>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.IJsonWriter.WriteInt16Value(System.Int16)">
            <summary>
            Writes an signed 2-byte integer to the internal buffer.
            </summary>
            <param name="value">The value of the integer to write.</param>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.IJsonWriter.WriteInt32Value(System.Int32)">
            <summary>
            Writes an signed 4-byte integer to the internal buffer.
            </summary>
            <param name="value">The value of the integer to write.</param>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.IJsonWriter.WriteInt64Value(System.Int64)">
            <summary>
            Writes an signed 8-byte integer to the internal buffer.
            </summary>
            <param name="value">The value of the integer to write.</param>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.IJsonWriter.WriteFloat32Value(System.Single)">
            <summary>
            Writes a single precision floating point number into the internal buffer.
            </summary>
            <param name="value">The value of the integer to write.</param>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.IJsonWriter.WriteFloat64Value(System.Double)">
            <summary>
            Writes a double precision floating point number into the internal buffer.
            </summary>
            <param name="value">The value of the integer to write.</param>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.IJsonWriter.WriteUInt32Value(System.UInt32)">
            <summary>
            Writes a 4 byte unsigned integer into the internal buffer.
            </summary>
            <param name="value">The value of the integer to write.</param>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.IJsonWriter.WriteGuidValue(System.Guid)">
            <summary>
            Writes a Guid value into the internal buffer.
            </summary>
            <param name="value">The value of the guid to write.</param>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.IJsonWriter.WriteBinaryValue(System.Collections.Generic.IReadOnlyList{System.Byte})">
            <summary>
            Writes a Binary value into the internal buffer.
            </summary>
            <param name="value">The value of the bytes to write.</param>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.IJsonWriter.WriteCurrentToken(Microsoft.Azure.Cosmos.Json.IJsonReader)">
            <summary>
            Writes current token from a json reader to the internal buffer.
            </summary>
            <param name="jsonReader">The JsonReader to the get the current token from.</param>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.IJsonWriter.WriteAll(Microsoft.Azure.Cosmos.Json.IJsonReader)">
            <summary>
            Writes every token from the JsonReader to the internal buffer.
            </summary>
            <param name="jsonReader">The JsonReader to get the tokens from.</param>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.IJsonWriter.WriteJsonFragment(System.Collections.Generic.IReadOnlyList{System.Byte})">
            <summary>
            Writes a fragment of a json to the internal buffer
            </summary>
            <param name="jsonFragment">A section of a valid json</param>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.IJsonWriter.WriteJsonNode(Microsoft.Azure.Cosmos.Json.IJsonNavigator,Microsoft.Azure.Cosmos.Json.IJsonNavigatorNode)">
            <summary>
            Writes a json node to the internal buffer.
            </summary>
            <param name="jsonNavigator">The navigator to use to navigate the node</param>
            <param name="jsonNavigatorNode">The node to write.</param>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.IJsonWriter.GetResult">
            <summary>
            Gets the result of the JsonWriter.
            </summary>
            <returns>The result of the JsonWriter as an array of bytes.</returns>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.Json.Interop.CosmosDBToNewtonsoftReader">
            <summary>
            Wrapper class that implements a Newtonsoft JsonReader,
            but forwards all the calls to a CosmosDB JSON reader.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Json.Interop.CosmosDBToNewtonsoftReader.Null">
            <summary>
            Singleton boxed value for null.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Json.Interop.CosmosDBToNewtonsoftReader.False">
            <summary>
            Singleton boxed value for false.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Json.Interop.CosmosDBToNewtonsoftReader.True">
            <summary>
            Singleton boxed value for true.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Json.Interop.CosmosDBToNewtonsoftReader.jsonReader">
            <summary>
            The CosmosDB JSON Reader that will be used for implementation.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.Interop.CosmosDBToNewtonsoftReader.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the NewtonsoftReader class.
            </summary>
            <param name="stream">The stream to read from.</param>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.Interop.CosmosDBToNewtonsoftReader.Read">
            <summary>
            Reads the next token from the reader.
            </summary>
            <returns>True if a token was read, else false.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.Interop.CosmosDBToNewtonsoftReader.ReadAsBytes">
            <summary>
            Reads the next JSON token from the source as a <see cref="T:System.Byte"/>[].
            </summary>
            <returns>A <see cref="T:System.Byte"/>[] or <c>null</c> if the next JSON token is null. This method will return <c>null</c> at the end of an array.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.Interop.CosmosDBToNewtonsoftReader.ReadAsDateTime">
            <summary>
            Reads the next JSON token from the source as a <see cref="T:System.Nullable`1"/> of <see cref="T:System.DateTime"/>.
            </summary>
            <returns>A <see cref="T:System.Nullable`1"/> of <see cref="T:System.DateTime"/>. This method will return <c>null</c> at the end of an array.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.Interop.CosmosDBToNewtonsoftReader.ReadAsDateTimeOffset">
            <summary>
            Reads the next JSON token from the source as a <see cref="T:System.Nullable`1"/> of <see cref="T:System.DateTimeOffset"/>.
            </summary>
            <returns>A <see cref="T:System.Nullable`1"/> of <see cref="T:System.DateTimeOffset"/>. This method will return <c>null</c> at the end of an array.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.Interop.CosmosDBToNewtonsoftReader.ReadAsDecimal">
            <summary>
            Reads the next JSON token from the source as a <see cref="T:System.Nullable`1"/> of <see cref="T:System.Decimal"/>.
            </summary>
            <returns>A <see cref="T:System.Nullable`1"/> of <see cref="T:System.Decimal"/>. This method will return <c>null</c> at the end of an array.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.Interop.CosmosDBToNewtonsoftReader.ReadAsInt32">
            <summary>
            Reads the next JSON token from the source as a <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int32"/>.
            </summary>
            <returns>A <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int32"/>. This method will return <c>null</c> at the end of an array.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.Interop.CosmosDBToNewtonsoftReader.ReadAsString">
            <summary>
            Reads the next JSON token from the source as a <see cref="T:System.String"/>.
            </summary>
            <returns>A <see cref="T:System.String"/>. This method will return <c>null</c> at the end of an array.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.Interop.CosmosDBToNewtonsoftReader.ReadAsTypeFromString``1(System.Func{System.String,``0})">
            <summary>
            Reads the next string token and deserializes it to a type.
            </summary>
            <typeparam name="T">The type to deserialize to.</typeparam>
            <param name="parse">The function that deserializes the token.</param>
            <returns>The next string token deserialized to a type or null if at the end of an array.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.Interop.CosmosDBToNewtonsoftReader.ReadNumberValue">
            <summary>
            Reads the next number token but returns null at the end of an array.
            </summary>
            <returns>The next number token but returns null at the end of an array.</returns>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.Json.Interop.CosmosDBToNewtonsoftWriter">
            <summary>
            Wrapper class that implements Newtonsoft's JsonWriter,
            but calls into a CosmosDB JsonWriter for the implementation.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Json.Interop.CosmosDBToNewtonsoftWriter.jsonWriter">
            <summary>
            A CosmosDB JSON writer used for the actual implementation.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.Interop.CosmosDBToNewtonsoftWriter.#ctor(Microsoft.Azure.Cosmos.Json.JsonSerializationFormat)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.Cosmos.Json.Interop.CosmosDBToNewtonsoftWriter"/> class.
            </summary>
            <param name="jsonSerializationFormat">The SerializationFormat to use.</param>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.Interop.CosmosDBToNewtonsoftWriter.Flush">
            <summary>
            Flushes whatever is in the buffer to the underlying <see cref="T:System.IO.Stream"/> and also flushes the underlying stream.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.Interop.CosmosDBToNewtonsoftWriter.WriteComment(System.String)">
            <summary>
            Writes a comment <c>/*...*/</c> containing the specified text.
            </summary>
            <param name="text">Text to place inside the comment.</param>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.Interop.CosmosDBToNewtonsoftWriter.WriteEndArray">
            <summary>
            Writes the end of an array.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.Interop.CosmosDBToNewtonsoftWriter.WriteEndConstructor">
            <summary>
            Writes the end constructor.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.Interop.CosmosDBToNewtonsoftWriter.WriteEndObject">
            <summary>
            Writes the end of a JSON object.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.Interop.CosmosDBToNewtonsoftWriter.WriteNull">
            <summary>
            Writes a null value.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.Interop.CosmosDBToNewtonsoftWriter.WritePropertyName(System.String)">
            <summary>
            Writes the property name of a name/value pair on a JSON object.
            </summary>
            <param name="name">The name of the property.</param>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.Interop.CosmosDBToNewtonsoftWriter.WritePropertyName(System.String,System.Boolean)">
            <summary>
            Writes the property name of a name/value pair on a JSON object.
            </summary>
            <param name="name">The name of the property.</param>
            <param name="escape">Whether or not to escape the name</param>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.Interop.CosmosDBToNewtonsoftWriter.WriteStartConstructor(System.String)">
            <summary>
            Writes the start of a constructor with the given name.
            </summary>
            <param name="name">The name of the constructor.</param>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.Interop.CosmosDBToNewtonsoftWriter.WriteRaw(System.String)">
            <summary>
            Writes raw JSON.
            </summary>
            <param name="json">The raw JSON to write.</param>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.Interop.CosmosDBToNewtonsoftWriter.WriteRawValue(System.String)">
            <summary>
            Writes raw JSON where a value is expected and updates the writer's state.
            </summary>
            <param name="json">The raw JSON to write.</param>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.Interop.CosmosDBToNewtonsoftWriter.WriteStartArray">
            <summary>
            Writes the beginning of a JSON array.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.Interop.CosmosDBToNewtonsoftWriter.WriteStartObject">
            <summary>
            Writes the beginning of a JSON object.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.Interop.CosmosDBToNewtonsoftWriter.WriteUndefined">
            <summary>
            Writes an undefined value.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.Interop.CosmosDBToNewtonsoftWriter.WriteValue(System.Object)">
            <summary>
            Writes a <see cref="T:System.Object"/> value.
            An error will raised if the value cannot be written as a single JSON token.
            </summary>
            <param name="value">The <see cref="T:System.Object"/> value to write.</param>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.Interop.CosmosDBToNewtonsoftWriter.WriteValue(System.String)">
            <summary>
            Writes a <see cref="T:System.String"/> value.
            </summary>
            <param name="value">The <see cref="T:System.String"/> value to write.</param>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.Interop.CosmosDBToNewtonsoftWriter.WriteValue(System.Int32)">
            <summary>
            Writes a <see cref="T:System.Int32"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Int32"/> value to write.</param>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.Interop.CosmosDBToNewtonsoftWriter.WriteValue(System.UInt32)">
            <summary>
            Writes a <see cref="T:System.UInt32"/> value.
            </summary>
            <param name="value">The <see cref="T:System.UInt32"/> value to write.</param>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.Interop.CosmosDBToNewtonsoftWriter.WriteValue(System.Int64)">
            <summary>
            Writes a <see cref="T:System.Int64"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Int64"/> value to write.</param>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.Interop.CosmosDBToNewtonsoftWriter.WriteValue(System.UInt64)">
            <summary>
            Writes a <see cref="T:System.UInt64"/> value.
            </summary>
            <param name="value">The <see cref="T:System.UInt64"/> value to write.</param>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.Interop.CosmosDBToNewtonsoftWriter.WriteValue(System.Single)">
            <summary>
            Writes a <see cref="T:System.Single"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Single"/> value to write.</param>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.Interop.CosmosDBToNewtonsoftWriter.WriteValue(System.Double)">
            <summary>
            Writes a <see cref="T:System.Double"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Double"/> value to write.</param>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.Interop.CosmosDBToNewtonsoftWriter.WriteValue(System.Boolean)">
            <summary>
            Writes a <see cref="T:System.Boolean"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Boolean"/> value to write.</param>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.Interop.CosmosDBToNewtonsoftWriter.WriteValue(System.Int16)">
            <summary>
            Writes a <see cref="T:System.Int16"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Int16"/> value to write.</param>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.Interop.CosmosDBToNewtonsoftWriter.WriteValue(System.UInt16)">
            <summary>
            Writes a <see cref="T:System.UInt16"/> value.
            </summary>
            <param name="value">The <see cref="T:System.UInt16"/> value to write.</param>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.Interop.CosmosDBToNewtonsoftWriter.WriteValue(System.Char)">
            <summary>
            Writes a <see cref="T:System.Char"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Char"/> value to write.</param>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.Interop.CosmosDBToNewtonsoftWriter.WriteValue(System.Byte)">
            <summary>
            Writes a <see cref="T:System.Byte"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Byte"/> value to write.</param>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.Interop.CosmosDBToNewtonsoftWriter.WriteValue(System.SByte)">
            <summary>
            Writes a <see cref="T:System.SByte"/> value.
            </summary>
            <param name="value">The <see cref="T:System.SByte"/> value to write.</param>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.Interop.CosmosDBToNewtonsoftWriter.WriteValue(System.Decimal)">
            <summary>
            Writes a <see cref="T:System.Decimal"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Decimal"/> value to write.</param>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.Interop.CosmosDBToNewtonsoftWriter.WriteValue(System.DateTime)">
            <summary>
            Writes a <see cref="T:System.DateTime"/> value.
            </summary>
            <param name="value">The <see cref="T:System.DateTime"/> value to write.</param>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.Interop.CosmosDBToNewtonsoftWriter.WriteValue(System.Byte[])">
            <summary>
            Writes a <see cref="T:System.Byte"/>[] value.
            </summary>
            <param name="value">The <see cref="T:System.Byte"/>[] value to write.</param>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.Interop.CosmosDBToNewtonsoftWriter.WriteValue(System.Guid)">
            <summary>
            Writes a <see cref="T:System.Guid"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Guid"/> value to write.</param>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.Interop.CosmosDBToNewtonsoftWriter.WriteValue(System.TimeSpan)">
            <summary>
            Writes a <see cref="T:System.TimeSpan"/> value.
            </summary>
            <param name="value">The <see cref="T:System.TimeSpan"/> value to write.</param>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.Interop.CosmosDBToNewtonsoftWriter.WriteValue(System.Uri)">
            <summary>
            Writes a <see cref="T:System.Uri"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Uri"/> value to write.</param>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.Interop.CosmosDBToNewtonsoftWriter.GetResult">
            <summary>
            Gets the result of all the tokens written so far.
            </summary>
            <returns>The result of all the tokens written so far.</returns>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.Json.Interop.NewtonsoftToCosmosDBReader">
            <summary>
            IJsonReader adapter for a Newtonsoft reader meaning we get a newtonsoft reader for testing purposes.
            </summary>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.Json.JsonBinaryEncoding">
            <summary>
            Static class with utility functions and constants for JSON binary encoding.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Json.JsonBinaryEncoding.TypeMarkerLength">
            <summary>
            A type marker is a single byte.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Json.JsonBinaryEncoding.OneByteLength">
            <summary>
            Some type markers are followed by a single byte representing the length.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Json.JsonBinaryEncoding.OneByteCount">
            <summary>
            Some type markers are followed by 1 byte for the length and then optionally 1 byte for the count.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Json.JsonBinaryEncoding.TwoByteLength">
            <summary>
            Some type markers are followed by 2 bytes representing the length as a ushort.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Json.JsonBinaryEncoding.TwoByteCount">
            <summary>
            Some type markers are followed by 2 bytes for the length and then optionally 2 bytes for the count (both are ushorts).
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Json.JsonBinaryEncoding.FourByteLength">
            <summary>
            Some type markers are followed by 4 bytes for representing the length as a uint32.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Json.JsonBinaryEncoding.FourByteCount">
            <summary>
            Some type markers are followed by 4 bytes for the length and then optionally 4 bytes for the count (both are uint32).
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Json.JsonBinaryEncoding.SystemStrings">
            <summary>
            List is system strings
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Json.JsonBinaryEncoding.SystemStringToId">
            <summary>
            Dictionary of system string to it's index.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonBinaryEncoding.GetNumberValue(System.IO.BinaryReader)">
            <summary>
            Gets the number value from the binary reader.
            </summary>
            <param name="binaryReader">BinaryReader pointing to a number.</param>
            <returns>The number value from the binary reader.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonBinaryEncoding.GetStringValue(System.IO.BinaryReader,Microsoft.Azure.Cosmos.Json.JsonStringDictionary)">
            <summary>
            Gets the string value from the binary reader.
            </summary>
            <param name="binaryReader">A binary reader whose cursor is at the beginning of a stream.</param>
            <param name="jsonStringDictionary">The JSON string dictionary.</param>
            <returns>A string value from the binary reader.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonBinaryEncoding.TryGetJsonTokenType(System.Byte[])">
            <summary>
            Try Get JsonTokenType
            </summary>
            <param name="buffer">The buffer.</param>
            <returns>the JsonTokenType</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonBinaryEncoding.TryGetValueLength(System.Byte[])">
            <summary>
            Try Get Value Length
            </summary>
            <param name="buffer">The buffer.</param>
            <returns>the ValueLength</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonBinaryEncoding.TryGetNumberValue(System.Byte[])">
            <summary>
            Try Get NumberValue
            </summary>
            <param name="buffer">The buffer.</param>
            <returns>the NumberValue</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonBinaryEncoding.TryGetEncodedStringTypeMarker(System.String,Microsoft.Azure.Cosmos.Json.JsonStringDictionary,Microsoft.Azure.Cosmos.Json.JsonBinaryEncoding.MultiByteTypeMarker@)">
            <summary>
            Try Get Encoded String Type Marker
            </summary>
            <param name="value">the value</param>
            <param name="jsonStringDictionary">The JSON string dictionary.</param>
            <param name="multiByteTypeMarker">The encoded string type marker if found.</param>
            <returns>Whether or not the type marker was found.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonBinaryEncoding.TryGetEncodedStringValue(Microsoft.Azure.Cosmos.Json.JsonBinaryEncoding.MultiByteTypeMarker,Microsoft.Azure.Cosmos.Json.JsonStringDictionary,System.String@)">
            <summary>
            Try Get Encoded String Value
            </summary>
            <param name="multiByteTypeMarker">The multi byte type marker.</param>
            <param name="jsonStringDictionary">The JSON string dictionary.</param>
            <param name="encodedStringValue">The encoded string if found.</param>
            <returns>Encoded String Value</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonBinaryEncoding.TryGetBufferedStringValue(System.Byte[])">
            <summary>
            Try Get Buffered String Value
            </summary>
            <param name="buffer">The buffer.</param>
            <returns>Buffered String Value</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonBinaryEncoding.TryGetStringValue(System.Byte[])">
            <summary>
            Try Get String Value
            </summary>
            <param name="buffer">The buffer.</param>
            <returns>String Value</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonBinaryEncoding.TryGetEncodedSystemStringTypeMarker(System.String,Microsoft.Azure.Cosmos.Json.JsonBinaryEncoding.MultiByteTypeMarker@)">
            <summary>
            Try Get Encoded System String Type Marker
            </summary>
            <param name="value">The value.</param>
            <param name="multiByteTypeMarker">The multi byte type marker if found.</param>
            <returns>Whether or not the Encoded System String Type Marker was found.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonBinaryEncoding.GetNodeType(System.Byte)">
            <summary>
            Gets the node type of a type marker.
            </summary>
            <param name="typeMarker">The type maker as input.</param>
            <returns>the node type of the type marker.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonBinaryEncoding.GetValueLength(System.Byte[],System.Int64)">
            <summary>
            Gets the length of a particular value given it's typemarker
            </summary>
            <param name="buffer">The buffer to read from as input.</param>
            <param name="offset">The offset to read from as input.</param>
            <returns>
            - Positive Value: The length of the value including its TypeMarker
            - Negative Value: The length is encoded as an integer of size equals to abs(value) following the TypeMarker byte
            - Zero Value: The length is unknown (for instance an unassigned type marker)
            </returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonBinaryEncoding.GetStringLengths(System.Byte)">
            <summary>
            Gets the length of a particular string given it's typemarker.
            </summary>
            <param name="typeMarker">The type marker as input</param>
            <returns>
            - Non-Negative Value: The TypeMarker encodes the string length
            - Negative Value: System or user dictionary encoded string, or encoded string length that follows the TypeMarker
            </returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonBinaryEncoding.GetFirstValueOffset(System.Byte)">
            <summary>
            Gets the offset of the first item in an array or object
            </summary>
            <param name="typeMarker">The typemarker as input.</param>
            <returns>The offset of the first item in an array or object</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonBinaryEncoding.GetSystemStringById(System.Int32)">
            <summary>
            Gets a system string by ID.
            </summary>
            <param name="id">The SystemStringId.</param>
            <returns>The system string for the id.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonBinaryEncoding.TryGetSystemStringId(System.String,System.Int32@)">
            <summary>
            Gets the SystemStringId for a particular system string.
            </summary>
            <param name="systemString">The system string to get the enum id for.</param>
            <param name="systemStringId">The id of the system string if found.</param>
            <returns>The SystemStringId for a particular system string.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonBinaryEncoding.TryGetEncodedUserStringTypeMarker(System.String,Microsoft.Azure.Cosmos.Json.JsonStringDictionary,Microsoft.Azure.Cosmos.Json.JsonBinaryEncoding.MultiByteTypeMarker@)">
            <summary>
            Try Get Encoded User String Type Marker
            </summary>
            <param name="value">The value.</param>
            <param name="jsonStringDictionary">The optional json string dictionary.</param>
            <param name="multiByteTypeMarker">The multi byte type marker if found.</param>
            <returns>Whether or not the Encoded User String Type Marker was found.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonBinaryEncoding.TryGetEncodedSystemStringValue(Microsoft.Azure.Cosmos.Json.JsonBinaryEncoding.MultiByteTypeMarker,System.String@)">
            <summary>
            Try Get Encoded System String Value
            </summary>
            <param name="multiByteTypeMarker">The multi byte type marker.</param>
            <param name="encodedSystemString">The encoded system string.</param>
            <returns>Encoded System String Value</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonBinaryEncoding.TryGetEncodedUserStringValue(Microsoft.Azure.Cosmos.Json.JsonBinaryEncoding.MultiByteTypeMarker,Microsoft.Azure.Cosmos.Json.JsonStringDictionary,System.String@)">
            <summary>
            Try Get Encoded User String Value
            </summary>
            <param name="multiByteTypeMarker">The multi byte type marker.</param>
            <param name="jsonStringDictionary">The JSON string dictionary.</param>
            <param name="encodedUserStringValue">The encoded user string value if found.</param>
            <returns>Whether or not the Encoded User String Value was found</returns>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.Json.JsonBinaryEncoding.TypeMarker">
            <summary>
            Defines the set of type-marker values that are used to encode JSON value
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Json.JsonBinaryEncoding.TypeMarker.LiteralIntMin">
            <summary>
            The first integer what can be encoded in the type marker itself.
            </summary>
            <example>1 can be encoded as LiterIntMin + 1.</example>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Json.JsonBinaryEncoding.TypeMarker.LiteralIntMax">
            <summary>
            The last integer what can be encoded in the type marker itself.
            </summary>
            <example>1 can be encoded as LiterIntMin + 1.</example>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Json.JsonBinaryEncoding.TypeMarker.SystemString1ByteLengthMin">
            <summary>
            The first type marker for a system string whose value can be encoded in a 1 byte type marker.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Json.JsonBinaryEncoding.TypeMarker.SystemString1ByteLengthMax">
            <summary>
            The last type marker for a system string whose value can be encoded in a 1 byte type marker.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Json.JsonBinaryEncoding.TypeMarker.UserString1ByteLengthMin">
            <summary>
            The first type marker for a user string whose value can be encoded in a 1 byte type marker.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Json.JsonBinaryEncoding.TypeMarker.UserString1ByteLengthMax">
            <summary>
            The last type marker for a user string whose value can be encoded in a 1 byte type marker.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Json.JsonBinaryEncoding.TypeMarker.UserString2ByteLengthMin">
            <summary>
            The first type marker for a system string whose value can be encoded in a 2 byte type marker.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Json.JsonBinaryEncoding.TypeMarker.UserString2ByteLengthMax">
            <summary>
            The last type marker for a system string whose value can be encoded in a 2 byte type marker.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Json.JsonBinaryEncoding.TypeMarker.EncodedStringLengthMin">
            <summary>
            The first type marker for a string whose length is encoded.
            </summary>
            <example>EncodedStringLengthMin + 1 is a type marker for a string with length 1.</example>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Json.JsonBinaryEncoding.TypeMarker.EncodedStringLengthMax">
            <summary>
            The last type marker for a string whose length is encoded.
            </summary>
            <example>EncodedStringLengthMin + 1 is a type marker for a string with length 1.</example>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Json.JsonBinaryEncoding.TypeMarker.String1ByteLength">
            <summary>
            Type marker for a String of 1-byte length
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Json.JsonBinaryEncoding.TypeMarker.String2ByteLength">
            <summary>
            Type marker for a String of 2-byte length
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Json.JsonBinaryEncoding.TypeMarker.String4ByteLength">
            <summary>
            Type marker for a String of 4-byte length
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Json.JsonBinaryEncoding.TypeMarker.Binary1ByteLength">
            <summary>
            Type marker for a Compressed string of 1-byte length
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Json.JsonBinaryEncoding.TypeMarker.Binary2ByteLength">
            <summary>
            Type marker for a Compressed string of 2-byte length
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Json.JsonBinaryEncoding.TypeMarker.Binary4ByteLength">
            <summary>
            Type marker for a Compressed string of 4-byte length
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Json.JsonBinaryEncoding.TypeMarker.NumberUInt8">
            <summary>
            Type marker for a 1-byte unsigned integer
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Json.JsonBinaryEncoding.TypeMarker.NumberInt16">
            <summary>
            Type marker for a 2-byte singed integer
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Json.JsonBinaryEncoding.TypeMarker.NumberInt32">
            <summary>
            Type marker for a 4-byte singed integer
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Json.JsonBinaryEncoding.TypeMarker.NumberInt64">
            <summary>
            Type marker for a 8-byte singed integer
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Json.JsonBinaryEncoding.TypeMarker.NumberDouble">
            <summary>
            Type marker for a Double-precession floating point number
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Json.JsonBinaryEncoding.TypeMarker.Float32">
            <summary>
            Type marker for a single precision floating point number.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Json.JsonBinaryEncoding.TypeMarker.Float64">
            <summary>
            Type marker for double precision floating point number.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Json.JsonBinaryEncoding.TypeMarker.Null">
            <summary>
            The type marker for a JSON null value.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Json.JsonBinaryEncoding.TypeMarker.False">
            <summary>
            The type marker for a JSON false value.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Json.JsonBinaryEncoding.TypeMarker.True">
            <summary>
            The type marker for a JSON true value
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Json.JsonBinaryEncoding.TypeMarker.Guid">
            <summary>
            The type marker for a GUID
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Json.JsonBinaryEncoding.TypeMarker.Int8">
            <summary>
            The type marker for a 1-byte signed integer value.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Json.JsonBinaryEncoding.TypeMarker.Int16">
            <summary>
            The type marker for a 2-byte signed integer value.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Json.JsonBinaryEncoding.TypeMarker.Int32">
            <summary>
            The type marker for a 4-byte signed integer value.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Json.JsonBinaryEncoding.TypeMarker.Int64">
            <summary>
            The type marker for a 8-byte signed integer value.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Json.JsonBinaryEncoding.TypeMarker.UInt32">
            <summary>
            The type marker for a 4-byte signed integer value.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Json.JsonBinaryEncoding.TypeMarker.EmptyArray">
            <summary>
            Empty array type marker.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Json.JsonBinaryEncoding.TypeMarker.SingleItemArray">
            <summary>
            Single-item array type marker.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Json.JsonBinaryEncoding.TypeMarker.Array1ByteLength">
            <summary>
            Array of 1-byte length type marker.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Json.JsonBinaryEncoding.TypeMarker.Array2ByteLength">
            <summary>
            Array of 2-byte length type marker.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Json.JsonBinaryEncoding.TypeMarker.Array4ByteLength">
            <summary>
            Array of 4-byte length type marker.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Json.JsonBinaryEncoding.TypeMarker.Array1ByteLengthAndCount">
            <summary>
            Array of 1-byte length and item count type marker.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Json.JsonBinaryEncoding.TypeMarker.Array2ByteLengthAndCount">
            <summary>
            Array of 2-byte length and item count type marker.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Json.JsonBinaryEncoding.TypeMarker.Array4ByteLengthAndCount">
            <summary>
            Array of 4-byte length and item count type marker.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Json.JsonBinaryEncoding.TypeMarker.EmptyObject">
            <summary>
            Empty object type marker.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Json.JsonBinaryEncoding.TypeMarker.SinglePropertyObject">
            <summary>
            Single-property object type marker.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Json.JsonBinaryEncoding.TypeMarker.Object1ByteLength">
            <summary>
            Object of 1-byte length type marker.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Json.JsonBinaryEncoding.TypeMarker.Object2ByteLength">
            <summary>
            Object of 2-byte length type marker.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Json.JsonBinaryEncoding.TypeMarker.Object4ByteLength">
            <summary>
            Object of 4-byte length type maker.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Json.JsonBinaryEncoding.TypeMarker.Object1ByteLengthAndCount">
            <summary>
            Object of 1-byte length and property count type marker.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Json.JsonBinaryEncoding.TypeMarker.Object2ByteLengthAndCount">
            <summary>
            Object of 2-byte length and property count type marker.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Json.JsonBinaryEncoding.TypeMarker.Object4ByteLengthAndCount">
            <summary>
            Object of 4-byte length and property count type marker.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Json.JsonBinaryEncoding.TypeMarker.Invalid">
            <summary>
            Type marker reserved to communicate an invalid type marker.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonBinaryEncoding.TypeMarker.IsEncodedNumberLiteral(System.Int64)">
            <summary>
            Gets whether an integer can be encoded as a literal.
            </summary>
            <param name="value">The input integer.</param>
            <returns>Whether an integer can be encoded as a literal.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonBinaryEncoding.TypeMarker.IsFixedLengthNumber(System.Int64)">
            <summary>
            Gets whether an integer is a fixed length integer.
            </summary>
            <param name="value">The input integer.</param>
            <returns>Whether an integer is a fixed length integer.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonBinaryEncoding.TypeMarker.IsNumber(System.Int64)">
            <summary>
            Gets whether an integer is a number.
            </summary>
            <param name="value">The input integer.</param>
            <returns>Whether an integer is a number.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonBinaryEncoding.TypeMarker.EncodeIntegerLiteral(System.Int64)">
            <summary>
            Encodes an integer as a literal.
            </summary>
            <param name="value">The input integer.</param>
            <returns>The integer encoded as a literal if it can; else Invalid</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonBinaryEncoding.TypeMarker.IsOneByteEncodedSystemString(System.Byte)">
            <summary>
            Gets whether a typeMarker is for a one byte encoded system string.
            </summary>
            <param name="typeMarker">The input type marker.</param>
            <returns>Whether the typeMarker is for a one byte encoded system string.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonBinaryEncoding.TypeMarker.IsSystemString(System.Byte)">
            <summary>
            Gets whether a typeMarker is for a system string.
            </summary>
            <param name="typeMarker">The input type marker.</param>
            <returns>Whether the typeMarker is for a system string.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonBinaryEncoding.TypeMarker.IsOneByteEncodedUserString(System.Byte)">
            <summary>
            Gets whether a typeMarker is for a one byte encoded user string.
            </summary>
            <param name="typeMarker">The input type marker.</param>
            <returns>Whether the typeMarker is for a one byte encoded user string.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonBinaryEncoding.TypeMarker.IsTwoByteEncodedUserString(System.Byte)">
            <summary>
            Gets whether a typeMarker is for a two byte encoded user string.
            </summary>
            <param name="typeMarker">The input type marker.</param>
            <returns>Whether the typeMarker is for a two byte encoded user string.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonBinaryEncoding.TypeMarker.IsUserString(System.Byte)">
            <summary>
            Gets whether a typeMarker is for a user string.
            </summary>
            <param name="typeMarker">The input type marker.</param>
            <returns>Whether the typeMarker is for a user string.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonBinaryEncoding.TypeMarker.IsOneByteEncodedString(System.Byte)">
            <summary>
            Gets whether a typeMarker is for a one byte encoded string.
            </summary>
            <param name="typeMarker">The input type marker.</param>
            <returns>Whether the typeMarker is for a one byte encoded string.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonBinaryEncoding.TypeMarker.IsTwoByteEncodedString(System.Byte)">
            <summary>
            Gets whether a typeMarker is for a two byte encoded string.
            </summary>
            <param name="typeMarker">The input type marker.</param>
            <returns>Whether the typeMarker is for a two byte encoded string.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonBinaryEncoding.TypeMarker.IsEncodedString(System.Byte)">
            <summary>
            Gets whether a typeMarker is for an encoded string.
            </summary>
            <param name="typeMarker">The input type marker.</param>
            <returns>Whether the typeMarker is for an encoded string.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonBinaryEncoding.TypeMarker.IsEncodedLengthString(System.Byte)">
            <summary>
            Gets whether a typeMarker is for an encoded length string.
            </summary>
            <param name="typeMarker">The input type marker.</param>
            <returns>Whether the typeMarker is for an encoded string.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonBinaryEncoding.TypeMarker.IsVarLengthString(System.Byte)">
            <summary>
            Gets whether a typeMarker is for a variable length string.
            </summary>
            <param name="typeMarker">The input type marker.</param>
            <returns>Whether the typeMarker is for a variable length string.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonBinaryEncoding.TypeMarker.IsVarLengthCompressedString(System.Byte)">
            <summary>
            Gets whether a typeMarker is for a variable length compressed string.
            </summary>
            <param name="typeMarker">The input type marker.</param>
            <returns>Whether the typeMarker is for a variable length compressed string.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonBinaryEncoding.TypeMarker.IsString(System.Byte)">
            <summary>
            Gets whether a typeMarker is for a string.
            </summary>
            <param name="typeMarker">The type maker.</param>
            <returns>Whether the typeMarker is for a string.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonBinaryEncoding.TypeMarker.GetEncodedStringLength(System.Byte)">
            <summary>
            Gets the length of a encoded string type marker.
            </summary>
            <param name="typeMarker">The input type marker.</param>
            <returns>The length of the encoded string type marker.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonBinaryEncoding.TypeMarker.GetEncodedStringLengthTypeMarker(System.Int64)">
            <summary>
            Gets the type marker for an encoded string of a particular length.
            </summary>
            <param name="length">The length of the encoded string.</param>
            <returns>The type marker for an encoded string of a particular length.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonBinaryEncoding.TypeMarker.IsNull(System.Byte)">
            <summary>
            Gets whether a type maker is the null type marker.
            </summary>
            <param name="typeMarker">The input type marker.</param>
            <returns>Whether the type maker is the null type marker.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonBinaryEncoding.TypeMarker.IsFalse(System.Byte)">
            <summary>
            Gets whether a type maker is the false type marker.
            </summary>
            <param name="typeMarker">The input type marker.</param>
            <returns>Whether the type maker is the false type marker.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonBinaryEncoding.TypeMarker.IsTrue(System.Byte)">
            <summary>
            Gets whether a type maker is the true type marker.
            </summary>
            <param name="typeMarker">The input type marker.</param>
            <returns>Whether the type maker is the true type marker.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonBinaryEncoding.TypeMarker.IsBoolean(System.Byte)">
            <summary>
            Gets whether a type maker is a boolean type marker.
            </summary>
            <param name="typeMarker">The input type marker.</param>
            <returns>Whether the type maker is a boolean type marker.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonBinaryEncoding.TypeMarker.IsArray(System.Byte)">
            <summary>
            Gets whether a type marker is for an array.
            </summary>
            <param name="typeMarker">The input type marker.</param>
            <returns>Whether the type marker is for an array.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonBinaryEncoding.TypeMarker.IsObject(System.Byte)">
            <summary>
            Gets whether a type marker is for an object.
            </summary>
            <param name="typeMarker">The input type marker.</param>
            <returns>Whether the type marker is for an object.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonBinaryEncoding.TypeMarker.IsValid(System.Byte)">
            <summary>
            Gets whether a type marker is valid.
            </summary>
            <param name="typeMarker">The input type marker.</param>
            <returns>Whether the type marker is valid.</returns>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.Json.JsonBinaryEncoding.MultiByteTypeMarker">
            <summary>
            Struct to hold the a multibyte type marker.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonBinaryEncoding.MultiByteTypeMarker.#ctor(System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            Initializes a new instance of the MultiByteTypeMarker struct.
            </summary>
            <param name="length">The length of the typemarker.</param>
            <param name="one">The first byte.</param>
            <param name="two">The second byte.</param>
            <param name="three">The third byte.</param>
            <param name="four">The fourth byte.</param>
            <param name="five">The fifth byte.</param>
            <param name="six">The sixth byte.</param>
            <param name="seven">The seventh byte.</param>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Json.JsonBinaryEncoding.ValueLengths.lengths">
            <summary>
            Lookup table for encoded value length for each TypeMarker value (0 to 255)
            The lengths are encoded as follows:
            - Positive Value: The length of the value including its TypeMarker
            - Negative Value: The length is encoded as an integer of size equals to abs(value) following the TypeMarker byte
            - Zero Value: The length is unknown (for instance an unassigned type marker)
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Json.JsonBinaryEncoding.StringLengths.lengths">
            <summary>
            Lookup table for encoded string length for each TypeMarker value (0 to 255)
            The lengths are encoded as follows:
            - Non-Negative Value: The TypeMarker encodes the string length
            - Negative Value: System or user dictionary encoded string, or encoded string length that follows the TypeMarker
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Json.JsonBinaryEncoding.FirstValueOffsets.offsets">
            <summary>
            Defines the offset of the first item in an array or object
            </summary>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.Json.JsonNavigator">
            <summary>
            Base abstract class for JSON navigators.
            The navigator defines methods that allow random access to JSON document nodes.
            </summary>
            <summary>
            Partial class that wraps the private JsonTextNavigator
            </summary>
            <summary>
            Partial class that wraps the private JsonTextNavigator
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonNavigator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.Cosmos.Json.JsonNavigator"/> class.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.Json.JsonNavigator.SerializationFormat">
            <summary>
            Gets the <see cref="T:Microsoft.Azure.Cosmos.Json.JsonSerializationFormat"/> for the IJsonNavigator.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonNavigator.Create(System.Byte[],Microsoft.Azure.Cosmos.Json.JsonStringDictionary,System.Boolean)">
            <summary>
            Creates a JsonNavigator that can navigate a supplied buffer
            </summary>
            <param name="buffer">The buffer to navigate</param>
            <param name="jsonStringDictionary">The optional json string dictionary for binary encoding.</param>
            <param name="skipValidation">Whether validation should be skipped.</param>
            <returns>A concrete JsonNavigator that can navigate the supplied buffer.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonNavigator.GetRootNode">
            <summary>
            Gets <see cref="T:Microsoft.Azure.Cosmos.Json.IJsonNavigatorNode"/> of the root node.
            </summary>
            <returns><see cref="T:Microsoft.Azure.Cosmos.Json.IJsonNavigatorNode"/> corresponding to the root node.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonNavigator.GetNodeType(Microsoft.Azure.Cosmos.Json.IJsonNavigatorNode)">
            <summary>
            Gets the <see cref="T:Microsoft.Azure.Cosmos.Json.JsonNodeType"/> type for a particular node
            </summary>
            <param name="node">The <see cref="T:Microsoft.Azure.Cosmos.Json.IJsonNavigatorNode"/> of the node you want to know the type of</param>
            <returns><see cref="T:Microsoft.Azure.Cosmos.Json.JsonNodeType"/> for the node</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonNavigator.GetNumberValue(Microsoft.Azure.Cosmos.Json.IJsonNavigatorNode)">
            <summary>
            Gets the numeric value for a node
            </summary>
            <param name="numberNode">The <see cref="T:Microsoft.Azure.Cosmos.Json.IJsonNavigatorNode"/> of the node you want the number value from.</param>
            <returns>A double that represents the number value in the node.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonNavigator.TryGetBufferedStringValue(Microsoft.Azure.Cosmos.Json.IJsonNavigatorNode,System.Collections.Generic.IReadOnlyList{System.Byte}@)">
            <summary>
            Tries to get the buffered string value from a node.
            </summary>
            <param name="stringNode">The <see cref="T:Microsoft.Azure.Cosmos.Json.IJsonNavigatorNode"/> of the node to get the buffered string from.</param>
            <param name="bufferedStringValue">The buffered string value if possible</param>
            <returns><code>true</code> if the JsonNavigator successfully got the buffered string value; <code>false</code> if the JsonNavigator failed to get the buffered string value.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonNavigator.GetStringValue(Microsoft.Azure.Cosmos.Json.IJsonNavigatorNode)">
            <summary>
            Gets a string value from a node.
            </summary>
            <param name="stringNode">The <see cref="T:Microsoft.Azure.Cosmos.Json.IJsonNavigatorNode"/> of the node to get the string value from.</param>
            <returns>The string value from the node.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonNavigator.GetInt8Value(Microsoft.Azure.Cosmos.Json.IJsonNavigatorNode)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonNavigator.GetInt16Value(Microsoft.Azure.Cosmos.Json.IJsonNavigatorNode)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonNavigator.GetInt32Value(Microsoft.Azure.Cosmos.Json.IJsonNavigatorNode)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonNavigator.GetInt64Value(Microsoft.Azure.Cosmos.Json.IJsonNavigatorNode)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonNavigator.GetFloat32Value(Microsoft.Azure.Cosmos.Json.IJsonNavigatorNode)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonNavigator.GetFloat64Value(Microsoft.Azure.Cosmos.Json.IJsonNavigatorNode)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonNavigator.GetUInt32Value(Microsoft.Azure.Cosmos.Json.IJsonNavigatorNode)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonNavigator.GetGuidValue(Microsoft.Azure.Cosmos.Json.IJsonNavigatorNode)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonNavigator.GetBinaryValue(Microsoft.Azure.Cosmos.Json.IJsonNavigatorNode)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonNavigator.TryGetBufferedBinaryValue(Microsoft.Azure.Cosmos.Json.IJsonNavigatorNode,System.Collections.Generic.IReadOnlyList{System.Byte}@)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonNavigator.GetArrayItemCount(Microsoft.Azure.Cosmos.Json.IJsonNavigatorNode)">
            <summary>
            Gets the number of elements in an array node.
            </summary>
            <param name="arrayNode">The <see cref="T:Microsoft.Azure.Cosmos.Json.IJsonNavigatorNode"/> of the (array) node to get the count of.</param>
            <returns>The number of elements in the array node.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonNavigator.GetArrayItemAt(Microsoft.Azure.Cosmos.Json.IJsonNavigatorNode,System.Int32)">
            <summary>
            Gets the node at a particular index of an array node
            </summary>
            <param name="arrayNode">The <see cref="T:Microsoft.Azure.Cosmos.Json.IJsonNavigatorNode"/> of the (array) node to index from.</param>
            <param name="index">The offset into the array</param>
            <returns>The <see cref="T:Microsoft.Azure.Cosmos.Json.IJsonNavigatorNode"/> of the node at a particular index of an array node</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonNavigator.GetArrayItems(Microsoft.Azure.Cosmos.Json.IJsonNavigatorNode)">
            <summary>
            Gets an IEnumerable of <see cref="T:Microsoft.Azure.Cosmos.Json.IJsonNavigatorNode"/>s for an arrayNode.
            </summary>
            <param name="arrayNode">The <see cref="T:Microsoft.Azure.Cosmos.Json.IJsonNavigatorNode"/> of the array to get the items from</param>
            <returns>The IEnumerable of <see cref="T:Microsoft.Azure.Cosmos.Json.IJsonNavigatorNode"/>s for an arrayNode.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonNavigator.GetObjectPropertyCount(Microsoft.Azure.Cosmos.Json.IJsonNavigatorNode)">
            <summary>
            Gets the number of properties in an object node.
            </summary>
            <param name="objectNode">The <see cref="T:Microsoft.Azure.Cosmos.Json.IJsonNavigatorNode"/> of node to get the property count from.</param>
            <returns>The number of properties in an object node.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonNavigator.TryGetObjectProperty(Microsoft.Azure.Cosmos.Json.IJsonNavigatorNode,System.String,Microsoft.Azure.Cosmos.Json.ObjectProperty@)">
            <summary>
            Tries to get a object property from an object with a particular property name.
            </summary>
            <param name="objectNode">The <see cref="T:Microsoft.Azure.Cosmos.Json.IJsonNavigatorNode"/> of object node to get a property from.</param>
            <param name="propertyName">The name of the property to search for.</param>
            <param name="objectProperty">The <see cref="T:Microsoft.Azure.Cosmos.Json.ObjectProperty"/> with the specified property name if it exists.</param>
            <returns><code>true</code> if the JsonNavigator successfully found the <see cref="T:Microsoft.Azure.Cosmos.Json.IJsonNavigatorNode"/> with the specified property name; <code>false</code> otherwise.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonNavigator.GetObjectProperties(Microsoft.Azure.Cosmos.Json.IJsonNavigatorNode)">
            <summary>
            Gets an IEnumerable of <see cref="T:Microsoft.Azure.Cosmos.Json.ObjectProperty"/> properties from an object node.
            </summary>
            <param name="objectNode">The <see cref="T:Microsoft.Azure.Cosmos.Json.IJsonNavigatorNode"/> of object node to get the properties from.</param>
            <returns>The IEnumerable of <see cref="T:Microsoft.Azure.Cosmos.Json.ObjectProperty"/> properties from an object node.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonNavigator.TryGetBufferedRawJson(Microsoft.Azure.Cosmos.Json.IJsonNavigatorNode,System.Collections.Generic.IReadOnlyList{System.Byte}@)">
            <summary>
            Tries to get the buffered raw json
            </summary>
            <param name="jsonNode">The json node of interest</param>
            <param name="bufferedRawJson">The raw json.</param>
            <returns>True if bufferedRawJson was set. False otherwise.</returns>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.Json.JsonNavigator.JsonBinaryNavigator">
            <summary>
            JsonNavigator that know how to navigate JSONs in binary serialization.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonNavigator.JsonBinaryNavigator.#ctor(System.Byte[],Microsoft.Azure.Cosmos.Json.JsonStringDictionary,System.Boolean)">
            <summary>
            Initializes a new instance of the JsonBinaryNavigator class
            </summary>
            <param name="buffer">The (UTF-8) buffer to navigate.</param>
            <param name="jsonStringDictionary">The JSON string dictionary.</param>
            <param name="skipValidation">whether to skip validation or not.</param>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.Json.JsonNavigator.JsonBinaryNavigator.SerializationFormat">
            <summary>
            Gets the <see cref="T:Microsoft.Azure.Cosmos.Json.JsonSerializationFormat"/> for the IJsonNavigator.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonNavigator.JsonBinaryNavigator.GetRootNode">
            <summary>
            Gets <see cref="T:Microsoft.Azure.Cosmos.Json.IJsonNavigatorNode"/> of the root node.
            </summary>
            <returns><see cref="T:Microsoft.Azure.Cosmos.Json.IJsonNavigatorNode"/> corresponding to the root node.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonNavigator.JsonBinaryNavigator.GetNodeType(Microsoft.Azure.Cosmos.Json.IJsonNavigatorNode)">
            <summary>
            Gets the <see cref="T:Microsoft.Azure.Cosmos.Json.JsonNodeType"/> type for a particular node
            </summary>
            <param name="node">The <see cref="T:Microsoft.Azure.Cosmos.Json.IJsonNavigatorNode"/> of the node you want to know the type of</param>
            <returns><see cref="T:Microsoft.Azure.Cosmos.Json.JsonNodeType"/> for the node</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonNavigator.JsonBinaryNavigator.GetNumberValue(Microsoft.Azure.Cosmos.Json.IJsonNavigatorNode)">
            <summary>
            Gets the numeric value for a node
            </summary>
            <param name="numberNavigatorNode">The <see cref="T:Microsoft.Azure.Cosmos.Json.IJsonNavigatorNode"/> of the node you want the number value from.</param>
            <returns>A double that represents the number value in the node.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonNavigator.JsonBinaryNavigator.TryGetBufferedStringValue(Microsoft.Azure.Cosmos.Json.IJsonNavigatorNode,System.Collections.Generic.IReadOnlyList{System.Byte}@)">
            <summary>
            Tries to get the buffered string value from a node.
            </summary>
            <param name="stringNode">The <see cref="T:Microsoft.Azure.Cosmos.Json.IJsonNavigatorNode"/> of the node to get the buffered string from.</param>
            <param name="bufferedStringValue">The buffered string value if possible</param>
            <returns><code>true</code> if the JsonNavigator successfully got the buffered string value; <code>false</code> if the JsonNavigator failed to get the buffered string value.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonNavigator.JsonBinaryNavigator.GetStringValue(Microsoft.Azure.Cosmos.Json.IJsonNavigatorNode)">
            <summary>
            Gets a string value from a node.
            </summary>
            <param name="stringNode">The <see cref="T:Microsoft.Azure.Cosmos.Json.IJsonNavigatorNode"/> of the node to get the string value from.</param>
            <returns>The string value from the node.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonNavigator.JsonBinaryNavigator.GetArrayItemCount(Microsoft.Azure.Cosmos.Json.IJsonNavigatorNode)">
            <summary>
            Gets the number of elements in an array node.
            </summary>
            <param name="arrayNavigatorNode">The <see cref="T:Microsoft.Azure.Cosmos.Json.IJsonNavigatorNode"/> of the (array) node to get the count of.</param>
            <returns>The number of elements in the array node.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonNavigator.JsonBinaryNavigator.GetArrayItemAt(Microsoft.Azure.Cosmos.Json.IJsonNavigatorNode,System.Int32)">
            <summary>
            Gets the node at a particular index of an array node
            </summary>
            <param name="arrayNavigatorNode">The <see cref="T:Microsoft.Azure.Cosmos.Json.IJsonNavigatorNode"/> of the (array) node to index from.</param>
            <param name="index">The offset into the array</param>
            <returns>The <see cref="T:Microsoft.Azure.Cosmos.Json.IJsonNavigatorNode"/> of the node at a particular index of an array node</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonNavigator.JsonBinaryNavigator.GetArrayItems(Microsoft.Azure.Cosmos.Json.IJsonNavigatorNode)">
            <summary>
            Gets an IEnumerable of <see cref="T:Microsoft.Azure.Cosmos.Json.IJsonNavigatorNode"/>s for an arrayNode.
            </summary>
            <param name="arrayNavigatorNode">The <see cref="T:Microsoft.Azure.Cosmos.Json.IJsonNavigatorNode"/> of the array to get the items from</param>
            <returns>The IEnumerable of <see cref="T:Microsoft.Azure.Cosmos.Json.IJsonNavigatorNode"/>s for an arrayNode.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonNavigator.JsonBinaryNavigator.GetObjectPropertyCount(Microsoft.Azure.Cosmos.Json.IJsonNavigatorNode)">
            <summary>
            Gets the number of properties in an object node.
            </summary>
            <param name="objectNavigatorNode">The <see cref="T:Microsoft.Azure.Cosmos.Json.IJsonNavigatorNode"/> of node to get the property count from.</param>
            <returns>The number of properties in an object node.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonNavigator.JsonBinaryNavigator.TryGetObjectProperty(Microsoft.Azure.Cosmos.Json.IJsonNavigatorNode,System.String,Microsoft.Azure.Cosmos.Json.ObjectProperty@)">
            <summary>
            Tries to get a object property from an object with a particular property name.
            </summary>
            <param name="objectNavigatorNode">The <see cref="T:Microsoft.Azure.Cosmos.Json.ObjectProperty"/> of object node to get a property from.</param>
            <param name="propertyName">The name of the property to search for.</param>
            <param name="objectProperty">The <see cref="T:Microsoft.Azure.Cosmos.Json.IJsonNavigatorNode"/> with the specified property name if it exists.</param>
            <returns><code>true</code> if the JsonNavigator successfully found the <see cref="T:Microsoft.Azure.Cosmos.Json.ObjectProperty"/> with the specified property name; <code>false</code> otherwise.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonNavigator.JsonBinaryNavigator.GetObjectProperties(Microsoft.Azure.Cosmos.Json.IJsonNavigatorNode)">
            <summary>
            Gets an IEnumerable of <see cref="T:Microsoft.Azure.Cosmos.Json.IJsonNavigatorNode"/> properties from an object node.
            </summary>
            <param name="objectNavigatorNode">The <see cref="T:Microsoft.Azure.Cosmos.Json.IJsonNavigatorNode"/> of object node to get the properties from.</param>
            <returns>The IEnumerable of <see cref="T:Microsoft.Azure.Cosmos.Json.IJsonNavigatorNode"/> properties from an object node.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonNavigator.JsonBinaryNavigator.TryGetBufferedRawJson(Microsoft.Azure.Cosmos.Json.IJsonNavigatorNode,System.Collections.Generic.IReadOnlyList{System.Byte}@)">
            <summary>
            Tries to get the buffered raw json
            </summary>
            <param name="jsonNode">The json node of interest</param>
            <param name="bufferedRawJson">The raw json.</param>
            <returns>True if bufferedRawJson was set. False otherwise.</returns>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.Json.JsonNavigator.JsonTextNavigator">
            <summary>
            JsonNavigator that know how to navigate JSONs in text serialization.
            Internally the navigator uses a <see cref="T:Microsoft.Azure.Cosmos.Json.JsonNavigator.JsonTextNavigator.JsonTextParser"/> to from an AST of the JSON and the rest of the methods are just letting you traverse the materialized tree.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonNavigator.JsonTextNavigator.#ctor(System.Byte[],System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.Cosmos.Json.JsonNavigator.JsonTextNavigator"/> class.
            </summary>
            <param name="buffer">The (UTF-8) buffer to navigate.</param>
            <param name="skipValidation">whether to skip validation or not.</param>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.Json.JsonNavigator.JsonTextNavigator.SerializationFormat">
            <summary>
            Gets the <see cref="T:Microsoft.Azure.Cosmos.Json.JsonSerializationFormat"/> for the IJsonNavigator.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonNavigator.JsonTextNavigator.GetRootNode">
            <summary>
            Gets <see cref="T:Microsoft.Azure.Cosmos.Json.IJsonNavigatorNode"/> of the root node.
            </summary>
            <returns><see cref="T:Microsoft.Azure.Cosmos.Json.IJsonNavigatorNode"/> corresponding to the root node.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonNavigator.JsonTextNavigator.GetNodeType(Microsoft.Azure.Cosmos.Json.IJsonNavigatorNode)">
            <summary>
            Gets the <see cref="T:Microsoft.Azure.Cosmos.Json.JsonNodeType"/> type for a particular node
            </summary>
            <param name="node">The <see cref="T:Microsoft.Azure.Cosmos.Json.IJsonNavigatorNode"/> of the node you want to know the type of</param>
            <returns><see cref="T:Microsoft.Azure.Cosmos.Json.JsonNodeType"/> for the node</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonNavigator.JsonTextNavigator.GetNumberValue(Microsoft.Azure.Cosmos.Json.IJsonNavigatorNode)">
            <summary>
            Gets the numeric value for a node
            </summary>
            <param name="numberNavigatorNode">The <see cref="T:Microsoft.Azure.Cosmos.Json.IJsonNavigatorNode"/> of the node you want the number value from.</param>
            <returns>A double that represents the number value in the node.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonNavigator.JsonTextNavigator.TryGetBufferedStringValue(Microsoft.Azure.Cosmos.Json.IJsonNavigatorNode,System.Collections.Generic.IReadOnlyList{System.Byte}@)">
            <summary>
            Tries to get the buffered string value from a node.
            </summary>
            <param name="stringNode">The <see cref="T:Microsoft.Azure.Cosmos.Json.IJsonNavigatorNode"/> of the node to get the buffered string from.</param>
            <param name="bufferedStringValue">The buffered string value if possible</param>
            <returns><code>true</code> if the JsonNavigator successfully got the buffered string value; <code>false</code> if the JsonNavigator failed to get the buffered string value.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonNavigator.JsonTextNavigator.GetStringValue(Microsoft.Azure.Cosmos.Json.IJsonNavigatorNode)">
            <summary>
            Gets a string value from a node.
            </summary>
            <param name="stringNode">The <see cref="T:Microsoft.Azure.Cosmos.Json.IJsonNavigatorNode"/> of the node to get the string value from.</param>
            <returns>The string value from the node.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonNavigator.JsonTextNavigator.GetArrayItemCount(Microsoft.Azure.Cosmos.Json.IJsonNavigatorNode)">
            <summary>
            Gets the number of elements in an array node.
            </summary>
            <param name="arrayNavigatorNode">The <see cref="T:Microsoft.Azure.Cosmos.Json.IJsonNavigatorNode"/> of the (array) node to get the count of.</param>
            <returns>The number of elements in the array node.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonNavigator.JsonTextNavigator.GetArrayItemAt(Microsoft.Azure.Cosmos.Json.IJsonNavigatorNode,System.Int32)">
            <summary>
            Gets the node at a particular index of an array node
            </summary>
            <param name="arrayNavigatorNode">The <see cref="T:Microsoft.Azure.Cosmos.Json.IJsonNavigatorNode"/> of the (array) node to index from.</param>
            <param name="index">The offset into the array</param>
            <returns>The <see cref="T:Microsoft.Azure.Cosmos.Json.IJsonNavigatorNode"/> of the node at a particular index of an array node</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonNavigator.JsonTextNavigator.GetArrayItems(Microsoft.Azure.Cosmos.Json.IJsonNavigatorNode)">
            <summary>
            Gets an IEnumerable of <see cref="T:Microsoft.Azure.Cosmos.Json.IJsonNavigatorNode"/>s for an arrayNode.
            </summary>
            <param name="arrayNavigatorNode">The <see cref="T:Microsoft.Azure.Cosmos.Json.IJsonNavigatorNode"/> of the array to get the items from</param>
            <returns>The IEnumerable of <see cref="T:Microsoft.Azure.Cosmos.Json.IJsonNavigatorNode"/>s for an arrayNode.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonNavigator.JsonTextNavigator.GetObjectPropertyCount(Microsoft.Azure.Cosmos.Json.IJsonNavigatorNode)">
            <summary>
            Gets the number of properties in an object node.
            </summary>
            <param name="objectNavigatorNode">The <see cref="T:Microsoft.Azure.Cosmos.Json.IJsonNavigatorNode"/> of node to get the property count from.</param>
            <returns>The number of properties in an object node.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonNavigator.JsonTextNavigator.TryGetObjectProperty(Microsoft.Azure.Cosmos.Json.IJsonNavigatorNode,System.String,Microsoft.Azure.Cosmos.Json.ObjectProperty@)">
            <summary>
            Tries to get a object property from an object with a particular property name.
            </summary>
            <param name="objectNavigatorNode">The <see cref="T:Microsoft.Azure.Cosmos.Json.ObjectProperty"/> of object node to get a property from.</param>
            <param name="propertyName">The name of the property to search for.</param>
            <param name="objectProperty">The <see cref="T:Microsoft.Azure.Cosmos.Json.IJsonNavigatorNode"/> with the specified property name if it exists.</param>
            <returns><code>true</code> if the JsonNavigator successfully found the <see cref="T:Microsoft.Azure.Cosmos.Json.ObjectProperty"/> with the specified property name; <code>false</code> otherwise.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonNavigator.JsonTextNavigator.GetObjectProperties(Microsoft.Azure.Cosmos.Json.IJsonNavigatorNode)">
            <summary>
            Gets an IEnumerable of <see cref="T:Microsoft.Azure.Cosmos.Json.IJsonNavigatorNode"/> properties from an object node.
            </summary>
            <param name="objectNavigatorNode">The <see cref="T:Microsoft.Azure.Cosmos.Json.IJsonNavigatorNode"/> of object node to get the properties from.</param>
            <returns>The IEnumerable of <see cref="T:Microsoft.Azure.Cosmos.Json.IJsonNavigatorNode"/> properties from an object node.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonNavigator.JsonTextNavigator.TryGetBufferedRawJson(Microsoft.Azure.Cosmos.Json.IJsonNavigatorNode,System.Collections.Generic.IReadOnlyList{System.Byte}@)">
            <summary>
            Tries to get the buffered raw json
            </summary>
            <param name="jsonNode">The json node of interest</param>
            <param name="bufferedRawJson">The raw json.</param>
            <returns>True if bufferedRawJson was set. False otherwise.</returns>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.Json.JsonNavigator.JsonTextNavigator.JsonTextParser">
            <summary>
            The JsonTextParser class is used to get a JSON AST / DOM from plaintext using a JsonTextReader as a lexer / tokenizer.
            Internally the parser is implemented as an LL(1) parser, since JSON is unambiguous and we can just parse it using recursive decent.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonNavigator.JsonTextNavigator.JsonTextParser.Parse(Microsoft.Azure.Cosmos.Json.IJsonReader)">
            <summary>
            Gets the root node of a JSON AST from a jsonTextReader.
            </summary>
            <param name="jsonTextReader">The reader to use as a lexer / tokenizer</param>
            <returns>The root node of a JSON AST from a jsonTextReader.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonNavigator.JsonTextNavigator.JsonTextParser.ParseArrayNode(Microsoft.Azure.Cosmos.Json.IJsonReader)">
            <summary>
            Parses out a JSON array AST node with a jsonTextReader.
            </summary>
            <param name="jsonTextReader">The reader to use as a lexer / tokenizer</param>
            <returns>JSON array AST node</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonNavigator.JsonTextNavigator.JsonTextParser.ParseObjectNode(Microsoft.Azure.Cosmos.Json.IJsonReader)">
            <summary>
            Parses out a JSON object AST node with a jsonTextReader.
            </summary>
            <param name="jsonTextReader">The reader to use as a lexer / tokenizer</param>
            <returns>JSON object AST node</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonNavigator.JsonTextNavigator.JsonTextParser.ParseStringNode(Microsoft.Azure.Cosmos.Json.IJsonReader)">
            <summary>
            Parses out a JSON string AST node with a jsonTextReader.
            </summary>
            <param name="jsonTextReader">The reader to use as a lexer / tokenizer</param>
            <returns>JSON string AST node</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonNavigator.JsonTextNavigator.JsonTextParser.ParseNumberNode(Microsoft.Azure.Cosmos.Json.IJsonReader)">
            <summary>
            Parses out a JSON number AST node with a jsonTextReader.
            </summary>
            <param name="jsonTextReader">The reader to use as a lexer / tokenizer</param>
            <returns>JSON number AST node</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonNavigator.JsonTextNavigator.JsonTextParser.ParseTrueNode(Microsoft.Azure.Cosmos.Json.IJsonReader)">
            <summary>
            Parses out a JSON true AST node with a jsonTextReader.
            </summary>
            <param name="jsonTextReader">The reader to use as a lexer / tokenizer</param>
            <returns>JSON true AST node</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonNavigator.JsonTextNavigator.JsonTextParser.ParseFalseNode(Microsoft.Azure.Cosmos.Json.IJsonReader)">
            <summary>
            Parses out a JSON false AST node with a jsonTextReader.
            </summary>
            <param name="jsonTextReader">The reader to use as a lexer / tokenizer</param>
            <returns>JSON true AST node</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonNavigator.JsonTextNavigator.JsonTextParser.ParseNullNode(Microsoft.Azure.Cosmos.Json.IJsonReader)">
            <summary>
            Parses out a JSON null AST node with a jsonTextReader.
            </summary>
            <param name="jsonTextReader">The reader to use as a lexer / tokenizer</param>
            <returns>JSON null AST node</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonNavigator.JsonTextNavigator.JsonTextParser.ParsePropertyNode(Microsoft.Azure.Cosmos.Json.IJsonReader)">
            <summary>
            Parses out a JSON property AST node with a jsonTextReader.
            </summary>
            <param name="jsonTextReader">The reader to use as a lexer / tokenizer</param>
            <returns>JSON property AST node</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonNavigator.JsonTextNavigator.JsonTextParser.ParseNode(Microsoft.Azure.Cosmos.Json.IJsonReader)">
            <summary>
            Parses out a JSON AST node with a jsonTextReader.
            </summary>
            <param name="jsonTextReader">The reader to use as a lexer / tokenizer</param>
            <returns>JSON AST node (type determined by the reader)</returns>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.Json.JsonNodeType">
            <summary>
            The enumeration of JSON node types
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Json.JsonNodeType.Null">
            <summary>
            Corresponds to the 'null' value in JSON.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Json.JsonNodeType.False">
            <summary>
            Corresponds to the 'false' value in JSON.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Json.JsonNodeType.True">
            <summary>
            Corresponds to the 'true' value in JSON.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Json.JsonNodeType.Number">
            <summary>
            Corresponds to the number type in JSON (number = [ minus ] integer [ fraction ] [ exponent ])
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Json.JsonNodeType.String">
            <summary>
            Corresponds to the string type in JSON (string = quotation-mark *char quotation-mark)
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Json.JsonNodeType.Array">
            <summary>
            Corresponds to the array type in JSON ( begin-array [ value *( value-separator value ) ] end-array)
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Json.JsonNodeType.Object">
            <summary>
            Corresponds to the object type in JSON (begin-object [ member *( value-separator member ) ] end-object)
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Json.JsonNodeType.FieldName">
            <summary>
            Corresponds to the property name of a JSON object property (which is also a string).
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Json.JsonNodeType.Int8">
            <summary>
            Corresponds to the sbyte type in C# for the extended types.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Json.JsonNodeType.Int16">
            <summary>
            Corresponds to the short type in C# for the extended types.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Json.JsonNodeType.Int32">
            <summary>
            Corresponds to the int type in C# for the extended types.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Json.JsonNodeType.Int64">
            <summary>
            Corresponds to the long type in C# for the extended types.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Json.JsonNodeType.UInt32">
            <summary>
            Corresponds to the uint type in C# for the extended types.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Json.JsonNodeType.Float32">
            <summary>
            Corresponds to the float type in C# for the extended types.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Json.JsonNodeType.Float64">
            <summary>
            Corresponds to the double type in C# for the extended types.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Json.JsonNodeType.Binary">
            <summary>
            Corresponds to an arbitrary sequence of bytes (equivalent to a byte[] in C#)
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Json.JsonNodeType.Guid">
            <summary>
            Corresponds to a GUID type in C# for teh extended types.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Json.JsonNodeType.Unknown">
            <summary>
            Unknown JsonNodeType.
            </summary>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.Json.JsonObjectState">
            <summary>
            This class maintains the current state of a JSON object/value while it is being read or written.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Json.JsonObjectState.JsonMaxNestingDepth">
            <summary>
            This constant defines the maximum nesting depth that the parser supports.
            The JSON spec states that this is an implementation dependent thing, so we're just picking a value for now.
            FWIW .Net chose 100
            Note: This value needs to be a multiple of 8 and must be less than 2^15 (see asserts in the constructor)
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Json.JsonObjectState.readMode">
            <summary>
            Flag for determining whether to throw exceptions that connote a context at the end or not started / complete.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Json.JsonObjectState.nestingStackBitmap">
            <summary>
            Stores a bitmap for whether we are in an array or object context at a particular level (0 => array, 1 => object).
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Json.JsonObjectState.nestingStackIndex">
            <summary>
            The current nesting stack index.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Json.JsonObjectState.currentTokenType">
            <summary>
            The current JsonTokenType.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Json.JsonObjectState.currentContext">
            <summary>
            The current JsonObjectContext.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonObjectState.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the JsonObjectState class.
            </summary>
            <param name="readMode">Flag for determining whether to throw exceptions that correspond to a JsonReader or JsonWriter.</param>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.Json.JsonObjectState.JsonObjectContext">
            <summary>
            JsonObjectContext enum
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Json.JsonObjectState.JsonObjectContext.None">
            <summary>
            Context at the start of the object state.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Json.JsonObjectState.JsonObjectContext.Array">
            <summary>
            Context when state is in an array.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Json.JsonObjectState.JsonObjectContext.Object">
            <summary>
            Context when state is in an object.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.Json.JsonObjectState.CurrentDepth">
            <summary>
            Gets the current depth (level of nesting).
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.Json.JsonObjectState.CurrentTokenType">
            <summary>
            Gets the current JsonTokenType.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.Json.JsonObjectState.IsPropertyExpected">
            <summary>
            Gets a value indicating whether a property is expected.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.Json.JsonObjectState.InArrayContext">
            <summary>
            Gets a value indicating whether the current context is an array.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.Json.JsonObjectState.InObjectContext">
            <summary>
            Gets a value indicating whether the current context in an object.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.Json.JsonObjectState.RetrieveCurrentContext">
            <summary>
            Gets the current JsonObjectContext
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.Json.JsonObjectState.Mask">
            <summary>
            Gets a mask to use to get the current context from the nesting stack
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonObjectState.RegisterToken(Microsoft.Azure.Cosmos.Json.JsonTokenType)">
            <summary>
            Registers a JsonTokenType.
            </summary>
            <param name="jsonTokenType">The JsonTokenType to register.</param>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonObjectState.Push(System.Boolean)">
            <summary>
            Pushes a JsonObjectContext onto the nesting stack.
            </summary>
            <param name="isArray">Whether the JsonObjectContext is an array.</param>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonObjectState.RegisterValue(Microsoft.Azure.Cosmos.Json.JsonTokenType)">
            <summary>
            Registers any json token type.
            </summary>
            <param name="jsonTokenType">The jsonTokenType to register</param>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonObjectState.RegisterBeginArray">
            <summary>
            Registers a beginning of a json array ('[')
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonObjectState.RegisterEndArray">
            <summary>
            Registers the end of a json array (']')
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonObjectState.RegisterBeginObject">
            <summary>
            Registers a beginning of a json object ('{')
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonObjectState.RegisterEndObject">
            <summary>
            Registers a end of a json object ('}')
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonObjectState.RegisterFieldName">
            <summary>
            Register a Json FieldName
            </summary>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.Json.JsonParseException">
            <summary>
            Abstract class that all JsonParseExceptions will derive from.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonParseException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.Cosmos.Json.JsonParseException"/> class.
            </summary>
            <param name="message">The exception message for the JsonParseException</param>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.Json.JsonMissingClosingQuoteException">
            <summary>
            JsonParseException for MissingClosingQuote 
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonMissingClosingQuoteException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.Cosmos.Json.JsonMissingClosingQuoteException"/> class.
            </summary>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.Json.JsonNotFieldnameTokenException">
            <summary>
            JsonParseException for NotFieldnameToken 
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonNotFieldnameTokenException.#ctor">
            <summary>
            Initializes a new instance of the JsonNotFieldnameTokenException class.
            </summary>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.Json.JsonInvalidParameterException">
            <summary>
            JsonParseException for InvalidParameter 
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonInvalidParameterException.#ctor">
            <summary>
            Initializes a new instance of the JsonInvalidParameterException class.
            </summary>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.Json.JsonNumberTooLongException">
            <summary>
            JsonParseException for NumberTooLong 
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonNumberTooLongException.#ctor">
            <summary>
            Initializes a new instance of the JsonNumberTooLongException class.
            </summary>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.Json.JsonMissingNameSeparatorException">
            <summary>
            JsonParseException for MissingNameSeparator 
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonMissingNameSeparatorException.#ctor">
            <summary>
            Initializes a new instance of the JsonMissingNameSeparatorException class.
            </summary>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.Json.JsonUnexpectedTokenException">
            <summary>
            JsonParseException for UnexpectedToken 
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonUnexpectedTokenException.#ctor">
            <summary>
            Initializes a new instance of the JsonUnexpectedTokenException class.
            </summary>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.Json.JsonUnexpectedEndArrayException">
            <summary>
            JsonParseException for UnexpectedEndArray 
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonUnexpectedEndArrayException.#ctor">
            <summary>
            Initializes a new instance of the JsonUnexpectedEndArrayException class.
            </summary>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.Json.JsonUnexpectedEndObjectException">
            <summary>
            JsonParseException for UnexpectedEndObject 
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonUnexpectedEndObjectException.#ctor">
            <summary>
            Initializes a new instance of the JsonUnexpectedEndObjectException class.
            </summary>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.Json.JsonInvalidTokenException">
            <summary>
            JsonParseException for InvalidToken 
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonInvalidTokenException.#ctor">
            <summary>
            Initializes a new instance of the JsonInvalidTokenException class.
            </summary>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.Json.JsonUnexpectedNameSeparatorException">
            <summary>
            JsonParseException for UnexpectedNameSeparator 
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonUnexpectedNameSeparatorException.#ctor">
            <summary>
            Initializes a new instance of the JsonUnexpectedNameSeparatorException class.
            </summary>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.Json.JsonUnexpectedValueSeparatorException">
            <summary>
            JsonParseException for UnexpectedValueSeparator 
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonUnexpectedValueSeparatorException.#ctor">
            <summary>
            Initializes a new instance of the JsonUnexpectedValueSeparatorException class.
            </summary>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.Json.JsonMissingEndObjectException">
            <summary>
            JsonParseException for MissingEndObject 
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonMissingEndObjectException.#ctor">
            <summary>
            Initializes a new instance of the JsonMissingEndObjectException class.
            </summary>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.Json.JsonMissingEndArrayException">
            <summary>
            JsonParseException for MissingEndArray 
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonMissingEndArrayException.#ctor">
            <summary>
            Initializes a new instance of the JsonMissingEndArrayException class.
            </summary>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.Json.JsonNotStringTokenException">
            <summary>
            JsonParseException for NotStringToken 
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonNotStringTokenException.#ctor">
            <summary>
            Initializes a new instance of the JsonNotStringTokenException class.
            </summary>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.Json.JsonMaxNestingExceededException">
            <summary>
            JsonParseException for MaxNestingExceeded 
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonMaxNestingExceededException.#ctor">
            <summary>
            Initializes a new instance of the JsonMaxNestingExceededException class.
            </summary>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.Json.JsonInvalidEscapedCharacterException">
            <summary>
            JsonParseException for InvalidEscapedCharacter 
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonInvalidEscapedCharacterException.#ctor">
            <summary>
            Initializes a new instance of the JsonInvalidEscapedCharacterException class.
            </summary>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.Json.JsonInvalidUnicodeEscapeException">
            <summary>
            JsonParseException for InvalidUnicodeEscape 
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonInvalidUnicodeEscapeException.#ctor">
            <summary>
            Initializes a new instance of the JsonInvalidUnicodeEscapeException class.
            </summary>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.Json.JsonInvalidStringCharacterException">
            <summary>
            JsonParseException for InvalidStringCharacter 
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonInvalidStringCharacterException.#ctor">
            <summary>
            Initializes a new instance of the JsonInvalidStringCharacterException class.
            </summary>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.Json.JsonInvalidNumberException">
            <summary>
            JsonParseException for InvalidNumber 
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonInvalidNumberException.#ctor">
            <summary>
            Initializes a new instance of the JsonInvalidNumberException class.
            </summary>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.Json.JsonNotNumberTokenException">
            <summary>
            JsonParseException for NotNumberToken 
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonNotNumberTokenException.#ctor">
            <summary>
            Initializes a new instance of the JsonNotNumberTokenException class.
            </summary>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.Json.JsonNumberOutOfRangeException">
            <summary>
            JsonParseException for NumberOutOfRange 
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonNumberOutOfRangeException.#ctor">
            <summary>
            Initializes a new instance of the JsonNumberOutOfRangeException class.
            </summary>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.Json.JsonMissingPropertyException">
            <summary>
            JsonParseException for MissingProperty 
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonMissingPropertyException.#ctor">
            <summary>
            Initializes a new instance of the JsonMissingPropertyException class.
            </summary>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.Json.JsonPropertyAlreadyAddedException">
            <summary>
            JsonParseException for PropertyAlreadyAdded 
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonPropertyAlreadyAddedException.#ctor">
            <summary>
            Initializes a new instance of the JsonPropertyAlreadyAddedException class.
            </summary>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.Json.JsonObjectNotStartedException">
            <summary>
            JsonParseException for ObjectNotStarted 
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonObjectNotStartedException.#ctor">
            <summary>
            Initializes a new instance of the JsonObjectNotStartedException class.
            </summary>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.Json.JsonArrayNotStartedException">
            <summary>
            JsonParseException for ArrayNotStarted 
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonArrayNotStartedException.#ctor">
            <summary>
            Initializes a new instance of the JsonArrayNotStartedException class.
            </summary>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.Json.JsonPropertyArrayOrObjectNotStartedException">
            <summary>
            JsonParseException for PropertyArrayOrObjectNotStarted 
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonPropertyArrayOrObjectNotStartedException.#ctor">
            <summary>
            Initializes a new instance of the JsonPropertyArrayOrObjectNotStartedException class.
            </summary>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.Json.JsonNotCompleteException">
            <summary>
            JsonParseException for NotComplete 
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonNotCompleteException.#ctor">
            <summary>
            Initializes a new instance of the JsonNotCompleteException class.
            </summary>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.Json.JsonReader">
            <summary>
            Base abstract class for JSON readers.
            The reader defines methods that allow for reading a JSON encoded value as a stream of tokens.
            The tokens are traversed in the same order as they appear in the JSON document.
            </summary>
            <summary>
            Partial JsonReader with a private JsonBinaryReader implementation
            </summary>
            <summary>
            JsonReader partial.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Json.JsonReader.JsonObjectState">
            <summary>
            The <see cref="F:Microsoft.Azure.Cosmos.Json.JsonReader.JsonObjectState"/>
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Json.JsonReader.SkipValidation">
            <summary>
            Whether to skip validation.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonReader.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the JsonReader class.
            </summary>
            <param name="skipValidation">Whether or not to skip validation.</param>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.Json.JsonReader.SerializationFormat">
            <summary>
            Gets the <see cref="T:Microsoft.Azure.Cosmos.Json.JsonSerializationFormat"/> for the JsonReader
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.Json.JsonReader.CurrentDepth">
            <summary>
            Gets the current level of nesting of the JSON that the JsonReader is reading.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.Json.JsonReader.CurrentTokenType">
            <summary>
            Gets the <see cref="T:Microsoft.Azure.Cosmos.Json.JsonTokenType"/> of the current token that the JsonReader is about to read.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonReader.Create(System.IO.Stream,Microsoft.Azure.Cosmos.Json.JsonStringDictionary,System.Boolean)">
            <summary>
            Creates a JsonReader that can read a supplied stream (assumes UTF-8 encoding).
            </summary>
            <param name="stream">the stream to read.</param>
            <param name="jsonStringDictionary">The dictionary to use for binary user string encoding.</param>
            <param name="skipvalidation">whether or not to skip validation.</param>
            <returns>a concrete JsonReader that can read the supplied stream.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonReader.CreateTextReaderWithEncoding(System.IO.Stream,System.Text.Encoding,System.Boolean)">
            <summary>
            Creates a JsonTextReader that can read a supplied stream with the specified encoding.
            </summary>
            <param name="stream">The stream to read.</param>
            <param name="encoding">The encoding of the text (UTF-8, UTF-16 / Unicode, or UTF-32).</param>
            <param name="skipValidation">Whether or not to skip validation.</param>
            <returns>A concrete JsonReader that can read the supplied stream.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonReader.Create(System.Byte[],Microsoft.Azure.Cosmos.Json.JsonStringDictionary,System.Boolean)">
            <summary>
            Creates a JsonReader that can read from the supplied byte array (assumes utf-8 encoding).
            </summary>
            <param name="buffer">The byte array to read from.</param>
            <param name="jsonStringDictionary">The dictionary to use for user string encoding.</param>
            <param name="skipValidation">Whether or not to skip validation.</param>
            <returns>A concrete JsonReader that can read the supplied byte array.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonReader.Read">
            <summary>
            Advances the JsonReader by one token.
            </summary>
            <returns><code>true</code> if the JsonReader successfully advanced to the next token; <code>false</code> if the JsonReader has passed the end of the JSON.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonReader.GetNumberValue">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonReader.GetStringValue">
            <summary>
            Gets the next JSON token from the JsonReader as a string.
            </summary>
            <returns>The next JSON token from the JsonReader as a string.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonReader.GetBufferedRawJsonToken">
            <summary>
            Gets next JSON token from the JsonReader as a raw series of bytes that is buffered.
            </summary>
            <returns>The next JSON token from the JsonReader as a raw series of bytes that is buffered.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonReader.GetInt8Value">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonReader.GetInt16Value">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonReader.GetInt32Value">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonReader.GetInt64Value">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonReader.GetUInt32Value">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonReader.GetFloat32Value">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonReader.GetFloat64Value">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonReader.GetGuidValue">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonReader.GetBinaryValue">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.Azure.Cosmos.Json.JsonReader.JsonBinaryReader">
            <summary>
            JsonReader that can read from a json serialized in binary <see cref="T:Microsoft.Azure.Cosmos.Json.JsonBinaryEncoding"/>.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Json.JsonReader.JsonBinaryReader.jsonBinaryBuffer">
            <summary>
            JsonBinaryReader can read from either a stream or a byte array and that is abstracted as a JsonBinaryBuffer.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Json.JsonReader.JsonBinaryReader.jsonStringDictionary">
            <summary>
            Dictionary used for user string encoding.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Json.JsonReader.JsonBinaryReader.progressStack">
            <summary>
            For binary there is no end of token marker in the actual binary, but the JsonReader interface still needs to surface ObjectEndToken and ArrayEndToken.
            To accommodate for this we have a progress stack to let us know how many bytes there are left to read for all levels of nesting. 
            With this information we know that we are at the end of a context and can now surface an end object / array token.
            </summary>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.Json.JsonReader.JsonBinaryReader.ProcessJsonTokenCallback">
            <summary>
            Callback for processing json tokens.
            </summary>
            <param name="newContextLength">The length of the new context if there is one.</param>
            <returns>Whether or not there is a new context.</returns>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.Json.JsonReader.JsonBinaryReader.SerializationFormat">
            <summary>
            Gets the <see cref="T:Microsoft.Azure.Cosmos.Json.JsonSerializationFormat"/> for the JsonReader
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonReader.JsonBinaryReader.Read">
            <summary>
            Advances the JsonReader by one token.
            </summary>
            <returns><code>true</code> if the JsonReader successfully advanced to the next token; <code>false</code> if the JsonReader has passed the end of the JSON.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonReader.JsonBinaryReader.GetNumberValue">
            <summary>
            Gets the next JSON token from the JsonReader as a double.
            </summary>
            <returns>The next JSON token from the JsonReader as a double.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonReader.JsonBinaryReader.GetStringValue">
            <summary>
            Gets the next JSON token from the JsonReader as a string.
            </summary>
            <returns>The next JSON token from the JsonReader as a string.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonReader.JsonBinaryReader.GetBufferedRawJsonToken">
            <summary>
            Gets next JSON token from the JsonReader as a raw series of bytes that is buffered.
            </summary>
            <returns>The next JSON token from the JsonReader as a raw series of bytes that is buffered.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonReader.JsonBinaryReader.ProcessJsonToken(Microsoft.Azure.Cosmos.Json.JsonTokenType,Microsoft.Azure.Cosmos.Json.JsonReader.JsonBinaryReader.ProcessJsonTokenCallback)">
            <summary>
            Given a jsonTokenType and supplied callback this function will update jsonBuffer, jsonObject, and progressStack.
            The buffer will know the current token type, where that token starts and ends.
            The object state will also know the current token type.
            Finally the progress stack will add a new context if there is one and make progress on all parent context.
            </summary>
            <param name="jsonTokenType">The type of token being processed.</param>
            <param name="processJsonTokenCallback">The callback used to actually process the token.</param>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.Json.JsonReader.JsonBinaryReader.JsonBinaryBufferBase">
            <summary>
            Base implementation of JsonBinaryBuffer that other classes will derive from.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Json.JsonReader.JsonBinaryReader.JsonBinaryBufferBase.BinaryReader">
            <summary>
            The reader we will use to read from the stream.
            Note that this reader is able to read from a little endian stream even if the client is on a big endian machine.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonReader.JsonBinaryReader.JsonBinaryBufferBase.#ctor(System.IO.Stream,Microsoft.Azure.Cosmos.Json.JsonStringDictionary)">
            <summary>
            Initializes a new instance of the JsonBinaryBufferBase class from an array of bytes.
            </summary>
            <param name="stream">A stream to read from.</param>
            <param name="jsonStringDictionary">The JSON string dictionary to use for user string encoding.</param>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.Json.JsonReader.JsonBinaryReader.JsonBinaryBufferBase.IsEof">
            <summary>
            Gets a value indicating whether the buffer is at the End of File for it's source.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.Json.JsonReader.JsonBinaryReader.JsonBinaryBufferBase.CurrentJsonTokenType">
            <summary>
            Gets or sets a value indicating the current <see cref="T:Microsoft.Azure.Cosmos.Json.JsonTokenType"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonReader.JsonBinaryReader.JsonBinaryBufferBase.StartToken">
            <summary>
            Lets the IJsonBinaryBuffer know that it is at the start of a token.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonReader.JsonBinaryReader.JsonBinaryBufferBase.EndToken">
            <summary>
            Lets the IJsonBinaryBuffer know that an end of a token has just been read from it.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonReader.JsonBinaryReader.JsonBinaryBufferBase.Peek">
            <summary>
            Returns the next available byte and does not advance the byte position
            </summary>
            <returns>The next available byte, or -1 if no more bytes are available or the buffer does not support seeking.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonReader.JsonBinaryReader.JsonBinaryBufferBase.ReadBoolean">
            <summary>
            Reads a Boolean value from the current stream and advances the current position of the stream by one byte.
            </summary>
            <returns>true if the byte is nonzero; otherwise, false.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonReader.JsonBinaryReader.JsonBinaryBufferBase.ReadByte">
            <summary>
            Reads the next byte from the current stream and advances the current position of the stream by one byte.
            </summary>
            <returns>The next byte read from the current stream.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonReader.JsonBinaryReader.JsonBinaryBufferBase.ReadBytes(System.Int32)">
            <summary>
            Reads the specified number of bytes from the current stream into a byte array and advances the current position by that number of bytes.
            </summary>
            <param name="count">The number of bytes to read.</param>
            <returns>A byte array containing data read from the underlying stream. This might be less than the number of bytes requested if the end of the stream is reached.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonReader.JsonBinaryReader.JsonBinaryBufferBase.ReadDouble">
            <summary>
            Reads an 8-byte floating point value from the current stream and advances the current position of the stream by eight bytes.
            </summary>
            <returns>An 8-byte floating point value read from the current stream.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonReader.JsonBinaryReader.JsonBinaryBufferBase.ReadInt16">
            <summary>
            Reads a 2-byte signed integer from the current stream and advances the current position of the stream by two bytes.
            </summary>
            <returns>A 2-byte signed integer read from the current stream.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonReader.JsonBinaryReader.JsonBinaryBufferBase.ReadInt32">
            <summary>
            Reads a 4-byte signed integer from the current stream and advances the current position of the stream by four bytes.
            </summary>
            <returns>A 4-byte signed integer read from the current stream.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonReader.JsonBinaryReader.JsonBinaryBufferBase.ReadInt64">
            <summary>
            Reads an 8-byte signed integer from the current stream and advances the current position of the stream by eight bytes.
            </summary>
            <returns>An 8-byte signed integer read from the current stream.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonReader.JsonBinaryReader.JsonBinaryBufferBase.ReadSByte">
            <summary>
            Reads a signed byte from this stream and advances the current position of the stream by one byte.
            </summary>
            <returns> A signed byte read from the current stream.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonReader.JsonBinaryReader.JsonBinaryBufferBase.ReadSingle">
            <summary>
            Reads a 4-byte floating point value from the current stream and advances the current position of the stream by four bytes.
            </summary>
            <returns>A 4-byte floating point value read from the current stream.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonReader.JsonBinaryReader.JsonBinaryBufferBase.ReadUInt16">
            <summary>
            Reads a 2-byte unsigned integer from the current stream using little-endian encoding and advances the position of the stream by two bytes.
            </summary>
            <returns>A 2-byte unsigned integer read from this stream.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonReader.JsonBinaryReader.JsonBinaryBufferBase.ReadUInt32">
            <summary>
            Reads a 4-byte unsigned integer from the current stream and advances the position of the stream by four bytes.
            </summary>
            <returns>A 4-byte unsigned integer read from this stream.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonReader.JsonBinaryReader.JsonBinaryBufferBase.ReadUInt64">
            <summary>
            Reads an 8-byte unsigned integer from the current stream and advances the position of the stream by eight bytes.
            </summary>
            <returns>An 8-byte unsigned integer read from this stream.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonReader.JsonBinaryReader.JsonBinaryBufferBase.GetBufferedRawJsonToken">
            <summary>
            Gets the buffered raw json token.
            </summary>
            <returns>The buffered raw json token.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonReader.JsonBinaryReader.JsonBinaryBufferBase.GetNumberValue">
            <summary>
            Gets the next JSON token from the IJsonBinaryBuffer as a double.
            </summary>
            <returns>The next JSON token from the BinaryBuffer as a double.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonReader.JsonBinaryReader.JsonBinaryBufferBase.GetStringValue">
            <summary>
            Gets the next JSON token from the IJsonBinaryBuffer as a string.
            </summary>
            <returns>The next JSON token from the JsonReader as a string.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonReader.JsonBinaryReader.JsonBinaryBufferBase.GetBinaryReaderAtToken(System.ArraySegment{System.Byte})">
            <summary>
            Gets a binary reader whose position is at the beginning of the provided jsonToken.
            </summary>
            <param name="jsonToken">The json token input.</param>
            <returns>A binary reader whose position is at the beginning of the provided jsonToken.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonReader.JsonBinaryReader.JsonBinaryBufferBase.GetNumberValue(System.ArraySegment{System.Byte})">
            <summary>
            Gets the number value from a json token as a double.
            </summary>
            <param name="jsonToken">The json token to get the number value of.</param>
            <returns>the number value from a json token as a double.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonReader.JsonBinaryReader.JsonBinaryBufferBase.GetStringValue(System.ArraySegment{System.Byte})">
            <summary>
            Gets the string value from a json token as a string.
            </summary>
            <param name="jsonToken">The json token to get the string value of.</param>
            <returns>the string value from a json token as a string.</returns>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.Json.JsonReader.JsonBinaryReader.JsonBinaryArrayBuffer">
            <summary>
            JsonBinaryBuffer where the source is an array of bytes.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonReader.JsonBinaryReader.JsonBinaryArrayBuffer.#ctor(System.Byte[],Microsoft.Azure.Cosmos.Json.JsonStringDictionary)">
            <summary>
            Initializes a new instance of the JsonBinaryArrayBuffer class.
            </summary>
            <param name="buffer">The source buffer to read from.</param>
            <param name="jsonStringDictionary">The string dictionary to use for dictionary encoding.</param>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.Json.JsonReader.JsonBinaryReader.JsonBinaryArrayBuffer.BytesRead">
            <summary>
            Gets a value indicating how many bytes have been read from the binary buffer.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonReader.JsonBinaryReader.JsonBinaryArrayBuffer.StartToken">
            <summary>
            Lets the IJsonBinaryBuffer know that it is at the start of a token.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonReader.JsonBinaryReader.JsonBinaryArrayBuffer.EndToken">
            <summary>
            Lets the IJsonBinaryBuffer know that an end of a token has just been read from it.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonReader.JsonBinaryReader.JsonBinaryArrayBuffer.GetBufferedRawJsonToken">
            <summary>
            Gets the buffered raw json token.
            </summary>
            <returns>The buffered raw json token.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonReader.JsonBinaryReader.JsonBinaryArrayBuffer.GetBinaryReaderAtToken(System.ArraySegment{System.Byte})">
            <summary>
            Gets a binary reader whose position is at the beginning of the provided jsonToken.
            </summary>
            <param name="jsonToken">The json token input.</param>
            <returns>A binary reader whose position is at the beginning of the provided jsonToken.</returns>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.Json.JsonReader.JsonBinaryReader.JsonBinaryStreamBuffer">
            <summary>
            JsonBinaryBuffer whose source is a stream.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Json.JsonReader.JsonBinaryReader.JsonBinaryStreamBuffer.bufferedToken">
            <summary>
            We need to buffer one token from the stream incase a user wants to materialize it and the stream is not seekable (like a network stream).
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonReader.JsonBinaryReader.JsonBinaryStreamBuffer.#ctor(System.IO.Stream,Microsoft.Azure.Cosmos.Json.JsonStringDictionary)">
            <summary>
            Initializes a new instance of the JsonBinaryStreamBuffer class.
            </summary>
            <param name="stream">The stream to buffer from.</param>
            <param name="jsonStringDictionary">The dictionary to use for user string encoding.</param>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonReader.JsonBinaryReader.JsonBinaryStreamBuffer.ReadBoolean">
            <summary>
            Reads a Boolean value from the current stream and advances the current position of the stream by one byte.
            </summary>
            <returns>true if the byte is nonzero; otherwise, false.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonReader.JsonBinaryReader.JsonBinaryStreamBuffer.ReadByte">
            <summary>
            Reads the next byte from the current stream and advances the current position of the stream by one byte.
            </summary>
            <returns>The next byte read from the current stream.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonReader.JsonBinaryReader.JsonBinaryStreamBuffer.ReadBytes(System.Int32)">
            <summary>
            Reads the specified number of bytes from the current stream into a byte array and advances the current position by that number of bytes.
            </summary>
            <param name="count">The number of bytes to read.</param>
            <returns>A byte array containing data read from the underlying stream. This might be less than the number of bytes requested if the end of the stream is reached.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonReader.JsonBinaryReader.JsonBinaryStreamBuffer.ReadDouble">
            <summary>
            Reads an 8-byte floating point value from the current stream and advances the current position of the stream by eight bytes.
            </summary>
            <returns>An 8-byte floating point value read from the current stream.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonReader.JsonBinaryReader.JsonBinaryStreamBuffer.ReadInt16">
            <summary>
            Reads a 2-byte signed integer from the current stream and advances the current position of the stream by two bytes.
            </summary>
            <returns>A 2-byte signed integer read from the current stream.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonReader.JsonBinaryReader.JsonBinaryStreamBuffer.ReadInt32">
            <summary>
            Reads a 4-byte signed integer from the current stream and advances the current position of the stream by four bytes.
            </summary>
            <returns>A 4-byte signed integer read from the current stream.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonReader.JsonBinaryReader.JsonBinaryStreamBuffer.ReadInt64">
            <summary>
            Reads an 8-byte signed integer from the current stream and advances the current position of the stream by eight bytes.
            </summary>
            <returns>An 8-byte signed integer read from the current stream.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonReader.JsonBinaryReader.JsonBinaryStreamBuffer.ReadSByte">
            <summary>
            Reads a signed byte from this stream and advances the current position of the stream by one byte.
            </summary>
            <returns> A signed byte read from the current stream.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonReader.JsonBinaryReader.JsonBinaryStreamBuffer.ReadSingle">
            <summary>
            Reads a 4-byte floating point value from the current stream and advances the current position of the stream by four bytes.
            </summary>
            <returns>A 4-byte floating point value read from the current stream.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonReader.JsonBinaryReader.JsonBinaryStreamBuffer.ReadUInt16">
            <summary>
            Reads a 2-byte unsigned integer from the current stream using little-endian encoding and advances the position of the stream by two bytes.
            </summary>
            <returns>A 2-byte unsigned integer read from this stream.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonReader.JsonBinaryReader.JsonBinaryStreamBuffer.ReadUInt32">
            <summary>
            Reads a 4-byte unsigned integer from the current stream and advances the position of the stream by four bytes.
            </summary>
            <returns>A 4-byte unsigned integer read from this stream.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonReader.JsonBinaryReader.JsonBinaryStreamBuffer.ReadUInt64">
            <summary>
            Reads an 8-byte unsigned integer from the current stream and advances the position of the stream by eight bytes.
            </summary>
            <returns>An 8-byte unsigned integer read from this stream.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonReader.JsonBinaryReader.JsonBinaryStreamBuffer.StartToken">
            <summary>
            Lets the IJsonBinaryBuffer know that it is at the start of a token.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonReader.JsonBinaryReader.JsonBinaryStreamBuffer.EndToken">
            <summary>
            Lets the IJsonBinaryBuffer know that an end of a token has just been read from it.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonReader.JsonBinaryReader.JsonBinaryStreamBuffer.GetBufferedRawJsonToken">
            <summary>
            Gets the buffered raw json token.
            </summary>
            <returns>The buffered raw json token.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonReader.JsonBinaryReader.JsonBinaryStreamBuffer.GetBinaryReaderAtToken(System.ArraySegment{System.Byte})">
            <summary>
            Gets a binary reader whose position is at the beginning of the provided jsonToken.
            </summary>
            <param name="jsonToken">The json token input.</param>
            <returns>A binary reader whose position is at the beginning of the provided jsonToken.</returns>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.Json.JsonReader.JsonTextReader">
            <summary>
            JsonReader that knows how to read text
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Json.JsonReader.JsonTextReader.EscapeCharacters">
            <summary>
            Set of all escape characters in JSON.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Json.JsonReader.JsonTextReader.Null">
            <summary>
            Array for null literal character array.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Json.JsonReader.JsonTextReader.True">
            <summary>
            Array for true literal character array.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Json.JsonReader.JsonTextReader.False">
            <summary>
            Array for false literal character array.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonReader.JsonTextReader.#ctor(System.Byte[],System.Boolean)">
            <summary>
            Initializes a new instance of the JsonTextReader class.
            </summary>
            <param name="buffer">The byte array to read from (assumes UTF8 encoding)</param>
            <param name="skipValidation">Whether or not to skip validation</param>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonReader.JsonTextReader.#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean)">
            <summary>
            Initializes a new instance of the JsonTextReader class.
            </summary>
            <param name="stream">The stream to read from</param>
            <param name="encoding">The encoding of the stream</param>
            <param name="skipValidation">Whether to skip validation.</param>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonReader.JsonTextReader.#ctor(Microsoft.Azure.Cosmos.Json.JsonReader.JsonTextReader.IJsonTextBuffer,System.Boolean)">
            <summary>
            Initializes a new instance of the JsonTextReader class.
            </summary>
            <param name="jsonTextBuffer">The IJsonTextBuffer to read from.</param>
            <param name="skipValidation">Whether or not to skip validation.</param>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.Json.JsonReader.JsonTextReader.JsonTextTokenType">
            <summary>
            Enum of JsonTextTokenType with extends the enum in JsonTokenType.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Json.JsonReader.JsonTextReader.JsonTextTokenType.EscapedFlag">
            <summary>
            Flag for escaped characters.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Json.JsonReader.JsonTextReader.JsonTextTokenType.FloatFlag">
            <summary>
            Flag for whether a number is a float
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Json.JsonReader.JsonTextReader.JsonTextTokenType.NotStarted">
            <summary>
            Reserved for no other value
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Json.JsonReader.JsonTextReader.JsonTextTokenType.BeginArray">
            <summary>
            Corresponds to the beginning of a JSON array ('[')
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Json.JsonReader.JsonTextReader.JsonTextTokenType.EndArray">
            <summary>
            Corresponds to the end of a JSON array (']')
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Json.JsonReader.JsonTextReader.JsonTextTokenType.BeginObject">
            <summary>
            Corresponds to the beginning of a JSON object ('{')
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Json.JsonReader.JsonTextReader.JsonTextTokenType.EndObject">
            <summary>
            Corresponds to the end of a JSON object ('}')
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Json.JsonReader.JsonTextReader.JsonTextTokenType.UnescapedString">
            <summary>
            Corresponds to a JSON string.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Json.JsonReader.JsonTextReader.JsonTextTokenType.EscapedString">
            <summary>
            Corresponds to an escaped JSON string.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Json.JsonReader.JsonTextReader.JsonTextTokenType.Number">
            <summary>
            Corresponds to a JSON number.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Json.JsonReader.JsonTextReader.JsonTextTokenType.True">
            <summary>
            Corresponds to the JSON 'true' value.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Json.JsonReader.JsonTextReader.JsonTextTokenType.False">
            <summary>
            Corresponds to the JSON 'false' value.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Json.JsonReader.JsonTextReader.JsonTextTokenType.Null">
            <summary>
            Corresponds to the JSON 'null' value.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Json.JsonReader.JsonTextReader.JsonTextTokenType.UnescapedFieldName">
            <summary>
            Corresponds to the JSON fieldname in a JSON object.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Json.JsonReader.JsonTextReader.JsonTextTokenType.EscapedFieldName">
            <summary>
            Corresponds to the an escaped JSON fieldname in a JSON object.
            </summary>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.Json.JsonReader.JsonTextReader.IJsonTextBuffer">
            <summary>
            Interface for JsonTextBuffers, which are responsible for buffering text tokens for <see cref="T:Microsoft.Azure.Cosmos.Json.JsonReader.JsonTextReader"/>s.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.Json.JsonReader.JsonTextReader.IJsonTextBuffer.IsEof">
            <summary>
            Gets a value indicating whether the buffer is at the End of File for it's source.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.Json.JsonReader.JsonTextReader.IJsonTextBuffer.Encoding">
            <summary>
            Gets a value indicating the encoding for the buffer, which is needed when you want to materialize a string from the buffered raw json token.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonReader.JsonTextReader.IJsonTextBuffer.GetNumberValue">
            <summary>
            Gets the number of value of the token that was just read from the buffer.
            </summary>
            <returns>The number of value of the token that was just read from the buffer.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonReader.JsonTextReader.IJsonTextBuffer.GetInt8Value">
            <summary>
            Gets the Int8 value of the token that was just read from the buffer.
            </summary>
            <returns>The Int8 value of the token that was just read from the buffer.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonReader.JsonTextReader.IJsonTextBuffer.GetInt16Value">
            <summary>
            Gets the Int16 value of the token that was just read from the buffer.
            </summary>
            <returns>The Int16 value of the token that was just read from the buffer.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonReader.JsonTextReader.IJsonTextBuffer.GetInt32Value">
            <summary>
            Gets the Int32 value of the token that was just read from the buffer.
            </summary>
            <returns>The Int32 value of the token that was just read from the buffer.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonReader.JsonTextReader.IJsonTextBuffer.GetInt64Value">
            <summary>
            Gets the Int64 value of the token that was just read from the buffer.
            </summary>
            <returns>The Int64 value of the token that was just read from the buffer.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonReader.JsonTextReader.IJsonTextBuffer.GetUInt32Value">
            <summary>
            Gets the UInt32 value of the token that was just read from the buffer.
            </summary>
            <returns>The UInt32 value of the token that was just read from the buffer.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonReader.JsonTextReader.IJsonTextBuffer.GetFloat32Value">
            <summary>
            Gets the float value of the token that was just read from the buffer.
            </summary>
            <returns>The float value of the token that was just read from the buffer.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonReader.JsonTextReader.IJsonTextBuffer.GetFloat64Value">
            <summary>
            Gets the float value of the token that was just read from the buffer.
            </summary>
            <returns>The float value of the token that was just read from the buffer.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonReader.JsonTextReader.IJsonTextBuffer.GetStringValue">
            <summary>
            Gets the string value of the token that was just read from the buffer.
            </summary>
            <returns>The string value of the token that was just read from the buffer.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonReader.JsonTextReader.IJsonTextBuffer.BeginToken">
            <summary>
            Lets the buffer know that a token is about to be read.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonReader.JsonTextReader.IJsonTextBuffer.EndToken">
            <summary>
            Lets the buffer know that a token just finished reading.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonReader.JsonTextReader.IJsonTextBuffer.ReadCharacter">
            <summary>
            Reads a character from the buffer.
            </summary>
            <returns>The character that was just read.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonReader.JsonTextReader.IJsonTextBuffer.PeekCharacter">
            <summary>
            Peeks at the next character from the buffer.
            </summary>
            <returns>The character that was just peeked at.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonReader.JsonTextReader.IJsonTextBuffer.GetBufferedRawJsonToken">
            <summary>
            Gets the buffered raw json token from the buffer.
            </summary>
            <returns>The buffered raw json token from the buffer.</returns>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.Json.JsonReader.JsonTextReader.SerializationFormat">
            <summary>
            Gets the SerializationFormat for the JsonReader
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonReader.JsonTextReader.Read">
            <summary>
            Advances the JsonReader by one token.
            </summary>
            <returns>Whether the reader successfully read a token.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonReader.JsonTextReader.GetNumberValue">
            <summary>
            Gets the next JSON token from the JsonReader as a double.
            </summary>
            <returns>The next JSON token from the JsonReader as a double.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonReader.JsonTextReader.GetStringValue">
            <summary>
            Gets the next JSON token from the JsonReader as a string.
            </summary>
            <returns>The next JSON token from the JsonReader as a string.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonReader.JsonTextReader.GetBufferedRawJsonToken">
            <summary>
            Gets the next JSON token from the JsonReader as a buffered list of bytes
            </summary>
            <returns>the next JSON token from the JsonReader as a buffered list of bytes</returns>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.Json.JsonReader.JsonTextReader.JsonTextArrayBuffer">
            <summary>
            The <see cref="T:Microsoft.Azure.Cosmos.Json.JsonReader.JsonTextReader.IJsonTextBuffer"/> for when the source is a byte of array (UTF8 encoding) that knows how to store the last token read from the source.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonReader.JsonTextReader.JsonTextArrayBuffer.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of the JsonTextArrayBuffer class.
            </summary>
            <param name="buffer">The source for the JsonTextArrayBuffer.</param>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.Json.JsonReader.JsonTextReader.JsonTextArrayBuffer.IsEof">
            <summary>
            Gets a value indicating whether the buffer is at the End of File for it's source.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.Json.JsonReader.JsonTextReader.JsonTextArrayBuffer.Encoding">
            <summary>
            Gets a value indicating the encoding for the buffer, which is needed when you want to materialize a string from the buffered raw json token.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonReader.JsonTextReader.JsonTextArrayBuffer.GetNumberValue">
            <summary>
            Gets the number value of the token that was just read from the buffer.
            </summary>
            <returns>The number value of the token that was just read from the buffer.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonReader.JsonTextReader.JsonTextArrayBuffer.GetStringValue">
            <summary>
            Gets the string value of the token that was just read from the buffer.
            </summary>
            <returns>The string value of the token that was just read from the buffer.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonReader.JsonTextReader.JsonTextArrayBuffer.BeginToken">
            <summary>
            Lets the buffer know that a token is about to be read.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonReader.JsonTextReader.JsonTextArrayBuffer.EndToken">
            <summary>
            Lets the buffer know that a token just finished reading.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonReader.JsonTextReader.JsonTextArrayBuffer.ReadCharacter">
            <summary>
            Reads a character from the buffer.
            </summary>
            <returns>The character that was just read.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonReader.JsonTextReader.JsonTextArrayBuffer.PeekCharacter">
            <summary>
            Peeks at the next character from the buffer.
            </summary>
            <returns>The character that was just peeked at.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonReader.JsonTextReader.JsonTextArrayBuffer.GetBufferedRawJsonToken">
            <summary>
            Gets the buffered raw json token from the buffer.
            </summary>
            <returns>The buffered raw json token from the buffer.</returns>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.Json.JsonReader.JsonTextReader.JsonTextStreamBuffer">
            <summary>
            The <see cref="T:Microsoft.Azure.Cosmos.Json.JsonReader.JsonTextReader.IJsonTextBuffer"/> for when the source is a stream of a specific encoding that knows how to store the last token read from the source.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Json.JsonReader.JsonTextReader.JsonTextStreamBuffer.bufferedToken">
            <summary>
            We need to buffer one token from the stream incase a user wants to materialize it and the stream is not seekable (like a network stream).
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonReader.JsonTextReader.JsonTextStreamBuffer.#ctor(System.IO.Stream,System.Text.Encoding)">
            <summary>
            Initializes a new instance of the JsonTextStreamBuffer class.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="encoding">The encoding of the stream.</param>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.Json.JsonReader.JsonTextReader.JsonTextStreamBuffer.IsEof">
            <summary>
            Gets a value indicating whether the buffer is at the End of File for it's source.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.Json.JsonReader.JsonTextReader.JsonTextStreamBuffer.Encoding">
            <summary>
            Gets a value indicating the encoding for the buffer, which is needed when you want to materialize a string from the buffered raw json token.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonReader.JsonTextReader.JsonTextStreamBuffer.GetNumberValue">
            <summary>
            Gets the number of value of the token that was just read from the buffer.
            </summary>
            <returns>The number of value of the token that was just read from the buffer.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonReader.JsonTextReader.JsonTextStreamBuffer.GetStringValue">
            <summary>
            Gets the string value of the token that was just read from the buffer.
            </summary>
            <returns>The string value of the token that was just read from the buffer.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonReader.JsonTextReader.JsonTextStreamBuffer.BeginToken">
            <summary>
            Lets the buffer know that a token is about to be read.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonReader.JsonTextReader.JsonTextStreamBuffer.EndToken">
            <summary>
            Lets the buffer know that a token just finished reading.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonReader.JsonTextReader.JsonTextStreamBuffer.ReadCharacter">
            <summary>
            Reads a character from the buffer.
            </summary>
            <returns>The character that was just read.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonReader.JsonTextReader.JsonTextStreamBuffer.PeekCharacter">
            <summary>
            Peeks at the next character from the buffer.
            </summary>
            <returns>The character that was just peeked at.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonReader.JsonTextReader.JsonTextStreamBuffer.GetBufferedRawJsonToken">
            <summary>
            Gets the buffered raw json token from the buffer.
            </summary>
            <returns>The buffered raw json token from the buffer.</returns>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.Json.JsonSerializationFormat">
            <summary>
            Defines JSON different serialization Formats
            </summary>
            <remarks>
            Every enumeration type has an underlying type, which can be any integral type except char.
            The default underlying type of enumeration elements is integer.
            To declare an enum of another integral type, such as byte, use a colon after the identifier followed by the type, as shown in the following example.
            </remarks>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Json.JsonSerializationFormat.Text">
            <summary>
            Plain text
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Json.JsonSerializationFormat.Binary">
            <summary>
            Binary Encoding
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Json.JsonSerializationFormat.HybridRow">
            <summary>
            HybridRow Binary Encoding
            </summary>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.Json.JsonTextUtil">
            <summary>
            Common utility class for JsonTextReader and JsonTextNavigator.
            Please treat this class as private.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonTextUtil.GetDoubleValue(System.ArraySegment{System.Byte})">
            <summary>
            Gets the number value from the specified token.
            </summary>
            <param name="bufferedToken">The jsonToken returned from that holds the raw number that you want the value of.</param>
            <returns>The number value from the specified token.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonTextUtil.GetStringValue(System.ArraySegment{System.Byte})">
            <summary>
            Gets the string value from the specified token.
            </summary>
            <param name="bufferedToken">The buffered token.</param>
            <returns>The string value from the specified token.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonTextUtil.UnescapeJson(System.Char[])">
            <summary>
            Unescapes a json.
            </summary>
            <param name="escapedString">The escaped json.</param>
            <returns>The unescaped json.</returns>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.Json.JsonTokenType">
            <summary>
            Enum of JsonTokenType
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Json.JsonTokenType.NotStarted">
            <summary>
            Reserved for no other value
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Json.JsonTokenType.BeginArray">
            <summary>
            Corresponds to the beginning of a JSON array ('[')
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Json.JsonTokenType.EndArray">
            <summary>
            Corresponds to the end of a JSON array (']')
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Json.JsonTokenType.BeginObject">
            <summary>
            Corresponds to the beginning of a JSON object ('{')
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Json.JsonTokenType.EndObject">
            <summary>
            Corresponds to the end of a JSON object ('}')
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Json.JsonTokenType.String">
            <summary>
            Corresponds to a JSON string.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Json.JsonTokenType.Number">
            <summary>
            Corresponds to a JSON number.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Json.JsonTokenType.True">
            <summary>
            Corresponds to the JSON 'true' value.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Json.JsonTokenType.False">
            <summary>
            Corresponds to the JSON 'false' value.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Json.JsonTokenType.Null">
            <summary>
            Corresponds to the JSON 'null' value.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Json.JsonTokenType.FieldName">
            <summary>
            Corresponds to the JSON fieldname in a JSON object.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Json.JsonTokenType.Int8">
            <summary>
            Corresponds to a signed 1 byte integer.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Json.JsonTokenType.Int16">
            <summary>
            Corresponds to a signed 2 byte integer.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Json.JsonTokenType.Int32">
            <summary>
            Corresponds to a signed 4 byte integer.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Json.JsonTokenType.Int64">
            <summary>
            Corresponds to a signed 8 byte integer.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Json.JsonTokenType.UInt32">
            <summary>
            Corresponds to an unsigned 4 byte integer
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Json.JsonTokenType.Float32">
            <summary>
            Corresponds to a single precision floating point.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Json.JsonTokenType.Float64">
            <summary>
            Corresponds to a double precision floating point.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Json.JsonTokenType.Guid">
            <summary>
            Corresponds to a GUID.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Json.JsonTokenType.Binary">
            <summary>
            Corresponds to an arbitrary sequence of bytes in an object.
            </summary>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.Json.JsonWriter">
            <summary>
            Base abstract class for JSON writers.
            The writer defines methods that allow for writing a JSON encoded value to a buffer.
            </summary>
            <summary>
            Partial class for the JsonWriter that has a private JsonTextWriter below.
            </summary>
            <summary>
            Partial class for the JsonWriter that has a private JsonTextWriter below.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Json.JsonWriter.JsonObjectState">
            <summary>
            The <see cref="F:Microsoft.Azure.Cosmos.Json.JsonWriter.JsonObjectState"/>
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Json.JsonWriter.SkipValidation">
            <summary>
            Whether to skip validation.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonWriter.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the JsonWriter class.
            </summary>
            <param name="skipValidation">Whether or not to skip validation.</param>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.Json.JsonWriter.SerializationFormat">
            <summary>
            Gets the SerializationFormat of the JsonWriter.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.Json.JsonWriter.CurrentLength">
            <summary>
            Gets the current length of the internal buffer.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonWriter.Create(System.Text.Encoding,System.Boolean)">
            <summary>
            Creates a JsonTextWriter that can write in a particular encoding
            </summary>
            <param name="encoding">The encoding to write in.</param>
            <param name="skipValidation">Whether or not to skip validation</param>
            <returns>A JsonWriter that can write in a particular JsonSerializationFormat</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonWriter.Create(Microsoft.Azure.Cosmos.Json.JsonSerializationFormat,Microsoft.Azure.Cosmos.Json.JsonStringDictionary,System.Boolean)">
            <summary>
            Creates a JsonWriter that can write in a particular JsonSerializationFormat (utf8 if text)
            </summary>
            <param name="jsonSerializationFormat">The JsonSerializationFormat of the writer.</param>
            <param name="jsonStringDictionary">The dictionary to use for user string encoding.</param>
            <param name="skipValidation">Whether or not to skip validation</param>
            <returns>A JsonWriter that can write in a particular JsonSerializationFormat</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonWriter.WriteObjectStart">
            <summary>
            Writes the object start symbol to internal buffer.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonWriter.WriteObjectEnd">
            <summary>
            Writes the object end symbol to the internal buffer.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonWriter.WriteArrayStart">
            <summary>
            Writes the array start symbol to the internal buffer.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonWriter.WriteArrayEnd">
            <summary>
            Writes the array end symbol to the internal buffer.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonWriter.WriteFieldName(System.String)">
            <summary>
            Writes a field name to the the internal buffer.
            </summary>
            <param name="fieldName">The name of the field to write.</param>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonWriter.WriteStringValue(System.String)">
            <summary>
            Writes a string to the internal buffer.
            </summary>
            <param name="value">The value of the string to write.</param>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonWriter.WriteNumberValue(Microsoft.Azure.Cosmos.Number64)">
            <summary>
            Writes a number to the internal buffer.
            </summary>
            <param name="value">The value of the number to write.</param>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonWriter.WriteBoolValue(System.Boolean)">
            <summary>
            Writes a boolean to the internal buffer.
            </summary>
            <param name="value">The value of the boolean to write.</param>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonWriter.WriteNullValue">
            <summary>
            Writes a null to the internal buffer.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonWriter.WriteInt8Value(System.SByte)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonWriter.WriteInt16Value(System.Int16)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonWriter.WriteInt32Value(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonWriter.WriteInt64Value(System.Int64)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonWriter.WriteFloat32Value(System.Single)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonWriter.WriteFloat64Value(System.Double)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonWriter.WriteUInt32Value(System.UInt32)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonWriter.WriteGuidValue(System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonWriter.WriteBinaryValue(System.Collections.Generic.IReadOnlyList{System.Byte})">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonWriter.WriteCurrentToken(Microsoft.Azure.Cosmos.Json.IJsonReader)">
            <summary>
            Writes current token from a json reader to the internal buffer.
            </summary>
            <param name="jsonReader">The JsonReader to the get the current token from.</param>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonWriter.WriteAll(Microsoft.Azure.Cosmos.Json.IJsonReader)">
            <summary>
            Writes every token from the JsonReader to the internal buffer.
            </summary>
            <param name="jsonReader">The JsonReader to get the tokens from.</param>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonWriter.WriteJsonFragment(System.Collections.Generic.IReadOnlyList{System.Byte})">
            <summary>
            Writes a fragment of a json to the internal buffer
            </summary>
            <param name="jsonFragment">A section of a valid json</param>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonWriter.WriteJsonNode(Microsoft.Azure.Cosmos.Json.IJsonNavigator,Microsoft.Azure.Cosmos.Json.IJsonNavigatorNode)">
            <summary>
            Writes a json node to the internal buffer.
            </summary>
            <param name="jsonNavigator">The navigator to use to navigate the node</param>
            <param name="jsonNavigatorNode">The node to write.</param>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonWriter.GetResult">
            <summary>
            Gets the result of the JsonWriter.
            </summary>
            <returns>The result of the JsonWriter as an array of bytes.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonWriter.WriteRawJsonToken(Microsoft.Azure.Cosmos.Json.JsonTokenType,System.Collections.Generic.IReadOnlyList{System.Byte})">
            <summary>
            Writes a raw json token to the internal buffer.
            </summary>
            <param name="jsonTokenType">The JsonTokenType of the rawJsonToken</param>
            <param name="rawJsonToken">The raw json token.</param>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.Json.JsonWriter.JsonBinaryWriter">
            <summary>
            Concrete implementation of <see cref="T:Microsoft.Azure.Cosmos.Json.JsonWriter"/> that knows how to serialize to binary encoding.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Json.JsonWriter.JsonBinaryWriter.binaryWriter">
            <summary>
            Writer used to write fully materialized context to the internal stream.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Json.JsonWriter.JsonBinaryWriter.bufferedContexts">
            <summary>
            With binary encoding all the json elements are length prefixed,
            unfortunately the caller of this class only provides what tokens to write.
            This means that whenever a user call WriteObject/ArrayStart we don't know the length of said object or array
            until WriteObject/ArrayEnd is invoked.
            To get around this we reserve some space for the length and write to it when the user supplies the end token.
            This stack remembers for each nesting level where it begins and how many items it has.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Json.JsonWriter.JsonBinaryWriter.serializeCount">
            <summary>
            With binary encoding json elements like arrays and object are prefixed with a length in bytes and optionally a count.
            This flag just determines whether you want to serialize the count, since it's optional and up to the user to make the
            tradeoff between O(1) .Count() operation as the cost of additional storage.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Json.JsonWriter.JsonBinaryWriter.reservationSize">
            <summary>
            When a user writes an open array or object we reserve this much space for the type marker + length + count
            And correct it later when they write a close array or object.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Json.JsonWriter.JsonBinaryWriter.jsonStringDictionary">
            <summary>
            The string dictionary used for user string encoding.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonWriter.JsonBinaryWriter.#ctor(System.Boolean,Microsoft.Azure.Cosmos.Json.JsonStringDictionary,System.Boolean)">
            <summary>
            Initializes a new instance of the JsonBinaryWriter class.
            </summary>
            <param name="skipValidation">Whether to skip validation on the JsonObjectState.</param>
            <param name="jsonStringDictionary">The JSON string dictionary used for user string encoding.</param>
            <param name="serializeCount">Whether to serialize the count for object and array typemarkers.</param>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.Json.JsonWriter.JsonBinaryWriter.SerializationFormat">
            <summary>
            Gets the SerializationFormat of the JsonWriter.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.Json.JsonWriter.JsonBinaryWriter.CurrentLength">
            <summary>
            Gets the current length of the internal buffer.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonWriter.JsonBinaryWriter.WriteObjectStart">
            <summary>
            Writes the object start symbol to internal buffer.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonWriter.JsonBinaryWriter.WriteObjectEnd">
            <summary>
            Writes the object end symbol to the internal buffer.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonWriter.JsonBinaryWriter.WriteArrayStart">
            <summary>
            Writes the array start symbol to the internal buffer.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonWriter.JsonBinaryWriter.WriteArrayEnd">
            <summary>
            Writes the array end token to the internal buffer.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonWriter.JsonBinaryWriter.WriteFieldName(System.String)">
            <summary>
            Writes a field name to the the internal buffer.
            </summary>
            <param name="fieldName">The name of the field to write.</param>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonWriter.JsonBinaryWriter.WriteStringValue(System.String)">
            <summary>
            Writes a string to the internal buffer.
            </summary>
            <param name="value">The value of the string to write.</param>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonWriter.JsonBinaryWriter.WriteNumberValue(Microsoft.Azure.Cosmos.Number64)">
            <summary>
            Writes a number to the internal buffer.
            </summary>
            <param name="value">The value of the number to write.</param>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonWriter.JsonBinaryWriter.WriteBoolValue(System.Boolean)">
            <summary>
            Writes a boolean to the internal buffer.
            </summary>
            <param name="value">The value of the boolean to write.</param>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonWriter.JsonBinaryWriter.WriteNullValue">
            <summary>
            Writes a null to the internal buffer.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonWriter.JsonBinaryWriter.GetResult">
            <summary>
            Gets the result of the JsonWriter.
            </summary>
            <returns>The result of the JsonWriter as an array of bytes.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonWriter.JsonBinaryWriter.WriteRawJsonToken(Microsoft.Azure.Cosmos.Json.JsonTokenType,System.Collections.Generic.IReadOnlyList{System.Byte})">
            <summary>
            Writes a raw json token to the internal buffer.
            </summary>
            <param name="jsonTokenType">The JsonTokenType of the rawJsonToken</param>
            <param name="rawJsonToken">The raw json token.</param>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.Json.JsonWriter.JsonTextWriter">
            <summary>
            This class is used to build a JSON string.
            It supports our defined IJsonWriter interface.
            It keeps an stack to keep track of scope, and provides error checking using that.
            It has few other variables for error checking
            The user can also provide initial size to reserve string buffer, that will help reduce cost of reallocation.
            It provides error checking based on JSON grammar. It provides escaping for nine characters specified in JSON.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Json.JsonWriter.JsonTextWriter.streamWriter">
            <summary>
            The internal StreamWriter
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Json.JsonWriter.JsonTextWriter.firstValue">
            <summary>
            Whether we are writing the first value of an array or object
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonWriter.JsonTextWriter.#ctor(System.Text.Encoding,System.Boolean)">
            <summary>
            Initializes a new instance of the JsonTextWriter class.
            </summary>
            <param name="encoding">The encoding to use.</param>
            <param name="skipValidation">Whether or not to skip validation</param>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.Json.JsonWriter.JsonTextWriter.SerializationFormat">
            <summary>
            Gets the SerializationFormat of the JsonWriter.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.Json.JsonWriter.JsonTextWriter.CurrentLength">
            <summary>
            Gets the current length of the internal buffer.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonWriter.JsonTextWriter.WriteObjectStart">
            <summary>
            Writes the object start symbol to internal buffer.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonWriter.JsonTextWriter.WriteObjectEnd">
            <summary>
            Writes the object end symbol to the internal buffer.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonWriter.JsonTextWriter.WriteArrayStart">
            <summary>
            Writes the array start symbol to the internal buffer.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonWriter.JsonTextWriter.WriteArrayEnd">
            <summary>
            Writes the array end symbol to the internal buffer.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonWriter.JsonTextWriter.WriteFieldName(System.String)">
            <summary>
            Writes a field name to the the internal buffer.
            </summary>
            <param name="fieldName">The name of the field to write.</param>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonWriter.JsonTextWriter.WriteStringValue(System.String)">
            <summary>
            Writes a string to the internal buffer.
            </summary>
            <param name="value">The value of the string to write.</param>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonWriter.JsonTextWriter.WriteNumberValue(Microsoft.Azure.Cosmos.Number64)">
            <summary>
            Writes a number to the internal buffer.
            </summary>
            <param name="value">The value of the number to write.</param>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonWriter.JsonTextWriter.WriteBoolValue(System.Boolean)">
            <summary>
            Writes a boolean to the internal buffer.
            </summary>
            <param name="value">The value of the boolean to write.</param>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonWriter.JsonTextWriter.WriteNullValue">
            <summary>
            Writes a null to the internal buffer.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonWriter.JsonTextWriter.GetResult">
            <summary>
            Gets the result of the JsonWriter.
            </summary>
            <returns>The result of the JsonWriter as an array of bytes.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonWriter.JsonTextWriter.GetStringResult">
            <summary>
            Gets the result of all the writes as a string.
            </summary>
            <returns>The result of all the writes as a string.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonWriter.JsonTextWriter.WriteRawJsonToken(Microsoft.Azure.Cosmos.Json.JsonTokenType,System.Collections.Generic.IReadOnlyList{System.Byte})">
            <summary>
            Writes a raw json token to the internal buffer.
            </summary>
            <param name="jsonTokenType">The JsonTokenType of the rawJsonToken</param>
            <param name="rawJsonToken">The raw json token.</param>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonWriter.JsonTextWriter.WriteIntegerInternal(System.Int64)">
            <summary>
            Writes an integer to the internal buffer.
            </summary>
            <param name="value">The value of the integer to write.</param>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonWriter.JsonTextWriter.WriteDoubleInternal(System.Double)">
            <summary>
            Writes an integer to the internal buffer.
            </summary>
            <param name="value">The value of the integer to write.</param>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonWriter.JsonTextWriter.WriteChar(System.Char)">
            <summary>
            Writes a character to the stream.
            </summary>
            <param name="value">The character to write to the stream.</param>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.JsonWriter.JsonTextWriter.PrefixMemberSeparator">
            <summary>
            Will insert a member separator token if one is needed.
            </summary>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.Json.LittleEndianBinaryReader">
            <summary>
            A BinaryReader that can read binary that has little endian byte ordering for a client that can be run a both a big endian and little endian machine.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Json.LittleEndianBinaryReader.isLittleEndian">
            <summary>
            Flag used to determine if the machine is a little endian machine.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.LittleEndianBinaryReader.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.Cosmos.Json.LittleEndianBinaryReader"/> class based on the specified stream and using UTF-8 encoding.
            </summary>
            <param name="input">The input stream.</param>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.LittleEndianBinaryReader.#ctor(System.IO.Stream,System.Text.Encoding)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.Cosmos.Json.LittleEndianBinaryReader"/> class based on the specified stream and character encoding.
            </summary>
            <param name="input">The input stream.</param>
            <param name="encoding">The character encoding to use.</param>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.LittleEndianBinaryReader.#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.Cosmos.Json.LittleEndianBinaryReader"/> class based on the specified stream and character encoding, and optionally leaves the stream open.
            </summary>
            <param name="input">The input stream.</param>
            <param name="encoding">The character encoding to use.</param>
            <param name="leaveOpen">true to leave the stream open after the System.IO.BinaryReader object is disposed; otherwise, false.</param>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.LittleEndianBinaryReader.#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.Cosmos.Json.LittleEndianBinaryReader"/> class for testing purposes, since we don't want the user to be able to tell us what the endianness of the machine is.
            Thus this constructor is private.
            </summary>
            <param name="input">The input stream.</param>
            <param name="encoding">The character encoding to use.</param>
            <param name="leaveOpen">true to leave the stream open after the System.IO.BinaryReader object is disposed; otherwise, false.</param>
            <param name="isLittleEndian">Whether the machine is a little endian machine</param>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.LittleEndianBinaryReader.ReadBoolean">
            <summary>
            Reads a Boolean value from the current stream and advances the current position of the stream by one byte.
            </summary>
            <returns>true if the byte is nonzero; otherwise, false.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.LittleEndianBinaryReader.ReadByte">
            <summary>
            Reads the next byte from the current stream and advances the current position of the stream by one byte.
            </summary>
            <returns>The next byte read from the current stream.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.LittleEndianBinaryReader.ReadDecimal">
            <summary>
            Reads the next decimal from the current stream and advances the current position of the stream by 16 bytes.
            </summary>
            <returns>The next decimal read from the current stream.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.LittleEndianBinaryReader.ReadDouble">
            <summary>
            Reads an 8-byte floating point value from the current stream and advances the current position of the stream by eight bytes.
            </summary>
            <returns>An 8-byte floating point value read from the current stream.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.LittleEndianBinaryReader.ReadInt16">
            <summary>
            Reads a 2-byte signed integer from the current stream and advances the current position of the stream by two bytes.
            </summary>
            <returns> A 2-byte signed integer read from the current stream.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.LittleEndianBinaryReader.ReadInt32">
            <summary>
            Reads a 4-byte signed integer from the current stream and advances the current position of the stream by four bytes.
            </summary>
            <returns>A 4-byte signed integer read from the current stream.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.LittleEndianBinaryReader.ReadInt64">
            <summary>
            Reads an 8-byte signed integer from the current stream and advances the current position of the stream by eight bytes.
            </summary>
            <returns>An 8-byte signed integer read from the current stream.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.LittleEndianBinaryReader.ReadSByte">
            <summary>
            Reads a signed byte from this stream and advances the current position of the stream by one byte.
            </summary>
            <returns>A signed byte read from the current stream.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.LittleEndianBinaryReader.ReadSingle">
            <summary>
            Reads a 4-byte floating point value from the current stream and advances the current position of the stream by four bytes.
            </summary>
            <returns>A 4-byte floating point value read from the current stream.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.LittleEndianBinaryReader.ReadString">
            <summary>
            Reads a string from the current stream. The string is prefixed with the length, encoded as an integer seven bits at a time.
            </summary>
            <returns>The string being read.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.LittleEndianBinaryReader.ReadUInt16">
            <summary>
            Reads a 2-byte unsigned integer from the current stream and advances the position of the stream by two bytes.
            </summary>
            <returns>A 2-byte unsigned integer from the current stream</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.LittleEndianBinaryReader.ReadUInt32">
            <summary>
            Reads a 4-byte unsigned integer from the current stream and advances the position of the stream by four bytes.
            </summary>
            <returns>A 4-byte unsigned integer read from this stream.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.LittleEndianBinaryReader.ReadUInt64">
            <summary>
            Reads an 8-byte unsigned integer from the current stream and advances the position of the stream by eight bytes.
            </summary>
            <returns>An 8-byte unsigned integer read from this stream.</returns>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.Json.ObjectProperty">
            <summary>
            Struct to hold the property name and property value for an object property.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Json.ObjectProperty.NameNode">
            <summary>
            The IJsonNavigatorNode to the node that holds the object property name.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Json.ObjectProperty.ValueNode">
            <summary>
            The IJsonNavigatorNode to the node that holds the object property value.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Json.ObjectProperty.#ctor(Microsoft.Azure.Cosmos.Json.IJsonNavigatorNode,Microsoft.Azure.Cosmos.Json.IJsonNavigatorNode)">
            <summary>
            Initializes a new instance of the ObjectProperty struct.
            </summary>
            <param name="nameNode">The IJsonNavigatorNode to the node that holds the object property name.</param>
            <param name="valueNode">The IJsonNavigatorNode to the node that holds the object property value.</param>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.Linq.ChangeFeedQuery`1">
            <summary>
            Provides interface for historical change feed.
            </summary>
            <typeparam name="TResource">Source Resource Type (e.g. Document)</typeparam>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.Linq.ChangeFeedQuery`1.HasMoreResults">
            <summary>
            Gets a value indicating whether there are potentially additional results that can be retrieved.
            </summary>
            <value>Boolean value representing if whether there are potentially additional results that can be retrieved.</value>
            <remarks>Initially returns true. This value is set based on whether the last execution returned a continuation token.</remarks>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Linq.ChangeFeedQuery`1.ExecuteNextAsync``1(System.Threading.CancellationToken)">
            <summary>
            Read feed and retrieves the next page of results in the Azure Cosmos DB service.
            </summary>
            <typeparam name="TResult">The type of the object returned in the query result.</typeparam>
            <returns>The Task object for the asynchronous response from query execution.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Linq.ChangeFeedQuery`1.ExecuteNextAsync(System.Threading.CancellationToken)">
            <summary>
            Executes the query and retrieves the next page of results as dynamic objects in the Azure Cosmos DB service.
            </summary>
            <param name="cancellationToken">(Optional) The <see cref="T:System.Threading.CancellationToken"/> allows for notification that operations should be cancelled.</param>
            <returns>The Task object for the asynchronous response from query execution.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Linq.ConstantEvaluator.PartialEval(System.Linq.Expressions.Expression,System.Func{System.Linq.Expressions.Expression,System.Boolean})">
            <summary> 
            Performs evaluation and replacement of independent sub-trees 
            </summary> 
            <param name="expression">The root of the expression tree.</param>
            <param name="fnCanBeEvaluated">A function that decides whether a given expression node can be part of the local function.</param>
            <returns>A new tree with sub-trees evaluated and replaced.</returns> 
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Linq.ConstantEvaluator.PartialEval(System.Linq.Expressions.Expression)">
            <summary> 
            Performs evaluation and replacement of independent sub-trees 
            </summary> 
            <param name="expression">The root of the expression tree.</param>
            <returns>A new tree with sub-trees evaluated and replaced.</returns> 
        </member>
        <member name="T:Microsoft.Azure.Cosmos.Linq.ConstantFolding">
            <summary>
            Simplifies an Expression tree evaluating everything that can be evaluated 
            at the current time.  Could be more efficient by evaluating a complete constant subtree at once.
            </summary>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.Linq.CosmosLinqExtensions">
            <summary>
            This class provides extension methods for cosmos LINQ code.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Linq.CosmosLinqExtensions.IsDefined(System.Object)">
            <summary>
            Determines if a certain property is defined or not.
            This method is to be used in LINQ expressions only and will be evaluated on server.
            There's no implementation provided in the client library.
            </summary>
            <param name="obj"></param>
            <returns>Returns true if this property is defined otherwise returns false.</returns>
            <example>
            <code>
            <![CDATA[
            var isDefinedQuery = documents.Where(document => document.Name.IsDefined());
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Linq.CosmosLinqExtensions.IsNull(System.Object)">
            <summary>
            Determines if a certain property is null or not.
            This method is to be used in LINQ expressions only and will be evaluated on server.
            There's no implementation provided in the client library.
            </summary>
            <param name="obj"></param>
            <returns>Returns true if this property is null otherwise returns false.</returns>
            <example>
            <code>
            <![CDATA[
            var isNullQuery = documents.Where(document => document.Name.IsNull());
            ]]>
            </code>
            </example>s>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Linq.CosmosLinqExtensions.IsPrimitive(System.Object)">
            <summary>
            Determines if a certain property is of primitive JSON type.
            This method is to be used in LINQ expressions only and will be evaluated on server.
            There's no implementation provided in the client library.
            </summary>
            <param name="obj"></param>
            <returns>Returns true if this property is null otherwise returns false.</returns>
            <remarks>
            Primitive JSON types (Double, String, Boolean and Null)
            </remarks>
            <example>
            <code>
            <![CDATA[
            var isPrimitiveQuery = documents.Where(document => document.Name.IsPrimitive());
            ]]>
            </code>
            </example>s>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Linq.CosmosLinqExtensions.ToQueryDefinition``1(System.Linq.IQueryable{``0},System.Collections.Generic.IDictionary{System.Object,System.String})">
             <summary>
             This method generate query definition from LINQ query.
             </summary>
             <typeparam name="T">the type of object to query.</typeparam>
             <param name="query">the IQueryable{T} to be converted.</param>
             <param name="namedParameters">Dictionary containing parameter value and name for parameterized query</param>
             <returns>The queryDefinition which can be used in query execution.</returns>
             <example>
             This example shows how to generate query definition from LINQ.
            
             <code language="c#">
             <![CDATA[
             IQueryable<T> queryable = container.GetItemsQueryIterator<T>(allowSynchronousQueryExecution = true)
                                  .Where(t => b.id.contains("test"));
             QueryDefinition queryDefinition = queryable.ToQueryDefinition();
             ]]>
             </code>
             </example>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Linq.CosmosLinqExtensions.ToQueryDefinition``1(System.Linq.IQueryable{``0})">
             <summary>
             This method generate query definition from LINQ query.
             </summary>
             <typeparam name="T">the type of object to query.</typeparam>
             <param name="query">the IQueryable{T} to be converted.</param>
             <returns>The queryDefinition which can be used in query execution.</returns>
             <example>
             This example shows how to generate query definition from LINQ.
            
             <code language="c#">
             <![CDATA[
             IQueryable<T> queryable = container.GetItemsQueryIterator<T>(allowSynchronousQueryExecution = true)
                                  .Where(t => b.id.contains("test"));
             QueryDefinition queryDefinition = queryable.ToQueryDefinition();
             ]]>
             </code>
             </example>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Linq.CosmosLinqExtensions.ToFeedIterator``1(System.Linq.IQueryable{``0})">
             <summary>
             This extension method gets the FeedIterator from LINQ IQueryable to execute query asynchronously.
             This will create the fresh new FeedIterator when called.
             </summary>
             <typeparam name="T">the type of object to query.</typeparam>
             <param name="query">the IQueryable{T} to be converted.</param>
             <returns>An iterator to go through the items.</returns>
             <example>
             This example shows how to get FeedIterator from LINQ.
            
             <code language="c#">
             <![CDATA[
             IOrderedQueryable<ToDoActivity> linqQueryable = this.Container.GetItemLinqQueryable<ToDoActivity>();
             FeedIterator<ToDoActivity> setIterator = linqQueryable.Where(item => (item.taskNum < 100)).ToFeedIterator()
             ]]>
             </code>
             </example>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Linq.CosmosLinqExtensions.ToStreamIterator``1(System.Linq.IQueryable{``0})">
             <summary>
             This extension method gets the FeedIterator from LINQ IQueryable to execute query asynchronously.
             This will create the fresh new FeedIterator when called.
             </summary>
             <typeparam name="T">the type of object to query.</typeparam>
             <param name="query">the IQueryable{T} to be converted.</param>
             <returns>An iterator to go through the items.</returns>
             <example>
             This example shows how to get FeedIterator from LINQ.
            
             <code language="c#">
             <![CDATA[
             IOrderedQueryable<ToDoActivity> linqQueryable = this.Container.GetItemLinqQueryable<ToDoActivity>();
             FeedIterator setIterator = linqQueryable.Where(item => (item.taskNum < 100)).ToFeedIterator()
             ]]>
             </code>
             </example>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Linq.CosmosLinqExtensions.MaxAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)">
            <summary>
            Returns the maximum value in a generic <see cref="T:System.Linq.IQueryable`1" />.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">A sequence of values to determine the maximum of.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The maximum value in the sequence.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Linq.CosmosLinqExtensions.MinAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)">
            <summary>
            Returns the minimum value in a generic <see cref="T:System.Linq.IQueryable`1" />.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">A sequence of values to determine the minimum of.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The minimum value in the sequence.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Linq.CosmosLinqExtensions.AverageAsync(System.Linq.IQueryable{System.Decimal},System.Threading.CancellationToken)">
            <summary>
            Computes the average of a sequence of <see cref="T:System.Decimal" /> values.
            </summary>
            <param name="source">A sequence of values to calculate the average of.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The average value in the sequence.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Linq.CosmosLinqExtensions.AverageAsync(System.Linq.IQueryable{System.Nullable{System.Decimal}},System.Threading.CancellationToken)">
            <summary>
            Computes the average of a sequence of <see cref="T:System.Nullable`1" /> values.
            </summary>
            <param name="source">A sequence of values to calculate the average of.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The average value in the sequence.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Linq.CosmosLinqExtensions.AverageAsync(System.Linq.IQueryable{System.Double},System.Threading.CancellationToken)">
            <summary>
            Computes the average of a sequence of <see cref="T:System.Double" /> values.
            </summary>
            <param name="source">A sequence of values to calculate the average of.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The average value in the sequence.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Linq.CosmosLinqExtensions.AverageAsync(System.Linq.IQueryable{System.Nullable{System.Double}},System.Threading.CancellationToken)">
            <summary>
            Computes the average of a sequence of <see cref="T:System.Nullable`1" /> values.
            </summary>
            <param name="source">A sequence of values to calculate the average of.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The average value in the sequence.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Linq.CosmosLinqExtensions.AverageAsync(System.Linq.IQueryable{System.Single},System.Threading.CancellationToken)">
            <summary>
            Computes the average of a sequence of <see cref="T:System.Single" /> values.
            </summary>
            <param name="source">A sequence of values to calculate the average of.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The average value in the sequence.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Linq.CosmosLinqExtensions.AverageAsync(System.Linq.IQueryable{System.Nullable{System.Single}},System.Threading.CancellationToken)">
            <summary>
            Computes the average of a sequence of <see cref="T:System.Nullable`1" /> values.
            </summary>
            <param name="source">A sequence of values to calculate the average of.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The average value in the sequence.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Linq.CosmosLinqExtensions.AverageAsync(System.Linq.IQueryable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Computes the average of a sequence of <see cref="T:System.Int32" /> values.
            </summary>
            <param name="source">A sequence of values to calculate the average of.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The average value in the sequence.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Linq.CosmosLinqExtensions.AverageAsync(System.Linq.IQueryable{System.Nullable{System.Int32}},System.Threading.CancellationToken)">
            <summary>
            Computes the average of a sequence of <see cref="T:System.Nullable`1" /> values.
            </summary>
            <param name="source">A sequence of values to calculate the average of.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The average value in the sequence.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Linq.CosmosLinqExtensions.AverageAsync(System.Linq.IQueryable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Computes the average of a sequence of <see cref="T:System.Int64" /> values.
            </summary>
            <param name="source">A sequence of values to calculate the average of.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The average value in the sequence.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Linq.CosmosLinqExtensions.AverageAsync(System.Linq.IQueryable{System.Nullable{System.Int64}},System.Threading.CancellationToken)">
            <summary>
            Computes the average of a sequence of <see cref="T:System.Nullable`1" /> values.
            </summary>
            <param name="source">A sequence of values to calculate the average of.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The average value in the sequence.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Linq.CosmosLinqExtensions.SumAsync(System.Linq.IQueryable{System.Decimal},System.Threading.CancellationToken)">
            <summary>
            Computes the sum of a sequence of <see cref="T:System.Decimal" /> values.
            </summary>
            <param name="source">A sequence of values to calculate the average of.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The average value in the sequence.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Linq.CosmosLinqExtensions.SumAsync(System.Linq.IQueryable{System.Nullable{System.Decimal}},System.Threading.CancellationToken)">
            <summary>
            Computes the sum of a sequence of <see cref="T:System.Nullable`1" /> values.
            </summary>
            <param name="source">A sequence of values to calculate the average of.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The average value in the sequence.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Linq.CosmosLinqExtensions.SumAsync(System.Linq.IQueryable{System.Double},System.Threading.CancellationToken)">
            <summary>
            Computes the sum of a sequence of <see cref="T:System.Double" /> values.
            </summary>
            <param name="source">A sequence of values to calculate the average of.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The average value in the sequence.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Linq.CosmosLinqExtensions.SumAsync(System.Linq.IQueryable{System.Nullable{System.Double}},System.Threading.CancellationToken)">
            <summary>
            Computes the sum of a sequence of <see cref="T:System.Nullable`1" /> values.
            </summary>
            <param name="source">A sequence of values to calculate the average of.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The average value in the sequence.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Linq.CosmosLinqExtensions.SumAsync(System.Linq.IQueryable{System.Single},System.Threading.CancellationToken)">
            <summary>
            Computes the sum of a sequence of <see cref="T:System.Single" /> values.
            </summary>
            <param name="source">A sequence of values to calculate the average of.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The average value in the sequence.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Linq.CosmosLinqExtensions.SumAsync(System.Linq.IQueryable{System.Nullable{System.Single}},System.Threading.CancellationToken)">
            <summary>
            Computes the sum of a sequence of <see cref="T:System.Nullable`1" /> values.
            </summary>
            <param name="source">A sequence of values to calculate the average of.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The average value in the sequence.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Linq.CosmosLinqExtensions.SumAsync(System.Linq.IQueryable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Computes the sum of a sequence of <see cref="T:System.Int32" /> values.
            </summary>
            <param name="source">A sequence of values to calculate the average of.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The average value in the sequence.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Linq.CosmosLinqExtensions.SumAsync(System.Linq.IQueryable{System.Nullable{System.Int32}},System.Threading.CancellationToken)">
            <summary>
            Computes the sum of a sequence of <see cref="T:System.Nullable`1" /> values.
            </summary>
            <param name="source">A sequence of values to calculate the average of.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The average value in the sequence.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Linq.CosmosLinqExtensions.SumAsync(System.Linq.IQueryable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Computes the sum of a sequence of <see cref="T:System.Int64" /> values.
            </summary>
            <param name="source">A sequence of values to calculate the average of.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The average value in the sequence.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Linq.CosmosLinqExtensions.SumAsync(System.Linq.IQueryable{System.Nullable{System.Int64}},System.Threading.CancellationToken)">
            <summary>
            Computes the sum of a sequence of <see cref="T:System.Nullable`1" /> values.
            </summary>
            <param name="source">A sequence of values to calculate the average of.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The average value in the sequence.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Linq.CosmosLinqExtensions.CountAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)">
            <summary>
            Returns the number of elements in a sequence.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">The sequence that contains the elements to be counted.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The number of elements in the input sequence.</returns>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.Linq.CosmosLinqQuery`1">
            <summary> 
            This is the entry point for LINQ query creation/execution, it generate query provider, implements IOrderedQueryable.
            </summary> 
            <seealso cref="T:Microsoft.Azure.Cosmos.Linq.CosmosLinqQueryProvider"/>  
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Linq.CosmosLinqQuery`1.GetEnumerator">
            <summary>
            Retrieves an object that can iterate through the individual results of the query.
            </summary>
            <remarks>
            This triggers a synchronous multi-page load.
            </remarks>
            <returns>IEnumerator</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Linq.CosmosLinqQuery`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Synchronous Multi-Page load
            </summary>
            <returns>IEnumerator</returns>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.Linq.CosmosLinqQueryProvider">
            <summary> 
            This class serve as LINQ query provider implementing IQueryProvider.
            </summary> 
        </member>
        <member name="P:Microsoft.Azure.Cosmos.Linq.DocumentQuery`1.HasMoreResults">
            <summary>
            Gets a value indicating whether there are additional results to retrieve. 
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.Linq.DocumentQuery`1.CorrelatedActivityId">
            <summary>
            Gets the unique ID for this instance of DocumentQuery used to correlate all activityIds generated when fetching from a partition collection.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Linq.DocumentQuery`1.ExecuteNextAsync(System.Threading.CancellationToken)">
            <summary>
            Executes the query to retrieve the next page of results.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Linq.DocumentQuery`1.ExecuteNextAsync``1(System.Threading.CancellationToken)">
            <summary>
            Executes the query to retrieve the next page of results.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Linq.DocumentQuery`1.GetEnumerator">
            <summary>
            Retrieves an object that can iterate through the individual results of the query.
            </summary>
            <remarks>
            This triggers a synchronous multi-page load.
            </remarks>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Linq.DocumentQuery`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Synchronous Multi-Page load
            </summary>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.Linq.DocumentQueryable">
            <summary>
            This class provides extension methods for converting a <see cref="T:System.Linq.IQueryable`1"/> object to a <see cref="T:Microsoft.Azure.Cosmos.Linq.IDocumentQuery`1"/> object.
            </summary>
            <remarks>
             The <see cref="T:Microsoft.Azure.Cosmos.DocumentClient"/> class provides implementation of standard query methods for querying resources in Azure Cosmos DB. 
             These methods enable you to express traversal, filter, and projection operations over data persisted in the Azure Cosmos DB service.  They are defined as methods that 
             extend IQueryable, and do not perform any querying directly.  Instead, their functionality is to create queries 
             based the resource and query expression provided.  The actual query execution occurs when enumeration forces the expression tree associated with an IQueryable object to be executed.
            </remarks>
            <seealso cref="T:Microsoft.Azure.Cosmos.IDocumentClient"/>
            <seealso cref="T:Microsoft.Azure.Cosmos.DocumentClient"/>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Linq.DocumentQueryable.AsDocumentQuery``1(System.Linq.IQueryable{``0})">
            <summary>
            Converts an IQueryable to IDocumentQuery which supports pagination and asynchronous execution in the Azure Cosmos DB service.
            </summary>
            <typeparam name="T">the type of object to query.</typeparam>
            <param name="query">the IQueryable{T} to be converted.</param>
            <returns>An IDocumentQuery{T} that can evaluate the query.</returns>
            <example>
            This example shows how to run a query asynchronously using the AsDocumentQuery() interface.
            
            <code language="c#">
            <![CDATA[
            using (var queryable = client.CreateDocumentQuery<Book>(
                collectionLink,
                new FeedOptions { MaxItemCount = 10 })
                .Where(b => b.Title == "War and Peace")
                .AsDocumentQuery())
            {
                while (queryable.HasMoreResults) 
                {
                    foreach(Book b in await queryable.ExecuteNextAsync<Book>())
                    {
                        // Iterate through books
                    }
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Linq.DocumentQueryEvaluator.HandleEmptyQuery(System.Linq.Expressions.ConstantExpression)">
            <summary>
            This is to handle the case, where user just executes code like this.
            foreach(Database db in client.CreateDatabaseQuery()) {}        
            </summary>
            <param name="expression"></param>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Linq.DocumentQueryEvaluator.HandleAsSqlTransformExpression(System.Linq.Expressions.MethodCallExpression)">
            <summary>
            foreach(string record in client.CreateDocumentQuery().Navigate("Raw JQuery"))
            </summary>
            <param name="expression"></param>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.Linq.DocumentQueryException">
            <summary> 
            Represents an exception from the Azure Cosmos DB service queries.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Linq.DocumentQueryException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.Documents.Linq.DocumentQueryException"/> class in the Azure Cosmos DB service.</summary>
            <param name="message">The exception message.</param>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Linq.DocumentQueryException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.Documents.Linq.DocumentQueryException"/> class in the Azure Cosmos DB service.</summary>
            <param name="message">The exception message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Linq.DocumentQueryException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.Documents.Linq.DocumentQueryException"/> class.
            </summary>
            <param name="info">The serialization info.</param>
            <param name="context">The streaming context.</param>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.Linq.ExpressionToSql">
            <summary>
            Core Linq to DocDBSQL translator.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Linq.ExpressionToSql.TranslateQuery(System.Linq.Expressions.Expression,System.Collections.Generic.IDictionary{System.Object,System.String},Microsoft.Azure.Cosmos.CosmosSerializationOptions)">
            <summary>
            Toplevel entry point.
            </summary>
            <param name="inputExpression">An Expression representing a Query on a IDocumentQuery object.</param>
            <param name="parameters">Optional dictionary for parameter name and value</param>
            <param name="serializationOptions">Optional serializer options.</param>
            <returns>The corresponding SQL query.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Linq.ExpressionToSql.Translate(System.Linq.Expressions.Expression,Microsoft.Azure.Cosmos.Linq.TranslationContext)">
            <summary>
            Translate an expression into a query.
            Query is constructed as a side-effect in context.currentQuery.
            </summary>
            <param name="inputExpression">Expression to translate.</param>
            <param name="context">Context for translation.</param>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Linq.ExpressionToSql.GetBindingParameterName(Microsoft.Azure.Cosmos.Linq.TranslationContext)">
            <summary>
            Get a paramter name to be binded to the a collection from the next lambda.
            It's merely for readability purpose. If that is not possible, use a default 
            parameter name.
            </summary>
            <param name="context">The translation context</param>
            <returns>A parameter name</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Linq.ExpressionToSql.VisitNonSubqueryScalarExpression(System.Linq.Expressions.Expression,Microsoft.Azure.Cosmos.Linq.TranslationContext)">
            <summary>
            Visitor which produces a SqlScalarExpression.
            </summary>
            <param name="inputExpression">Expression to visit.</param>
            <param name="context">Context information.</param>
            <returns>The translation as a ScalarExpression.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Linq.ExpressionToSql.ConvertToScalarAnyCollection(Microsoft.Azure.Cosmos.Linq.TranslationContext)">
            <summary>
            Convert the context's current query to a scalar Any collection
            by wrapping it as following: SELECT VALUE COUNT(v0) > 0 FROM (current query) AS v0.
            This is used in cases where LINQ expression ends with Any() which is a boolean scalar.
            Normally Any would translate to SELECT VALUE EXISTS() subquery. However that wouldn't work
            for these cases because it would result in a boolean value for each row instead of 
            one single "aggregated" boolean value.
            </summary>
            <param name="context">The translation context</param>
            <returns>The scalar Any collection</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Linq.ExpressionToSql.VisitCollectionLambda(System.Linq.Expressions.LambdaExpression,Microsoft.Azure.Cosmos.Linq.TranslationContext)">
            <summary>
            Visit a lambda which is supposed to return a collection.
            </summary>
            <param name="lambdaExpression">LambdaExpression with a result which is a collection.</param>
            <param name="context">The translation context.</param>
            <returns>The collection computed by the lambda.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Linq.ExpressionToSql.VisitMemberAccessCollectionExpression(System.Linq.Expressions.Expression,Microsoft.Azure.Cosmos.Linq.TranslationContext,System.String)">
            <summary>
            Visit an expression, usually a MemberAccess, then trigger parameter binding for that expression.
            </summary>
            <param name="inputExpression">The input expression</param>
            <param name="context">The current translation context</param>
            <param name="parameterName">Parameter name is merely for readability</param>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Linq.ExpressionToSql.VisitMethodCall(System.Linq.Expressions.MethodCallExpression,Microsoft.Azure.Cosmos.Linq.TranslationContext)">
            <summary>
            Visit a method call, construct the corresponding query in context.currentQuery.
            At ExpressionToSql point only LINQ method calls are allowed.
            These methods are static extension methods of IQueryable or IEnumerable.
            </summary>
            <param name="inputExpression">Method to translate.</param>
            <param name="context">Query translation context.</param>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Linq.ExpressionToSql.IsSubqueryScalarExpression(System.Linq.Expressions.Expression,System.Nullable{Microsoft.Azure.Cosmos.Sql.SqlObjectKind}@,System.Boolean@)">
            <summary>
            Determine if an expression should be translated to a subquery.
            This only applies to expression that is inside a lamda.
            </summary>
            <param name="expression">The input expression</param>
            <param name="expressionObjKind">The expression object kind of the expression</param>
            <param name="isMinMaxAvgMethod">True if the method is either Min, Max, or Avg</param>
            <returns>True if subquery is needed, otherwise false</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Linq.ExpressionToSql.VisitScalarExpression(System.Linq.Expressions.LambdaExpression,Microsoft.Azure.Cosmos.Linq.TranslationContext)">
            <summary>
            Visit an lambda expression which is in side a lambda and translate it to a scalar expression or a subquery scalar expression.
            See the other overload of this method for more details.
            </summary>
            <param name="lambda">The input lambda expression</param>
            <param name="context">The translation context</param>
            <returns>A scalar expression representing the input expression</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Linq.ExpressionToSql.VisitScalarExpression(System.Linq.Expressions.Expression,Microsoft.Azure.Cosmos.Linq.TranslationContext)">
            <summary>
            Visit an lambda expression which is in side a lambda and translate it to a scalar expression or a collection scalar expression.
            If it is a collection scalar expression, e.g. should be translated to subquery such as SELECT VALUE ARRAY, SELECT VALUE EXISTS, 
            SELECT VALUE [aggregate], the subquery will be aliased to a new binding for the FROM clause. E.g. consider 
            Select(family => family.Children.Select(child => child.Grade)). Since the inner Select corresponds to a subquery, this method would 
            create a new binding of v0 to the subquery SELECT VALUE ARRAY(), and the inner expression will be just SELECT v0.
            </summary>
            <param name="expression">The input expression</param>
            <param name="context">The translation context</param>
            <returns>A scalar expression representing the input expression</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Linq.ExpressionToSql.VisitScalarExpression(System.Linq.Expressions.Expression,System.Collections.ObjectModel.ReadOnlyCollection{System.Linq.Expressions.ParameterExpression},Microsoft.Azure.Cosmos.Linq.TranslationContext)">
            <summary>
            Visit an lambda expression which is in side a lambda and translate it to a scalar expression or a collection scalar expression.
            See the other overload of this method for more details.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Linq.ExpressionToSql.CreateSubquerySqlCollection(Microsoft.Azure.Cosmos.Sql.SqlQuery,Microsoft.Azure.Cosmos.Linq.TranslationContext,Microsoft.Azure.Cosmos.Sql.SqlObjectKind)">
            <summary>
            Create a subquery SQL collection object for a SQL query
            </summary>
            <param name="query">The SQL query object</param>
            <param name="context">The translation context</param>
            <param name="subqueryType">The subquery type</param>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Linq.ExpressionToSql.CreateSubquery(System.Linq.Expressions.Expression,System.Collections.ObjectModel.ReadOnlyCollection{System.Linq.Expressions.ParameterExpression},Microsoft.Azure.Cosmos.Linq.TranslationContext)">
            <summary>
            Create a subquery from a subquery scalar expression.
            By visiting the collection expression, this builds a new QueryUnderConstruction on top of the current one
            and then translate it to a SQL query while keeping the current QueryUnderConstruction in tact.
            </summary>
            <param name="expression">The subquery scalar expression</param>
            <param name="parameters">The list of parameters of the expression</param>
            <param name="context">The translation context</param>
            <returns>A query corresponding to the collection expression</returns>
            <remarks>The QueryUnderConstruction remains unchanged after this.</remarks>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Linq.ExpressionToSql.ConvertPropertyRefToPath(Microsoft.Azure.Cosmos.Sql.SqlPropertyRefScalarExpression)">
            <summary>
            Property references that refer to array-valued properties are converted to collection references.
            </summary>
            <param name="propRef">Property reference object.</param>
            <returns>An inputPathCollection which contains the same property path as the propRef.</returns>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.Linq.GeometrySqlExpressionFactory">
            <summary>
            Constructs <see cref="T:Microsoft.Azure.Cosmos.Sql.SqlScalarExpression"/> from a geometry <see cref="T:System.Linq.Expressions.Expression"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Linq.GeometrySqlExpressionFactory.Construct(System.Linq.Expressions.Expression)">
            <summary>
            Constructs <see cref="T:Microsoft.Azure.Cosmos.Sql.SqlScalarExpression"/> from a geometry <see cref="T:System.Linq.Expressions.Expression"/>.
            </summary>
            <param name="geometryExpression">
            Expression of type <see cref="T:Microsoft.Azure.Cosmos.Spatial.Geometry"/>.
            </param>
            <returns>Instance of <see cref="T:Microsoft.Azure.Cosmos.Sql.SqlScalarExpression"/> representing geometry <paramref name="geometryExpression"/>.</returns>.
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Linq.GeometrySqlExpressionFactory.FromJToken(Newtonsoft.Json.Linq.JToken)">
            <summary>
            Constructs <see cref="T:Microsoft.Azure.Cosmos.Sql.SqlScalarExpression"/> from a geometry <see cref="T:Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="jToken">Json token.</param>
            <returns>Instance of <see cref="T:Microsoft.Azure.Cosmos.Sql.SqlScalarExpression"/>.</returns>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.Linq.Nominator">
            <summary> 
            Performs bottom-up analysis to determine which nodes can possibly 
            be part of an evaluated sub-tree. 
            </summary>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.Linq.QueryUnderConstruction">
            <summary>
            Query that is being constructed.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.Linq.QueryUnderConstruction.fromParameters">
            <summary>
            Binding for the FROM parameters.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.Linq.QueryUnderConstruction.Alias">
            <summary>
            The parameter expression to be used as this query's alias.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Linq.QueryUnderConstruction.inputQuery">
            <summary>
            Input subquery.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Linq.QueryUnderConstruction.CreateFrom(Microsoft.Azure.Cosmos.Sql.SqlCollectionExpression)">
            <summary>
            Create a FROM clause from a set of FROM parameter bindings.
            </summary>
            <returns>The created FROM clause.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Linq.QueryUnderConstruction.GetSqlQuery">
            <summary>
            Convert the entire query to a SQL Query.
            </summary>
            <returns>The corresponding SQL Query.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Linq.QueryUnderConstruction.PackageQuery(System.Collections.Generic.HashSet{System.Linq.Expressions.ParameterExpression})">
            <summary>
            Create a new QueryUnderConstruction node that take the current query as its input
            </summary>
            <param name="inScope">The current context's parameters scope</param>
            <returns>The new query node</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Linq.QueryUnderConstruction.FlattenAsPossible">
            <summary>
            Find and flatten the prefix set of queries into a single query by substituting their expressions.
            </summary>
            <returns>The query that has been flatten</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Linq.QueryUnderConstruction.Flatten">
            <summary>
            Flatten subqueries into a single query by substituting their expressions in the current query.
            </summary>
            <returns>A flattened query.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Linq.QueryUnderConstruction.ShouldBeOnNewQuery(System.String,System.Int32)">
            <summary>
            Determine if the current method call should create a new QueryUnderConstruction node or not.
            </summary>
            <param name="methodName">The current method name</param>
            <param name="argumentCount">The method's parameter count</param>
            <returns>True if the current method should be in a new query node</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Linq.QueryUnderConstruction.AddSelectClause(Microsoft.Azure.Cosmos.Sql.SqlSelectClause)">
            <summary>
            Add a Select clause to a query, without creating a new subquery
            </summary>
            <param name="select">The Select clause to add</param>
            <returns>A new query containing a select clause.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Linq.QueryUnderConstruction.AddSelectClause(Microsoft.Azure.Cosmos.Sql.SqlSelectClause,Microsoft.Azure.Cosmos.Linq.TranslationContext)">
            <summary>
            Add a Select clause to a query; may need to create a new subquery.
            </summary>
            <param name="select">Select clause to add.</param>
            <param name="context">The translation context.</param>
            <returns>A new query containing a select clause.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Linq.QueryUnderConstruction.AddWhereClause(Microsoft.Azure.Cosmos.Sql.SqlWhereClause,Microsoft.Azure.Cosmos.Linq.TranslationContext)">
            <summary>
            Add a Where clause to a query; may need to create a new query.
            </summary>
            <param name="whereClause">Clause to add.</param>
            <param name="context">The translation context.</param>
            <returns>A new query containing the specified Where clause.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Linq.QueryUnderConstruction.GetSubquery(Microsoft.Azure.Cosmos.Linq.QueryUnderConstruction)">
            <summary>
            Separate out the query branch, which makes up a subquery and is built on top of the parent query chain.
            E.g. Let the query chain at some point in time be q0 - q1 - q2. When a subquery is recognized, its expression is visited.
            Assume that adds 2 queries to the chain to q0 - q1 - q2 - q3 - q4. Invoking q4.GetSubquery(q2) would return q3 - q4
            after it's isolated from the rest of the chain.
            </summary>
            <param name="queryBeforeVisit">The last query in the chain before the collection expression is visited</param>
            <returns>The subquery that has been decoupled from the parent query chain</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Linq.QueryUnderConstruction.HasSelectAggregate">
            <summary>
            Check whether the current SELECT clause has an aggregate function
            </summary>
            <returns>true if the selectClause has an aggregate function call</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Linq.QueryUnderConstruction.ToString">
            <summary>
            Debugging string.
            </summary>
            <returns>Query representation as a string (not legal SQL).</returns>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.Linq.SqlTranslator">
            <summary>
            Wrapper class for translating LINQ to DocDB SQL.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Linq.SqlTranslator.TranslateExpression(System.Linq.Expressions.Expression,Microsoft.Azure.Cosmos.CosmosSerializationOptions)">
            <summary>
            This function exists for testing only.
            </summary>
            <param name="inputExpression">Expression to translate.</param>
            <param name="serializationOptions">Optional serializer options.</param>
            <returns>A string describing the expression translation.</returns>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.Linq.SubtreeEvaluator">
            <summary> 
            Evaluates and replaces sub-trees when first candidate is reached (top-down) 
            </summary> 
        </member>
        <member name="T:Microsoft.Azure.Cosmos.Linq.TranslationContext">
            <summary>
            Used by the Expression tree visitor.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Linq.TranslationContext.InScope">
            <summary>
            Set of parameters in scope at any point; used to generate fresh parameter names if necessary.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Linq.TranslationContext.currentQuery">
            <summary>
            Query that is being assembled.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Linq.TranslationContext.parameters">
            <summary>
            Dictionary for parameter name and value
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Linq.TranslationContext.substitutions">
            <summary>
            If the FROM clause uses a parameter name, it will be substituted for the parameter used in 
            the lambda expressions for the WHERE and SELECT clauses.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Linq.TranslationContext.methodStack">
            <summary>
            We are currently visiting these methods.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Linq.TranslationContext.lambdaParametersStack">
            <summary>
            Stack of parameters from lambdas currently in scope.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Linq.TranslationContext.collectionStack">
            <summary>
            Stack of collection-valued inputs.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Linq.TranslationContext.subqueryBindingStack">
            <summary>
            The stack of subquery binding information.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Linq.TranslationContext.PushParameter(System.Linq.Expressions.ParameterExpression,System.Boolean)">
            <summary>
            Called when visiting a lambda with one parameter.
            Binds this parameter with the last collection visited.
            </summary>
            <param name="parameter">New parameter.</param>
            <param name="shouldBeOnNewQuery">Indicate if the parameter should be in a new QueryUnderConstruction clause</param>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Linq.TranslationContext.PopParameter">
            <summary>
            Remove a parameter from the stack.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Linq.TranslationContext.PushMethod(System.Linq.Expressions.MethodCallExpression)">
            <summary>
            Called when visiting a new MethodCall.
            </summary>
            <param name="method">Method that is being visited.</param>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Linq.TranslationContext.PopMethod">
            <summary>
            Called when finished visiting a MethodCall.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Linq.TranslationContext.PeekMethod">
            <summary>
            Return the top method in the method stack
            This is used only to determine the parameter name that the user provides in the lamda expression
            for readability purpose.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Linq.TranslationContext.PushCollection(Microsoft.Azure.Cosmos.Linq.Collection)">
            <summary>
            Called when visiting a LINQ Method call with the input collection of the method.
            </summary>
            <param name="collection">Collection that is the input to a LINQ method.</param>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Linq.TranslationContext.SetInputParameter(System.Type,System.String)">
            <summary>
            Sets the parameter used to scan the input.
            </summary>
            <param name="type">Type of the input parameter.</param>
            <param name="name">Suggested name for the input parameter.</param>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Linq.TranslationContext.SetFromParameter(System.Linq.Expressions.ParameterExpression,Microsoft.Azure.Cosmos.Sql.SqlCollection)">
            <summary>
            Sets the parameter used by the this.fromClause if it is not already set.
            </summary>
            <param name="parameter">Parameter to set for the FROM clause.</param>
            <param name="collection">Collection to bind parameter to.</param>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Linq.TranslationContext.IsInMainBranchSelect">
            <summary>
            Gets whether the context is currently in a Select method at top level or not.
            Used to determine if a paramter should be an input parameter.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Linq.TranslationContext.PackageCurrentQueryIfNeccessary">
            <summary>
            Create a new QueryUnderConstruction node if indicated as neccesary by the subquery binding 
            </summary>
            <returns>The current QueryUnderConstruction after the package query call if necessary</returns>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.Linq.TranslationContext.SubqueryBinding.ShouldBeOnNewQuery">
            <summary>
            Indicates if the current query should be on a new QueryUnderConstruction
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.Linq.TranslationContext.SubqueryBinding.NewBindings">
            <summary>
            Indicates the new bindings that are introduced when visiting the subquery
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Linq.TranslationContext.SubqueryBinding.TakeBindings">
            <summary>
            Consume all the bindings
            </summary>
            <returns>All the current bindings</returns>
            <remarks>The binding list is reset after this operation.</remarks>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.Linq.ParameterSubstitution">
            <summary>
            Maintains a map from parameters to expressions.
            </summary>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.Linq.FromParameterBindings">
            <summary>
            Bindings for a set of parameters used in a FROM expression.
            Each parameter is bound to a collection.
            </summary>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.Linq.FromParameterBindings.Binding">
            <summary>
            Binding for a single parameter.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Linq.FromParameterBindings.Binding.Parameter">
            <summary>
            Parameter defined by FROM clause
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Linq.FromParameterBindings.Binding.ParameterDefinition">
            <summary>
            How parameter is defined (may be null).  
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Linq.FromParameterBindings.Binding.IsInCollection">
            <summary>
            If true this corresponds to the clause `Parameter IN ParameterDefinition'
            else this corresponds to the clause `ParameterDefinition Parameter'
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Linq.FromParameterBindings.Binding.IsInputParameter">
            <summary>
            True if a binding should be an input paramter for the next transformation. 
            E.g. in Select(f -> f.Children).Select(), if the lambda's translation is
            a subquery SELECT VALUE ARRAY() with alias v0 then v0 should be the input of the second Select.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Linq.FromParameterBindings.ParameterDefinitions">
            <summary>
            The list of parameter definitions.  This will generate a FROM clause of the shape:
            FROM ParameterDefinitions[0] JOIN ParameterDefinitions[1] ... ParameterDefinitions[n]
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Linq.FromParameterBindings.#ctor">
            <summary>
            Create empty parameter bindings.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Linq.FromParameterBindings.SetInputParameter(System.Type,System.String,System.Collections.Generic.HashSet{System.Linq.Expressions.ParameterExpression})">
            <summary>
            Sets the parameter which iterates over the outer collection.
            </summary> 
            <param name="parameterType">Parameter type.</param>
            <param name="parameterName">Hint for name.</param>
            <param name="inScope">List of parameter names currently in scope.</param>
            <returns>The name of the parameter which iterates over the outer collection.  
            If the name is already set it will return the existing name.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Linq.FromParameterBindings.GetInputParameter">
            <summary>
            Get the input parameter.
            </summary>
            <returns>The input parameter.</returns>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.Linq.Collection">
            <summary>
            There are two types of collections: outer and inner.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Linq.Collection.#ctor(System.String)">
            <summary>
            Creates an outer collection.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Linq.TypeSystem.IsAnonymousType(System.Type)">
            <summary>
            True if type is anonymous.
            </summary>
            <param name="type">Type to check.</param>
            <returns>Trye if the type is anonymous.</returns>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.Linq.UserDefinedFunctionProvider">
            <summary>
            Helper class to invoke User Defined Functions via Linq queries in the Azure Cosmos DB service.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Linq.UserDefinedFunctionProvider.Invoke(System.String,System.Object[])">
            <summary>
            Helper method to invoke User Defined Functions via Linq queries in the Azure Cosmos DB service.
            </summary>
            <param name="udfName">the UserDefinedFunction name</param>
            <param name="arguments">the arguments of the UserDefinedFunction</param>
            <remarks>
            This is a stub helper method for use within LINQ expressions. Cannot be called directly. 
            Refer to http://azure.microsoft.com/documentation/articles/documentdb-sql-query/#linq-to-documentdb-sql for more details about the LINQ provider.
            Refer to http://azure.microsoft.com/documentation/articles/documentdb-sql-query/#javascript-integration for more details about user defined functions.
            </remarks>
            <example> 
            <code language="c#">
            <![CDATA[
             await client.CreateUserDefinedFunctionAsync(collectionLink, new UserDefinedFunction { Id = "calculateTax", Body = @"function(amt) { return amt * 0.05; }" });
             var queryable = client.CreateDocumentQuery<Book>(collectionLink).Select(b => UserDefinedFunctionProvider.Invoke("calculateTax", b.Price));
             
            // Equivalent to SELECT * FROM books b WHERE udf.toLowerCase(b.title) = 'war and peace'" 
            await client.CreateUserDefinedFunctionAsync(collectionLink, new UserDefinedFunction { Id = "toLowerCase", Body = @"function(s) { return s.ToLowerCase(); }" });
            queryable = client.CreateDocumentQuery<Book>(collectionLink).Where(b => UserDefinedFunctionProvider.Invoke("toLowerCase", b.Title) == "war and peace");
            ]]>
            </code>
            </example>
            <seealso cref="T:Microsoft.Azure.Cosmos.Scripts.UserDefinedFunctionProperties"/>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Linq.Utilities.SqlQuoteString(System.String)">
            <summary>
            Add quotation signs to a string.
            </summary>
            <param name="toQuote">String to quote.</param>
            <returns>A string properly quoted for embedding into SQL.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Linq.Utilities.GetLambda(System.Linq.Expressions.Expression)">
            <summary>
            Get a lambda expression; may unpeel quotes.
            </summary> 
            <param name="expr">Expression to convert to a lambda.</param>
            <returns>The contained lambda expression, or an exception.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Linq.Utilities.NewParameter(System.String,System.Type,System.Collections.Generic.HashSet{System.Linq.Expressions.ParameterExpression})">
            <summary>
            Generate a new parameter and add it to the current scope.
            </summary>
            <param name="prefix">Prefix for the parameter name.</param>
            <param name="type">Parameter type.</param>
            <param name="inScope">Names to avoid.</param>
            <returns>The new parameter.</returns>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.Linq.IDocumentQuery">
            <summary>
            Provides methods to support query pagination and asynchronous execution in the Azure Cosmos DB service.
            </summary> 
            <remarks>
            Untyped interface with no methods.
            </remarks>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.Linq.IDocumentQuery`1">
            <summary>
            Provides methods to support query pagination and asynchronous execution in the Azure Cosmos DB service.
            </summary>
            <typeparam name="T">Source Query Type</typeparam>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.Linq.IDocumentQuery`1.HasMoreResults">
            <summary>
            Gets a value indicating whether there are potentially additional results that can be 
            returned from the query in the Azure Cosmos DB service.
            </summary>
            <value>Boolean value representing if there are potentially additional results that can be 
            returned from the query.</value>
            <remarks>Initially returns true. This value is set based on whether the last execution returned a continuation token.</remarks>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Linq.IDocumentQuery`1.ExecuteNextAsync``1(System.Threading.CancellationToken)">
            <summary>
            Executes the query and retrieves the next page of results in the Azure Cosmos DB service.
            </summary>
            <typeparam name="TResult">The type of the object returned in the query result.</typeparam>
            <param name="token">(Optional) The <see cref="T:System.Threading.CancellationToken"/> allows for notification that operations should be cancelled.</param>
            <returns>The Task object for the asynchronous response from query execution.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Linq.IDocumentQuery`1.ExecuteNextAsync(System.Threading.CancellationToken)">
            <summary>
            Executes the query and retrieves the next page of results as dynamic objects in the Azure Cosmos DB service.
            </summary>
            <param name="token">(Optional) The <see cref="T:System.Threading.CancellationToken"/> allows for notification that operations should be cancelled.</param>
            <returns>The Task object for the asynchronous response from query execution.</returns>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.MediaOptions">
            <summary> 
            Options used with attachment content (aka media) creation in the Azure Cosmos DB service.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.MediaOptions.Slug">
            <summary>
            Gets or sets the Slug header in the Azure Cosmos DB service.
            </summary>
            <value>
            The slug header.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.MediaOptions.ContentType">
            <summary>
            Gets or sets the ContentType header in the Azure Cosmos DB service.
            </summary>
            <value>
            The ContentType header
            </value>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.MediaReadMode">
            <summary> 
            Represents the mode for use with downloading attachment content (a.k.a. media) in the Azure Cosmos DB service.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.MediaReadMode.Buffered">
            <summary>
            Content is buffered at the client and not directly streamed from the content store. Use Buffered to reduce the time taken to read and write media files.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.MediaReadMode.Streamed">
            <summary>
            Content is directly streamed from the content store without any buffering at the client. Use Streamed to reduce the client memory overhead of reading and writing media files.
            </summary>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.MediaResponse">
            <summary>
            Represents the response associated with retrieving attachment content from the Azure Cosmos DB service.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.MediaResponse.#ctor">
            <summary>
            Constructor exposed for mocking purposes for the Azure Cosmos DB service.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.MediaResponse.ActivityId">
            <summary> 
            Gets or sets the Activity ID for the request in the Azure Cosmos DB service.
            </summary>
            <value>The Activity ID for the request.</value>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.MediaResponse.Media">
            <summary>
            Gets or sets the attachment content stream in the Azure Cosmos DB service.
            </summary>
            <value>The attachment content stream.</value>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.MediaResponse.Slug">
            <summary>
            Gets or sets the HTTP slug header value in the Azure Cosmos DB service.
            </summary>
            <value>The HTTP slug header value.</value>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.MediaResponse.ContentType">
            <summary>
            Gets or sets the HTTP ContentType header value in the Azure Cosmos DB service.
            </summary>
            <value>The HTTP ContentType header value.</value>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.MediaResponse.ContentLength">
            <summary>
            Gets or sets the HTTP ContentLength header value in the Azure Cosmos DB service.
            </summary>
            <value>The HTTP ContentLength header value.</value>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.MediaResponse.MaxMediaStorageUsageInMB">
            <summary>
            Gets the attachment content (media) storage quota in megabytes from the Azure Cosmos DB service.
            Retrieved from gateway.
            </summary>
            <value>The attachment content (media) storage quota in megabytes.</value>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.MediaResponse.CurrentMediaStorageUsageInMB">
            <summary>
            Gets the current attachment content (media) usage in megabytes from the Azure Cosmos DB service.
            </summary>
            <value>The current attachment content (media) usage in megabytes.</value>
            <remarks>This value is retrieved from the gateway.
            The value is returned from
            cached information updated periodically and is not guaranteed to be real time.
            </remarks>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.MediaResponse.ResponseHeaders">
            <summary>
            Gets the headers associated with the response from the Azure Cosmos DB service.
            </summary>
            <value>The headers associated with the response.</value>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.PartitionKey">
            <summary>
            Represents a partition key value in the Azure Cosmos DB service.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.PartitionKey.None">
            <summary>
            The returned object represents a partition key value that allows creating and accessing items
            without a value for partition key.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.PartitionKey.Null">
            <summary>
            The returned object represents a partition key value that allows creating and accessing items
            with a null value for the partition key.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.PartitionKey.SystemKeyName">
            <summary>
            The tag name to use in the documents for specifying a partition key value
            when inserting such documents into a migrated collection
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.PartitionKey.SystemKeyPath">
            <summary>
            The partition key path in the collection definition for migrated collections
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.PartitionKey.InternalKey">
            <summary>
            Gets the value provided at initialization.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.PartitionKey.IsNone">
            <summary>
            Gets the boolean to verify partitionKey is None.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.PartitionKey.#ctor(System.String)">
            <summary>
            Creates a new partition key value.
            </summary>
            <param name="partitionKeyValue">The value to use as partition key.</param>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.PartitionKey.#ctor(System.Boolean)">
            <summary>
            Creates a new partition key value.
            </summary>
            <param name="partitionKeyValue">The value to use as partition key.</param>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.PartitionKey.#ctor(System.Double)">
            <summary>
            Creates a new partition key value.
            </summary>
            <param name="partitionKeyValue">The value to use as partition key.</param>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.PartitionKey.#ctor(System.Object)">
            <summary>
            Creates a new partition key value.
            </summary>
            <param name="value">The value to use as partition key.</param>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.PartitionKey.#ctor(Microsoft.Azure.Documents.Routing.PartitionKeyInternal,System.Boolean)">
            <summary>
            Creates a new partition key value.
            </summary>
            <param name="partitionKeyInternal">The value to use as partition key.</param>
            <param name="isNone">The value to decide partitionKey is None.</param>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.PartitionKey.ToString">
            <summary>
            Gets the string representation of the partition key value.
            </summary>
            <returns>The string representation of the partition key value</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.PartitionKeyMismatchRetryPolicy.ShouldRetryAsync(System.Exception,System.Threading.CancellationToken)">
            <summary> 
            Should the caller retry the operation.
            </summary>
            <param name="exception">Exception that occured when the operation was tried</param>
            <param name="cancellationToken"></param>
            <returns>True indicates caller should retry, False otherwise</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.PartitionKeyMismatchRetryPolicy.ShouldRetryAsync(Microsoft.Azure.Cosmos.ResponseMessage,System.Threading.CancellationToken)">
            <summary> 
            Should the caller retry the operation.
            </summary>
            <param name="cosmosResponseMessage"><see cref="T:Microsoft.Azure.Cosmos.ResponseMessage"/> in return of the request</param>
            <param name="cancellationToken"></param>
            <returns>True indicates caller should retry, False otherwise</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.PartitionKeyMismatchRetryPolicy.OnBeforeSendRequest(Microsoft.Azure.Documents.DocumentServiceRequest)">
            <summary>
            Method that is called before a request is sent to allow the retry policy implementation
            to modify the state of the request.
            </summary>
            <param name="request">The request being sent to the service.</param>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.Collections.Generic.AsyncCollection`1">
            <summary> 
            Provides awaitable and bounding capabilities for thread-safe collections that implement IProducerConsumerCollection&lt;T&gt;.
            </summary>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.Collections.Generic.PriorityQueue`1">
            <summary> 
            An implementation of <a href="https://en.wikipedia.org/wiki/Binary_heap">Binary Heap</a>
            </summary>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.CosmosFeedResponseUtil`1">
            <summary>
            This is a helper class that is used to get the query response collection.
            Each resource type has a different property to access the array.
            During JSON deserialization any one of the properties listed will be set.
            For example Databases which will then use the base property Data to actually
            store the collection. Then the response object will use the Data property to
            access the collection. This prevents having a class for each different property.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.CosmosFeedResponseUtil`1.Data">
            <summary>
            All the properties use this to store the collection.
            </summary>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.FetchExecutionRange">
            <summary>
            Stores information about fetch execution (for cross partition queries).
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.FetchExecutionRange.#ctor(System.String,System.String,System.DateTime,System.DateTime,System.Int64,System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.Cosmos.FetchExecutionRange"/> class.
            </summary>
            <param name="activityId">The activityId of the fetch</param>
            <param name="startTime">The start time of the fetch.</param>
            <param name="endTime">The end time of the fetch.</param>
            <param name="partitionKeyRangeId">The partitionkeyrangeid from which you are fetching for.</param>
            <param name="numberOfDocuments">The number of documents that were fetched in the particular execution range.</param>
            <param name="retryCount">The number of times we retried for this fetch execution range.</param>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.FetchExecutionRange.PartitionId">
            <summary>
            Gets the partition id that was fetched from.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.FetchExecutionRange.ActivityId">
            <summary>
            Gets the activityId of the fetch.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.FetchExecutionRange.StartTime">
            <summary>
            Gets the start time of the fetch.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.FetchExecutionRange.EndTime">
            <summary>
            Gets the end time of the fetch.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.FetchExecutionRange.NumberOfDocuments">
            <summary>
            Gets the number of documents that where fetched in the particular execution range.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.FetchExecutionRange.RetryCount">
            <summary>
            Gets the number of times we retried for this fetch execution range.
            </summary>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.FetchExecutionRangeAccumulator">
            <summary>
            Accumlator that acts as a builder of FetchExecutionRanges
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.FetchExecutionRangeAccumulator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.Cosmos.FetchExecutionRangeAccumulator"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.FetchExecutionRangeAccumulator.GetExecutionRanges">
            <summary>
            Gets the FetchExecutionRanges and resets the accumulator.
            </summary>
            <returns>the SchedulingMetricsResult.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.FetchExecutionRangeAccumulator.BeginFetchRange">
            <summary>
            Updates the most recent start time internally.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.FetchExecutionRangeAccumulator.EndFetchRange(System.String,System.String,System.Int64,System.Int64)">
            <summary>
            Updates the most recent end time internally and constructs a new FetchExecutionRange
            </summary>
            <param name="partitionIdentifier">The identifier for the partition.</param>
            <param name="activityId">The activity of the fetch.</param>
            <param name="numberOfDocuments">The number of documents that were fetched for this range.</param>
            <param name="retryCount">The number of times we retried for this fetch execution range.</param>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.Number64">
            <summary>
            Struct that represents either a double or 64 bit int
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Number64.MaxValue">
            <summary>
            Maximum Number64.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Number64.MinValue">
            <summary>
            Maximum Number64.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Number64.doubleValue">
            <summary>
            The double if the value is a double.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Number64.longValue">
            <summary>
            The long if the value is a long.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Number64.op_LessThan(Microsoft.Azure.Cosmos.Number64,Microsoft.Azure.Cosmos.Number64)">
            <summary>
            Returns if one Number64 is less than another Number64.
            </summary>
            <param name="left">The left hand side of the operator.</param>
            <param name="right">The right hand side of the operator.</param>
            <returns>Whether left is less than right.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Number64.op_GreaterThan(Microsoft.Azure.Cosmos.Number64,Microsoft.Azure.Cosmos.Number64)">
            <summary>
            Returns if one Number64 is greater than another Number64.
            </summary>
            <param name="left">The left hand side of the operator.</param>
            <param name="right">The right hand side of the operator.</param>
            <returns>Whether left is greater than right.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Number64.op_LessThanOrEqual(Microsoft.Azure.Cosmos.Number64,Microsoft.Azure.Cosmos.Number64)">
            <summary>
            Returns if one Number64 is less than or equal to another Number64.
            </summary>
            <param name="left">The left hand side of the operator.</param>
            <param name="right">The right hand side of the operator.</param>
            <returns>Whether left is less than or equal to the right.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Number64.op_GreaterThanOrEqual(Microsoft.Azure.Cosmos.Number64,Microsoft.Azure.Cosmos.Number64)">
            <summary>
            Returns if one Number64 is greater than or equal to another Number64.
            </summary>
            <param name="left">The left hand side of the operator.</param>
            <param name="right">The right hand side of the operator.</param>
            <returns>Whether left is greater than or equal to the right.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Number64.op_Equality(Microsoft.Azure.Cosmos.Number64,Microsoft.Azure.Cosmos.Number64)">
            <summary>
            Returns if two Number64 are equal.
            </summary>
            <param name="left">The left hand side of the operator.</param>
            <param name="right">The right hand side of the operator.</param>
            <returns>Whether the left is equal to the right.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Number64.op_Inequality(Microsoft.Azure.Cosmos.Number64,Microsoft.Azure.Cosmos.Number64)">
            <summary>
            Returns if two Number64 are not equal.
            </summary>
            <param name="left">The left hand side of the operator.</param>
            <param name="right">The right hand side of the operator.</param>
            <returns>Whether the left is not equal to the right.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Number64.op_Implicit(System.Int64)~Microsoft.Azure.Cosmos.Number64">
            <summary>
            Implicitly converts a long to Number64.
            </summary>
            <param name="value">The long to convert.</param>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Number64.op_Implicit(System.Double)~Microsoft.Azure.Cosmos.Number64">
            <summary>
            Implicitly converts a double to Number64.
            </summary>
            <param name="value">The double to convert.</param>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Number64.CompareTo(System.Object)">
            <summary>
            Compares this value to an object.
            </summary>
            <param name="value">The value to compare to.</param>
            <returns>The comparison.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Number64.CompareTo(Microsoft.Azure.Cosmos.Number64)">
            <summary>
            Compares this Number64 to another instance of the Number64 type.
            </summary>
            <param name="other">The other instance to compare to.</param>
            <returns>
            A negative number if this instance is less than the other instance.
            Zero if they are the same.
            A positive number if this instance is greater than the other instance.
            </returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Number64.Equals(System.Object)">
            <summary>
            Returns whether this instance equals another object.
            </summary>
            <param name="obj">The object to compare to.</param>
            <returns>Whether this instance equals another object.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Number64.Equals(Microsoft.Azure.Cosmos.Number64)">
            <summary>
            Returns whether this Number64 equals another Number64.
            </summary>
            <param name="other">The Number64 to compare to.</param>
            <returns>Whether this Number64 equals another Number64.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Number64.GetHashCode">
            <summary>
            Gets a hash code for this instance.
            </summary>
            <returns>The hash code for this instance.</returns>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.Number64.DoubleEx">
            <summary>
            Represents an extended double number with 62-bit mantissa which is capable of representing a 64-bit integer with no precision loss
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.Number64.DoubleEx.DoubleValue">
            <summary>
            The double if the value is a double.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.Number64.DoubleEx.ExtraBits">
            <summary>
            The long if the value is a long.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Number64.DoubleEx.op_Equality(Microsoft.Azure.Cosmos.Number64.DoubleEx,Microsoft.Azure.Cosmos.Number64.DoubleEx)">
            <summary>
            Returns if two DoubleEx are equal.
            </summary>
            <param name="left">The left hand side of the operator.</param>
            <param name="right">The right hand side of the operator.</param>
            <returns>Whether the left is equal to the right.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Number64.DoubleEx.op_Inequality(Microsoft.Azure.Cosmos.Number64.DoubleEx,Microsoft.Azure.Cosmos.Number64.DoubleEx)">
            <summary>
            Returns if two DoubleEx are not equal.
            </summary>
            <param name="left">The left hand side of the operator.</param>
            <param name="right">The right hand side of the operator.</param>
            <returns>Whether the left is not equal to the right.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Number64.DoubleEx.op_LessThan(Microsoft.Azure.Cosmos.Number64.DoubleEx,Microsoft.Azure.Cosmos.Number64.DoubleEx)">
            <summary>
            Returns if one DoubleEx is less than another DoubleEx.
            </summary>
            <param name="left">The left hand side of the operator.</param>
            <param name="right">The right hand side of the operator.</param>
            <returns>Whether left is less than right.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Number64.DoubleEx.op_GreaterThan(Microsoft.Azure.Cosmos.Number64.DoubleEx,Microsoft.Azure.Cosmos.Number64.DoubleEx)">
            <summary>
            Returns if one DoubleEx is greater than another DoubleEx.
            </summary>
            <param name="left">The left hand side of the operator.</param>
            <param name="right">The right hand side of the operator.</param>
            <returns>Whether left is greater than right.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Number64.DoubleEx.op_LessThanOrEqual(Microsoft.Azure.Cosmos.Number64.DoubleEx,Microsoft.Azure.Cosmos.Number64.DoubleEx)">
            <summary>
            Returns if one DoubleEx is less than or equal to another DoubleEx.
            </summary>
            <param name="left">The left hand side of the operator.</param>
            <param name="right">The right hand side of the operator.</param>
            <returns>Whether left is less than or equal to the right.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Number64.DoubleEx.op_GreaterThanOrEqual(Microsoft.Azure.Cosmos.Number64.DoubleEx,Microsoft.Azure.Cosmos.Number64.DoubleEx)">
            <summary>
            Returns if one Number64 is greater than or equal to another Number64.
            </summary>
            <param name="left">The left hand side of the operator.</param>
            <param name="right">The right hand side of the operator.</param>
            <returns>Whether left is greater than or equal to the right.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Number64.DoubleEx.op_Implicit(System.Int64)~Microsoft.Azure.Cosmos.Number64.DoubleEx">
            <summary>
            Implicitly converts a long to DoubleEx.
            </summary>
            <param name="value">The int to convert.</param>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Number64.DoubleEx.op_Implicit(Microsoft.Azure.Cosmos.Number64.DoubleEx)~System.Int64">
            <summary>
            Implicitly converts a DoubleEx to long.
            </summary>
            <param name="value">The int to convert.</param>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Number64.DoubleEx.op_Implicit(System.Double)~Microsoft.Azure.Cosmos.Number64.DoubleEx">
            <summary>
            Implicitly converts a double to DoubleEx.
            </summary>
            <param name="value">The int to convert.</param>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Number64.DoubleEx.Equals(System.Object)">
            <summary>
            Returns whether this instance equals another object.
            </summary>
            <param name="obj">The object to compare to.</param>
            <returns>Whether this instance equals another object.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Number64.DoubleEx.Equals(Microsoft.Azure.Cosmos.Number64.DoubleEx)">
            <summary>
            Returns whether this DoubleEx equals another DoubleEx.
            </summary>
            <param name="other">The DoubleEx to compare to.</param>
            <returns>Whether this DoubleEx equals another DoubleEx.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Number64.DoubleEx.GetHashCode">
            <summary>
            Gets a hash code for this instance.
            </summary>
            <returns>The hash code for this instance.</returns>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.ClientSideMetrics">
            <summary>
            Stores client side QueryMetrics.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.ClientSideMetrics.#ctor(System.Int64,System.Double,System.Collections.Generic.IEnumerable{Microsoft.Azure.Cosmos.FetchExecutionRange},System.Collections.Generic.IEnumerable{System.Tuple{System.String,Microsoft.Azure.Cosmos.SchedulingTimeSpan}})">
            <summary>
            Initializes a new instance of the ClientSideMetrics class.
            </summary>
            <param name="retries">The number of retries required to execute the query.</param>
            <param name="requestCharge">The request charge incurred from executing the query.</param>
            <param name="fetchExecutionRanges">The fetch execution ranges from executing the query.</param>
            <param name="partitionSchedulingTimeSpans">The partition scheduling timespans from the query.</param>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.ClientSideMetrics.Retries">
            <summary>
            Gets number of retries in the Azure DocumentDB database service (see IRetryPolicy.cs).
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.ClientSideMetrics.RequestCharge">
            <summary>
            Gets the request charge for this continuation of the query.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.ClientSideMetrics.FetchExecutionRanges">
            <summary>
            Gets the Fetch Execution Ranges for this continuation of the query.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.ClientSideMetrics.PartitionSchedulingTimeSpans">
            <summary>
            Gets the Partition Scheduling TimeSpans for this query.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.ClientSideMetrics.CreateFromIEnumerable(System.Collections.Generic.IEnumerable{Microsoft.Azure.Cosmos.ClientSideMetrics})">
            <summary>
            Creates a new ClientSideMetrics that is the sum of all elements in an IEnumerable.
            </summary>
            <param name="clientSideMetricsList">The IEnumerable to aggregate.</param>
            <returns>A new ClientSideMetrics that is the sum of all elements in an IEnumerable.</returns>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.QueryMetrics">
            <summary>
            Query metrics in the Azure DocumentDB database service.
            This metric represents a moving average for a set of queries whose metrics have been aggregated together.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.QueryMetrics.Zero">
            <summary>
            QueryMetrics that with all members having default (but not null) members.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.QueryMetrics.#ctor(System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.TimeSpan,Microsoft.Azure.Cosmos.QueryPreparationTimes,System.TimeSpan,System.TimeSpan,System.TimeSpan,Microsoft.Azure.Cosmos.RuntimeExecutionTimes,System.TimeSpan,Microsoft.Azure.Cosmos.ClientSideMetrics)">
            <summary>
            Initializes a new instance of the QueryMetrics class.
            </summary>
            <param name="retrievedDocumentCount">Retrieved Document Count</param>
            <param name="retrievedDocumentSize">Retrieved Document Size</param>
            <param name="outputDocumentCount">Output Document Count</param>
            <param name="outputDocumentSize">Output Document Size</param>
            <param name="indexHitDocumentCount">Index Hit DocumentCount</param>
            <param name="totalQueryExecutionTime">Total Query Execution Time</param>
            <param name="queryPreparationTimes">Query Preparation Times</param>
            <param name="indexLookupTime">Time spent in physical index layer.</param>
            <param name="documentLoadTime">Time spent in loading documents.</param>
            <param name="vmExecutionTime">Time spent in VM execution.</param>
            <param name="runtimeExecutionTimes">Runtime Execution Times</param>
            <param name="documentWriteTime">Time spent writing output document</param>
            <param name="clientSideMetrics">Client Side Metrics</param>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.QueryMetrics.TotalTime">
            <summary>
            Gets the total query time in the Azure DocumentDB database service.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.QueryMetrics.RetrievedDocumentCount">
            <summary>
            Gets the number of documents retrieved during query in the Azure DocumentDB database service.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.QueryMetrics.RetrievedDocumentSize">
            <summary>
            Gets the size of documents retrieved in bytes during query in the Azure Cosmos DB service.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.QueryMetrics.OutputDocumentCount">
            <summary>
            Gets the number of documents returned by query in the Azure Cosmos DB service.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.QueryMetrics.OutputDocumentSize">
            <summary>
            Gets the size of documents outputted in bytes during query in the Azure DocumentDB database service.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.QueryMetrics.TotalQueryExecutionTime">
            <summary>
            Gets the total query time in the Azure DocumentDB database service.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.QueryMetrics.QueryPreparationTimes">
            <summary>
            Gets the query QueryPreparationTimes in the Azure DocumentDB database service.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.QueryMetrics.QueryEngineTimes">
            <summary>
            Gets the <see cref="P:Microsoft.Azure.Cosmos.QueryMetrics.QueryEngineTimes"/> instance in the Azure DocumentDB database service.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.QueryMetrics.Retries">
            <summary>
            Gets number of reties in the Azure DocumentDB database service.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.QueryMetrics.IndexLookupTime">
            <summary>
            Gets the query index lookup time in the Azure DocumentDB database service.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.QueryMetrics.DocumentLoadTime">
            <summary>
            Gets the document loading time during query in the Azure DocumentDB database service.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.QueryMetrics.RuntimeExecutionTimes">
            <summary>
            Gets the query runtime execution times during query in the Azure DocumentDB database service.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.QueryMetrics.DocumentWriteTime">
            <summary>
            Gets the output writing/serializing time during query in the Azure DocumentDB database service.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.QueryMetrics.ClientSideMetrics">
            <summary>
            Gets the <see cref="P:Microsoft.Azure.Cosmos.QueryMetrics.ClientSideMetrics"/> instance in the Azure DocumentDB database service.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.QueryMetrics.IndexHitRatio">
            <summary>
            Gets the index hit ratio by query in the Azure DocumentDB database service.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.QueryMetrics.IndexHitDocumentCount">
            <summary>
            Gets the Index Hit Document Count.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.QueryMetrics.VMExecutionTime">
            <summary>
            Gets the VMExecution Time.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.QueryMetrics.IndexUtilization">
            <summary>
            Gets the Index Utilization.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.QueryMetrics.op_Addition(Microsoft.Azure.Cosmos.QueryMetrics,Microsoft.Azure.Cosmos.QueryMetrics)">
            <summary>
            Add two specified <see cref="T:Microsoft.Azure.Cosmos.QueryMetrics"/> instances
            </summary>
            <param name="queryMetrics1">The first <see cref="T:Microsoft.Azure.Cosmos.QueryMetrics"/> instance</param>
            <param name="queryMetrics2">The second <see cref="T:Microsoft.Azure.Cosmos.QueryMetrics"/> instance</param>
            <returns>A new <see cref="T:Microsoft.Azure.Cosmos.QueryMetrics"/> instance that is the sum of two <see cref="T:Microsoft.Azure.Cosmos.QueryMetrics"/> instances</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.QueryMetrics.ToString">
            <summary>
            Gets the stringified <see cref="T:Microsoft.Azure.Cosmos.QueryMetrics"/> instance in the Azure DocumentDB database service.
            </summary>
            <returns>The stringified <see cref="T:Microsoft.Azure.Cosmos.QueryMetrics"/> instance in the Azure DocumentDB database service.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.QueryMetrics.ToDelimitedString">
            <summary>
            Gets the delimited stringified <see cref="T:Microsoft.Azure.Cosmos.QueryMetrics"/> instance in the Azure DocumentDB database service as if from a backend response.
            </summary>
            <returns>The delimited stringified <see cref="T:Microsoft.Azure.Cosmos.QueryMetrics"/> instance in the Azure DocumentDB database service as if from a backend response.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.QueryMetrics.CreateFromIEnumerable(System.Collections.Generic.IEnumerable{Microsoft.Azure.Cosmos.QueryMetrics})">
            <summary>
            Creates a new QueryMetrics that is the sum of all elements in an IEnumerable.
            </summary>
            <param name="queryMetricsList">The IEnumerable to aggregate.</param>
            <returns>A new QueryMetrics that is the sum of all elements in an IEnumerable.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.QueryMetrics.CreateFromDelimitedString(System.String)">
            <summary>
            Creates a new QueryMetrics from the backend delimited string.
            </summary>
            <param name="delimitedString">The backend delimited string to deserialize from.</param>
            <returns>A new QueryMetrics from the backend delimited string.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.QueryMetrics.CreateFromDelimitedStringAndClientSideMetrics(System.String,Microsoft.Azure.Cosmos.ClientSideMetrics)">
            <summary>
            Creates a new QueryMetrics from the backend delimited string and ClientSideMetrics.
            </summary>
            <param name="delimitedString">The backend delimited string to deserialize from.</param>
            <param name="clientSideMetrics">The additional client side metrics.</param>
            <returns>A new QueryMetrics.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.QueryMetrics.Add(Microsoft.Azure.Cosmos.QueryMetrics[])">
            <summary>
            Adds all QueryMetrics in a list along with the current instance.
            </summary>
            <param name="queryMetricsList">The list to sum up.</param>
            <returns>A new QueryMetrics instance that is the sum of the current instance and the list.</returns>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.QueryEngineTimes">
            <summary>
            Query engine time in the Azure DocumentDB database service.
            (dummy class that will be deprecated).
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.QueryEngineTimes.IndexLookupTime">
            <summary>
            Gets the query index lookup time in the Azure DocumentDB database service.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.QueryEngineTimes.DocumentLoadTime">
            <summary>
            Gets the document loading time during query in the Azure DocumentDB database service.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.QueryEngineTimes.WriteOutputTime">
            <summary>
            Gets the output writing/serializing time during query in the Azure DocumentDB database service.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.QueryEngineTimes.RuntimeExecutionTimes">
            <summary>
            Gets the query runtime execution times during query in the Azure DocumentDB database service.
            </summary>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.QueryPreparationTimes">
            <summary>
            Query preparation metrics in the Azure DocumentDB database service.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.QueryPreparationTimes.#ctor(System.TimeSpan,System.TimeSpan,System.TimeSpan,System.TimeSpan)">
            <summary>
            Initializes a new instance of the QueryPreparationTimes class.
            </summary>
            <param name="queryCompilationTime">Query compile and optimization time</param>
            <param name="logicalPlanBuildTime">Query logical plan build time</param>
            <param name="physicalPlanBuildTime">Query physical plan build time</param>
            <param name="queryOptimizationTime">Query optimization time</param>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.QueryPreparationTimes.QueryCompilationTime">
            <summary>
            Gets the query compile time in the Azure DocumentDB database service. 
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.QueryPreparationTimes.CompileTime">
            <summary>
            Gets the query compile time in the Azure DocumentDB database service. 
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.QueryPreparationTimes.LogicalPlanBuildTime">
            <summary>
            Gets the query logical plan build time in the Azure DocumentDB database service. 
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.QueryPreparationTimes.PhysicalPlanBuildTime">
            <summary>
            Gets the query physical plan build time in the Azure DocumentDB database service. 
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.QueryPreparationTimes.QueryOptimizationTime">
            <summary>
            Gets the query optimization time in the Azure DocumentDB database service. 
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.QueryPreparationTimes.CreateFromDelimitedString(System.String)">
            <summary>
            Creates a new QueryPreparationTimes from the backend delimited string.
            </summary>
            <param name="delimitedString">The backend delimited string to deserialize from.</param>
            <returns>A new QueryPreparationTimes from the backend delimited string.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.QueryPreparationTimes.CreateFromIEnumerable(System.Collections.Generic.IEnumerable{Microsoft.Azure.Cosmos.QueryPreparationTimes})">
            <summary>
            Creates a new QueryPreparationTimes that is the sum of all elements in an IEnumerable.
            </summary>
            <param name="queryPreparationTimesList">The IEnumerable to aggregate.</param>
            <returns>A new QueryPreparationTimes that is the sum of all elements in an IEnumerable.</returns>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.RuntimeExecutionTimes">
            <summary>
            Query runtime execution times in the Azure Cosmos DB service.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.RuntimeExecutionTimes.#ctor(System.TimeSpan,System.TimeSpan,System.TimeSpan)">
            <summary>
            Initializes a new instance of the RuntimeExecutionTimes class.
            </summary>
            <param name="queryEngineExecutionTime">Query end - to - end execution time</param>
            <param name="systemFunctionExecutionTime">Total time spent executing system functions</param>
            <param name="userDefinedFunctionExecutionTime">Total time spent executing user - defined functions</param>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.RuntimeExecutionTimes.QueryEngineExecutionTime">
            <summary>
            Gets the total query runtime execution time in the Azure Cosmos DB service.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.RuntimeExecutionTimes.SystemFunctionExecutionTime">
            <summary>
            Gets the query system function execution time in the Azure Cosmos DB service.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.RuntimeExecutionTimes.UserDefinedFunctionExecutionTime">
            <summary>
            Gets the query user defined function execution time in the Azure Cosmos DB service.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.RuntimeExecutionTimes.TotalTime">
            <summary>
            Gets the total query runtime execution time in the Azure DocumentDB database service.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.RuntimeExecutionTimes.CreateFromDelimitedString(System.String)">
            <summary>
            Creates a new RuntimeExecutionTimes from the backend delimited string.
            </summary>
            <param name="delimitedString">The backend delimited string to deserialize from.</param>
            <returns>A new RuntimeExecutionTimes from the backend delimited string.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.RuntimeExecutionTimes.CreateFromIEnumerable(System.Collections.Generic.IEnumerable{Microsoft.Azure.Cosmos.RuntimeExecutionTimes})">
            <summary>
            Creates a new RuntimeExecutionTimes that is the sum of all elements in an IEnumerable.
            </summary>
            <param name="runtimeExecutionTimesList">The IEnumerable to aggregate.</param>
            <returns>A new RuntimeExecutionTimes that is the sum of all elements in an IEnumerable.</returns>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.SchedulingStopwatch">
            <summary>
            This class keeps track of scheduling metrics for a single process using a stopwatch interface.
            Internally this class is composed of Stopwatches keeping track of scheduling metrics.
            The main metrics are turnaround, response, run, and wait time.
            However this class only handles behavior; if you want the data / results, then you will have to call on the 
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.SchedulingStopwatch.turnaroundTimeStopwatch">
            <summary>
            Stopwatch used to measure turnaround time.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.SchedulingStopwatch.responseTimeStopwatch">
            <summary>
            Stopwatch used to measure response time.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.SchedulingStopwatch.runTimeStopwatch">
            <summary>
            Stopwatch used to measure runtime.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.SchedulingStopwatch.numPreemptions">
            <summary>
            Number of times the process was preempted.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.SchedulingStopwatch.responded">
            <summary>
            Whether or not the process got a response yet.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.SchedulingStopwatch.#ctor">
            <summary>
            Initializes a new instance of the SchedulingStopwatch class.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.SchedulingStopwatch.Elapsed">
            <summary>
            Gets the SchedulingMetricsTimeSpan, which is a readonly snapshot of the SchedulingMetrics.
            </summary>
            <returns>the SchedulingMetricsResult.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.SchedulingStopwatch.Ready">
            <summary>
            Tells the SchedulingStopwatch know that the process is in a state where it is ready to be worked on,
            which in turn starts the stopwatch for for response time and turnaround time.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.SchedulingStopwatch.Start">
            <summary>
            Starts or resumes the stopwatch for runtime meaning that the process in the run state for the first time
            or was preempted and now back in the run state.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.SchedulingStopwatch.Terminate">
            <summary>
            Stops all the internal stopwatches.
            This is mainly useful for marking the end of a process to get an accurate turnaround time.
            It is undefined behavior to start a stopwatch that has been terminated.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.SchedulingStopwatch.ToString">
            <summary>
            Returns a string version of this SchedulingStopwatch
            </summary>
            <returns>String version of the SchedulingStopwatch.</returns>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.SchedulingTimeSpan">
            <summary>
            This struct is the TimeSpan equivalent to Stopwatch for SchedulingStopwatch.cs.
            That is to say that SchedulingStopwatch is behavior like a stopwatch (you can start and stop the stopwatch).
            SchedulingTimeSpan is a non mutable snapshot of SchedulingMetrics 
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.SchedulingTimeSpan.turnaroundTime">
            <summary>
            The total time taken from when the process arrives to when it ended.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.SchedulingTimeSpan.responseTime">
            <summary>
            The total latency (time) taken from when the process arrived to when the CPU actually started working on it.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.SchedulingTimeSpan.runTime">
            <summary>
            The total time the process spent in the running state.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.SchedulingTimeSpan.waitTime">
            <summary>
            The total time that the process spent is on the ready or waiting state.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.SchedulingTimeSpan.numPreemptions">
            <summary>
            Number of times the process was preempted.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.SchedulingTimeSpan.#ctor(System.TimeSpan,System.TimeSpan,System.TimeSpan,System.TimeSpan,System.Int64)">
            <summary>
            Initializes a new instance of the SchedulingTimeSpan struct.
            </summary>
            <param name="turnaroundTime">The total time taken from when the process arrives to when it ended.</param>
            <param name="responseTime">The total latency (time) taken from when the process arrived to when the CPU actually started working on it.</param>
            <param name="runTime">The total time the process spent in the running state.</param>
            <param name="waitTime">The total time the process spent in the waiting state.</param>
            <param name="numPreemptions">Number of times the process was preempted.</param>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.SchedulingTimeSpan.NumPreemptions">
            <summary>
            Gets the number of preemptions (the number of times the process was moved from the running state to the ready state).
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.SchedulingTimeSpan.TurnaroundTime">
            <summary>
            Gets the total time from when the process arrived to when it ended.
            turnaround_time = end_time - arrival_time
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.SchedulingTimeSpan.ResponseTime">
            <summary>
            Gets the total latency (time) from when the process arrived to when the CPU actually started working on it.
            response_time = start_time - arrival_time
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.SchedulingTimeSpan.RunTime">
            <summary>
            Gets the total time the process spent in the running state.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.SchedulingTimeSpan.WaitTime">
            <summary>
            Gets the total time that a process was is in the ready or waiting state.
            wait_time = (end_time - arrival_time) - run_time = turnaround_time - run_time
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.SchedulingTimeSpan.GetAverageTurnaroundTime(System.Collections.Generic.IEnumerable{Microsoft.Azure.Cosmos.SchedulingTimeSpan})">
            <summary>
            Gets the average turnaround time for a list of SchedulingMetrics.
            </summary>
            <param name="schedulingTimeSpans">Metrics to get average turnaround times from.</param>
            <returns>The average turnaround time for a list of SchedulingMetrics.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.SchedulingTimeSpan.GetAverageResponseTime(System.Collections.Generic.IEnumerable{Microsoft.Azure.Cosmos.SchedulingTimeSpan})">
            <summary>
            Gets the average response time for a list of SchedulingMetrics.
            </summary>
            <param name="schedulingTimeSpans">Metrics to get average response times from.</param>
            <returns>The average response time for a list of SchedulingMetrics.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.SchedulingTimeSpan.GetAverageRunTime(System.Collections.Generic.IEnumerable{Microsoft.Azure.Cosmos.SchedulingTimeSpan})">
            <summary>
            Gets the average run time for a list of SchedulingMetrics.
            </summary>
            <param name="schedulingTimeSpans">Metrics to get average run times from.</param>
            <returns>The average run time for a list of SchedulingMetrics.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.SchedulingTimeSpan.GetThroughput(System.Collections.Generic.IEnumerable{Microsoft.Azure.Cosmos.SchedulingTimeSpan})">
            <summary>
            Get the throughput which is the number of completed processes per time unit (second).
            </summary>
            <param name="schedulingTimeSpans">The scheduling metrics you wish to use.</param>
            <returns>The throughput for a list of scheduling Metrics</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.SchedulingTimeSpan.GetCpuUtilization(System.Collections.Generic.IEnumerable{Microsoft.Azure.Cosmos.SchedulingTimeSpan})">
            <summary>
            Gets the CPU utilization (percent of time CPU is being used) for a list of SchedulingMetrics.
            </summary>
            <param name="schedulingTimeSpans">List of SchedulingMetrics to calculate the utilization from.</param>
            <returns>The CPU utilization for a list of SchedulingMetrics.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.SchedulingTimeSpan.ToString">
            <summary>
            Returns a string version of this SchedulingMetricsResult
            </summary>
            <returns>String version of the SchedulingMetricsResult.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.SchedulingTimeSpan.GetAverageTime(System.Collections.Generic.IEnumerable{Microsoft.Azure.Cosmos.SchedulingTimeSpan},System.Func{Microsoft.Azure.Cosmos.SchedulingTimeSpan,System.Int64})">
            <summary>
            Gets the average time for a list of scheduling metrics based on the property you wish to average over.
            </summary>
            <param name="schedulingTimeSpans">Metrics to get average times from.</param>
            <param name="propertySelectorCallback">Callback to use to select the desired property.</param>
            <returns>The average time for a list of scheduling metrics based on the property you wish to average over.</returns>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.TextTable">
            <summary>
            Query runtime execution times in the Azure Cosmos DB service.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.TextTable.#ctor(Microsoft.Azure.Cosmos.TextTable.Column[])">
            <summary>
            Initializes a new instance of the TextTable class.
            </summary>
            <param name="columns">The columns of the table.</param>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.SqlParameter">
            <summary>
            Represents a parameter associated with <see cref="T:Microsoft.Azure.Cosmos.SqlQuerySpec"/> in the Azure Cosmos DB service.
            </summary> 
            <remarks>
            Azure Cosmos DB SQL parameters are name-value pairs referenced in parameterized queries. 
            Unlike in relation SQL databases, they don't have types associated with them.
            </remarks>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.SqlParameter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.Cosmos.SqlParameter"/> class for the Azure Cosmos DB service.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.SqlParameter.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.Cosmos.SqlParameter"/> class with the name of the parameter for the Azure Cosmos DB service.
            </summary>
            <param name="name">The name of the parameter.</param>
            <remarks>Names of parameters must begin with '@' and be a valid SQL identifier.</remarks>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.SqlParameter.#ctor(System.String,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.Cosmos.SqlParameter"/> class with the name and value of the parameter for the Azure Cosmos DB service.
            </summary>
            <param name="name">The name of the parameter.</param>
            <param name="value">The value of the parameter.</param>
            <remarks>Names of parameters must begin with '@' and be a valid SQL identifier. The value gets serialized and passed in as JSON to the document query.</remarks>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.SqlParameter.Name">
            <summary>
            Gets or sets the name of the parameter for the Azure Cosmos DB service.
            </summary>
            <value>The name of the parameter.</value>
            <remarks>Names of parameters must begin with '@' and be a valid SQL identifier.</remarks>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.SqlParameter.Value">
            <summary>
            Gets or sets the value of the parameter for the Azure Cosmos DB service.
            </summary>
            <value>The value of the parameter.</value>
            <remarks>The value gets serialized and passed in as JSON to the document query.</remarks>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.SqlParameterCollection">
            <summary>
            Represents a collection of parameters associated with <see cref="T:Microsoft.Azure.Documents.SqlQuerySpec"/> for use in the Azure Cosmos DB service.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.SqlParameterCollection.#ctor">
            <summary>
            Initialize a new instance of the SqlParameterCollection class for the Azure Cosmos DB service.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.SqlParameterCollection.#ctor(System.Collections.Generic.IEnumerable{Microsoft.Azure.Cosmos.SqlParameter})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.Documents.SqlParameterCollection"/> class for the Azure Cosmos DB service.
            </summary>
            <param name="parameters">The collection of parameters.</param>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.SqlParameterCollection.IndexOf(Microsoft.Azure.Cosmos.SqlParameter)">
            <summary>
            Determines the index of a specific item in the Azure Cosmos DB collection.
            </summary> 
            <param name="item">The item to find.</param>
            <returns>The index value for the item.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.SqlParameterCollection.Insert(System.Int32,Microsoft.Azure.Cosmos.SqlParameter)">
            <summary>
            Inserts an item at the specified index in the Azure Cosmos DB collection.
            </summary>
            <param name="index">The location in the index array in which to start inserting elements.</param>
            <param name="item">The item to copy into the index.</param>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.SqlParameterCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the item at the specified index from the Azure Cosmos DB collection.
            </summary>
            <param name="index">The location in the index where the item will be removed from.</param>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.SqlParameterCollection.Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index in the Azure Cosmos DB collection.
            </summary>
            <param name="index">The location in the index.</param>
            <value>The element at the specified index.</value>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.SqlParameterCollection.Add(Microsoft.Azure.Cosmos.SqlParameter)">
            <summary>
            Adds an item to the Azure Cosmos DB collection.
            </summary>
            <param name="item">The item to add to the collection.</param>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.SqlParameterCollection.Clear">
            <summary>
            Removes all items from the Azure Cosmos DB collection.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.SqlParameterCollection.Contains(Microsoft.Azure.Cosmos.SqlParameter)">
            <summary>
            Determines whether the Azure Cosmos DB collection contains a specific value.
            </summary>
            <param name="item">The value to search for.</param>
            <returns>true if the collection contains a specific value; otherwise, false.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.SqlParameterCollection.CopyTo(Microsoft.Azure.Cosmos.SqlParameter[],System.Int32)">
            <summary>
            Copies the elements of the Azure Cosmos DB collection to an <see cref="T:System.Array"/>, starting at a particular <see cref="T:System.Array"/> index.</summary>
            <param name="array">The array to copy into.</param>
            <param name="arrayIndex">The location in the index array in which to start adding elements.</param>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.SqlParameterCollection.Count">
            <summary>
            Gets the number of elements contained in the Azure Cosmos DB collection.
            </summary>
            <value>The number of elements contained in the collection.</value>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.SqlParameterCollection.IsReadOnly">
            <summary>
            Gets a value indicating whether the Azure Cosmos DB collection is read-only.
            </summary>
            <value>true if the collection is read-only; otherwise, false.</value>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.SqlParameterCollection.Remove(Microsoft.Azure.Cosmos.SqlParameter)">
            <summary>
            /// Removes the first occurrence of a specific object from the Azure Cosmos DB collection.
            </summary>
            <param name="item">
            The item to remove from the collection.
            </param>
            <returns>true if the first item was removed; otherwise, false.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.SqlParameterCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the Azure Cosmos DB collection.
            </summary>
            <returns>An enumerator for the collection.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.SqlParameterCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the Azure Cosmos DB collection.
            </summary>
            <returns>An enumerator to iterate through the collection. </returns>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.SqlQuerySpec">
            <summary>
            Represents a SQL query in the Azure Cosmos DB service.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.SqlQuerySpec.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.Documents.SqlQuerySpec"/> class for the Azure Cosmos DB service.</summary>
            <remarks> 
            The default constructor initializes any fields to their default values.
            </remarks>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.SqlQuerySpec.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.Documents.SqlQuerySpec"/> class for the Azure Cosmos DB service.
            </summary>
            <param name="queryText">The text of the query.</param>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.SqlQuerySpec.#ctor(System.String,Microsoft.Azure.Cosmos.SqlParameterCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.Documents.SqlQuerySpec"/> class for the Azure Cosmos DB service.
            </summary>
            <param name="queryText">The text of the database query.</param>
            <param name="parameters">The <see cref="T:Microsoft.Azure.Documents.SqlParameterCollection"/> instance, which represents the collection of query parameters.</param>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.SqlQuerySpec.QueryText">
            <summary>
            Gets or sets the text of the Azure Cosmos DB database query.
            </summary>
            <value>The text of the database query.</value>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.SqlQuerySpec.Parameters">
            <summary>
            Gets or sets the <see cref="T:Microsoft.Azure.Documents.SqlParameterCollection"/> instance, which represents the collection of Azure Cosmos DB query parameters.
            </summary>
            <value>The <see cref="T:Microsoft.Azure.Documents.SqlParameterCollection"/> instance.</value>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.SqlQuerySpec.ShouldSerializeParameters">
            <summary>
            Returns a value that indicates whether the Azure Cosmos DB database <see cref="P:Microsoft.Azure.Cosmos.SqlQuerySpec.Parameters"/> property should be serialized.
            </summary>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.UInt192">
            <summary>
            Struct that represents a 192 bit unsigned integer
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.UInt192.MaxValue">
            <summary>
            Maximum UInt192.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.UInt192.MinValue">
            <summary>
            Maximum UInt192.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.UInt192.Length">
            <summary>
            The length of a UInt192 in bytes.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.UInt192.low">
            <summary>
            The lowest 64 bits of the UInt192.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.UInt192.mid">
            <summary>
            The middle 64 bits of the UInt192.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.UInt192.high">
            <summary>
            The highest 64 bits of the UInt192.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.UInt192.#ctor(System.UInt64,System.UInt64,System.UInt64)">
            <summary>
            Initializes a new instance of the UInt192 struct.
            </summary>
            <param name="low">The lowest 64 bits of the UInt192.</param>
            <param name="mid">The middle 64 bits of the UInt192.</param>
            <param name="high">The highest 64 bits of the UInt192.</param>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.UInt192.op_Addition(Microsoft.Azure.Cosmos.UInt192,Microsoft.Azure.Cosmos.UInt192)">
            <summary>
            Adds two instances of UInt192 together.
            </summary>
            <param name="augend">The augend.</param>
            <param name="addend">The addend.</param>
            <returns>The augend + addend.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.UInt192.op_Subtraction(Microsoft.Azure.Cosmos.UInt192,Microsoft.Azure.Cosmos.UInt192)">
            <summary>
            Takes the difference between two UInt192.
            </summary>
            <param name="minuend">The minuend.</param>
            <param name="subtrahend">The subtrahend.</param>
            <returns>minuend - subtrahend.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.UInt192.op_LessThan(Microsoft.Azure.Cosmos.UInt192,Microsoft.Azure.Cosmos.UInt192)">
            <summary>
            Returns if one UInt192 is less than another UInt192.
            </summary>
            <param name="left">The left hand side of the operator.</param>
            <param name="right">The right hand side of the operator.</param>
            <returns>Whether left is less than right.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.UInt192.op_GreaterThan(Microsoft.Azure.Cosmos.UInt192,Microsoft.Azure.Cosmos.UInt192)">
            <summary>
            Returns if one UInt192 is greater than another UInt192.
            </summary>
            <param name="left">The left hand side of the operator.</param>
            <param name="right">The right hand side of the operator.</param>
            <returns>Whether left is greater than right.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.UInt192.op_LessThanOrEqual(Microsoft.Azure.Cosmos.UInt192,Microsoft.Azure.Cosmos.UInt192)">
            <summary>
            Returns if one UInt192 is less than or equal to another UInt192.
            </summary>
            <param name="left">The left hand side of the operator.</param>
            <param name="right">The right hand side of the operator.</param>
            <returns>Whether left is less than or equal to the right.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.UInt192.op_GreaterThanOrEqual(Microsoft.Azure.Cosmos.UInt192,Microsoft.Azure.Cosmos.UInt192)">
            <summary>
            Returns if one UInt192 is greater than or equal to another UInt192.
            </summary>
            <param name="left">The left hand side of the operator.</param>
            <param name="right">The right hand side of the operator.</param>
            <returns>Whether left is greater than or equal to the right.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.UInt192.op_Equality(Microsoft.Azure.Cosmos.UInt192,Microsoft.Azure.Cosmos.UInt192)">
            <summary>
            Returns if two UInt192 are equal.
            </summary>
            <param name="left">The left hand side of the operator.</param>
            <param name="right">The right hand side of the operator.</param>
            <returns>Whether the left is equal to the right.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.UInt192.op_Inequality(Microsoft.Azure.Cosmos.UInt192,Microsoft.Azure.Cosmos.UInt192)">
            <summary>
            Returns if two UInt192 are not equal.
            </summary>
            <param name="left">The left hand side of the operator.</param>
            <param name="right">The right hand side of the operator.</param>
            <returns>Whether the left is not equal to the right.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.UInt192.op_BitwiseAnd(Microsoft.Azure.Cosmos.UInt192,Microsoft.Azure.Cosmos.UInt192)">
            <summary>
            Takes the bitwise and of two instance of UInt192.
            </summary>
            <param name="left">The left hand side of the operator.</param>
            <param name="right">The right hand side of the operator.</param>
            <returns>The bitwise and of two instance of UInt192..</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.UInt192.op_BitwiseOr(Microsoft.Azure.Cosmos.UInt192,Microsoft.Azure.Cosmos.UInt192)">
            <summary>
            Takes the bitwise or of two instance of UInt192.
            </summary>
            <param name="left">The left hand side of the operator.</param>
            <param name="right">The right hand side of the operator.</param>
            <returns>The bitwise or of two instance of UInt192..</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.UInt192.op_ExclusiveOr(Microsoft.Azure.Cosmos.UInt192,Microsoft.Azure.Cosmos.UInt192)">
            <summary>
            Takes the bitwise x or of two instance of UInt192.
            </summary>
            <param name="left">The left hand side of the operator.</param>
            <param name="right">The right hand side of the operator.</param>
            <returns>The bitwise x or of two instance of UInt192..</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.UInt192.op_Implicit(System.Int32)~Microsoft.Azure.Cosmos.UInt192">
            <summary>
            Implicitly converts an int to UInt192.
            </summary>
            <param name="value">The int to convert.</param>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.UInt192.op_Implicit(System.UInt32)~Microsoft.Azure.Cosmos.UInt192">
            <summary>
            Implicitly converts an unsigned int to UInt192.
            </summary>
            <param name="value">The unsigned int to convert.</param>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.UInt192.op_Implicit(System.UInt64)~Microsoft.Azure.Cosmos.UInt192">
            <summary>
            Implicitly converts an unsigned long to UInt192.
            </summary>
            <param name="value">The unsigned long to convert.</param>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.UInt192.op_Implicit(System.Int64)~Microsoft.Azure.Cosmos.UInt192">
            <summary>
            Implicitly converts an long to UInt192.
            </summary>
            <param name="value">The long to convert.</param>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.UInt192.op_Implicit(Microsoft.Azure.Documents.UInt128)~Microsoft.Azure.Cosmos.UInt192">
            <summary>
            Implicitly converts an UInt128 to UInt192.
            </summary>
            <param name="value">The UInt128 to convert.</param>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.UInt192.Parse(System.String)">
            <summary>
            Parses a UInt192 from its ToString() output.
            </summary>
            <param name="value">The ToString() output.</param>
            <returns>The Parsed UInt192.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.UInt192.Create(System.UInt64,System.UInt64,System.UInt64)">
            <summary>
            Creates a UInt192 from 3 ulong
            </summary>
            <param name="low">The lowest 64 bits of the ulong.</param>
            <param name="mid">The middle 64 bits of the ulong.</param>
            <param name="high">The upper 64 bits of the ulong.</param>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.UInt192.FromByteArray(System.Byte[],System.Int32)">
            <summary>
            Creates a UInt192 from a byte array.
            </summary>
            <param name="bytes">The bytes.</param>
            <param name="start">The starting index.</param>
            <returns>The UInt192 from the byte array.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.UInt192.ToByteArray(Microsoft.Azure.Cosmos.UInt192)">
            <summary>
            Converts the UInt192 to a byte array.
            </summary>
            <param name="uint192">The UInt192 to convert.</param>
            <returns>The byte array representation of this UInt192.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.UInt192.CompareTo(System.Object)">
            <summary>
            Compares this value to an object.
            </summary>
            <param name="value">The value to compare to.</param>
            <returns>The comparison.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.UInt192.CompareTo(Microsoft.Azure.Cosmos.UInt192)">
            <summary>
            Compares this UInt192 to another instance of the UInt192 type.
            </summary>
            <param name="other">The other instance to compare to.</param>
            <returns>
            A negative number if this instance is less than the other instance.
            Zero if they are the same.
            A positive number if this instance is greater than the other instance.
            </returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.UInt192.Equals(System.Object)">
            <summary>
            Returns whether this instance equals another object.
            </summary>
            <param name="obj">The object to compare to.</param>
            <returns>Whether this instance equals another object.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.UInt192.Equals(Microsoft.Azure.Cosmos.UInt192)">
            <summary>
            Returns whether this UInt192 equals another UInt192.
            </summary>
            <param name="other">The UInt192 to compare to.</param>
            <returns>Whether this UInt192 equals another UInt192.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.UInt192.GetHashCode">
            <summary>
            Gets a hash code for this instance.
            </summary>
            <returns>The hash code for this instance.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.UInt192.ToString">
            <summary>
            Gets the string representation of a UInt192 as a hex dump.
            </summary>
            <returns>The string representation of a UInt192 as a hex dump.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.UInt192.GetHigh">
            <summary>
            Gets the highest 64 bits of the UInt192.
            </summary>
            <returns>The highest 64 bits of the UInt192.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.UInt192.GetMid">
            <summary>
            Gets the middle 64 bits of the UInt192.
            </summary>
            <returns>The middle 64 bits of the UInt192.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.UInt192.GetLow">
            <summary>
            Gets the lowest 64 bits of the UInt192.
            </summary>
            <returns>The lowest 64 bits of the UInt192.</returns>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.DocumentFeedResponse`1">
            <summary>
            Represents the template class used by feed methods (enumeration operations) for the Azure Cosmos DB service.
            </summary>
            <typeparam name="T">The feed type.</typeparam>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.DocumentFeedResponse`1.#ctor">
            <summary>
            Constructor exposed for mocking purposes.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.DocumentFeedResponse`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Constructor exposed for mocking purposes.
            </summary>
            <param name="result"></param>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.DocumentFeedResponse`1.RequestStatistics">
            <summary>
            Get the client side request statistics for the current request.
            </summary>
            <remarks>
            This value is currently used for tracking replica Uris.
            </remarks>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.DocumentFeedResponse`1.ResponseLengthBytes">
            <summary>
            Gets the response length in bytes
            </summary>
            <remarks>
            This value is only set for Direct mode.
            </remarks>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.DocumentFeedResponse`1.DatabaseQuota">
            <summary>
            Gets the maximum quota for database resources within the account from the Azure Cosmos DB service. 
            </summary>
            <value>
            The maximum quota for the account.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.DocumentFeedResponse`1.DatabaseUsage">
            <summary>
            Gets the current number of database resources within the account from the Azure Cosmos DB service.
            </summary>
            <value>
            The number of databases.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.DocumentFeedResponse`1.CollectionQuota">
            <summary>
            Gets the maximum quota for collection resources within an account from the Azure Cosmos DB service.
            </summary>
            <value>
            The maximum quota for the account.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.DocumentFeedResponse`1.CollectionUsage">
            <summary>
            Gets the current number of collection resources within the account from the Azure Cosmos DB service.
            </summary>
            <value>
            The number of collections.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.DocumentFeedResponse`1.UserQuota">
            <summary>
            Gets the maximum quota for user resources within an account from the Azure Cosmos DB service.
            </summary>
            <value>
            The maximum quota for the account.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.DocumentFeedResponse`1.UserUsage">
            <summary>
            Gets the current number of user resources within the account from the Azure Cosmos DB service.
            </summary>
            <value>
            The number of users.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.DocumentFeedResponse`1.PermissionQuota">
            <summary>
            Gets the maximum quota for permission resources within an account from the Azure Cosmos DB service.
            </summary>
            <value>
            The maximum quota for the account.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.DocumentFeedResponse`1.PermissionUsage">
            <summary>
            Gets the current number of permission resources within the account from the Azure Cosmos DB service. 
            </summary>
            <value>
            The number of permissions.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.DocumentFeedResponse`1.CollectionSizeQuota">
            <summary>
            Gets the maximum size of a collection in kilobytes from the Azure Cosmos DB service.
            </summary>
            <value>
            Quota in kilobytes.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.DocumentFeedResponse`1.CollectionSizeUsage">
            <summary>
            Gets the current size of a collection in kilobytes from the Azure Cosmos DB service. 
            </summary>
            <vallue>
            Current collection size in kilobytes.
            </vallue>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.DocumentFeedResponse`1.StoredProceduresQuota">
            <summary>
            Gets the maximum quota of stored procedures for a collection from the Azure Cosmos DB service.
            </summary>
            <value>
            The maximum quota.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.DocumentFeedResponse`1.StoredProceduresUsage">
            <summary>
            Gets the current number of stored procedures for a collection from the Azure Cosmos DB service.
            </summary>
            <value>
            Current number of stored procedures.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.DocumentFeedResponse`1.TriggersQuota">
            <summary>
            Gets the maximum quota of triggers for a collection from the Azure Cosmos DB service. 
            </summary>
            <value>
            The maximum quota.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.DocumentFeedResponse`1.TriggersUsage">
            <summary>
            Get the current number of triggers for a collection from the Azure Cosmos DB service.
            </summary>
            <value>
            Current number of triggers.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.DocumentFeedResponse`1.UserDefinedFunctionsQuota">
            <summary>
            Gets the maximum quota of user defined functions for a collection from the Azure Cosmos DB service. 
            </summary>
            <value>
            Maximum quota.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.DocumentFeedResponse`1.UserDefinedFunctionsUsage">
            <summary>
            Gets the current number of user defined functions for a collection from the Azure Cosmos DB service.
            </summary>
            <value>
            Current number of user defined functions.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.DocumentFeedResponse`1.Count">
            <summary>
            Gets the number of items returned in the response from the Azure Cosmos DB service.
            </summary>
            <value>
            Count of items in the response.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.DocumentFeedResponse`1.MaxResourceQuota">
            <summary>
            Gets the maximum size limit for this entity from the Azure Cosmos DB service.
            </summary>
            <value>
            The maximum size limit for this entity. Measured in kilobytes for document resources 
            and in counts for other resources.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.DocumentFeedResponse`1.CurrentResourceQuotaUsage">
            <summary>
            Gets the current size of this entity from the Azure Cosmos DB service.
            </summary>
            <value>
            The current size for this entity. Measured in kilobytes for document resources 
            and in counts for other resources.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.DocumentFeedResponse`1.RequestCharge">
            <summary>
            Gets the request charge for this request from the Azure Cosmos DB service.
            </summary>
            <value>
            The request charge measured in reqest units.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.DocumentFeedResponse`1.ActivityId">
            <summary>
            Gets the activity ID for the request from the Azure Cosmos DB service.
            </summary>
            <value>
            The activity ID for the request.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.DocumentFeedResponse`1.ResponseContinuation">
            <summary>
            Gets the continuation token to be used for continuing enumeration of the Azure Cosmos DB service.
            </summary>
            <value>
            The continuation token to be used for continuing enumeration.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.DocumentFeedResponse`1.SessionToken">
            <summary>
            Gets the session token for use in sesssion consistency reads from the Azure Cosmos DB service.
            </summary>
            <value>
            The session token for use in session consistency.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.DocumentFeedResponse`1.ContentLocation">
            <summary>
            Gets the content parent location, for example, dbs/foo/colls/bar, from the Azure Cosmos DB service.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.DocumentFeedResponse`1.ETag">
            <summary>
            Gets the entity tag associated with last transaction in the Azure Cosmos DB service,
            which can be used as If-Non-Match Access condition for ReadFeed REST request or 
            ContinuationToken property of <see cref="T:Microsoft.Azure.Cosmos.ChangeFeedOptions"/> parameter for
            <see cref="M:Microsoft.Azure.Cosmos.DocumentClient.CreateDocumentChangeFeedQuery(System.String,Microsoft.Azure.Cosmos.ChangeFeedOptions)"/> 
            to get feed changes since the transaction specified by this entity tag.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.DocumentFeedResponse`1.ResponseHeaders">
            <summary>
            Gets the response headers from the Azure Cosmos DB service.
            </summary>
            <value>
            The response headers.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.DocumentFeedResponse`1.QueryMetrics">
            <summary>
            Get <see cref="T:Microsoft.Azure.Cosmos.QueryMetrics"/> for each individual partition in the Azure Cosmos DB service
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.DocumentFeedResponse`1.InternalResponseContinuation">
            <summary>
            Gets the continuation token to be used for continuing enumeration of the Azure Cosmos DB service.
            </summary>
            <value>
            The continuation token to be used for continuing enumeration.
            </value>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.DocumentFeedResponse`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection from the Azure Cosmos DB service.
            </summary>
            <returns>An IEnumerator object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.IDocumentFeedResponse`1">
            <summary>
            Captures APIs for responses associated with feed methods (enumeration operations) in the Azure Cosmos DB service.
            Interface exposed for mocking purposes.
            </summary>
            <typeparam name="T">The feed type.</typeparam>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.IDocumentFeedResponse`1.DatabaseQuota">
            <summary>
            Gets the maximum quota for database resources within the Azure Cosmos DB database account. 
            </summary>
            <value>
            The maximum quota for the account.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.IDocumentFeedResponse`1.DatabaseUsage">
            <summary>
            The current number of database resources within the Azure Cosmos DB database account.
            </summary>
            <value>
            The number of databases.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.IDocumentFeedResponse`1.CollectionQuota">
            <summary>
            Gets the maximum quota for collection resources within the Azure Cosmos DB database account.
            </summary>
            <value>
            The maximum quota for the account.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.IDocumentFeedResponse`1.CollectionUsage">
            <summary>
            The current number of collection resources within the Azure Cosmos DB database account.
            </summary>
            <value>
            The number of collections.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.IDocumentFeedResponse`1.UserQuota">
            <summary>
            Gets the maximum quota for user resources within the Azure Cosmos DB database account.
            </summary>
            <value>
            The maximum quota for the account.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.IDocumentFeedResponse`1.UserUsage">
            <summary>
            The current number of user resources within the Azure Cosmos DB database account.
            </summary>
            <value>
            The number of users.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.IDocumentFeedResponse`1.PermissionQuota">
            <summary>
            Gets the maximum quota for permission resources within the Azure Cosmos DB database account.
            </summary>
            <value>
            The maximum quota for the account.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.IDocumentFeedResponse`1.PermissionUsage">
            <summary>
            The current number of permission resources within the Azure Cosmos DB database account. 
            </summary>
            <value>
            The number of permissions.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.IDocumentFeedResponse`1.CollectionSizeQuota">
            <summary>
            Maximum size of a collection in the Azure Cosmos DB database in kilobytes.
            </summary>
            <value>
            Quota in kilobytes.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.IDocumentFeedResponse`1.CollectionSizeUsage">
            <summary>
            Current size of a collection in the Azure Cosmos DB database in kilobytes. 
            </summary>
            <vallue>
            Current collection size in kilobytes.
            </vallue>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.IDocumentFeedResponse`1.StoredProceduresQuota">
            <summary>
            Gets the maximum quota of stored procedures for a collection in the Azure Cosmos DB service.
            </summary>
            <value>
            The maximum quota.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.IDocumentFeedResponse`1.StoredProceduresUsage">
            <summary>
            The current number of stored procedures for a collection in the Azure Cosmos DB service.
            </summary>
            <value>
            Current number of stored procedures.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.IDocumentFeedResponse`1.TriggersQuota">
            <summary>
            Gets the maximum quota of triggers for a collection in the Azure Cosmos DB service. 
            </summary>
            <value>
            The maximum quota.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.IDocumentFeedResponse`1.TriggersUsage">
            <summary>
            The current number of triggers for a collection in the Azure Cosmos DB service.
            </summary>
            <value>
            Current number of triggers.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.IDocumentFeedResponse`1.UserDefinedFunctionsQuota">
            <summary>
            Gets the maximum quota of user defined functions for a collection in the Azure Cosmos DB service. 
            </summary>
            <value>
            Maximum quota.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.IDocumentFeedResponse`1.UserDefinedFunctionsUsage">
            <summary>
            The current number of user defined functions for a collection in the Azure Cosmos DB service.
            </summary>
            <value>
            Current number of user defined functions.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.IDocumentFeedResponse`1.Count">
            <summary>
            Gets the number of items returned in the response associated with the feed operations for the Azure Cosmos DB service.
            </summary>
            <value>
            Count of items in the response.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.IDocumentFeedResponse`1.MaxResourceQuota">
            <summary>
            Gets the maximum size limit for this entity in the Azure Cosmos DB service.
            </summary>
            <value>
            The maximum size limit for this entity. Measured in kilobytes for document resources 
            and in counts for other resources.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.IDocumentFeedResponse`1.CurrentResourceQuotaUsage">
            <summary>
            Gets the current size of this entity in the Azure Cosmos DB service.
            </summary>
            <value>
            The current size for this entity. Measured in kilobytes for document resources 
            and in counts for other resources.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.IDocumentFeedResponse`1.RequestCharge">
            <summary>
            Gets the request charge for the Azure Cosmos DB database account for this request
            </summary>
            <value>
            The request charge measured in reqest units.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.IDocumentFeedResponse`1.ActivityId">
            <summary>
            Gets the activity ID for the request in the Azure Cosmos DB service.
            </summary>
            <value>
            The activity ID for the request.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.IDocumentFeedResponse`1.ResponseContinuation">
            <summary>
            Gets the continuation token to be used for continuing enumeration in the Azure Cosmos DB service.
            </summary>
            <value>
            The continuation token to be used for continuing enumeration.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.IDocumentFeedResponse`1.SessionToken">
            <summary>
            Gets the session token for use in sesssion consistency reads in the Azure Cosmos DB service.
            </summary>
            <value>
            The session token for use in session consistency.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.IDocumentFeedResponse`1.ContentLocation">
            <summary>
            The content parent location in the Azure Cosmos DB database, for example, dbs/foo/colls/bar
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.IDocumentFeedResponse`1.ResponseHeaders">
            <summary>
            Gets the response headers.
            </summary>
            <value>
            The response headers.
            </value>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.IDocumentFeedResponse`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection in the Azure Cosmos DB service.
            </summary>
            <returns>An IEnumerator object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.PartitionKeyRangeGoneRetryPolicy.ShouldRetryAsync(System.Exception,System.Threading.CancellationToken)">
            <summary> 
            Should the caller retry the operation.
            </summary>
            <param name="exception">Exception that occured when the operation was tried</param>
            <param name="cancellationToken"></param>
            <returns>True indicates caller should retry, False otherwise</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.PartitionKeyRangeGoneRetryPolicy.ShouldRetryAsync(Microsoft.Azure.Cosmos.ResponseMessage,System.Threading.CancellationToken)">
            <summary> 
            Should the caller retry the operation.
            </summary>
            <param name="cosmosResponseMessage"><see cref="T:Microsoft.Azure.Cosmos.ResponseMessage"/> in return of the request</param>
            <param name="cancellationToken"></param>
            <returns>True indicates caller should retry, False otherwise</returns>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.FeedIterator">
            <summary>
            Cosmos Result set iterator that keeps track of the continuation token when retrieving results form a query.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.FeedIterator.HasMoreResults">
            <summary>
            Tells if there is more results that need to be retrieved from the service
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.FeedIterator.ReadNextAsync(System.Threading.CancellationToken)">
            <summary>
            Get the next set of results from the cosmos service
            </summary>
            <param name="cancellationToken">(Optional) <see cref="T:System.Threading.CancellationToken"/> representing request cancellation.</param>
            <returns>A query response from cosmos service</returns>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.FeedIteratorCore">
            <summary>
            Cosmos feed stream iterator. This is used to get the query responses with a Stream content
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.FeedIteratorCore.requestOptions">
            <summary>
            The query options for the result set
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.FeedIteratorCore.continuationToken">
            <summary>
            The Continuation Token
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.FeedIteratorCore.ReadNextAsync(System.Threading.CancellationToken)">
            <summary>
            Get the next set of results from the cosmos service
            </summary>
            <param name="cancellationToken">(Optional) <see cref="T:System.Threading.CancellationToken"/> representing request cancellation.</param>
            <returns>A query response from cosmos service</returns>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.FeedIteratorCore`1">
            <summary>
            Cosmos feed iterator that keeps track of the continuation token when retrieving results form a query.
            </summary>
            <typeparam name="T">The response object type that can be deserialized</typeparam>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.FeedIteratorCore`1.ReadNextAsync(System.Threading.CancellationToken)">
            <summary>
            Get the next set of results from the cosmos service
            </summary>
            <param name="cancellationToken">(Optional) <see cref="T:System.Threading.CancellationToken"/> representing request cancellation.</param>
            <returns>A query response from cosmos service</returns>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.FeedIterator`1">
            <summary>
            Cosmos Result set iterator that keeps track of the continuation token when retrieving results form a query.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.FeedIterator`1.HasMoreResults">
            <summary>
            Tells if there is more results that need to be retrieved from the service
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.FeedIterator`1.ReadNextAsync(System.Threading.CancellationToken)">
            <summary>
            Get the next set of results from the cosmos service
            </summary>
            <param name="cancellationToken">(Optional) <see cref="T:System.Threading.CancellationToken"/> representing request cancellation.</param>
            <returns>A query response from cosmos service</returns>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.FeedResponse`1">
            <summary>
            The user contract for the various feed responses that serialized the responses to a type.
            To follow the .NET standard for typed responses any exceptions should be thrown to the user.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.FeedResponse`1.#ctor">
            <summary>
            Create an empty cosmos feed response for mock testing
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.FeedResponse`1.RequestCharge">
            <inheritdoc/>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.FeedResponse`1.ActivityId">
            <inheritdoc/>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.FeedResponse`1.ETag">
            <inheritdoc/>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.FeedResponse`1.MaxResourceQuota">
            <inheritdoc/>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.FeedResponse`1.CurrentResourceQuotaUsage">
            <inheritdoc/>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.FeedResponse`1.ContinuationToken">
            <summary>
            Gets the continuation token to be used for continuing enumeration of the Azure Cosmos DB service.
            </summary>
            <value>
            The continuation token to be used for continuing enumeration.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.FeedResponse`1.Count">
            <summary>
            The number of items in the stream.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.FeedResponse`1.GetEnumerator">
            <summary>
            Get an enumerator of the object
            </summary>
            <returns>An instance of an Enumerator</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.FeedResponse`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Get an enumerator of the object
            </summary>
            <returns>An instance of an Enumerator</returns>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.QueryDefinition">
            <summary>
            Defines a Cosmos SQL query
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.QueryDefinition.#ctor(System.String)">
            <summary>
            Create a <see cref="T:Microsoft.Azure.Cosmos.QueryDefinition"/>
            </summary>
            <param name="query">A valid Cosmos SQL query "Select * from test t"</param>
            <example>
            <code language="c#">
            <![CDATA[
            QueryDefinition query = new QueryDefinition(
                "select * from t where t.Account = @account")
                .WithParameter("@account", "12345");
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.QueryDefinition.QueryText">
            <summary>
            Gets the text of the Azure Cosmos DB SQL query.
            </summary>
            <value>The text of the SQL query.</value>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.QueryDefinition.WithParameter(System.String,System.Object)">
            <summary>
            Add parameters to the SQL query
            </summary>
            <param name="name">The name of the parameter.</param>
            <param name="value">The value for the parameter.</param>
            <remarks>
            If the same name is added again it will replace the original value
            </remarks>
            <example>
            <code language="c#">
            <![CDATA[
            QueryDefinition query = new QueryDefinition(
                "select * from t where t.Account = @account")
                .WithParameter("@account", "12345");
            ]]>
            </code>
            </example>
            <returns>An instance of <see cref="T:Microsoft.Azure.Cosmos.QueryDefinition"/>.</returns>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.QueryResponse">
            <summary>
            Represents the template class used by feed methods (enumeration operations) for the Azure Cosmos DB service.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.QueryResponse.#ctor">
            <summary>
            Used for unit testing only
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.QueryResponse.ResponseLengthBytes">
            <summary>
            Gets the response length in bytes
            </summary>
            <remarks>
            This value is only set for Direct mode.
            </remarks>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.QueryResponse.RequestStatistics">
            <summary>
            Get the client side request statistics for the current request.
            </summary>
            <remarks>
            This value is currently used for tracking replica Uris.
            </remarks>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.QueryResponse`1">
            <summary>
            The cosmos query response
            </summary>
            <typeparam name="T">The type for the query response.</typeparam>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.ReadFeedKeyType">
            <summary>
            Type of Start and End key for ReadFeedKey
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.ReadFeedKeyType.ResourceId">
            <summary>
             Use ResourceName
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.ReadFeedKeyType.EffectivePartitionKey">
            <summary>
            Use EffectivePartitionKey
            </summary>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.Regions">
            <summary>
            The LocationNames class contains the names of Azure regions that
            are currently supported by the Azure Cosmos DB service.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Regions.WestUS">
            <summary>
            Name of the Azure West US region in the Azure Cosmos DB service.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Regions.WestUS2">
            <summary>
            Name of the Azure West US 2 region in the Azure Cosmos DB service.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Regions.WestCentralUS">
            <summary>
            Name of the Azure West Central US region in the Azure Cosmos DB service.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Regions.EastUS">
            <summary>
            Name of the Azure East US region in the Azure Cosmos DB service.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Regions.EastUS2">
            <summary>
            Name of the Azure East US 2 region in the Azure Cosmos DB service.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Regions.CentralUS">
            <summary>
            Name of the Azure Central US region in the Azure Cosmos DB service.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Regions.SouthCentralUS">
            <summary>
            Name of the Azure Sourth Central US region in the Azure Cosmos DB service.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Regions.NorthCentralUS">
            <summary>
            Name of the Azure North Central US region in the Azure Cosmos DB service.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Regions.WestEurope">
            <summary>
            Name of the Azure West Europe region in the Azure Cosmos DB service.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Regions.NorthEurope">
            <summary>
            Name of the Azure North Europe region in the Azure Cosmos DB service.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Regions.EastAsia">
            <summary>
            Name of the Azure East Asia region in the Azure Cosmos DB service.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Regions.SoutheastAsia">
            <summary>
            Name of the Azure Southeast Asia region in the Azure Cosmos DB service.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Regions.JapanEast">
            <summary>
            Name of the Azure Japan East region in the Azure Cosmos DB service.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Regions.JapanWest">
            <summary>
            Name of the Azure Japan West region in the Azure Cosmos DB service.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Regions.AustraliaEast">
            <summary>
            Name of the Azure Australia East region in the Azure Cosmos DB service.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Regions.AustraliaSoutheast">
            <summary>
            Name of the Azure Australia Southeast region in the Azure Cosmos DB service.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Regions.CentralIndia">
            <summary>
            Name of the Azure Central India region in the Azure Cosmos DB service.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Regions.SouthIndia">
            <summary>
            Name of the Azure South India region in the Azure Cosmos DB service.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Regions.WestIndia">
            <summary>
            Name of the Azure West India region in the Azure Cosmos DB service.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Regions.CanadaEast">
            <summary>
            Name of the Azure Canada East region in the Azure Cosmos DB service.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Regions.CanadaCentral">
            <summary>
            Name of the Azure Canada Central region in the Azure Cosmos DB service.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Regions.GermanyCentral">
            <summary>
            Name of the Azure Germany Central region in the Azure Cosmos DB service.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Regions.GermanyNortheast">
            <summary>
            Name of the Azure Germany Northeast region in the Azure Cosmos DB service.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Regions.ChinaNorth">
            <summary>
            Name of the Azure China North region in the Azure Cosmos DB service.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Regions.ChinaEast">
            <summary>
            Name of the Azure China East region in the Azure Cosmos DB service.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Regions.ChinaNorth2">
            <summary>
            Name of the Azure China North 2 region in the Azure Cosmos DB service.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Regions.ChinaEast2">
            <summary>
            Name of the Azure China East 2 region in the Azure Cosmos DB service.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Regions.KoreaSouth">
            <summary>
            Name of the Azure Korea South region in the Azure Cosmos DB service.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Regions.KoreaCentral">
            <summary>
            Name of the Azure Korea Central region in the Azure Cosmos DB service.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Regions.UKWest">
            <summary>
            Name of the Azure UK West region in the Azure Cosmos DB service.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Regions.UKSouth">
            <summary>
            Name of the Azure UK South region in the Azure Cosmos DB service.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Regions.BrazilSouth">
            <summary>
            Name of the Azure Brazil South region in the Azure Cosmos DB service.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Regions.USGovArizona">
            <summary>
            Name of the Azure USGov Arizona region in the Azure Cosmos DB service.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Regions.USGovTexas">
            <summary>
            Name of the Azure USGov Texas region in the Azure Cosmos DB service.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Regions.USGovVirginia">
            <summary>
            Name of the Azure USGov Virginia region in the Azure Cosmos DB service.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Regions.EastUS2EUAP">
            <summary>
            Name of the Azure East US 2 EUAP region in the Azure Cosmos DB service.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Regions.CentralUSEUAP">
            <summary>
            Name of the Azure Central US EUAP region in the Azure Cosmos DB service.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Regions.FranceCentral">
            <summary>
            Name of the Azure France Central region in the Azure Cosmos DB service.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Regions.FranceSouth">
            <summary>
            Name of the Azure France South region in the Azure Cosmos DB service.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Regions.USDoDCentral">
            <summary>
            Name of the Azure DoD Central region in the Azure Cosmos DB service.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Regions.USDoDEast">
            <summary>
            Name of the Azure DoD East region in the Azure Cosmos DB service.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Regions.AustraliaCentral">
            <summary>
            Name of the Azure Australia Central region in the Azure Cosmos DB service.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Regions.AustraliaCentral2">
            <summary>
            Name of the Azure Australia Central 2 region in the Azure Cosmos DB service.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Regions.SouthAfricaNorth">
            <summary>
            Name of the Azure South Africa North region in the Azure Cosmos DB service.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Regions.SouthAfricaWest">
            <summary>
            Name of the Azure South Africa West region in the Azure Cosmos DB service.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Regions.UAECentral">
            <summary>
            Name of the Azure UAE Central region in the Azure Cosmos DB service.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Regions.UAENorth">
            <summary>
            Name of the Azure UAE North region in the Azure Cosmos DB service.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Regions.USNatEast">
            <summary>
            Name of the Azure USNat East region in the Azure Cosmos DB service.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Regions.USNatWest">
            <summary>
            Name of the Azure USNat West region in the Azure Cosmos DB service.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Regions.USSecEast">
            <summary>
            Name of the Azure USSec East region in the Azure Cosmos DB service.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Regions.USSecWest">
            <summary>
            Name of the Azure USNat West region in the Azure Cosmos DB service.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Regions.SwitzerlandNorth">
            <summary>
            Name of the Azure Switzerland North region in the Azure Cosmos DB service.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Regions.SwitzerlandWest">
            <summary>
            Name of the Azure Switzerland West region in the Azure Cosmos DB service.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Regions.GermanyNorth">
            <summary>
            Name of the Azure Germany North region in the Azure Cosmos DB service.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Regions.GermanyWestCentral">
            <summary>
            Name of the Azure Germany West Central region in the Azure Cosmos DB service.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Regions.NorwayEast">
            <summary>
            Name of the Azure Norway East region in the Azure Cosmos DB service.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Regions.NorwayWest">
            <summary>
            Name of the Azure Norway West region in the Azure Cosmos DB service.
            </summary>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.RenameCollectionAwareClientRetryPolicy">
            <summary>
            This retry policy is designed to work with in a pair with ClientRetryPolicy.
            The inner retryPolicy must be a ClientRetryPolicy or a rety policy delegating to it.
            </summary>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.ChangeFeedRequestOptions">
            <summary>
            The Cosmos Change Feed request options
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.ChangeFeedRequestOptions.StartTime">
            <summary>
            Specifies a particular point in time to start to read the change feed.
            </summary>
            <remarks>
            In order to read the Change Feed from the beginning, set this to DateTime.MinValue.
            </remarks>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.ChangeFeedRequestOptions.PopulateRequestOptions(Microsoft.Azure.Cosmos.RequestMessage)">
            <summary>
            Fill the CosmosRequestMessage headers with the set properties
            </summary>
            <param name="request">The <see cref="T:Microsoft.Azure.Cosmos.RequestMessage"/></param>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.ContainerRequestOptions">
            <summary>
            The cosmos container request options
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.ContainerRequestOptions.PopulateQuotaInfo">
            <summary>
             Gets or sets the <see cref="P:Microsoft.Azure.Cosmos.ContainerRequestOptions.PopulateQuotaInfo"/> for document collection read requests in the Azure Cosmos DB service.
            </summary>
            <remarks>
            <para>
            PopulateQuotaInfo is used to enable/disable getting document collection quota related stats for document collection read requests.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.ContainerRequestOptions.PopulateRequestOptions(Microsoft.Azure.Cosmos.RequestMessage)">
            <summary>
            Fill the CosmosRequestMessage headers with the set properties
            </summary>
            <param name="request">The <see cref="T:Microsoft.Azure.Cosmos.RequestMessage"/></param>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.ItemRequestOptions">
            <summary>
            Cosmos item request options
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.ItemRequestOptions.PreTriggers">
            <summary>
            Gets or sets the trigger to be invoked before the operation in the Azure Cosmos DB service.
            </summary>
            <value>
            The trigger to be invoked before the operation.
            </value>
            <remarks>
            Only valid when used with Create, Replace and Delete methods for documents.
            Currently only one PreTrigger is permitted per operation.
            </remarks>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.ItemRequestOptions.PostTriggers">
            <summary>
            Gets or sets the trigger to be invoked after the operation in the Azure Cosmos DB service.
            </summary>
            <value>
            The trigger to be invoked after the operation.
            </value>
            <remarks>
            Only valid when used with Create, Replace and Delete methods for documents.
            Currently only one PreTrigger is permitted per operation.
            </remarks>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.ItemRequestOptions.IndexingDirective">
            <summary>
            Gets or sets the indexing directive (Include or Exclude) for the request in the Azure Cosmos DB service.
            </summary>
            <value>
            The indexing directive to use with a request.
            </value>
            <seealso cref="T:Microsoft.Azure.Cosmos.IndexingPolicy"/>
            <seealso cref="P:Microsoft.Azure.Cosmos.ItemRequestOptions.IndexingDirective"/>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.ItemRequestOptions.SessionToken">
             <summary>
             Gets or sets the token for use with session consistency in the Azure Cosmos DB service.
             </summary>
             <value>
             The token for use with session consistency.
             </value>
            
             <remarks>
             One of the <see cref="P:Microsoft.Azure.Cosmos.ItemRequestOptions.ConsistencyLevel"/> for Azure Cosmos DB is Session. In fact, this is the default level applied to accounts.
             <para>
             When working with Session consistency, each new write request to Azure Cosmos DB is assigned a new SessionToken.
             The DocumentClient will use this token internally with each read/query request to ensure that the set consistency level is maintained.
            
             <para>
             In some scenarios you need to manage this Session yourself;
             Consider a web application with multiple nodes, each node will have its own instance of <see cref="T:Microsoft.Azure.Cosmos.DocumentClient"/>
             If you wanted these nodes to participate in the same session (to be able read your own writes consistently across web tiers)
             you would have to send the SessionToken from <see cref="T:Microsoft.Azure.Cosmos.ItemResponse`1"/> of the write action on one node
             to the client tier, using a cookie or some other mechanism, and have that token flow back to the web tier for subsequent reads.
             If you are using a round-robin load balancer which does not maintain session affinity between requests, such as the Azure Load Balancer,
             the read could potentially land on a different node to the write request, where the session was created.
             </para>
            
             <para>
             If you do not flow the Azure Cosmos DB SessionToken across as described above you could end up with inconsistent read results for a period of time.
             </para>
            
             </para>
             </remarks>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.ItemRequestOptions.ConsistencyLevel">
            <summary>
            Gets or sets the consistency level required for the request in the Azure Cosmos DB service.
            </summary>
            <value>
            The consistency level required for the request.
            </value>
            <remarks>
            Azure Cosmos DB offers 5 different consistency levels. Strong, Bounded Staleness, Session, Consistent Prefix and Eventual - in order of strongest to weakest consistency. <see cref="T:Microsoft.Azure.Cosmos.ConnectionPolicy"/>
            <para>
            While this is set at a database account level, Azure Cosmos DB allows a developer to override the default consistency level
            for each individual request.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.ItemRequestOptions.PopulateRequestOptions(Microsoft.Azure.Cosmos.RequestMessage)">
            <summary>
            Fill the CosmosRequestMessage headers with the set properties
            </summary>
            <param name="request">The <see cref="T:Microsoft.Azure.Cosmos.RequestMessage"/></param>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.QueryRequestOptions">
            <summary>
            The Cosmos query request options
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.QueryRequestOptions.ResponseContinuationTokenLimitInKb">
            <summary>
             Gets or sets the <see cref="P:Microsoft.Azure.Cosmos.QueryRequestOptions.ResponseContinuationTokenLimitInKb"/> request option for document query requests in the Azure Cosmos DB service.
            </summary>
            <remarks>
            <para> 
            ResponseContinuationTokenLimitInKb is used to limit the length of continuation token in the query response. Valid values are >= 0.
            </para>
            </remarks>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.QueryRequestOptions.EnableScanInQuery">
            <summary>
            Gets or sets the option to enable scans on the queries which couldn't be served
            as indexing was opted out on the requested paths in the Azure Cosmos DB service.
            </summary>
            <value>
            Option is true if scan on queries is enabled; otherwise, false.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.QueryRequestOptions.EnableLowPrecisionOrderBy">
            <summary>
            Gets or sets the option to enable low precision order by in the Azure Cosmos DB service.
            </summary>
            <value>
            The option to enable low-precision order by.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.QueryRequestOptions.MaxBufferedItemCount">
            <summary>
            Gets or sets the maximum number of items that can be buffered client side during 
            parallel query execution in the Azure Cosmos DB service. 
            A positive property value limits the number of buffered 
            items to the set value. If it is set to less than 0, the system automatically 
            decides the number of items to buffer.
            </summary>
            <value>
            The maximum count of items that can be buffered during parallel query execution.
            </value> 
            <remarks>
            This is only suggestive and cannot be abided by in certain cases.
            </remarks>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.QueryRequestOptions.MaxItemCount">
            <summary>
            Gets or sets the maximum number of items to be returned in the enumeration operation in the Azure Cosmos DB service.
            </summary>
            <value>
            The maximum number of items to be returned in the enumeration operation.
            </value> 
            <remarks>
            Used for query pagination.
            '-1' Used for dynamic page size.
            This is a maximum. Query can return 0 items in the page.
            </remarks>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.QueryRequestOptions.MaxConcurrency">
            <summary>
            Gets or sets the number of concurrent operations run client side during 
            parallel query execution in the Azure Cosmos DB service. 
            A positive property value limits the number of 
            concurrent operations to the set value. If it is set to less than 0, the 
            system automatically decides the number of concurrent operations to run.
            </summary>
            <value>
            The maximum number of concurrent operations during parallel execution. 
            Defaults will be executed serially with no-parallelism
            </value> 
        </member>
        <member name="P:Microsoft.Azure.Cosmos.QueryRequestOptions.PartitionKey">
            <summary>
            Gets or sets the <see cref="T:Microsoft.Azure.Cosmos.PartitionKey"/> for the current request in the Azure Cosmos DB service.
            </summary>
            <remarks>
            Only applicable to Item operations
            </remarks>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.QueryRequestOptions.ConsistencyLevel">
            <summary>
            Gets or sets the consistency level required for the request in the Azure Cosmos DB service.
            </summary>
            <value>
            The consistency level required for the request.
            </value>
            <remarks>
            Azure Cosmos DB offers 5 different consistency levels. Strong, Bounded Staleness, Session, Consistent Prefix and Eventual - in order of strongest to weakest consistency. <see cref="T:Microsoft.Azure.Cosmos.ConnectionPolicy"/>
            <para>
            While this is set at a database account level, Azure Cosmos DB allows a developer to override the default consistency level
            for each individual request.
            </para>
            </remarks>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.QueryRequestOptions.SessionToken">
             <summary>
             Gets or sets the token for use with session consistency in the Azure Cosmos DB service.
             </summary>
             <value>
             The token for use with session consistency.
             </value>
            
             <remarks>
             One of the <see cref="P:Microsoft.Azure.Cosmos.QueryRequestOptions.ConsistencyLevel"/> for Azure Cosmos DB is Session. In fact, this is the default level applied to accounts.
             <para>
             When working with Session consistency, each new write request to Azure Cosmos DB is assigned a new SessionToken.
             The DocumentClient will use this token internally with each read/query request to ensure that the set consistency level is maintained.
            
             <para>
             In some scenarios you need to manage this Session yourself;
             Consider a web application with multiple nodes, each node will have its own instance of <see cref="T:Microsoft.Azure.Cosmos.DocumentClient"/>
             If you wanted these nodes to participate in the same session (to be able read your own writes consistently across web tiers)
             you would have to send the SessionToken from <see cref="T:Microsoft.Azure.Cosmos.QueryResponse`1"/> of the write action on one node
             to the client tier, using a cookie or some other mechanism, and have that token flow back to the web tier for subsequent reads.
             If you are using a round-robin load balancer which does not maintain session affinity between requests, such as the Azure Load Balancer,
             the read could potentially land on a different node to the write request, where the session was created.
             </para>
            
             <para>
             If you do not flow the Azure Cosmos DB SessionToken across as described above you could end up with inconsistent read results for a period of time.
             </para>
            
             </para>
             </remarks>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.QueryRequestOptions.PopulateRequestOptions(Microsoft.Azure.Cosmos.RequestMessage)">
            <summary>
            Fill the CosmosRequestMessage headers with the set properties
            </summary>
            <param name="request">The <see cref="T:Microsoft.Azure.Cosmos.RequestMessage"/></param>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.RequestOptions">
            <summary>
            The default cosmos request options
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.RequestOptions.IfMatchEtag">
            <summary>
            Gets or sets the If-Match (ETag) associated with the request in the Azure Cosmos DB service.
            </summary>
            <remarks>
            Most commonly used with the Delete* and Replace* methods of <see cref="T:Microsoft.Azure.Cosmos.Container"/> such as <see cref="M:Microsoft.Azure.Cosmos.Container.ReplaceItemAsync``1(``0,System.String,System.Nullable{Microsoft.Azure.Cosmos.PartitionKey},Microsoft.Azure.Cosmos.ItemRequestOptions,System.Threading.CancellationToken)"/>
            but can be used with other methods like <see cref="M:Microsoft.Azure.Cosmos.Container.ReadItemAsync``1(System.String,Microsoft.Azure.Cosmos.PartitionKey,Microsoft.Azure.Cosmos.ItemRequestOptions,System.Threading.CancellationToken)"/> for caching scenarios.
            </remarks>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.RequestOptions.IfNoneMatchEtag">
            <summary>
            Gets or sets the If-None-Match (ETag) associated with the request in the Azure Cosmos DB service.
            </summary>
            <remarks>
            Most commonly used to detect changes to the resource
            </remarks>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.RequestOptions.IsEffectivePartitionKeyRouting">
            <summary>
            Gets or sets the boolean to use effective partition key routing in the cosmos db request.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.RequestOptions.BaseConsistencyLevel">
            <summary>
            Gets or sets the consistency level required for the request in the Azure Cosmos DB service.
            Not every request supports consistency level. This allows each child to decide to expose it
            and use the same base logic
            </summary>
            <value>
            The consistency level required for the request.
            </value>
            <remarks>
            ConsistencyLevel compatibility will validated and set by RequestInvokeHandler
            </remarks>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.RequestOptions.PopulateRequestOptions(Microsoft.Azure.Cosmos.RequestMessage)">
            <summary>
            Fill the CosmosRequestMessage headers with the set properties
            </summary>
            <param name="request">The <see cref="T:Microsoft.Azure.Cosmos.RequestMessage"/></param>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.RequestOptions.TryGetResourceUri(System.Uri@)">
            <summary>
            Gets the resource URI passed in as a request option. This is used by MongoDB and Cassandra implementation for performance reasons.
            </summary>
            <param name="resourceUri">The URI passed in from the request options</param>
            <returns>True if the object exists in the request options. False if the value was not passed in as a request option</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.RequestOptions.SetSessionToken(Microsoft.Azure.Cosmos.RequestMessage,System.String)">
            <summary>
            Set the session token
            </summary>
            <param name="request">The current request.</param>
            <param name="sessionToken">The current session token.</param>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.Scripts.StoredProcedureRequestOptions">
            <summary>
            The cosmos stored procedure request options
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.Scripts.StoredProcedureRequestOptions.EnableScriptLogging">
            <summary>
             Gets or sets the <see cref="P:Microsoft.Azure.Cosmos.Scripts.StoredProcedureRequestOptions.EnableScriptLogging"/> for the current request in the Azure Cosmos DB service.
            </summary>
            <remarks>
            <para>
            EnableScriptLogging is used to enable/disable logging in JavaScript stored procedures.
            By default script logging is disabled.
            The log can also be accessible in response header (x-ms-documentdb-script-log-results).
            </para>
            </remarks>
            <example>
            To log, use the following in store procedure:
            <code language="JavaScript">
            <![CDATA[
            console.log("This is trace log");
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.Scripts.StoredProcedureRequestOptions.SessionToken">
             <summary>
             Gets or sets the token for use with session consistency in the Azure Cosmos DB service.
             </summary>
             <value>
             The token for use with session consistency.
             </value>
            
             <remarks>
             One of the <see cref="P:Microsoft.Azure.Cosmos.Scripts.StoredProcedureRequestOptions.ConsistencyLevel"/> for Azure Cosmos DB is Session. In fact, this is the default level applied to accounts.
             <para>
             When working with Session consistency, each new write request to Azure Cosmos DB is assigned a new SessionToken.
             The DocumentClient will use this token internally with each read/query request to ensure that the set consistency level is maintained.
            
             <para>
             In some scenarios you need to manage this Session yourself;
             Consider a web application with multiple nodes, each node will have its own instance of <see cref="T:Microsoft.Azure.Cosmos.DocumentClient"/>
             If you wanted these nodes to participate in the same session (to be able read your own writes consistently across web tiers)
             you would have to send the SessionToken from <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/> of the write action on one node
             to the client tier, using a cookie or some other mechanism, and have that token flow back to the web tier for subsequent reads.
             If you are using a round-robin load balancer which does not maintain session affinity between requests, such as the Azure Load Balancer,
             the read could potentially land on a different node to the write request, where the session was created.
             </para>
            
             <para>
             If you do not flow the Azure Cosmos DB SessionToken across as described above you could end up with inconsistent read results for a period of time.
             </para>
            
             </para>
             </remarks>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.Scripts.StoredProcedureRequestOptions.ConsistencyLevel">
            <summary>
            Gets or sets the consistency level required for the request in the Azure Cosmos DB service.
            </summary>
            <value>
            The consistency level required for the request.
            </value>
            <remarks>
            Azure Cosmos DB offers 5 different consistency levels. Strong, Bounded Staleness, Session, Consistent Prefix and Eventual - in order of strongest to weakest consistency. <see cref="T:Microsoft.Azure.Cosmos.ConnectionPolicy"/>
            <para>
            While this is set at a database account level, Azure Cosmos DB allows a developer to override the default consistency level
            for each individual request.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Scripts.StoredProcedureRequestOptions.PopulateRequestOptions(Microsoft.Azure.Cosmos.RequestMessage)">
            <summary>
            Fill the CosmosRequestMessage headers with the set properties
            </summary>
            <param name="request">The <see cref="T:Microsoft.Azure.Cosmos.RequestMessage"/></param>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.Scripts.Scripts">
            <summary>
            Represents script operations on an Azure Cosmos container.
            </summary>
            <seealso cref="T:Microsoft.Azure.Cosmos.Scripts.StoredProcedureProperties"/>
            <seealso cref="T:Microsoft.Azure.Cosmos.Scripts.TriggerProperties"/>
            <seealso cref="T:Microsoft.Azure.Cosmos.Scripts.UserDefinedFunctionProperties"/>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Scripts.Scripts.CreateStoredProcedureAsync(Microsoft.Azure.Cosmos.Scripts.StoredProcedureProperties,Microsoft.Azure.Cosmos.RequestOptions,System.Threading.CancellationToken)">
             <summary>
             Creates a stored procedure as an asynchronous operation in the Azure Cosmos DB service.
             </summary>
             <param name="storedProcedureProperties">The Stored Procedure to create</param>
             <param name="requestOptions">(Optional) The options for the stored procedure request <see cref="T:Microsoft.Azure.Cosmos.RequestOptions"/></param>
             <param name="cancellationToken">(Optional) <see cref="T:System.Threading.CancellationToken"/> representing request cancellation.</param>
             <returns>The <see cref="T:Microsoft.Azure.Cosmos.Scripts.StoredProcedureProperties"/> that was created contained within a <see cref="T:System.Threading.Tasks.Task"/> object representing the service response for the asynchronous operation.</returns>
             <exception cref="T:System.ArgumentNullException">If <paramref name="storedProcedureProperties"/> is not set.</exception>
             <exception cref="T:System.AggregateException">Represents a consolidation of failures that occurred during async processing. Look within InnerExceptions to find the actual exception(s)</exception>
             <exception cref="T:Microsoft.Azure.Cosmos.CosmosException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
             <list type="table">
                 <listheader>
                     <term>StatusCode</term><description>Reason for exception</description>
                 </listheader>
                 <item>
                     <term>400</term><description>BadRequest - This means something was wrong with the request supplied. It is likely that an Id was not supplied for the stored procedure or the Body was malformed.</description>
                 </item>
                 <item>
                     <term>403</term><description>Forbidden - You have reached your quota of stored procedures for the collection supplied. Contact support to have this quota increased.</description>
                 </item>
                 <item>
                     <term>409</term><description>Conflict - This means a <see cref="T:Microsoft.Azure.Cosmos.Scripts.StoredProcedureProperties"/> with an id matching the id you supplied already existed.</description>
                 </item>
                 <item>
                     <term>413</term><description>RequestEntityTooLarge - This means the body of the <see cref="T:Microsoft.Azure.Cosmos.Scripts.StoredProcedureProperties"/> you tried to create was too large.</description>
                 </item>
             </list>
             </exception>
             <example>
              This creates and executes a stored procedure that appends a string to the first item returned from the query.
             <code language="c#">
             <![CDATA[
             string sprocBody = @"function simple(prefix)
                {
                    var collection = getContext().getCollection();
            
                    // Query documents and take 1st item.
                    var isAccepted = collection.queryDocuments(
                    collection.getSelfLink(),
                    'SELECT * FROM root r',
                    function(err, feed, options) {
                        if (err)throw err;
            
                        // Check the feed and if it's empty, set the body to 'no docs found',
                        // Otherwise just take 1st element from the feed.
                        if (!feed || !feed.length) getContext().getResponse().setBody(""no docs found"");
                        else getContext().getResponse().setBody(prefix + JSON.stringify(feed[0]));
                    });
            
                    if (!isAccepted) throw new Error(""The query wasn't accepted by the server. Try again/use continuation token between API and script."");
                }";
                
             Scripts scripts = this.container.Scripts;
             StoredProcedureProperties storedProcedure = new StoredProcedureProperties(id, sprocBody);
             StoredProcedureResponse storedProcedureResponse = await scripts.CreateStoredProcedureAsync(storedProcedure);
             
             // Execute the stored procedure
             CosmosItemResponse<string> sprocResponse = await scripts.ExecuteStoredProcedureAsync<string, string>(
                                           id, 
                                           "Item as a string: ", 
                                           new PartitionKey(testPartitionId));
             Console.WriteLine("sprocResponse.Resource");
             ]]>
             </code>
             </example>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Scripts.Scripts.GetStoredProcedureQueryIterator``1(Microsoft.Azure.Cosmos.QueryDefinition,System.String,Microsoft.Azure.Cosmos.QueryRequestOptions)">
            <summary>
            This method creates a query for stored procedures under a container using a SQL statement. It returns a FeedIterator.
            For more information on preparing SQL statements with parameterized values, please see <see cref="T:Microsoft.Azure.Cosmos.QueryDefinition"/> overload.
            </summary>
            <param name="queryDefinition">The cosmos SQL query definition.</param>
            <param name="continuationToken">(Optional) The continuation token in the Azure Cosmos DB service.</param>
            <param name="requestOptions">(Optional) The options for the item query request <see cref="T:Microsoft.Azure.Cosmos.QueryRequestOptions"/></param>
            <returns>An iterator to read through the existing stored procedures.</returns>
            <example>
            This create the type feed iterator for sproc with queryDefinition as input.
            <code language="c#">
            <![CDATA[
            Scripts scripts = this.container.Scripts;
            string queryText = "SELECT * FROM s where s.id like @testId";
            QueryDefinition queryDefinition = new QueryDefinition(queryText);
            queryDefinition.WithParameter("@testId", "testSprocId");
            FeedIterator<StoredProcedureProperties> iter = this.scripts.GetStoredProcedureQueryIterator<StoredProcedureProperties>(queryDefinition);
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Scripts.Scripts.GetStoredProcedureQueryStreamIterator(Microsoft.Azure.Cosmos.QueryDefinition,System.String,Microsoft.Azure.Cosmos.QueryRequestOptions)">
            <summary>
            This method creates a query for stored procedures under a container using a SQL statement. It returns a FeedIterator.
            For more information on preparing SQL statements with parameterized values, please see <see cref="T:Microsoft.Azure.Cosmos.QueryDefinition"/> overload.
            </summary>
            <param name="queryDefinition">The cosmos SQL query definition.</param>
            <param name="continuationToken">(Optional) The continuation token in the Azure Cosmos DB service.</param>
            <param name="requestOptions">(Optional) The options for the item query request <see cref="T:Microsoft.Azure.Cosmos.QueryRequestOptions"/></param>
            <returns>An iterator to read through the existing stored procedures.</returns>
            <example>
            This create the stream feed iterator for sproc with queryDefinition as input.
            <code language="c#">
            <![CDATA[
            Scripts scripts = this.container.Scripts;
            string queryText = "SELECT * FROM s where s.id like @testId";
            QueryDefinition queryDefinition = new QueryDefinition(queryText);
            queryDefinition.WithParameter("@testId", "testSprocId");
            FeedIterator iter = this.scripts.GetStoredProcedureQueryStreamIterator(queryDefinition);
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Scripts.Scripts.GetStoredProcedureQueryIterator``1(System.String,System.String,Microsoft.Azure.Cosmos.QueryRequestOptions)">
            <summary>
            This method creates a query for stored procedures under a container using a SQL statement. It returns a FeedIterator.
            For more information on preparing SQL statements with parameterized values, please see <see cref="T:Microsoft.Azure.Cosmos.QueryDefinition"/> overload.
            </summary>
            <param name="queryText">The cosmos SQL query text.</param>
            <param name="continuationToken">(Optional) The continuation token in the Azure Cosmos DB service.</param>
            <param name="requestOptions">(Optional) The options for the item query request <see cref="T:Microsoft.Azure.Cosmos.QueryRequestOptions"/></param>
            <returns>An iterator to read through the existing stored procedures.</returns>
            <example>
            This create the type feed iterator for sproc with queryText as input.
            <code language="c#">
            <![CDATA[
            Scripts scripts = this.container.Scripts;
            string queryText = "SELECT * FROM s where s.id like '%testId%'";
            FeedIterator<StoredProcedureProperties> iter = this.scripts.GetStoredProcedureQueryIterator<StoredProcedureProperties>(queryText);
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Scripts.Scripts.GetStoredProcedureQueryStreamIterator(System.String,System.String,Microsoft.Azure.Cosmos.QueryRequestOptions)">
            <summary>
            This method creates a query for stored procedures under a container using a SQL statement. It returns a FeedIterator.
            For more information on preparing SQL statements with parameterized values, please see <see cref="T:Microsoft.Azure.Cosmos.QueryDefinition"/> overload.
            </summary>
            <param name="queryText">The cosmos SQL query text.</param>
            <param name="continuationToken">(Optional) The continuation token in the Azure Cosmos DB service.</param>
            <param name="requestOptions">(Optional) The options for the item query request <see cref="T:Microsoft.Azure.Cosmos.QueryRequestOptions"/></param>
            <returns>An iterator to read through the existing stored procedures.</returns>
            <example>
            This create the stream feed iterator for sproc with queryText as input.
            <code language="c#">
            <![CDATA[
            Scripts scripts = this.container.Scripts;
            string queryText = "SELECT * FROM s where s.id like '%testId%'";
            FeedIterator iter = this.scripts.GetStoredProcedureQueryStreamIterator(queryText);
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Scripts.Scripts.ReadStoredProcedureAsync(System.String,Microsoft.Azure.Cosmos.RequestOptions,System.Threading.CancellationToken)">
            <summary>
            Reads a <see cref="T:Microsoft.Azure.Cosmos.Scripts.StoredProcedureProperties"/> from the Azure Cosmos service as an asynchronous operation.
            </summary>
            <param name="id">The identifier of the Stored Procedure to read.</param>
            <param name="requestOptions">(Optional) The options for the stored procedure request <see cref="T:Microsoft.Azure.Cosmos.Scripts.StoredProcedureRequestOptions"/></param>
            <param name="cancellationToken">(Optional) <see cref="T:System.Threading.CancellationToken"/> representing request cancellation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> containing a <see cref="T:Microsoft.Azure.Cosmos.Scripts.StoredProcedureProperties"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="id"/> is not set.</exception>
            <exception cref="T:Microsoft.Azure.Cosmos.CosmosException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
            <list type="table">
                <listheader>
                    <term>StatusCode</term><description>Reason for exception</description>
                </listheader>
                <item>
                    <term>404</term><description>NotFound - This means the resource you tried to read did not exist.</description>
                </item>
                <item>
                    <term>429</term><description>TooManyRequests - This means you have exceeded the number of request units per second. Consult the DocumentClientException.RetryAfter value to see how long you should wait before retrying this operation.</description>
                </item>
            </list>
            </exception>
            <example>
             This reads an existing stored procedure.
            <code language="c#">
            <![CDATA[
            Scripts scripts = this.container.Scripts;
            StoredProcedureResponse storedProcedure = await scripts.ReadStoredProcedureAsync("ExistingId");
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Scripts.Scripts.ReplaceStoredProcedureAsync(Microsoft.Azure.Cosmos.Scripts.StoredProcedureProperties,Microsoft.Azure.Cosmos.RequestOptions,System.Threading.CancellationToken)">
             <summary>
             Replaces a <see cref="T:Microsoft.Azure.Cosmos.Scripts.StoredProcedureProperties"/> in the Azure Cosmos service as an asynchronous operation.
             </summary>
             <param name="storedProcedureProperties">The Stored Procedure to replace</param>
             <param name="requestOptions">(Optional) The options for the stored procedure request <see cref="T:Microsoft.Azure.Cosmos.Scripts.StoredProcedureRequestOptions"/></param>
             <param name="cancellationToken">(Optional) <see cref="T:System.Threading.CancellationToken"/> representing request cancellation.</param>
             <returns>
             A <see cref="T:System.Threading.Tasks.Task"/> containing a <see cref="T:Microsoft.Azure.Cosmos.Scripts.StoredProcedureProperties"/>.
             </returns>
             <exception cref="T:System.ArgumentNullException">If <paramref name="storedProcedureProperties"/> is not set.</exception>
             <exception cref="T:Microsoft.Azure.Cosmos.CosmosException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
             <list type="table">
                 <listheader>
                     <term>StatusCode</term><description>Reason for exception</description>
                 </listheader>
                 <item>
                     <term>404</term><description>NotFound - This means the resource you tried to delete did not exist.</description>
                 </item>
             </list>
             </exception>
             <example>
             This examples replaces an existing stored procedure.
             <code language="c#">
             <![CDATA[
             //Updated body
             string body = @"function AddTax() {
                 var item = getContext().getRequest().getBody();
            
                 // Validate/calculate the tax.
                 item.tax = item.cost* .15;
            
                 // Update the request -- this is what is going to be inserted.
                 getContext().getRequest().setBody(item);
             }";
             
             Scripts scripts = this.container.Scripts;
             StoredProcedureResponse response = await scripts.ReplaceStoredProcedureAsync(new StoredProcedureProperties("testTriggerId", body));
             ]]>
             </code>
             </example>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Scripts.Scripts.DeleteStoredProcedureAsync(System.String,Microsoft.Azure.Cosmos.RequestOptions,System.Threading.CancellationToken)">
            <summary>
            Delete a <see cref="T:Microsoft.Azure.Cosmos.Scripts.StoredProcedureProperties"/> from the Azure Cosmos DB service as an asynchronous operation.
            </summary>
            <param name="id">The identifier of the Stored Procedure to delete.</param>
            <param name="requestOptions">(Optional) The options for the stored procedure request <see cref="T:Microsoft.Azure.Cosmos.Scripts.StoredProcedureRequestOptions"/></param>
            <param name="cancellationToken">(Optional) <see cref="T:System.Threading.CancellationToken"/> representing request cancellation.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> containing a <see cref="T:Microsoft.Azure.Cosmos.ResponseMessage"/> which will contain the response to the request issued.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="id"/> are not set.</exception>
            <exception cref="T:Microsoft.Azure.Cosmos.CosmosException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
            <list type="table">
                <listheader>
                    <term>StatusCode</term><description>Reason for exception</description>
                </listheader>
                <item>
                    <term>404</term><description>NotFound - This means the resource you tried to delete did not exist.</description>
                </item>
            </list>
            </exception>
            <example>
            This examples gets a reference to an existing stored procedure and deletes it.
            <code language="c#">
            <![CDATA[
            Scripts scripts = this.container.Scripts;
            StoredProcedureResponse response = await scripts.DeleteStoredProcedureAsync("taxUdfId");
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Scripts.Scripts.ExecuteStoredProcedureAsync``1(System.String,Microsoft.Azure.Cosmos.PartitionKey,System.Object[],Microsoft.Azure.Cosmos.Scripts.StoredProcedureRequestOptions,System.Threading.CancellationToken)">
             <summary>
             Executes a stored procedure against a container as an asynchronous operation in the Azure Cosmos service.
             </summary>
             <typeparam name="TOutput">The return type that is JSON serializable.</typeparam>
             <param name="storedProcedureId">The identifier of the Stored Procedure to execute.</param>
             <param name="partitionKey">The partition key for the item. <see cref="T:Microsoft.Azure.Cosmos.PartitionKey"/></param>
             <param name="parameters">(Optional) An array of dynamic objects representing the parameters for the stored procedure.</param>
             <param name="requestOptions">(Optional) The options for the stored procedure request <see cref="T:Microsoft.Azure.Cosmos.Scripts.StoredProcedureRequestOptions"/></param>
             <param name="cancellationToken">(Optional) <see cref="T:System.Threading.CancellationToken"/> representing request cancellation.</param>
             <returns>The task object representing the service response for the asynchronous operation which would contain any response set in the stored procedure.</returns>
             <exception cref="T:System.ArgumentNullException">If <paramref name="storedProcedureId"/> or <paramref name="partitionKey"/>  are not set.</exception>
             <example>
              This creates and executes a stored procedure that appends a string to the first item returned from the query.
             <code language="c#">
             <![CDATA[
             string sprocBody = @"function simple(prefix, postfix)
                {
                    var collection = getContext().getCollection();
            
                    // Query documents and take 1st item.
                    var isAccepted = collection.queryDocuments(
                    collection.getSelfLink(),
                    'SELECT * FROM root r',
                    function(err, feed, options) {
                        if (err)throw err;
            
                        // Check the feed and if it's empty, set the body to 'no docs found',
                        // Otherwise just take 1st element from the feed.
                        if (!feed || !feed.length) getContext().getResponse().setBody(""no docs found"");
                        else getContext().getResponse().setBody(prefix + JSON.stringify(feed[0]) + postfix);
                    });
            
                    if (!isAccepted) throw new Error(""The query wasn't accepted by the server. Try again/use continuation token between API and script."");
                }";
                
             Scripts scripts = this.container.Scripts;
             string sprocId = "appendString";
             StoredProcedureResponse storedProcedureResponse = await scripts.CreateStoredProcedureAsync(
                     sprocId,
                     sprocBody);
             
             // Execute the stored procedure
             StoredProcedureExecuteResponse<string> sprocResponse = await scripts.ExecuteStoredProcedureAsync<string>(
                                     sprocId,
                                     new PartitionKey(testPartitionId),
                                     new dynamic[] {"myPrefixString", "myPostfixString"});
                                     
             Console.WriteLine(sprocResponse.Resource);
             /// ]]>
             </code>
             </example>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Scripts.Scripts.ExecuteStoredProcedureStreamAsync(System.String,Microsoft.Azure.Cosmos.PartitionKey,System.Object[],Microsoft.Azure.Cosmos.Scripts.StoredProcedureRequestOptions,System.Threading.CancellationToken)">
             <summary>
             Executes a stored procedure against a container as an asynchronous operation in the Azure Cosmos service and obtains a Stream as response.
             </summary>
             <param name="storedProcedureId">The identifier of the Stored Procedure to execute.</param>
             <param name="partitionKey">The partition key for the item. <see cref="T:Microsoft.Azure.Cosmos.PartitionKey"/></param>
             <param name="parameters">(Optional) An array of dynamic objects representing the parameters for the stored procedure.</param>
             <param name="requestOptions">(Optional) The options for the stored procedure request <see cref="T:Microsoft.Azure.Cosmos.Scripts.StoredProcedureRequestOptions"/></param>
             <param name="cancellationToken">(Optional) <see cref="T:System.Threading.CancellationToken"/> representing request cancellation.</param>
             <returns>The task object representing the service response for the asynchronous operation which would contain any response set in the stored procedure.</returns>
             <exception cref="T:System.ArgumentNullException">If <paramref name="storedProcedureId"/> or <paramref name="partitionKey"/>  are not set.</exception>
             <example>
              This creates and executes a stored procedure that appends a string to the first item returned from the query.
             <code language="c#">
             <![CDATA[
             string sprocBody = @"function simple(prefix, postfix)
                {
                    var collection = getContext().getCollection();
            
                    // Query documents and take 1st item.
                    var isAccepted = collection.queryDocuments(
                    collection.getSelfLink(),
                    'SELECT * FROM root r',
                    function(err, feed, options) {
                        if (err)throw err;
            
                        // Check the feed and if it's empty, set the body to 'no docs found',
                        // Otherwise just take 1st element from the feed.
                        if (!feed || !feed.length) getContext().getResponse().setBody(""no docs found"");
                        else getContext().getResponse().setBody(prefix + JSON.stringify(feed[0]) + postfix);
                    });
            
                    if (!isAccepted) throw new Error(""The query wasn't accepted by the server. Try again/use continuation token between API and script."");
                }";
                
             Scripts scripts = this.container.Scripts;
             string sprocId = "appendString";
             StoredProcedureResponse storedProcedureResponse = await scripts.CreateStoredProcedureAsync(
                     sprocId,
                     sprocBody);
             
             // Execute the stored procedure
             ResponseMessage sprocResponse = await scripts.ExecuteStoredProcedureStreamAsync(
                                     sprocId,
                                     new PartitionKey(testPartitionId),
                                     new dynamic[] {"myPrefixString", "myPostfixString"});
                                     
             using (StreamReader sr = new StreamReader(sprocResponse.Content))
             {
                 string stringResponse = await sr.ReadToEndAsync();
                 Console.WriteLine(stringResponse);
              }
             
             /// ]]>
             </code>
             </example>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Scripts.Scripts.CreateTriggerAsync(Microsoft.Azure.Cosmos.Scripts.TriggerProperties,Microsoft.Azure.Cosmos.RequestOptions,System.Threading.CancellationToken)">
             <summary>
             Creates a trigger as an asynchronous operation in the Azure Cosmos DB service.
             </summary>
             <param name="triggerProperties">The <see cref="T:Microsoft.Azure.Cosmos.Scripts.TriggerProperties"/> object.</param>
             <param name="requestOptions">(Optional) The options for the stored procedure request <see cref="T:Microsoft.Azure.Cosmos.RequestOptions"/></param>
             <param name="cancellationToken">(Optional) <see cref="T:System.Threading.CancellationToken"/> representing request cancellation.</param>
             <returns>A task object representing the service response for the asynchronous operation.</returns>
             <exception cref="T:System.ArgumentNullException">If <paramref name="triggerProperties"/> is not set.</exception>
             <exception cref="T:System.AggregateException">Represents a consolidation of failures that occurred during async processing. Look within InnerExceptions to find the actual exception(s)</exception>
             <exception cref="T:Microsoft.Azure.Cosmos.CosmosException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
             <list type="table">
                 <listheader>
                     <term>StatusCode</term><description>Reason for exception</description>
                 </listheader>
                 <item>
                     <term>400</term><description>BadRequest - This means something was wrong with the request supplied. It is likely that an Id was not supplied for the new trigger or that the Body was malformed.</description>
                 </item>
                 <item>
                     <term>403</term><description>Forbidden - You have reached your quota of triggers for the collection supplied. Contact support to have this quota increased.</description>
                 </item>
                 <item>
                     <term>409</term><description>Conflict - This means a <see cref="T:Microsoft.Azure.Cosmos.Scripts.TriggerProperties"/> with an id matching the id you supplied already existed.</description>
                 </item>
                 <item>
                     <term>413</term><description>RequestEntityTooLarge - This means the body of the <see cref="T:Microsoft.Azure.Cosmos.Scripts.TriggerProperties"/> you tried to create was too large.</description>
                 </item>
             </list>
             </exception>
             <example>
              This creates a trigger then uses the trigger in a create item.
             <code language="c#">
             <![CDATA[
             Scripts scripts = this.container.Scripts;
             TriggerResponse triggerResponse = await scripts.CreateTriggerAsync(
                 new TriggerProperties
                 {
                     Id = "addTax",
                     Body = @"function AddTax() {
                         var item = getContext().getRequest().getBody();
            
                         // calculate the tax.
                         item.tax = item.cost * .15;
            
                         // Update the request -- this is what is going to be inserted.
                         getContext().getRequest().setBody(item);
                     }",
                     TriggerOperation = TriggerOperation.All,
                     TriggerType = TriggerType.Pre
                 });
            
             ItemRequestOptions options = new ItemRequestOptions()
             {
                 PreTriggers = new List<string>() { triggerResponse.Id },
             };
            
             // Create a new item with trigger set in the request options
             ItemResponse<dynamic> createdItem = await this.container.Items.CreateItemAsync<dynamic>(item.status, item, options);
             double itemTax = createdItem.Resource.tax;
             ]]>
             </code>
             </example>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Scripts.Scripts.GetTriggerQueryIterator``1(Microsoft.Azure.Cosmos.QueryDefinition,System.String,Microsoft.Azure.Cosmos.QueryRequestOptions)">
            <summary>
            This method creates a query for triggers under a container using a SQL statement. It returns a FeedIterator.
            For more information on preparing SQL statements with parameterized values, please see <see cref="T:Microsoft.Azure.Cosmos.QueryDefinition"/> overload.
            </summary>
            <param name="queryDefinition">The cosmos SQL query definition.</param>
            <param name="continuationToken">(Optional) The continuation token in the Azure Cosmos DB service.</param>
            <param name="requestOptions">(Optional) The options for the item query request <see cref="T:Microsoft.Azure.Cosmos.QueryRequestOptions"/></param>
            <returns>An iterator to read through the existing stored procedures.</returns>
            <example>
            This create the type feed iterator for Trigger with queryDefinition as input.
            <code language="c#">
            <![CDATA[
            Scripts scripts = this.container.Scripts;
            string queryText = "SELECT * FROM t where t.id like @testId";
            QueryDefinition queryDefinition = new QueryDefinition(queryText);
            queryDefinition.WithParameter("@testId", "testTriggerId");
            FeedIterator<TriggerProperties> iter = this.scripts.GetTriggerQueryIterator<TriggerProperties>(queryDefinition);
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Scripts.Scripts.GetTriggerQueryStreamIterator(Microsoft.Azure.Cosmos.QueryDefinition,System.String,Microsoft.Azure.Cosmos.QueryRequestOptions)">
            <summary>
            This method creates a query for triggers under a container using a SQL statement. It returns a FeedIterator.
            For more information on preparing SQL statements with parameterized values, please see <see cref="T:Microsoft.Azure.Cosmos.QueryDefinition"/> overload.
            </summary>
            <param name="queryDefinition">The cosmos SQL query definition.</param>
            <param name="continuationToken">(Optional) The continuation token in the Azure Cosmos DB service.</param>
            <param name="requestOptions">(Optional) The options for the item query request <see cref="T:Microsoft.Azure.Cosmos.QueryRequestOptions"/></param>
            <returns>An iterator to read through the existing stored procedures.</returns>
            <example>
            This create the stream feed iterator for Trigger with queryDefinition as input.
            <code language="c#">
            <![CDATA[
            Scripts scripts = this.container.Scripts;
            string queryText = "SELECT * FROM t where t.id like @testId";
            QueryDefinition queryDefinition = new QueryDefinition(queryText);
            queryDefinition.WithParameter("@testId", "testTriggerId");
            FeedIterator iter = this.scripts.GetTriggerQueryStreamIterator(queryDefinition);
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Scripts.Scripts.GetTriggerQueryIterator``1(System.String,System.String,Microsoft.Azure.Cosmos.QueryRequestOptions)">
            <summary>
            This method creates a query for triggers under a container using a SQL statement. It returns a FeedIterator.
            For more information on preparing SQL statements with parameterized values, please see <see cref="T:Microsoft.Azure.Cosmos.QueryDefinition"/> overload.
            </summary>
            <param name="queryText">The cosmos SQL query text.</param>
            <param name="continuationToken">(Optional) The continuation token in the Azure Cosmos DB service.</param>
            <param name="requestOptions">(Optional) The options for the item query request <see cref="T:Microsoft.Azure.Cosmos.QueryRequestOptions"/></param>
            <returns>An iterator to read through the existing stored procedures.</returns>
            <example>
            This create the type feed iterator for Trigger with queryText as input.
            <code language="c#">
            <![CDATA[
            Scripts scripts = this.container.Scripts;
            string queryText = "SELECT * FROM t where t.id like '%testId%'";
            FeedIterator<TriggerProperties> iter = this.scripts.GetTriggerQueryIterator<TriggerProperties>(queryText);
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Scripts.Scripts.GetTriggerQueryStreamIterator(System.String,System.String,Microsoft.Azure.Cosmos.QueryRequestOptions)">
            <summary>
            This method creates a query for triggers under a container using a SQL statement. It returns a FeedIterator.
            For more information on preparing SQL statements with parameterized values, please see <see cref="T:Microsoft.Azure.Cosmos.QueryDefinition"/> overload.
            </summary>
            <param name="queryText">The cosmos SQL query text.</param>
            <param name="continuationToken">(Optional) The continuation token in the Azure Cosmos DB service.</param>
            <param name="requestOptions">(Optional) The options for the item query request <see cref="T:Microsoft.Azure.Cosmos.QueryRequestOptions"/></param>
            <returns>An iterator to read through the existing stored procedures.</returns>
            <example>
            This create the stream feed iterator for Trigger with queryText as input.
            <code language="c#">
            <![CDATA[
            Scripts scripts = this.container.Scripts;
            string queryText = "SELECT * FROM t where t.id like '%testId%'";
            FeedIterator iter = this.scripts.GetTriggerQueryStreamIterator(queryText);
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Scripts.Scripts.ReadTriggerAsync(System.String,Microsoft.Azure.Cosmos.RequestOptions,System.Threading.CancellationToken)">
            <summary>
            Reads a <see cref="T:Microsoft.Azure.Cosmos.Scripts.TriggerProperties"/> from the Azure Cosmos service as an asynchronous operation.
            </summary>
            <param name="id">The id of the trigger to read.</param>
            <param name="requestOptions">(Optional) The options for the trigger request <see cref="T:Microsoft.Azure.Cosmos.RequestOptions"/></param>
            <param name="cancellationToken">(Optional) <see cref="T:System.Threading.CancellationToken"/> representing request cancellation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> containing a <see cref="T:Microsoft.Azure.Cosmos.Scripts.TriggerResponse"/> which wraps a <see cref="T:Microsoft.Azure.Cosmos.Scripts.TriggerProperties"/> containing the read resource record.
            </returns>
            <exception cref="T:Microsoft.Azure.Cosmos.CosmosException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
            <list type="table">
                <listheader>
                    <term>StatusCode</term><description>Reason for exception</description>
                </listheader>
                <item>
                    <term>429</term><description>TooManyRequests - This means you have exceeded the number of request units per second. Consult the DocumentClientException.RetryAfter value to see how long you should wait before retrying this operation.</description>
                </item>
            </list>
            </exception>
            <example>
             This reads an existing trigger
            <code language="c#">
            <![CDATA[
            Scripts scripts = this.container.Scripts;
            TriggerResponse response = await scripts.ReadTriggerAsync("ExistingId");
            TriggerProperties triggerProperties = response;
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Scripts.Scripts.ReplaceTriggerAsync(Microsoft.Azure.Cosmos.Scripts.TriggerProperties,Microsoft.Azure.Cosmos.RequestOptions,System.Threading.CancellationToken)">
             <summary>
             Replaces a <see cref="T:Microsoft.Azure.Cosmos.Scripts.TriggerProperties"/> in the Azure Cosmos service as an asynchronous operation.
             </summary>
             <param name="triggerProperties">The <see cref="T:Microsoft.Azure.Cosmos.Scripts.TriggerProperties"/> object.</param>
             <param name="requestOptions">(Optional) The options for the trigger request <see cref="T:Microsoft.Azure.Cosmos.RequestOptions"/></param>
             <param name="cancellationToken">(Optional) <see cref="T:System.Threading.CancellationToken"/> representing request cancellation.</param>
             <returns>
             A <see cref="T:System.Threading.Tasks.Task"/> containing a <see cref="T:Microsoft.Azure.Cosmos.Scripts.TriggerResponse"/> which wraps a <see cref="T:Microsoft.Azure.Cosmos.Scripts.TriggerProperties"/> containing the updated resource record.
             </returns>
             <exception cref="T:System.ArgumentNullException">If <paramref name="triggerProperties"/> is not set.</exception>
             <example>
             This examples replaces an existing trigger.
             <code language="c#">
             <![CDATA[
             TriggerProperties triggerProperties = new TriggerProperties
             {
                 Id = "testTriggerId",
                 Body = @"function AddTax() {
                     var item = getContext().getRequest().getBody();
            
                     // Validate/calculate the tax.
                     item.tax = item.cost* .15;
            
                     // Update the request -- this is what is going to be inserted.
                     getContext().getRequest().setBody(item);
                 }",
                 TriggerOperation = TriggerOperation.All,
                 TriggerType = TriggerType.Post
             };
             
             Scripts scripts = this.container.Scripts;
             TriggerResponse response = await scripts.ReplaceTriggerAsync(triggerSettigs);
             ]]>
             </code>
             </example>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Scripts.Scripts.DeleteTriggerAsync(System.String,Microsoft.Azure.Cosmos.RequestOptions,System.Threading.CancellationToken)">
            <summary>
            Delete a <see cref="T:Microsoft.Azure.Cosmos.Scripts.TriggerProperties"/> from the Azure Cosmos service as an asynchronous operation.
            </summary>
            <param name="id">The id of the trigger to delete.</param>
            <param name="requestOptions">(Optional) The options for the trigger request <see cref="T:Microsoft.Azure.Cosmos.RequestOptions"/></param>
            <param name="cancellationToken">(Optional) <see cref="T:System.Threading.CancellationToken"/> representing request cancellation.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> containing a <see cref="T:Microsoft.Azure.Cosmos.Scripts.TriggerResponse"/> which wraps a <see cref="T:Microsoft.Azure.Cosmos.Scripts.TriggerProperties"/> which will contain information about the request issued.</returns>
            /// <example>
            This examples gets a reference to an existing trigger and deletes it.
            <code language="c#">
            <![CDATA[
            Scripts scripts = this.container.Scripts;
            TriggerResponse response = await scripts.DeleteTriggerAsync("existingId");
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Scripts.Scripts.CreateUserDefinedFunctionAsync(Microsoft.Azure.Cosmos.Scripts.UserDefinedFunctionProperties,Microsoft.Azure.Cosmos.RequestOptions,System.Threading.CancellationToken)">
             <summary>
             Creates a user defined function as an asynchronous operation in the Azure Cosmos DB service.
             </summary>
             <param name="userDefinedFunctionProperties">The <see cref="T:Microsoft.Azure.Cosmos.Scripts.UserDefinedFunctionProperties"/> object.</param>
             <param name="requestOptions">(Optional) The options for the user defined function request <see cref="T:Microsoft.Azure.Cosmos.RequestOptions"/></param>
             <param name="cancellationToken">(Optional) <see cref="T:System.Threading.CancellationToken"/> representing request cancellation.</param>
             <returns>A task object representing the service response for the asynchronous operation.</returns>
             <exception cref="T:System.ArgumentNullException">If <paramref name="userDefinedFunctionProperties"/> is not set.</exception>
             <exception cref="T:System.AggregateException">Represents a consolidation of failures that occurred during async processing. Look within InnerExceptions to find the actual exception(s)</exception>
             <exception cref="T:Microsoft.Azure.Cosmos.CosmosException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a user defined function are:
             <list type="table">
                 <listheader>
                     <term>StatusCode</term><description>Reason for exception</description>
                 </listheader>
                 <item>
                     <term>400</term><description>BadRequest - This means something was wrong with the request supplied. It is likely that an Id was not supplied for the new user defined function or that the Body was malformed.</description>
                 </item>
                 <item>
                     <term>403</term><description>Forbidden - You have reached your quota of user defined functions for the collection supplied. Contact support to have this quota increased.</description>
                 </item>
                 <item>
                     <term>409</term><description>Conflict - This means a <see cref="T:Microsoft.Azure.Cosmos.Scripts.UserDefinedFunctionProperties"/> with an id matching the id you supplied already existed.</description>
                 </item>
                 <item>
                     <term>413</term><description>RequestEntityTooLarge - This means the body of the <see cref="T:Microsoft.Azure.Cosmos.Scripts.UserDefinedFunctionProperties"/> you tried to create was too large.</description>
                 </item>
             </list>
             </exception>
             <example>
              This creates a user defined function then uses the function in an item query.
             <code language="c#">
             <![CDATA[
             Scripts scripts = this.container.Scripts;
             await scripts.UserDefinedFunctions.CreateUserDefinedFunctionAsync(
                 new UserDefinedFunctionProperties 
                 { 
                     Id = "calculateTax", 
                     Body = @"function(amt) { return amt * 0.05; }" 
                 });
            
             QueryDefinition sqlQuery = new QueryDefinition(
                 "SELECT VALUE udf.calculateTax(t.cost) FROM toDoActivity t where t.cost > @expensive and t.status = @status")
                 .WithParameter("@expensive", 9000)
                 .WithParameter("@status", "Done");
            
             FeedIterator<double> setIterator = this.container.Items.GetItemsQueryIterator<double>(
                 sqlQueryDefinition: sqlQuery,
                 partitionKey: "Done");
            
             while (setIterator.HasMoreResults)
             {
                 foreach (var tax in await setIterator.ReadNextAsync())
                 {
                     Console.WriteLine(tax);
                 }
             }
             ]]>
             </code>
             </example>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Scripts.Scripts.GetUserDefinedFunctionQueryIterator``1(Microsoft.Azure.Cosmos.QueryDefinition,System.String,Microsoft.Azure.Cosmos.QueryRequestOptions)">
            <summary>
            This method creates a query for user defined functions under a container using a SQL statement. It returns a FeedIterator.
            For more information on preparing SQL statements with parameterized values, please see <see cref="T:Microsoft.Azure.Cosmos.QueryDefinition"/> overload.
            </summary>
            <param name="queryDefinition">The cosmos SQL query definition.</param>
            <param name="continuationToken">(Optional) The continuation token in the Azure Cosmos DB service.</param>
            <param name="requestOptions">(Optional) The options for the item query request <see cref="T:Microsoft.Azure.Cosmos.QueryRequestOptions"/></param>
            <returns>An iterator to read through the existing stored procedures.</returns>
            <example>
            This create the type feed iterator for UDF with queryDefinition as input.
            <code language="c#">
            <![CDATA[
            Scripts scripts = this.container.Scripts;
            string queryText = "SELECT * FROM u where u.id like @testId";
            QueryDefinition queryDefinition = new QueryDefinition(queryText);
            queryDefinition.WithParameter("@testId", "testUDFId");
            FeedIterator<UserDefinedFunctionProperties> iter = this.scripts.GetUserDefinedFunctionQueryIterator<UserDefinedFunctionProperties>(queryDefinition);
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Scripts.Scripts.GetUserDefinedFunctionQueryStreamIterator(Microsoft.Azure.Cosmos.QueryDefinition,System.String,Microsoft.Azure.Cosmos.QueryRequestOptions)">
            <summary>
            This method creates a query for user defined functions under a container using a SQL statement. It returns a FeedIterator.
            For more information on preparing SQL statements with parameterized values, please see <see cref="T:Microsoft.Azure.Cosmos.QueryDefinition"/> overload.
            </summary>
            <param name="queryDefinition">The cosmos SQL query definition.</param>
            <param name="continuationToken">(Optional) The continuation token in the Azure Cosmos DB service.</param>
            <param name="requestOptions">(Optional) The options for the item query request <see cref="T:Microsoft.Azure.Cosmos.QueryRequestOptions"/></param>
            <returns>An iterator to read through the existing stored procedures.</returns>
            <example>
            This create the stream feed iterator for UDF with queryDefinition as input.
            <code language="c#">
            <![CDATA[
            Scripts scripts = this.container.Scripts;
            string queryText = "SELECT * FROM u where u.id like @testId";
            QueryDefinition queryDefinition = new QueryDefinition(queryText);
            queryDefinition.WithParameter("@testId", "testUdfId");
            FeedIterator iter = this.scripts.GetUserDefinedFunctionQueryStreamIterator(queryDefinition);
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Scripts.Scripts.GetUserDefinedFunctionQueryIterator``1(System.String,System.String,Microsoft.Azure.Cosmos.QueryRequestOptions)">
            <summary>
            This method creates a query for user defined functions under a container using a SQL statement. It returns a FeedIterator.
            For more information on preparing SQL statements with parameterized values, please see <see cref="T:Microsoft.Azure.Cosmos.QueryDefinition"/> overload.
            </summary>
            <param name="queryText">The cosmos SQL query text.</param>
            <param name="continuationToken">(Optional) The continuation token in the Azure Cosmos DB service.</param>
            <param name="requestOptions">(Optional) The options for the item query request <see cref="T:Microsoft.Azure.Cosmos.QueryRequestOptions"/></param>
            <returns>An iterator to read through the existing stored procedures.</returns>
            <example>
            This create the type feed iterator for UDF with queryText as input.
            <code language="c#">
            <![CDATA[
            Scripts scripts = this.container.Scripts;
            QueryDefinition queryDefinition = new QueryDefinition("SELECT * FROM u where u.id like '%testId%'");
            FeedIterator<UserDefinedFunctionProperties> iter = this.scripts.GetUserDefinedFunctionQueryIterator<UserDefinedFunctionProperties>(queryDefinition);
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Scripts.Scripts.GetUserDefinedFunctionQueryStreamIterator(System.String,System.String,Microsoft.Azure.Cosmos.QueryRequestOptions)">
            <summary>
            This method creates a query for user defined functions under a container using a SQL statement. It returns a FeedIterator.
            For more information on preparing SQL statements with parameterized values, please see <see cref="T:Microsoft.Azure.Cosmos.QueryDefinition"/> overload.
            </summary>
            <param name="queryText">The cosmos SQL query text.</param>
            <param name="continuationToken">(Optional) The continuation token in the Azure Cosmos DB service.</param>
            <param name="requestOptions">(Optional) The options for the item query request <see cref="T:Microsoft.Azure.Cosmos.QueryRequestOptions"/></param>
            <returns>An iterator to read through the existing stored procedures.</returns>
            <example>
            This create the stream feed iterator for UDF with queryText as input.
            <code language="c#">
            <![CDATA[
            Scripts scripts = this.container.Scripts;
            QueryDefinition queryDefinition = new QueryDefinition("SELECT * FROM u where u.id like '%testId%'");
            FeedIterator iter = this.scripts.GetUserDefinedFunctionQueryStreamIterator(queryDefinition);
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Scripts.Scripts.ReadUserDefinedFunctionAsync(System.String,Microsoft.Azure.Cosmos.RequestOptions,System.Threading.CancellationToken)">
            <summary>
            Reads a <see cref="T:Microsoft.Azure.Cosmos.Scripts.UserDefinedFunctionProperties"/> from the Azure Cosmos DB service as an asynchronous operation.
            </summary>
            <param name="id">The id of the user defined function to read</param>
            <param name="requestOptions">(Optional) The options for the user defined function request <see cref="T:Microsoft.Azure.Cosmos.RequestOptions"/></param>
            <param name="cancellationToken">(Optional) <see cref="T:System.Threading.CancellationToken"/> representing request cancellation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> containing a <see cref="T:Microsoft.Azure.Cosmos.Scripts.UserDefinedFunctionResponse"/> which wraps a <see cref="T:Microsoft.Azure.Cosmos.Scripts.UserDefinedFunctionProperties"/> containing the read resource record.
            </returns>
            <exception cref="T:Microsoft.Azure.Cosmos.CosmosException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
            <list type="table">
                <listheader>
                    <term>StatusCode</term><description>Reason for exception</description>
                </listheader>
                <item>
                    <term>404</term><description>NotFound - This means the resource you tried to read did not exist.</description>
                </item>
                <item>
                    <term>429</term><description>TooManyRequests - This means you have exceeded the number of request units per second. Consult the DocumentClientException.RetryAfter value to see how long you should wait before retrying this operation.</description>
                </item>
            </list>
            </exception>
            <example>
             This reads an existing user defined function.
            <code language="c#">
            <![CDATA[
            Scripts scripts = this.container.Scripts;
            UserDefinedFunctionResponse response = await scripts.ReadUserDefinedFunctionAsync("ExistingId");
            UserDefinedFunctionProperties udfProperties = response;
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Scripts.Scripts.ReplaceUserDefinedFunctionAsync(Microsoft.Azure.Cosmos.Scripts.UserDefinedFunctionProperties,Microsoft.Azure.Cosmos.RequestOptions,System.Threading.CancellationToken)">
            <summary>
            Replaces a <see cref="T:Microsoft.Azure.Cosmos.Scripts.UserDefinedFunctionProperties"/> in the Azure Cosmos DB service as an asynchronous operation.
            </summary>
            <param name="userDefinedFunctionProperties">The <see cref="T:Microsoft.Azure.Cosmos.Scripts.UserDefinedFunctionProperties"/> object.</param>
            <param name="requestOptions">(Optional) The options for the user defined function request <see cref="T:Microsoft.Azure.Cosmos.RequestOptions"/></param>
            <param name="cancellationToken">(Optional) <see cref="T:System.Threading.CancellationToken"/> representing request cancellation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> containing a <see cref="T:Microsoft.Azure.Cosmos.Scripts.UserDefinedFunctionResponse"/> which wraps a <see cref="T:Microsoft.Azure.Cosmos.Scripts.UserDefinedFunctionProperties"/> containing the updated resource record.
            </returns>
            <example>
            This examples replaces an existing user defined function.
            <code language="c#">
            <![CDATA[
            Scripts scripts = this.container.Scripts;
            UserDefinedFunctionProperties udfProperties = new UserDefinedFunctionProperties
            {
                Id = "testUserDefinedFunId",
                Body = "function(amt) { return amt * 0.15; }",
            };
            
            UserDefinedFunctionResponse response = await scripts.ReplaceUserDefinedFunctionAsync(udfProperties);
            UserDefinedFunctionProperties udfProperties = response;
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Scripts.Scripts.DeleteUserDefinedFunctionAsync(System.String,Microsoft.Azure.Cosmos.RequestOptions,System.Threading.CancellationToken)">
            <summary>
            Delete a <see cref="T:Microsoft.Azure.Cosmos.Scripts.UserDefinedFunctionProperties"/> from the Azure Cosmos DB service as an asynchronous operation.
            </summary>
            <param name="id">The id of the user defined function to delete.</param>
            <param name="requestOptions">(Optional) The options for the user defined function request <see cref="T:Microsoft.Azure.Cosmos.RequestOptions"/></param>
            <param name="cancellationToken">(Optional) <see cref="T:System.Threading.CancellationToken"/> representing request cancellation.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> containing a <see cref="T:Microsoft.Azure.Cosmos.Scripts.UserDefinedFunctionResponse"/> which wraps a <see cref="T:Microsoft.Azure.Cosmos.Scripts.UserDefinedFunctionProperties"/> which will contain information about the request issued.</returns>
            <example>
            This examples gets a reference to an existing user defined function and deletes it.
            <code language="c#">
            <![CDATA[
            Scripts scripts = this.container.Scripts;
            UserDefinedFunctionResponse response = await this.container.DeleteUserDefinedFunctionAsync("existingId");
            ]]>
            </code>
            </example>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.Scripts.StoredProcedureExecuteResponse`1">
            <summary>
            The cosmos stored procedure response
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Scripts.StoredProcedureExecuteResponse`1.#ctor">
            <summary>
            Create a <see cref="T:Microsoft.Azure.Cosmos.Scripts.StoredProcedureExecuteResponse`1"/> as a no-op for mock testing
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Scripts.StoredProcedureExecuteResponse`1.#ctor(System.Net.HttpStatusCode,Microsoft.Azure.Cosmos.Headers,`0,Microsoft.Azure.Cosmos.CosmosDiagnostics)">
            <summary>
            A private constructor to ensure the factory is used to create the object.
            This will prevent memory leaks when handling the HttpResponseMessage
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.Scripts.StoredProcedureExecuteResponse`1.Headers">
            <inheritdoc/>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.Scripts.StoredProcedureExecuteResponse`1.Resource">
            <inheritdoc/>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.Scripts.StoredProcedureExecuteResponse`1.StatusCode">
            <inheritdoc/>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.Scripts.StoredProcedureExecuteResponse`1.Diagnostics">
            <inheritdoc/>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.Scripts.StoredProcedureExecuteResponse`1.RequestCharge">
            <inheritdoc/>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.Scripts.StoredProcedureExecuteResponse`1.ActivityId">
            <inheritdoc/>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.Scripts.StoredProcedureExecuteResponse`1.ETag">
            <inheritdoc/>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.Scripts.StoredProcedureExecuteResponse`1.MaxResourceQuota">
            <inheritdoc/>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.Scripts.StoredProcedureExecuteResponse`1.CurrentResourceQuotaUsage">
            <inheritdoc/>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.Scripts.StoredProcedureExecuteResponse`1.SessionToken">
            <summary>
            Gets the token for use with session consistency requests from the Azure Cosmos DB service.
            </summary>
            <value>
            The token for use with session consistency requests.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.Scripts.StoredProcedureExecuteResponse`1.ScriptLog">
            <summary>
            Gets the output from stored procedure console.log() statements.
            </summary>
            <value>
            Output from console.log() statements in a stored procedure.
            </value>
            <seealso cref="P:Microsoft.Azure.Cosmos.Scripts.StoredProcedureRequestOptions.EnableScriptLogging"/>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.Scripts.StoredProcedureResponse">
            <summary>
            The cosmos stored procedure response
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Scripts.StoredProcedureResponse.#ctor">
            <summary>
            Create a <see cref="T:Microsoft.Azure.Cosmos.Scripts.StoredProcedureResponse"/> as a no-op for mock testing
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Scripts.StoredProcedureResponse.#ctor(System.Net.HttpStatusCode,Microsoft.Azure.Cosmos.Headers,Microsoft.Azure.Cosmos.Scripts.StoredProcedureProperties,Microsoft.Azure.Cosmos.CosmosDiagnostics)">
            <summary>
            A private constructor to ensure the factory is used to create the object.
            This will prevent memory leaks when handling the HttpResponseMessage
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.Scripts.StoredProcedureResponse.Headers">
            <inheritdoc/>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.Scripts.StoredProcedureResponse.Resource">
            <inheritdoc/>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.Scripts.StoredProcedureResponse.StatusCode">
            <inheritdoc/>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.Scripts.StoredProcedureResponse.Diagnostics">
            <inheritdoc/>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.Scripts.StoredProcedureResponse.RequestCharge">
            <inheritdoc/>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.Scripts.StoredProcedureResponse.ActivityId">
            <inheritdoc/>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.Scripts.StoredProcedureResponse.ETag">
            <inheritdoc/>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.Scripts.StoredProcedureResponse.MaxResourceQuota">
            <inheritdoc/>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.Scripts.StoredProcedureResponse.CurrentResourceQuotaUsage">
            <inheritdoc/>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.Scripts.StoredProcedureResponse.SessionToken">
            <summary>
            Gets the token for use with session consistency requests from the Azure Cosmos DB service.
            </summary>
            <value>
            The token for use with session consistency requests.
            </value>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Scripts.StoredProcedureResponse.op_Implicit(Microsoft.Azure.Cosmos.Scripts.StoredProcedureResponse)~Microsoft.Azure.Cosmos.Scripts.StoredProcedureProperties">
            <summary>
            Get <see cref="T:Microsoft.Azure.Cosmos.Scripts.StoredProcedureProperties"/> implicitly from <see cref="T:Microsoft.Azure.Cosmos.Scripts.StoredProcedureResponse"/>
            </summary>
            <param name="response">CosmosUserDefinedFunctionResponse</param>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.Scripts.TriggerResponse">
            <summary>
            The cosmos trigger response
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Scripts.TriggerResponse.#ctor">
            <summary>
            Create a <see cref="T:Microsoft.Azure.Cosmos.Scripts.TriggerResponse"/> as a no-op for mock testing
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Scripts.TriggerResponse.#ctor(System.Net.HttpStatusCode,Microsoft.Azure.Cosmos.Headers,Microsoft.Azure.Cosmos.Scripts.TriggerProperties,Microsoft.Azure.Cosmos.CosmosDiagnostics)">
            <summary>
            A private constructor to ensure the factory is used to create the object.
            This will prevent memory leaks when handling the HttpResponseMessage
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.Scripts.TriggerResponse.Headers">
            <inheritdoc/>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.Scripts.TriggerResponse.Resource">
            <inheritdoc/>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.Scripts.TriggerResponse.StatusCode">
            <inheritdoc/>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.Scripts.TriggerResponse.Diagnostics">
            <inheritdoc/>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.Scripts.TriggerResponse.RequestCharge">
            <inheritdoc/>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.Scripts.TriggerResponse.ActivityId">
            <inheritdoc/>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.Scripts.TriggerResponse.ETag">
            <inheritdoc/>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.Scripts.TriggerResponse.MaxResourceQuota">
            <inheritdoc/>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.Scripts.TriggerResponse.CurrentResourceQuotaUsage">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Scripts.TriggerResponse.op_Implicit(Microsoft.Azure.Cosmos.Scripts.TriggerResponse)~Microsoft.Azure.Cosmos.Scripts.TriggerProperties">
            <summary>
            Get <see cref="T:Microsoft.Azure.Cosmos.Scripts.TriggerProperties"/> implicitly from <see cref="T:Microsoft.Azure.Cosmos.Scripts.TriggerResponse"/>
            </summary>
            <param name="response">CosmosUserDefinedFunctionResponse</param>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.Scripts.UserDefinedFunctionResponse">
            <summary>
            The cosmos user defined function response
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Scripts.UserDefinedFunctionResponse.#ctor">
            <summary>
            Create a <see cref="T:Microsoft.Azure.Cosmos.Scripts.UserDefinedFunctionResponse"/> as a no-op for mock testing
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Scripts.UserDefinedFunctionResponse.#ctor(System.Net.HttpStatusCode,Microsoft.Azure.Cosmos.Headers,Microsoft.Azure.Cosmos.Scripts.UserDefinedFunctionProperties,Microsoft.Azure.Cosmos.CosmosDiagnostics)">
            <summary>
            A private constructor to ensure the factory is used to create the object.
            This will prevent memory leaks when handling the HttpResponseMessage
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.Scripts.UserDefinedFunctionResponse.Headers">
            <inheritdoc/>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.Scripts.UserDefinedFunctionResponse.Resource">
            <inheritdoc/>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.Scripts.UserDefinedFunctionResponse.StatusCode">
            <inheritdoc/>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.Scripts.UserDefinedFunctionResponse.Diagnostics">
            <inheritdoc/>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.Scripts.UserDefinedFunctionResponse.RequestCharge">
            <inheritdoc/>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.Scripts.UserDefinedFunctionResponse.ActivityId">
            <inheritdoc/>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.Scripts.UserDefinedFunctionResponse.ETag">
            <inheritdoc/>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.Scripts.UserDefinedFunctionResponse.MaxResourceQuota">
            <inheritdoc/>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.Scripts.UserDefinedFunctionResponse.CurrentResourceQuotaUsage">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Scripts.UserDefinedFunctionResponse.op_Implicit(Microsoft.Azure.Cosmos.Scripts.UserDefinedFunctionResponse)~Microsoft.Azure.Cosmos.Scripts.UserDefinedFunctionProperties">
            <summary>
            Get <see cref="T:Microsoft.Azure.Cosmos.Scripts.UserDefinedFunctionProperties"/> implicitly from <see cref="T:Microsoft.Azure.Cosmos.Scripts.UserDefinedFunctionResponse"/>
            </summary>
            <param name="response">UserDefinedFunctionResponse</param>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.Scripts.StoredProcedureProperties">
            <summary>
            Represents a stored procedure in the Azure Cosmos DB service.
            </summary>
            <remarks> 
            Azure Cosmos DB allows application logic written entirely in JavaScript to be executed directly inside the database engine under the database transaction.
            For additional details, refer to the server-side JavaScript API documentation.
            </remarks>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Scripts.StoredProcedureProperties.#ctor">
            <summary>
            Initializes a new instance of the Stored Procedure class for the Azure Cosmos DB service.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Scripts.StoredProcedureProperties.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the Stored Procedure class for the Azure Cosmos DB service.
            </summary>
            <param name="id">The Id of the resource in the Azure Cosmos service.</param>
            <param name="body">The body of the Azure Cosmos DB stored procedure.</param>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.Scripts.StoredProcedureProperties.Body">
            <summary>
            Gets or sets the body of the Azure Cosmos DB stored procedure.
            </summary>
            <value>The body of the stored procedure.</value>
            <remarks>Must be a valid JavaScript function. For e.g. "function () { getContext().getResponse().setBody('Hello World!'); }"</remarks>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.Scripts.StoredProcedureProperties.Id">
            <summary>
            Gets or sets the Id of the resource in the Azure Cosmos DB service.
            </summary>
            <value>The Id associated with the resource.</value>
            <remarks>
            <para>
            Every resource within an Azure Cosmos DB database account needs to have a unique identifier. 
            </para>
            <para>
            The following characters are restricted and cannot be used in the Id property:
             '/', '\\', '?', '#'
            </para>
            </remarks>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.Scripts.StoredProcedureProperties.ETag">
            <summary>
            Gets the entity tag associated with the resource from the Azure Cosmos DB service.
            </summary>
            <value>
            The entity tag associated with the resource.
            </value>
            <remarks>
            ETags are used for concurrency checking when updating resources. 
            </remarks>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.Scripts.StoredProcedureProperties.LastModified">
            <summary>
            Gets the last modified timestamp associated with <see cref="T:Microsoft.Azure.Cosmos.Scripts.StoredProcedureProperties" /> from the Azure Cosmos DB service.
            </summary>
            <value>The last modified timestamp associated with the resource.</value>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.Scripts.StoredProcedureProperties.ResourceId">
            <summary>
            Gets the Resource Id associated with the resource in the Azure Cosmos DB service.
            </summary>
            <value>
            The Resource Id associated with the resource.
            </value>
            <remarks>
            A Resource Id is the unique, immutable, identifier assigned to each Azure Cosmos DB 
            resource whether that is a database, a collection or a document.
            These resource ids are used when building up SelfLinks, a static addressable Uri for each resource within a database account.
            </remarks>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.Scripts.TriggerOperation">
            <summary>
            Specifies the operations on which a trigger should be executed in the Azure Cosmos DB service.
            </summary> 
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Scripts.TriggerOperation.All">
            <summary>
            Specifies all operations.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Scripts.TriggerOperation.Create">
            <summary>
            Specifies create operations only.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Scripts.TriggerOperation.Update">
            <summary>
            Specifies update operations only.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Scripts.TriggerOperation.Delete">
            <summary>
            Specifies delete operations only.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Scripts.TriggerOperation.Replace">
            <summary>
            Specifies replace operations only.
            </summary>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.Scripts.TriggerProperties">
            <summary>
            Represents a trigger in the Azure Cosmos DB service.
            </summary>
            <remarks> 
            Azure Cosmos DB supports pre and post triggers written in JavaScript to be executed on creates, updates and deletes. 
            For additional details, refer to the server-side JavaScript API documentation.
            </remarks>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.Scripts.TriggerProperties.Body">
            <summary>
            Gets or sets the body of the trigger for the Azure Cosmos DB service.
            </summary>
            <value>The body of the trigger.</value>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.Scripts.TriggerProperties.TriggerType">
            <summary>
            Gets or sets the type of the trigger for the Azure Cosmos DB service.
            </summary>
            <value>The body of the trigger.</value>
            <seealso cref="P:Microsoft.Azure.Cosmos.Scripts.TriggerProperties.TriggerType"/>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.Scripts.TriggerProperties.TriggerOperation">
            <summary>
            Gets or sets the operation the trigger is associated with for the Azure Cosmos DB service.
            </summary>
            <value>The operation the trigger is associated with.</value>
            <seealso cref="P:Microsoft.Azure.Cosmos.Scripts.TriggerProperties.TriggerOperation"/>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.Scripts.TriggerProperties.Id">
            <summary>
            Gets or sets the Id of the resource in the Azure Cosmos DB service.
            </summary>
            <value>The Id associated with the resource.</value>
            <remarks>
            <para>
            Every resource within an Azure Cosmos DB database account needs to have a unique identifier. 
            Unlike <see cref="P:Microsoft.Azure.Documents.Resource.ResourceId"/>, which is set internally, this Id is settable by the user and is not immutable.
            </para>
            <para>
            When working with document resources, they too have this settable Id property. 
            If an Id is not supplied by the user the SDK will automatically generate a new GUID and assign its value to this property before
            persisting the document in the database. 
            You can override this auto Id generation by setting the disableAutomaticIdGeneration parameter on the <see cref="T:Microsoft.Azure.Cosmos.DocumentClient"/> instance to true.
            This will prevent the SDK from generating new Ids. 
            </para>
            <para>
            The following characters are restricted and cannot be used in the Id property:
             '/', '\\', '?', '#'
            </para>
            </remarks>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.Scripts.TriggerProperties.ETag">
            <summary>
            Gets the entity tag associated with the resource from the Azure Cosmos DB service.
            </summary>
            <value>
            The entity tag associated with the resource.
            </value>
            <remarks>
            ETags are used for concurrency checking when updating resources. 
            </remarks>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.Scripts.TriggerType">
            <summary>
            Specifies the type of the trigger in the Azure Cosmos DB service.
            </summary> 
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Scripts.TriggerType.Pre">
            <summary>
            Trigger should be executed before the associated operation(s).
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Scripts.TriggerType.Post">
            <summary>
            Trigger should be executed after the associated operation(s).
            </summary>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.Scripts.UserDefinedFunctionProperties">
             <summary>
             Represents a user defined function in the Azure Cosmos service.
             </summary> 
             <remarks>
             Azure Cosmos supports JavaScript user defined functions (UDFs) which are stored in the database and can be used inside queries. 
             Refer to https://docs.microsoft.com/azure/cosmos-db/sql-api-sql-query#javascript-integration for how to use UDFs within queries.
             Refer to https://docs.microsoft.com/azure/cosmos-db/programming#udf for more details about implementing UDFs in JavaScript.
             </remarks>
             <example>
             The following examples show how to register and use UDFs.
             <code language="c#">
             <![CDATA[
             await this.container.UserDefinedFunctions.CreateUserDefinedFunctionAsync(
                 new UserDefinedFunctionProperties 
                 { 
                     Id = "calculateTax", 
                     Body = @"function(amt) { return amt * 0.05; }" 
                 });
            
             QueryDefinition sqlQuery = new QueryDefinition(
                 "SELECT VALUE udf.calculateTax(t.cost) FROM toDoActivity t where t.cost > @expensive and t.status = @status")
                 .WithParameter("@expensive", 9000)
                 .WithParameter("@status", "Done");
            
             FeedIterator<double> feedIterator = this.container.Items.GetItemsQueryIterator<double>(
                 sqlQueryDefinition: sqlQuery,
                 partitionKey: "Done");
            
             while (feedIterator.HasMoreResults)
             {
                 foreach (var tax in await feedIterator.ReadNextAsync())
                 {
                     Console.WriteLine(tax);
                 }
             }
             ]]>
             </code>
             </example>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.Scripts.UserDefinedFunctionProperties.Body">
            <summary>
            Gets or sets the body of the user defined function for the Azure Cosmos DB service.
            </summary>
            <value>The body of the user defined function.</value>
            <remarks>This must be a valid JavaScript function e.g. "function (input) { return input.toLowerCase(); }".</remarks>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.Scripts.UserDefinedFunctionProperties.Id">
            <summary>
            Gets or sets the Id of the resource in the Azure Cosmos DB service.
            </summary>
            <value>The Id associated with the resource.</value>
            <remarks>
            <para>
            Every resource within an Azure Cosmos DB database account needs to have a unique identifier. 
            Unlike <see cref="P:Microsoft.Azure.Documents.Resource.ResourceId"/>, which is set internally, this Id is settable by the user and is not immutable.
            </para>
            <para>
            When working with document resources, they too have this settable Id property. 
            If an Id is not supplied by the user the SDK will automatically generate a new GUID and assign its value to this property before
            persisting the document in the database. 
            You can override this auto Id generation by setting the disableAutomaticIdGeneration parameter on the <see cref="T:Microsoft.Azure.Cosmos.DocumentClient"/> instance to true.
            This will prevent the SDK from generating new Ids. 
            </para>
            <para>
            The following characters are restricted and cannot be used in the Id property:
             '/', '\\', '?', '#'
            </para>
            </remarks>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.Scripts.UserDefinedFunctionProperties.ETag">
            <summary>
            Gets the entity tag associated with the resource from the Azure Cosmos DB service.
            </summary>
            <value>
            The entity tag associated with the resource.
            </value>
            <remarks>
            ETags are used for concurrency checking when updating resources. 
            </remarks>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.ResourceFeedReader`1">
            <summary>
            The Azure Cosmos DB ResourceFeedReader class can be used to iterate through the resources of the specified type under a 
            feed, e.g., collections under a database or documents under a collection. Supports paginated read of results.
            </summary>
            <typeparam name="T">Resource type</typeparam>
            <remarks>
            <para>
            The database entities that Azure Cosmos DB manages like databases, collections and documents are referred to as resources, and each set 
            of resources is referred to as a feed. For example, a collection has a feed of documents, as well as a feed of stored procedures.
            <see cref="T:Microsoft.Azure.Cosmos.ResourceFeedReader`1"/> objects can be used to perform a "read feed", i.e, enumerate the specified resources under the 
            specified Azure Cosmos DB feed link. For more details, refer to <a href="http://azure.microsoft.com/documentation/articles/documentdb-resources/">
            Azure Cosmos DB resource model and concepts</a>.
            </para>
            </remarks>
            <example>
            The following example shows how to create a ResourceFeedReader to read all documents in a collection using the default page size.
            <code style="c#">
            <![CDATA[
            var feedReader = client.CreateDocumentFeedReader(collection1.SelfLink);
            var count = 0;
            while (feedReader.HasMoreResults)
            {
                count += feedReader.ExecuteNextAsync().Result.Count;
            }
            ]]>
            </code>
            </example>
            <example>
            The following example shows how to create a ResourceFeedReader for documents against a partitioned database using a Range partition key, and 
            a custom page size.
            <code style="c#">
            <![CDATA[
            feedCount = 0;
            ResourceFeedReader<Document> feedReader = client.CreateDocumentFeedReader(
                databaseLink, 
                new FeedOptions() { MaxItemCount = 1 }, 
                new Range<long>(0, 800));
            
            while (feedReader.HasMoreResults)
            {
                var feed = feedReader.ExecuteNextAsync().Result;
                feedCount += feed.Count;
            }
            ]]>
            </code>
            </example>
            <seealso cref="T:Microsoft.Azure.Documents.Resource"/>
            <seealso cref="T:Microsoft.Azure.Cosmos.DocumentClient"/>
            <seealso cref="T:Microsoft.Azure.Cosmos.ResourceFeedReaderClientExtensions"/>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.ResourceFeedReader`1.HasMoreResults">
            <summary>
            Gets a value indicating whether there are additional results to retrieve from the Azure Cosmos DB service.
            </summary>
            <returns>Returns true if there are additional results to retrieve. Returns false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.ResourceFeedReader`1.GetEnumerator">
            <summary>
            Retrieves an <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate over the resources from the Azure Cosmos DB service.
            </summary>
            <remarks>
            This call results in all pages for the feed being fetched synchronously.
            </remarks>
            <returns>An enumerator for the feed.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.ResourceFeedReader`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Retrieves an <see cref="T:System.Collections.IEnumerator"/> that can be used to iterate over the resources from the Azure Cosmos DB service.
            </summary>
            <returns>An enumerator for the feed.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.ResourceFeedReader`1.ExecuteNextAsync(System.Threading.CancellationToken)">
            <summary>
            Retrieves the next page of results from the Azure Cosmos DB service.
            </summary>
            <param name="cancellationToken">(Optional) The <see cref="T:System.Threading.CancellationToken"/> allows for notification that operations should be cancelled.</param>
            <returns>The response from a single call to ReadFeed for the specified resource.</returns>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.ResourceFeedReaderClientExtensions">
            <summary>
            Client extensions for creating <see cref="T:Microsoft.Azure.Cosmos.ResourceFeedReader`1"/> objects in the Azure Cosmos DB service.
            </summary>
            <remarks>
            For additional details and examples, please refer to <see cref="T:Microsoft.Azure.Cosmos.ResourceFeedReader`1"/>.
            </remarks>
            <seealso cref="T:Microsoft.Azure.Cosmos.ResourceFeedReader`1"/>
            <seealso cref="T:Microsoft.Azure.Documents.Resource"/>
            <seealso cref="T:Microsoft.Azure.Cosmos.DocumentClient"/>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.ResourceFeedReaderClientExtensions.CreateDatabaseFeedReader(Microsoft.Azure.Cosmos.DocumentClient,Microsoft.Azure.Cosmos.FeedOptions)">
            <summary>
            Creates a Feed Reader for databases in the Azure Cosmos DB service.
            </summary>
            <param name="client">The <see cref="T:Microsoft.Azure.Cosmos.DocumentClient"/> instance.</param>
            <param name="options">the <see cref="T:Microsoft.Azure.Cosmos.FeedOptions"/> options for the request.</param>
            <returns>A <see cref="T:Microsoft.Azure.Cosmos.ResourceFeedReader`1"/> instance.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.ResourceFeedReaderClientExtensions.CreateDocumentFeedReader(Microsoft.Azure.Cosmos.DocumentClient,System.String,Microsoft.Azure.Cosmos.FeedOptions,System.Object)">
            <summary>
            Creates a Feed Reader for Documents in the Azure Cosmos DB service.
            </summary>
            <param name="client">The <see cref="T:Microsoft.Azure.Cosmos.DocumentClient"/> instance.</param>
            <param name="documentsFeedOrDatabaseLink">The link for documents or self-link for database in case a partition resolver is used with the client</param>
            <param name="options">the <see cref="T:Microsoft.Azure.Cosmos.FeedOptions"/> options for the request.</param>
            <param name="partitionKey">The key used to determine the target collection</param>
            <returns>A <see cref="T:Microsoft.Azure.Cosmos.ResourceFeedReader`1"/> instance.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.ResourceFeedReaderClientExtensions.CreatePartitionKeyRangeFeedReader(Microsoft.Azure.Cosmos.DocumentClient,System.String,Microsoft.Azure.Cosmos.FeedOptions)">
            <summary>
            Creates a Feed Reader for PartitionKeyRanges in the Azure Cosmos DB service.
            </summary>
            <param name="client">The <see cref="T:Microsoft.Azure.Cosmos.DocumentClient"/> instance.</param>
            <param name="partitionKeyRangesLink">The link for partition key ranges</param>
            <param name="options">the <see cref="T:Microsoft.Azure.Cosmos.FeedOptions"/> options for the request.</param>
            <returns>A <see cref="T:Microsoft.Azure.Cosmos.ResourceFeedReader`1"/> instance.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.ResourceFeedReaderClientExtensions.CreateDocumentCollectionFeedReader(Microsoft.Azure.Cosmos.DocumentClient,System.String,Microsoft.Azure.Cosmos.FeedOptions)">
            <summary>
            Creates a Feed Reader for DocumentCollections in the Azure Cosmos DB service.
            </summary>
            <param name="client">The <see cref="T:Microsoft.Azure.Cosmos.DocumentClient"/> instance.</param>
            <param name="collectionsLink">The link for collections</param>
            <param name="options">the <see cref="T:Microsoft.Azure.Cosmos.FeedOptions"/> options for the request.</param>
            <returns>A <see cref="T:Microsoft.Azure.Cosmos.ResourceFeedReader`1"/> instance.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.ResourceFeedReaderClientExtensions.CreateUserFeedReader(Microsoft.Azure.Cosmos.DocumentClient,System.String,Microsoft.Azure.Cosmos.FeedOptions)">
            <summary>
            Creates a Feed Reader for Users from the Azure Cosmos DB service.
            </summary>
            <param name="client">The <see cref="T:Microsoft.Azure.Cosmos.DocumentClient"/> instance.</param>
            <param name="usersLink">The link for users</param>
            <param name="options">the <see cref="T:Microsoft.Azure.Cosmos.FeedOptions"/> options for the request.</param>
            <returns>A <see cref="T:Microsoft.Azure.Cosmos.ResourceFeedReader`1"/> instance.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.ResourceFeedReaderClientExtensions.CreateUserDefinedTypeFeedReader(Microsoft.Azure.Cosmos.DocumentClient,System.String,Microsoft.Azure.Cosmos.FeedOptions)">
            <summary>
            Creates a Feed Reader for User Defined Types from the Azure Cosmos DB service.
            </summary>
            <param name="client">The <see cref="T:Microsoft.Azure.Cosmos.DocumentClient"/> instance.</param>
            <param name="userDefinedTypesLink">The link for user defined types</param>
            <param name="options">the <see cref="T:Microsoft.Azure.Cosmos.FeedOptions"/> options for the request.</param>
            <returns>A <see cref="T:Microsoft.Azure.Cosmos.ResourceFeedReader`1"/> instance.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.ResourceFeedReaderClientExtensions.CreatePermissionFeedReader(Microsoft.Azure.Cosmos.DocumentClient,System.String,Microsoft.Azure.Cosmos.FeedOptions)">
            <summary>
            Creates a Feed Reader for Permissions from the Azure Cosmos DB service.
            </summary>
            <param name="client">The <see cref="T:Microsoft.Azure.Cosmos.DocumentClient"/> instance.</param>
            <param name="permissionsLink"></param>
            <param name="options">the <see cref="T:Microsoft.Azure.Cosmos.FeedOptions"/> options for the request.</param>
            <returns>A <see cref="T:Microsoft.Azure.Cosmos.ResourceFeedReader`1"/> instance.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.ResourceFeedReaderClientExtensions.CreateStoredProcedureFeedReader(Microsoft.Azure.Cosmos.DocumentClient,System.String,Microsoft.Azure.Cosmos.FeedOptions)">
            <summary>
            Creates a Feed Reader for StoredProcedures from the Azure Cosmos DB service.
            </summary>
            <param name="client">The <see cref="T:Microsoft.Azure.Cosmos.DocumentClient"/> instance.</param>
            <param name="storedProceduresLink">The link for stored procedures</param>
            <param name="options">the <see cref="T:Microsoft.Azure.Cosmos.FeedOptions"/> options for the request.</param>
            <returns>A <see cref="T:Microsoft.Azure.Cosmos.ResourceFeedReader`1"/> instance.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.ResourceFeedReaderClientExtensions.CreateTriggerFeedReader(Microsoft.Azure.Cosmos.DocumentClient,System.String,Microsoft.Azure.Cosmos.FeedOptions)">
            <summary>
            Creates a Feed Reader for Triggers from the Azure Cosmos DB service.
            </summary>
            <param name="client">The <see cref="T:Microsoft.Azure.Cosmos.DocumentClient"/> instance.</param>
            <param name="triggersLink">The link for triggers</param>
            <param name="options">the <see cref="T:Microsoft.Azure.Cosmos.FeedOptions"/> options for the request.</param>
            <returns>A <see cref="T:Microsoft.Azure.Cosmos.ResourceFeedReader`1"/> instance.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.ResourceFeedReaderClientExtensions.CreateUserDefinedFunctionFeedReader(Microsoft.Azure.Cosmos.DocumentClient,System.String,Microsoft.Azure.Cosmos.FeedOptions)">
            <summary>
            Creates a Feed Reader for UserDefinedFunctions from the Azure Cosmos DB service.
            </summary>
            <param name="client">The <see cref="T:Microsoft.Azure.Cosmos.DocumentClient"/> instance.</param>
            <param name="userDefinedFunctionsLink">The link for userDefinedFunctions</param>
            <param name="options">the <see cref="T:Microsoft.Azure.Cosmos.FeedOptions"/> options for the request.</param>
            <returns>A <see cref="T:Microsoft.Azure.Cosmos.ResourceFeedReader`1"/> instance.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.ResourceFeedReaderClientExtensions.CreateAttachmentFeedReader(Microsoft.Azure.Cosmos.DocumentClient,System.String,Microsoft.Azure.Cosmos.FeedOptions)">
            <summary>
            Creates a Feed Reader for Attachments from the Azure Cosmos DB service.
            </summary>
            <param name="client">The <see cref="T:Microsoft.Azure.Cosmos.DocumentClient"/> instance.</param>
            <param name="attachmentsLink">The link for attachments</param>
            <param name="options">the <see cref="T:Microsoft.Azure.Cosmos.FeedOptions"/> options for the request.</param>
            <returns>A <see cref="T:Microsoft.Azure.Cosmos.ResourceFeedReader`1"/> instance.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.ResourceFeedReaderClientExtensions.CreateConflictFeedReader(Microsoft.Azure.Cosmos.DocumentClient,System.String,Microsoft.Azure.Cosmos.FeedOptions)">
            <summary>
            Creates a Feed Reader for Conflicts from the Azure Cosmos DB service.
            </summary>
            <param name="client">The <see cref="T:Microsoft.Azure.Cosmos.DocumentClient"/> instance.</param>
            <param name="conflictsLink">The link for conflicts</param>
            <param name="options">the <see cref="T:Microsoft.Azure.Cosmos.FeedOptions"/> options for the request.</param>
            <returns>A <see cref="T:Microsoft.Azure.Cosmos.ResourceFeedReader`1"/> instance.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.ResourceFeedReaderClientExtensions.CreateSchemaFeedReader(Microsoft.Azure.Cosmos.DocumentClient,System.String,Microsoft.Azure.Cosmos.FeedOptions)">
            <summary>
            Creates a Feed Reader for Schemas from the Azure Cosmos DB service.
            </summary>
            <param name="client">The <see cref="T:Microsoft.Azure.Cosmos.DocumentClient"/> instance.</param>
            <param name="schemasLink">The link for schemas</param>
            <param name="options">the <see cref="T:Microsoft.Azure.Cosmos.FeedOptions"/> options for the request.</param>
            <returns>A <see cref="T:Microsoft.Azure.Cosmos.ResourceFeedReader`1"/> instance.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.ResourceFeedReaderClientExtensions.CreateOfferFeedReader(Microsoft.Azure.Cosmos.DocumentClient,Microsoft.Azure.Cosmos.FeedOptions)">
            <summary>
            Creates a Feed Reader for Offers in the Azure Cosmos DB service.
            </summary>
            <param name="client">The <see cref="T:Microsoft.Azure.Cosmos.DocumentClient"/> instance.</param>
            <param name="options">the <see cref="T:Microsoft.Azure.Cosmos.FeedOptions"/> options for the request.</param>
            <returns>A <see cref="T:Microsoft.Azure.Cosmos.ResourceFeedReader`1"/> instance.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.ResourceThrottleRetryPolicy.ShouldRetryAsync(System.Exception,System.Threading.CancellationToken)">
            <summary> 
            Should the caller retry the operation.
            </summary>
            <param name="exception">Exception that occured when the operation was tried</param>
            <param name="cancellationToken"></param>
            <returns>True indicates caller should retry, False otherwise</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.ResourceThrottleRetryPolicy.ShouldRetryAsync(Microsoft.Azure.Cosmos.ResponseMessage,System.Threading.CancellationToken)">
            <summary> 
            Should the caller retry the operation.
            </summary>
            <param name="cosmosResponseMessage"><see cref="T:Microsoft.Azure.Cosmos.ResponseMessage"/> in return of the request</param>
            <param name="cancellationToken"></param>
            <returns>True indicates caller should retry, False otherwise</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.ResourceThrottleRetryPolicy.OnBeforeSendRequest(Microsoft.Azure.Documents.DocumentServiceRequest)">
            <summary>
            Method that is called before a request is sent to allow the retry policy implementation
            to modify the state of the request.
            </summary>
            <param name="request">The request being sent to the service.</param>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.ResourceThrottleRetryPolicy.CheckIfRetryNeeded(System.Nullable{System.TimeSpan},System.TimeSpan@)">
            <summary>
            Returns True if the given <paramref name="retryAfter"/> is within retriable bounds
            </summary>
            <param name="retryAfter">Value of x-ms-retry-after-ms header</param>
            <param name="retryDelay">retryDelay</param>
            <returns>True if the exception is retriable; False otherwise</returns>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.ResourceToken">
            <summary>
            Resource token to be used to access resources.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.ResourceToken.ResourceLink">
            <summary> 
            Gets or sets the self-link of resource to which the token applies.
            </summary>
            <value>
            The self-link of the resource to which the token applies.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.ResourceToken.ResourcePartitionKey">
            <summary>
            Gets or sets optional partition key value for the token.
            A permission applies to resources when two conditions are met:
                  1. <see cref="P:Microsoft.Azure.Cosmos.ResourceToken.ResourceLink"/> is prefix of resource's link.
                        For example "/dbs/mydatabase/colls/mycollection" applies to "/dbs/mydatabase/colls/mycollection" and "/dbs/mydatabase/colls/mycollection/docs/mydocument"
                  2. <see cref="P:Microsoft.Azure.Cosmos.ResourceToken.ResourcePartitionKey"/> is superset of resource's partition key.
                        For example absent/empty partition key is superset of all partition keys.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.ResourceToken.Token">
            <summary>
            Gets the access token granting the defined permission.
            </summary>
            <value>
            The access token granting the defined permission.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.ClientContextCore.Client">
            <summary>
            The Cosmos client that is used for the request
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.ClientContextCore.CreateLink(System.String,System.String,System.String)">
            <summary>
            Generates the URI link for the resource
            </summary>
            <param name="parentLink">The parent link URI (/dbs/mydbId) </param>
            <param name="uriPathSegment">The URI path segment</param>
            <param name="id">The id of the resource</param>
            <returns>A resource link in the format of {parentLink}/this.UriPathSegment/this.Name with this.Name being a Uri escaped version</returns>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.Conflicts">
            <summary>
            Operations for reading/querying conflicts in a Azure Cosmos container.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Conflicts.DeleteAsync(Microsoft.Azure.Cosmos.ConflictProperties,Microsoft.Azure.Cosmos.PartitionKey,System.Threading.CancellationToken)">
            <summary>
            Delete a conflict from the Azure Cosmos service as an asynchronous operation.
            </summary>
            <param name="conflict">The conflict to delete.</param>
            <param name="partitionKey">The partition key for the conflict.</param>
            <param name="cancellationToken">(Optional) <see cref="T:System.Threading.CancellationToken"/> representing request cancellation.</param>
            <returns>A Task representing the asynchronous operation.</returns>
            <seealso cref="T:Microsoft.Azure.Cosmos.ConflictProperties"/>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Conflicts.ReadCurrentAsync``1(Microsoft.Azure.Cosmos.ConflictProperties,Microsoft.Azure.Cosmos.PartitionKey,System.Threading.CancellationToken)">
            <summary>
            Reads the item that originated the conflict.
            </summary>
            <param name="conflict">The conflict for which we want to read the item.</param>
            <param name="partitionKey">The partition key for the item.</param>
            <param name="cancellationToken">(Optional) <see cref="T:System.Threading.CancellationToken"/> representing request cancellation.</param>
            <returns>The current state of the item associated with the conflict.</returns>
            <seealso cref="T:Microsoft.Azure.Cosmos.ConflictProperties"/>
            <example>
            <code language="c#">
            <![CDATA[
            FeedIterator<ConflictProperties> conflictIterator = conflicts.GetConflictQueryIterator();
            while (conflictIterator.HasMoreResults)
            {
                foreach(ConflictProperties item in await conflictIterator.ReadNextAsync())
                {
                    MyClass intendedChanges = conflicts.ReadConflictContent<MyClass>(item);
                    ItemResponse<MyClass> currentState = await conflicts.ReadCurrentAsync<MyClass>(intendedChanges.MyPartitionKey, item);
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Conflicts.ReadConflictContent``1(Microsoft.Azure.Cosmos.ConflictProperties)">
            <summary>
            Reads the content of the Conflict resource in the Azure Cosmos DB service.
            </summary>
            <param name="conflict">The conflict for which we want to read the content of.</param>
            <returns>The content of the conflict.</returns>
            <seealso cref="T:Microsoft.Azure.Cosmos.ConflictProperties"/>
            <example>
            <code language="c#">
            <![CDATA[
            FeedIterator<ConflictProperties> conflictIterator = conflicts.GetConflictQueryIterator();
            while (conflictIterator.HasMoreResults)
            {
                foreach(ConflictProperties item in await conflictIterator.ReadNextAsync())
                {
                    MyClass intendedChanges = conflicts.ReadConflictContent<MyClass>(item);
                    ItemResponse<MyClass> currentState = await conflicts.ReadCurrentAsync<MyClass>(intendedChanges.MyPartitionKey, item);
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Conflicts.GetConflictQueryIterator``1(Microsoft.Azure.Cosmos.QueryDefinition,System.String,Microsoft.Azure.Cosmos.QueryRequestOptions)">
            <summary>
            Obtains an iterator to go through the <see cref="T:Microsoft.Azure.Cosmos.ConflictProperties"/> on an Azure Cosmos container.
            </summary>
            <param name="queryDefinition">The cosmos SQL query definition.</param>
            <param name="continuationToken">(Optional) The continuation token in the Azure Cosmos DB service.</param>
            <param name="requestOptions">(Optional) The options for the item query request <see cref="T:Microsoft.Azure.Cosmos.QueryRequestOptions"/></param>
            <returns>An iterator to go through the conflicts.</returns>
            <example>
            <code language="c#">
            <![CDATA[
            FeedIterator<ConflictProperties> conflictIterator = conflicts.GetConflictQueryIterator();
            while (conflictIterator.HasMoreResults)
            {
                foreach(ConflictProperties item in await conflictIterator.ReadNextAsync())
                {
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Conflicts.GetConflictQueryStreamIterator(Microsoft.Azure.Cosmos.QueryDefinition,System.String,Microsoft.Azure.Cosmos.QueryRequestOptions)">
            <summary>
            Gets an iterator to go through all the conflicts for the container as the original ResponseMessage
            </summary>
            <param name="queryDefinition">The cosmos SQL query definition.</param>
            <param name="continuationToken">(Optional) The continuation token in the Azure Cosmos DB service.</param>
            <param name="requestOptions">(Optional) The options for the item query request <see cref="T:Microsoft.Azure.Cosmos.QueryRequestOptions"/></param>
            <returns>An iterator to go through the conflicts.</returns>
            <example>
            <code language="c#">
            <![CDATA[
            FeedIterator conflictIterator = conflicts.GetConflictQueryStreamIterator();
            while (conflictIterator.HasMoreResults)
            {
                using (ResponseMessage iterator = await feedIterator.ReadNextAsync())
                {
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Conflicts.GetConflictQueryIterator``1(System.String,System.String,Microsoft.Azure.Cosmos.QueryRequestOptions)">
            <summary>
            Obtains an iterator to go through the <see cref="T:Microsoft.Azure.Cosmos.ConflictProperties"/> on an Azure Cosmos container.
            </summary>
            <param name="queryText">The cosmos SQL query text.</param>
            <param name="continuationToken">(Optional) The continuation token in the Azure Cosmos DB service.</param>
            <param name="requestOptions">(Optional) The options for the item query request <see cref="T:Microsoft.Azure.Cosmos.QueryRequestOptions"/></param>
            <returns>An iterator to go through the conflicts.</returns>
            <example>
            <code language="c#">
            <![CDATA[
            FeedIterator<ConflictProperties> conflictIterator = conflicts.GetConflictQueryIterator();
            while (conflictIterator.HasMoreResults)
            {
                foreach(ConflictProperties item in await conflictIterator.ReadNextAsync())
                {
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Conflicts.GetConflictQueryStreamIterator(System.String,System.String,Microsoft.Azure.Cosmos.QueryRequestOptions)">
            <summary>
            Gets an iterator to go through all the conflicts for the container as the original ResponseMessage
            </summary>
            <param name="queryText">The cosmos SQL query text.</param>
            <param name="continuationToken">(Optional) The continuation token in the Azure Cosmos DB service.</param>
            <param name="requestOptions">(Optional) The options for the item query request <see cref="T:Microsoft.Azure.Cosmos.QueryRequestOptions"/></param>
            <returns>An iterator to go through the conflicts.</returns>
            <example>
            <code language="c#">
            <![CDATA[
            FeedIterator conflictIterator = conflicts.GetConflictQueryStreamIterator();
            while (conflictIterator.HasMoreResults)
            {
                using (ResponseMessage iterator = await feedIterator.ReadNextAsync())
                {
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.Container">
            <summary>
            Operations for reading, replacing, or deleting a specific, existing container or item in a container by id.
            There are two different types of operations.
            1. The object operations where it serializes and deserializes the item on request/response
            2. The stream response which takes a Stream containing a JSON serialized object and returns a response containing a Stream
            <see cref="T:Microsoft.Azure.Cosmos.Database"/> for creating new containers, and reading/querying all containers;
            </summary>
            <remarks>
             Note: all these operations make calls against a fixed budget.
             You should design your system such that these calls scale sub linearly with your application.
             For instance, do not call `container.readAsync()` before every single `item.read()` call, to ensure the cosmosContainer exists;
             do this once on application start up.
            </remarks>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.Container.Id">
            <summary>
            The Id of the Cosmos container
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.Container.Conflicts">
            <summary>
            Returns the conflicts
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.Container.Scripts">
            <summary>
            Returns the scripts
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Container.ReadContainerAsync(Microsoft.Azure.Cosmos.ContainerRequestOptions,System.Threading.CancellationToken)">
            <summary>
            Reads a <see cref="T:Microsoft.Azure.Cosmos.ContainerProperties"/> from the Azure Cosmos service as an asynchronous operation.
            </summary>
            <param name="requestOptions">(Optional) The options for the container request <see cref="T:Microsoft.Azure.Cosmos.RequestOptions"/></param>
            <param name="cancellationToken">(Optional) <see cref="T:System.Threading.CancellationToken"/> representing request cancellation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> containing a <see cref="T:Microsoft.Azure.Cosmos.ContainerResponse"/> which wraps a <see cref="T:Microsoft.Azure.Cosmos.ContainerProperties"/> containing the read resource record.
            </returns>
            <exception cref="T:Microsoft.Azure.Cosmos.CosmosException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
            <list type="table">
                <listheader>
                    <term>StatusCode</term><description>Reason for exception</description>
                </listheader>
                <item>
                    <term>404</term><description>NotFound - This means the resource you tried to read did not exist.</description>
                </item>
                <item>
                    <term>429</term><description>TooManyRequests - This means you have exceeded the number of request units per second. Consult the DocumentClientException.RetryAfter value to see how long you should wait before retrying this operation.</description>
                </item>
            </list>
            </exception>
            <example>
            <code language="c#">
            <![CDATA[
            Container container = this.database.GetContainer("containerId");
            ContainerProperties containerProperties = await container.ReadContainerAsync();
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Container.ReadContainerStreamAsync(Microsoft.Azure.Cosmos.ContainerRequestOptions,System.Threading.CancellationToken)">
            <summary>
            Reads a <see cref="T:Microsoft.Azure.Cosmos.ContainerProperties"/> from the Azure Cosmos service as an asynchronous operation.
            </summary>
            <param name="requestOptions">(Optional) The options for the container request <see cref="T:Microsoft.Azure.Cosmos.RequestOptions"/></param>
            <param name="cancellationToken">(Optional) <see cref="T:System.Threading.CancellationToken"/> representing request cancellation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> containing a <see cref="T:Microsoft.Azure.Cosmos.ResponseMessage"/> containing the read resource record.
            </returns>
            <example>
            <code language="c#">
            <![CDATA[
            Container container = this.database.GetContainer("containerId");
            ResponseMessage response = await container.ReadContainerStreamAsync();
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Container.ReplaceContainerAsync(Microsoft.Azure.Cosmos.ContainerProperties,Microsoft.Azure.Cosmos.ContainerRequestOptions,System.Threading.CancellationToken)">
            <summary>
            Replace a <see cref="T:Microsoft.Azure.Cosmos.ContainerProperties"/> from the Azure Cosmos service as an asynchronous operation.
            </summary>
            <param name="containerProperties">The <see cref="T:Microsoft.Azure.Cosmos.ContainerProperties"/> object.</param>
            <param name="requestOptions">(Optional) The options for the container request <see cref="T:Microsoft.Azure.Cosmos.RequestOptions"/></param>
            <param name="cancellationToken">(Optional) <see cref="T:System.Threading.CancellationToken"/> representing request cancellation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> containing a <see cref="T:Microsoft.Azure.Cosmos.ContainerResponse"/> which wraps a <see cref="T:Microsoft.Azure.Cosmos.ContainerProperties"/> containing the replace resource record.
            </returns>
            <exception cref="T:Microsoft.Azure.Cosmos.CosmosException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
            <list type="table">
                <listheader>
                    <term>StatusCode</term><description>Reason for exception</description>
                </listheader>
                <item>
                    <term>404</term><description>NotFound - This means the resource you tried to read did not exist.</description>
                </item>
                <item>
                    <term>429</term><description>TooManyRequests - This means you have exceeded the number of request units per second. Consult the DocumentClientException.RetryAfter value to see how long you should wait before retrying this operation.</description>
                </item>
            </list>
            </exception>
            <example>
            Update the container to disable automatic indexing
            <code language="c#">
            <![CDATA[
            ContainerProperties containerProperties = containerReadResponse;
            containerProperties.IndexingPolicy.Automatic = false;
            ContainerResponse response = await container.ReplaceContainerAsync(containerProperties);
            ContainerProperties replacedProperties = response;
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Container.ReplaceContainerStreamAsync(Microsoft.Azure.Cosmos.ContainerProperties,Microsoft.Azure.Cosmos.ContainerRequestOptions,System.Threading.CancellationToken)">
             <summary>
             Replace a <see cref="T:Microsoft.Azure.Cosmos.ContainerProperties"/> from the Azure Cosmos service as an asynchronous operation.
             </summary>
             <param name="containerProperties">The <see cref="T:Microsoft.Azure.Cosmos.ContainerProperties"/>.</param>
             <param name="requestOptions">(Optional) The options for the container request <see cref="T:Microsoft.Azure.Cosmos.RequestOptions"/></param>
             <param name="cancellationToken">(Optional) <see cref="T:System.Threading.CancellationToken"/> representing request cancellation.</param>
             <returns>
             A <see cref="T:System.Threading.Tasks.Task"/> containing a <see cref="T:Microsoft.Azure.Cosmos.ResponseMessage"/> containing the replace resource record.
             </returns>
             <example>
            
             <code language="c#">
             <![CDATA[
             ContainerProperties containerProperties = containerReadResponse;
             containerProperties.IndexingPolicy.Automatic = false;
             ResponseMessage response = await container.ReplaceContainerStreamAsync(containerProperties);
             ]]>
             </code>
             </example>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Container.DeleteContainerAsync(Microsoft.Azure.Cosmos.ContainerRequestOptions,System.Threading.CancellationToken)">
            <summary>
            Delete a <see cref="T:Microsoft.Azure.Cosmos.ContainerProperties"/> from the Azure Cosmos DB service as an asynchronous operation.
            </summary>
            <param name="requestOptions">(Optional) The options for the container request <see cref="T:Microsoft.Azure.Cosmos.RequestOptions"/></param>
            <param name="cancellationToken">(Optional) <see cref="T:System.Threading.CancellationToken"/> representing request cancellation.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> containing a <see cref="T:Microsoft.Azure.Cosmos.ContainerResponse"/> which will contain information about the request issued.</returns>
            <exception cref="T:Microsoft.Azure.Cosmos.CosmosException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
            <list type="table">
                <listheader>
                    <term>StatusCode</term><description>Reason for exception</description>
                </listheader>
                <item>
                    <term>404</term><description>NotFound - This means the resource you tried to delete did not exist.</description>
                </item>
            </list>
            </exception>
            <example>
            <code language="c#">
            <![CDATA[
            Container container = this.database.GetContainer("containerId");
            ContainerResponse response = await container.DeleteContainerAsync();
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Container.DeleteContainerStreamAsync(Microsoft.Azure.Cosmos.ContainerRequestOptions,System.Threading.CancellationToken)">
            <summary>
            Delete a <see cref="T:Microsoft.Azure.Cosmos.ContainerProperties"/> from the Azure Cosmos DB service as an asynchronous operation.
            </summary>
            <param name="requestOptions">(Optional) The options for the container request <see cref="T:Microsoft.Azure.Cosmos.RequestOptions"/></param>
            <param name="cancellationToken">(Optional) <see cref="T:System.Threading.CancellationToken"/> representing request cancellation.</param>
            <example>
            <code language="c#">
            <![CDATA[
            Container container = this.database.GetContainer("containerId");
            ResponseMessage response = await container.DeleteContainerStreamAsync();
            ]]>
            </code>
            </example>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> containing a <see cref="T:Microsoft.Azure.Cosmos.ResponseMessage"/> which will contain information about the request issued.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Container.ReadThroughputAsync(System.Threading.CancellationToken)">
            <summary>
            Gets container throughput in measurement of request units per second in the Azure Cosmos service.
            </summary>
            <param name="cancellationToken">(Optional) <see cref="T:System.Threading.CancellationToken"/> representing request cancellation.</param>
            <returns>Provisioned throughput in request units per second</returns>
            <value>
            The provisioned throughput for this container.
            </value>
            <remarks>
            <para>
            Null value indicates a container with no throughput provisioned.
            </para>
            </remarks>
            <example>
            The following example shows how to get the throughput.
            <code language="c#">
            <![CDATA[
            int? throughput = await container.ReadThroughputAsync();
            ]]>
            </code>
            </example>
            <seealso href="https://docs.microsoft.com/azure/cosmos-db/request-units"/>
            <seealso href="https://docs.microsoft.com/azure/cosmos-db/set-throughput#set-throughput-on-a-database"/>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Container.ReadThroughputAsync(Microsoft.Azure.Cosmos.RequestOptions,System.Threading.CancellationToken)">
            <summary>
            Gets container throughput in measurement of request units per second in the Azure Cosmos service.
            </summary>
            <param name="requestOptions">The options for the throughput request.<see cref="T:Microsoft.Azure.Cosmos.RequestOptions"/></param>
            <param name="cancellationToken">(Optional) <see cref="T:System.Threading.CancellationToken"/> representing request cancellation.</param>
            <returns>The throughput response</returns>
            <value>
            The provisioned throughput for this container.
            </value>
            <remarks>
            <para>
            Refer to http://azure.microsoft.com/documentation/articles/documentdb-performance-levels/ for details on provision offer throughput.
            </para>
            </remarks>
            <example>
            The following example shows how to get the throughput
            <code language="c#">
            <![CDATA[
            RequestOptions requestOptions = new RequestOptions();
            ThroughputProperties throughputProperties = await container.ReadThroughputAsync(requestOptions);
            Console.WriteLine($"Throughput: {throughputProperties?.Throughput}");
            ]]>
            </code>
            </example>
            <example>
            The following example shows how to get throughput, MinThroughput and is replace in progress
            <code language="c#">
            <![CDATA[
            RequestOptions requestOptions = new RequestOptions();
            ThroughputResponse response = await container.ReadThroughputAsync(requestOptions);
            Console.WriteLine($"Throughput: {response.Resource?.Throughput}");
            Console.WriteLine($"MinThroughput: {response.MinThroughput}");
            Console.WriteLine($"IsReplacePending: {response.IsReplacePending}");
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Container.ReplaceThroughputAsync(System.Int32,Microsoft.Azure.Cosmos.RequestOptions,System.Threading.CancellationToken)">
            <summary>
            Sets throughput provisioned for a container in measurement of request units per second in the Azure Cosmos service.
            </summary>
            <param name="throughput">The cosmos container throughput, expressed in Request Units per second.</param>
            <param name="requestOptions">(Optional) The options for the throughput request.<see cref="T:Microsoft.Azure.Cosmos.RequestOptions"/></param>
            <param name="cancellationToken">(Optional) <see cref="T:System.Threading.CancellationToken"/> representing request cancellation.</param>
            <returns>The throughput response.</returns>
            <value>
            The provisioned throughput for this container.
            </value>
            <example>
            The following example shows how to get the throughput.
            <code language="c#">
            <![CDATA[
            ThroughputResponse throughput = await this.cosmosContainer.ReplaceThroughputAsync(400);
            ]]>
            </code>
            </example>
            <remarks>
            <seealso href="https://docs.microsoft.com/azure/cosmos-db/request-units"/> for details on provision throughput.
            </remarks>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Container.CreateItemStreamAsync(System.IO.Stream,Microsoft.Azure.Cosmos.PartitionKey,Microsoft.Azure.Cosmos.ItemRequestOptions,System.Threading.CancellationToken)">
            <summary>
            Creates a Item as an asynchronous operation in the Azure Cosmos service.
            </summary>
            <param name="streamPayload">A <see cref="T:System.IO.Stream"/> containing the payload.</param>
            <param name="partitionKey">The partition key for the item. <see cref="T:Microsoft.Azure.Cosmos.PartitionKey"/></param>
            <param name="requestOptions">(Optional) The options for the item request <see cref="T:Microsoft.Azure.Cosmos.ItemRequestOptions"/></param>
            <param name="cancellationToken">(Optional) <see cref="T:System.Threading.CancellationToken"/> representing request cancellation.</param>
            <returns>The <see cref="T:Microsoft.Azure.Cosmos.ResponseMessage"/> that was created contained within a <see cref="T:System.Threading.Tasks.Task"/> object representing the service response for the asynchronous operation.</returns>
            <exception>
            The Stream operation only throws on client side exceptions. This is to increase performance and prevent the overhead of throwing exceptions. Check the HTTP status code on the response to check if the operation failed.
            </exception>
            <example>
            This example creates an item in a Cosmos container.
            <code language="c#">
            <![CDATA[
            //Create the object in Cosmos
            using (ResponseMessage response = await this.Container.CreateItemStreamAsync(partitionKey: new PartitionKey("streamPartitionKey"), streamPayload: stream))
            {
                if (!response.IsSuccessStatusCode)
                {
                    //Handle and log exception
                    return;
                }
                
                using (Stream responseStream = await response.ReadBodyAsync())
                {
                    //Read or do other operations with the stream
                    using (StreamReader streamReader = new StreamReader(responseStream))
                    {
                        string responseContentAsString = await streamReader.ReadToEndAsync();
                    }
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Container.CreateItemAsync``1(``0,System.Nullable{Microsoft.Azure.Cosmos.PartitionKey},Microsoft.Azure.Cosmos.ItemRequestOptions,System.Threading.CancellationToken)">
             <summary>
             Creates a item as an asynchronous operation in the Azure Cosmos service.
             </summary>
             <param name="item">A JSON serializable object that must contain an id property. <see cref="T:Microsoft.Azure.Cosmos.CosmosSerializer"/> to implement a custom serializer</param>
             <param name="partitionKey">Partition key for the item. If not specified will be populated by extracting from {T}</param>
             <param name="requestOptions">(Optional) The options for the item request <see cref="T:Microsoft.Azure.Cosmos.ItemRequestOptions"/></param>
             <param name="cancellationToken">(Optional) <see cref="T:System.Threading.CancellationToken"/> representing request cancellation.</param>
             <returns>The <see cref="T:Microsoft.Azure.Cosmos.ItemResponse`1"/> that was created contained within a <see cref="T:System.Threading.Tasks.Task"/> object representing the service response for the asynchronous operation.</returns>
             <exception cref="T:System.AggregateException">Represents a consolidation of failures that occurred during async processing. Look within InnerExceptions to find the actual exception(s)</exception>
             <exception cref="T:Microsoft.Azure.Cosmos.CosmosException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
             <list type="table">
                 <listheader>
                     <term>StatusCode</term><description>Reason for exception</description>
                 </listheader>
                 <item>
                     <term>400</term><description>BadRequest - This means something was wrong with the document supplied. </description>
                 </item>
                 <item>
                     <term>403</term><description>Forbidden - This likely means the collection in to which you were trying to create the document is full.</description>
                 </item>
                 <item>
                     <term>409</term><description>Conflict - This means a item with an id matching the id field of <paramref name="item"/> already existed</description>
                 </item>
                 <item>
                     <term>413</term><description>RequestEntityTooLarge - This means the item exceeds the current max entity size. Consult documentation for limits and quotas.</description>
                 </item>
                 <item>
                     <term>429</term><description>TooManyRequests - This means you have exceeded the number of request units per second.</description>
                 </item>
             </list>
             </exception>
             <example>
             <code language="c#">
             <![CDATA[
             public class ToDoActivity{
                 public string id {get; set;}
                 public string status {get; set;}
             }
             
             ToDoActivity test = new ToDoActivity()
             {
                id = Guid.NewGuid().ToString(),
                status = "InProgress"
             };
            
             ItemResponse item = await this.container.CreateItemAsync<ToDoActivity>(tests, new PartitionKey(test.status));
             ]]>
             </code>
             </example>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Container.ReadItemStreamAsync(System.String,Microsoft.Azure.Cosmos.PartitionKey,Microsoft.Azure.Cosmos.ItemRequestOptions,System.Threading.CancellationToken)">
            <summary>
            Reads a item from the Azure Cosmos service as an asynchronous operation.
            </summary>
            <param name="id">The cosmos item id</param>
            <param name="partitionKey">The partition key for the item. <see cref="T:Microsoft.Azure.Cosmos.PartitionKey"/></param>
            <param name="requestOptions">(Optional) The options for the item request <see cref="T:Microsoft.Azure.Cosmos.ItemRequestOptions"/></param>
            <param name="cancellationToken">(Optional) <see cref="T:System.Threading.CancellationToken"/> representing request cancellation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> containing a <see cref="T:Microsoft.Azure.Cosmos.ResponseMessage"/> which wraps a <see cref="T:System.IO.Stream"/> containing the read resource record.
            </returns>
            <exception>
            The Stream operation only throws on client side exceptions. This is to increase performance and prevent the overhead of throwing exceptions. Check the HTTP status code on the response to check if the operation failed.
            </exception>
            <example>
            Read a response as a stream.
            <code language="c#">
            <![CDATA[
            using(ResponseMessage response = await this.container.ReadItemStreamAsync("id", new PartitionKey("partitionKey")))
            {
                if (!response.IsSuccessStatusCode)
                {
                    //Handle and log exception
                    return;
                }
                
                using(Stream stream = response.ReadBodyAsync())
                {
                    //Read or do other operations with the stream
                    using (StreamReader streamReader = new StreamReader(stream))
                    {
                        string content =  streamReader.ReadToEndAsync();
                    }
                }
            }
            
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Container.ReadItemAsync``1(System.String,Microsoft.Azure.Cosmos.PartitionKey,Microsoft.Azure.Cosmos.ItemRequestOptions,System.Threading.CancellationToken)">
            <summary>
            Reads a item from the Azure Cosmos service as an asynchronous operation.
            </summary>
            <param name="id">The cosmos item id</param>
            <param name="partitionKey">The partition key for the item. <see cref="T:Microsoft.Azure.Cosmos.PartitionKey"/></param>
            <param name="requestOptions">(Optional) The options for the item request <see cref="T:Microsoft.Azure.Cosmos.ItemRequestOptions"/></param>
            <param name="cancellationToken">(Optional) <see cref="T:System.Threading.CancellationToken"/> representing request cancellation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> containing a <see cref="T:Microsoft.Azure.Cosmos.ItemResponse`1"/> which wraps the read resource record.
            </returns>
            <remarks>
            Items contain meta data that can be obtained by mapping these meta data attributes to properties in <typeparamref name="T"/>.
            * "_ts": Gets the last modified time stamp associated with the item from the Azure Cosmos DB service.
            * "_etag": Gets the entity tag associated with the item from the Azure Cosmos DB service.
            * "ttl": Gets the time to live in seconds of the item in the Azure Cosmos DB service.
            </remarks>
            <exception cref="T:Microsoft.Azure.Cosmos.CosmosException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
            <list type="table">
                <listheader>
                    <term>StatusCode</term><description>Reason for exception</description>
                </listheader>
                <item>
                    <term>429</term><description>TooManyRequests - This means you have exceeded the number of request units per second.</description>
                </item>
            </list>
            </exception>
            <example>
            <code language="c#">
            <![CDATA[
            public class ToDoActivity{
                public string id {get; set;}
                public string status {get; set;}
            }
            
            ToDoActivity toDoActivity = await this.container.ReadItemAsync<ToDoActivity>("id", new PartitionKey("partitionKey"));
            
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Container.UpsertItemStreamAsync(System.IO.Stream,Microsoft.Azure.Cosmos.PartitionKey,Microsoft.Azure.Cosmos.ItemRequestOptions,System.Threading.CancellationToken)">
            <summary>
            Upserts an item stream as an asynchronous operation in the Azure Cosmos service.
            </summary>
            <param name="streamPayload">A <see cref="T:System.IO.Stream"/> containing the payload.</param>
            <param name="partitionKey">The partition key for the item. <see cref="T:Microsoft.Azure.Cosmos.PartitionKey"/></param>
            <param name="requestOptions">(Optional) The options for the item request <see cref="T:Microsoft.Azure.Cosmos.ItemRequestOptions"/></param>
            <param name="cancellationToken">(Optional) <see cref="T:System.Threading.CancellationToken"/> representing request cancellation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> containing a <see cref="T:Microsoft.Azure.Cosmos.ResponseMessage"/> which wraps a <see cref="T:System.IO.Stream"/> containing the read resource record.
            </returns>
            <exception>
            The Stream operation only throws on client side exceptions. 
            This is to increase performance and prevent the overhead of throwing exceptions. 
            Check the HTTP status code on the response to check if the operation failed.
            </exception>
            <example>
            Upsert a Stream containing the item to Cosmos
            <code language="c#">
            <![CDATA[
            using(ResponseMessage response = await this.container.UpsertItemStreamAsync(stream, new PartitionKey("itemPartitionKey")))
            {
                if (!response.IsSuccessStatusCode)
                {
                    //Handle and log exception
                    return;
                }
                
                using(Stream stream = response.ReadBodyAsync())
                {
                    //Read or do other operations with the stream
                    using (StreamReader  streamReader = new StreamReader(stream))
                    {
                        string content =  streamReader.ReadToEndAsync();
                    }
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Container.UpsertItemAsync``1(``0,System.Nullable{Microsoft.Azure.Cosmos.PartitionKey},Microsoft.Azure.Cosmos.ItemRequestOptions,System.Threading.CancellationToken)">
             <summary>
             Upserts an item as an asynchronous operation in the Azure Cosmos service.
             </summary>
             <param name="item">A JSON serializable object that must contain an id property. <see cref="T:Microsoft.Azure.Cosmos.CosmosSerializer"/> to implement a custom serializer</param>
             <param name="partitionKey">Partition key for the item. If not specified will be populated by extracting from {T}</param>
             <param name="requestOptions">(Optional) The options for the item request <see cref="T:Microsoft.Azure.Cosmos.ItemRequestOptions"/></param>
             <param name="cancellationToken">(Optional) <see cref="T:System.Threading.CancellationToken"/> representing request cancellation.</param>
             <returns>The <see cref="T:Microsoft.Azure.Cosmos.ItemResponse`1"/> that was upserted contained within a <see cref="T:System.Threading.Tasks.Task"/> object representing the service response for the asynchronous operation.</returns>
             <exception cref="T:System.AggregateException">Represents a consolidation of failures that occurred during async processing. Look within InnerExceptions to find the actual exception(s)</exception>
             <exception cref="T:Microsoft.Azure.Cosmos.CosmosException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
             <list type="table">
                 <listheader>
                     <term>StatusCode</term><description>Reason for exception</description>
                 </listheader>
                 <item>
                     <term>400</term><description>BadRequest - This means something was wrong with the document supplied.</description>
                 </item>
                 <item>
                     <term>403</term><description>Forbidden - This likely means the collection in to which you were trying to upsert the document is full.</description>
                 </item>
                 <item>
                     <term>413</term><description>RequestEntityTooLarge - This means the item exceeds the current max entity size. Consult documentation for limits and quotas.</description>
                 </item>
                 <item>
                     <term>429</term><description>TooManyRequests - This means you have exceeded the number of request units per second. Consult the DocumentClientException.RetryAfter value to see how long you should wait before retrying this operation.</description>
                 </item>
             </list>
             </exception>
             <example>
             <code language="c#">
             <![CDATA[
             public class ToDoActivity{
                 public string id {get; set;}
                 public string status {get; set;}
             }
             
             ToDoActivity test = new ToDoActivity()
             {
                id = Guid.NewGuid().ToString(),
                status = "InProgress"
             };
            
             ItemResponse<ToDoActivity> item = await this.container.UpsertItemAsync<ToDoActivity>(test, new PartitionKey(test.status));
             ]]>
             </code>
             </example>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Container.ReplaceItemStreamAsync(System.IO.Stream,System.String,Microsoft.Azure.Cosmos.PartitionKey,Microsoft.Azure.Cosmos.ItemRequestOptions,System.Threading.CancellationToken)">
            <summary>
            Replaces a item in the Azure Cosmos service as an asynchronous operation.
            </summary>
            <remarks>
            The item's partition key value is immutable. 
            To change an item's partition key value you must delete the original item and insert a new item.
            </remarks>
            <param name="streamPayload">A <see cref="T:System.IO.Stream"/> containing the payload.</param>
            <param name="id">The cosmos item id</param>
            <param name="partitionKey">The partition key for the item. <see cref="T:Microsoft.Azure.Cosmos.PartitionKey"/></param>
            <param name="requestOptions">(Optional) The options for the item request <see cref="T:Microsoft.Azure.Cosmos.ItemRequestOptions"/></param>
            <param name="cancellationToken">(Optional) <see cref="T:System.Threading.CancellationToken"/> representing request cancellation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> containing a <see cref="T:Microsoft.Azure.Cosmos.ResponseMessage"/> which wraps a <see cref="T:System.IO.Stream"/> containing the replace resource record.
            </returns>
            <exception>
            The Stream operation only throws on client side exceptions. 
            This is to increase performance and prevent the overhead of throwing exceptions. 
            Check the HTTP status code on the response to check if the operation failed.
            </exception>
            <example>
            Replace an item in Cosmos
            <code language="c#">
            <![CDATA[
            using(ResponseMessage response = await this.container.ReplaceItemStreamAsync(stream, "itemId", new PartitionKey("itemPartitionKey"))
            {
                if (!response.IsSuccessStatusCode)
                {
                    //Handle and log exception
                    return;
                }
                
                using(Stream stream = response.ReadBodyAsync())
                {
                    //Read or do other operations with the stream
                    using (StreamReader streamReader = new StreamReader(stream))
                    {
                        string content =  streamReader.ReadToEndAsync();
                    }
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Container.ReplaceItemAsync``1(``0,System.String,System.Nullable{Microsoft.Azure.Cosmos.PartitionKey},Microsoft.Azure.Cosmos.ItemRequestOptions,System.Threading.CancellationToken)">
             <summary>
             Replaces a item in the Azure Cosmos service as an asynchronous operation.
             </summary>
             <remarks>
             The item's partition key value is immutable. 
             To change an item's partition key value you must delete the original item and insert a new item.
             </remarks>
             <param name="item">A JSON serializable object that must contain an id property. <see cref="T:Microsoft.Azure.Cosmos.CosmosSerializer"/> to implement a custom serializer.</param>
             <param name="id">The cosmos item id, which is expected to match the value within T.</param>
             <param name="partitionKey">Partition key for the item. If not specified will be populated by extracting from {T}</param>
             <param name="requestOptions">(Optional) The options for the item request <see cref="T:Microsoft.Azure.Cosmos.ItemRequestOptions"/></param>
             <param name="cancellationToken">(Optional) <see cref="T:System.Threading.CancellationToken"/> representing request cancellation.</param>
             <returns>
             A <see cref="T:System.Threading.Tasks.Task"/> containing a <see cref="T:Microsoft.Azure.Cosmos.ItemResponse`1"/> which wraps the updated resource record.
             </returns>
             <exception cref="T:System.ArgumentNullException">If either <paramref name="item"/> is not set.</exception>
             <exception cref="T:Microsoft.Azure.Cosmos.CosmosException">
             This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property.
             <list type="table">
                 <listheader>
                     <term>StatusCode</term><description>Reason for exception</description>
                 </listheader>
                 <item>
                     <term>400</term><description>BadRequest - This means something was wrong with the document supplied. </description>
                 </item>
                 <item>
                     <term>403</term><description>Forbidden - This likely means the collection in to which you were trying to create the document is full.</description>
                 </item>
                 <item>
                     <term>413</term><description>RequestEntityTooLarge - This means the item exceeds the current max entity size. Consult documentation for limits and quotas.</description>
                 </item>
                 <item>
                     <term>429</term><description>TooManyRequests - This means you have exceeded the number of request units per second.</description>
                 </item>
             </list>
             </exception>
             <example>
             <code language="c#">
             <![CDATA[
             public class ToDoActivity{
                 public string id {get; set;}
                 public string status {get; set;}
             }
             
             ToDoActivity test = new ToDoActivity()
             {
                id = Guid.NewGuid().ToString(),
                status = "InProgress"
             };
            
             ItemResponse item = await this.container.ReplaceItemAsync<ToDoActivity>(test, test.id, new PartitionKey(test.status));
             ]]>
             </code>
             </example>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Container.DeleteItemStreamAsync(System.String,Microsoft.Azure.Cosmos.PartitionKey,Microsoft.Azure.Cosmos.ItemRequestOptions,System.Threading.CancellationToken)">
            <summary>
            Delete a item from the Azure Cosmos service as an asynchronous operation.
            </summary>
            <param name="id">The cosmos item id</param>
            <param name="partitionKey">The partition key for the item. <see cref="T:Microsoft.Azure.Cosmos.PartitionKey"/></param>
            <param name="requestOptions">(Optional) The options for the item request <see cref="T:Microsoft.Azure.Cosmos.ItemRequestOptions"/></param>
            <param name="cancellationToken">(Optional) <see cref="T:System.Threading.CancellationToken"/> representing request cancellation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> containing a <see cref="T:Microsoft.Azure.Cosmos.ResponseMessage"/> which wraps a <see cref="T:System.IO.Stream"/> containing the delete resource record.
            </returns>
            <exception>
            The Stream operation only throws on client side exceptions. This is to increase performance and prevent the overhead of throwing exceptions. Check the HTTP status code on the response to check if the operation failed.
            </exception>
            <example>
            Delete an item from Cosmos
            <code language="c#">
            <![CDATA[
            using(ResponseMessage response = await this.container.DeleteItemStreamAsync("itemId", new PartitionKey("itemPartitionKey")))
            {
                if (!response.IsSuccessStatusCode)
                {
                    //Handle and log exception
                    return;
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Container.DeleteItemAsync``1(System.String,Microsoft.Azure.Cosmos.PartitionKey,Microsoft.Azure.Cosmos.ItemRequestOptions,System.Threading.CancellationToken)">
            <summary>
            Delete a item from the Azure Cosmos service as an asynchronous operation.
            </summary>
            <param name="id">The cosmos item id</param>
            <param name="partitionKey">The partition key for the item. <see cref="T:Microsoft.Azure.Cosmos.PartitionKey"/></param>
            <param name="requestOptions">(Optional) The options for the item request <see cref="T:Microsoft.Azure.Cosmos.ItemRequestOptions"/></param>
            <param name="cancellationToken">(Optional) <see cref="T:System.Threading.CancellationToken"/> representing request cancellation.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> containing a <see cref="T:Microsoft.Azure.Cosmos.ItemResponse`1"/> which will contain information about the request issued.</returns>
            <exception cref="T:Microsoft.Azure.Cosmos.CosmosException">
            This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
            <list type="table">
                <listheader>
                    <term>StatusCode</term><description>Reason for exception</description>
                </listheader>
                <item>
                    <term>429</term><description>TooManyRequests - This means you have exceeded the number of request units per second.</description>
                </item>
            </list>
            </exception>
            <example>
            <code language="c#">
            <![CDATA[
            public class ToDoActivity{
                public string id {get; set;}
                public string status {get; set;}
            }
            
            ItemResponse item = await this.container.DeleteItemAsync<ToDoActivity>("partitionKey", "id");
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Container.GetItemQueryStreamIterator(Microsoft.Azure.Cosmos.QueryDefinition,System.String,Microsoft.Azure.Cosmos.QueryRequestOptions)">
             <summary>
              This method creates a query for items under a container in an Azure Cosmos database using a SQL statement with parameterized values. It returns a FeedIterator.
              For more information on preparing SQL statements with parameterized values, please see <see cref="T:Microsoft.Azure.Cosmos.QueryDefinition"/>.
             </summary>
             <param name="queryDefinition">The cosmos SQL query definition.</param>
             <param name="continuationToken">(Optional) The continuation token in the Azure Cosmos DB service.</param>
             <param name="requestOptions">(Optional) The options for the item query request <see cref="T:Microsoft.Azure.Cosmos.QueryRequestOptions"/></param>
             <returns>An iterator to go through the items.</returns>
             <remarks>
             Query as a stream only supports single partition queries 
             </remarks>
             <example>
             Create a query to get all the ToDoActivity that have a cost greater than 9000 for the specified partition
             <code language="c#">
             <![CDATA[
             public class ToDoActivity{
                 public string id {get; set;}
                 public string status {get; set;}
                 public int cost {get; set;}
             }
             
             QueryDefinition queryDefinition = new QueryDefinition("select * from ToDos t where t.cost > @expensive")
                 .WithParameter("@expensive", 9000);
             FeedIterator feedIterator = this.Container.GetItemQueryStreamIterator(
                 queryDefinition,
                 null,
                 new QueryRequestOptions() { PartitionKey = new PartitionKey("Error")});
            
             while (feedIterator.HasMoreResults)
             {
                 using (ResponseMessage response = await feedIterator.ReadNextAsync())
                 {
                     using (StreamReader sr = new StreamReader(response.Content))
                     using (JsonTextReader jtr = new JsonTextReader(sr))
                     {
                         JObject result = JObject.Load(jtr);
                     }
                 }
             }
             ]]>
             </code>
             </example>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Container.GetItemQueryIterator``1(Microsoft.Azure.Cosmos.QueryDefinition,System.String,Microsoft.Azure.Cosmos.QueryRequestOptions)">
             <summary>
              This method creates a query for items under a container in an Azure Cosmos database using a SQL statement with parameterized values. It returns a FeedIterator.
              For more information on preparing SQL statements with parameterized values, please see <see cref="T:Microsoft.Azure.Cosmos.QueryDefinition"/>.
             </summary>
             <param name="queryDefinition">The cosmos SQL query definition.</param>
             <param name="continuationToken">(Optional) The continuation token in the Azure Cosmos DB service.</param>
             <param name="requestOptions">(Optional) The options for the item query request <see cref="T:Microsoft.Azure.Cosmos.QueryRequestOptions"/></param>
             <returns>An iterator to go through the items.</returns>
             <example>
             Create a query to get all the ToDoActivity that have a cost greater than 9000
             <code language="c#">
             <![CDATA[
             public class ToDoActivity{
                 public string id {get; set;}
                 public string status {get; set;}
                 public int cost {get; set;}
             }
             
             QueryDefinition queryDefinition = new QueryDefinition("select * from ToDos t where t.cost > @expensive")
                 .WithParameter("@expensive", 9000);
             FeedIterator<ToDoActivity> feedIterator = this.Container.GetItemQueryIterator<ToDoActivity>(
                 queryDefinition,
                 null,
                 new QueryRequestOptions() { PartitionKey = new PartitionKey("Error")});
            
             while (feedIterator.HasMoreResults)
             {
                 foreach(var item in await feedIterator.ReadNextAsync()){
                 {
                     Console.WriteLine(item.cost); 
                 }
             }
             ]]>
             </code>
             </example>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Container.GetItemQueryStreamIterator(System.String,System.String,Microsoft.Azure.Cosmos.QueryRequestOptions)">
             <summary>
              This method creates a query for items under a container in an Azure Cosmos database using a SQL statement with parameterized values. It returns a FeedIterator.
              For more information on preparing SQL statements with parameterized values, please see <see cref="T:Microsoft.Azure.Cosmos.QueryDefinition"/>.
             </summary>
             <param name="queryText">The cosmos SQL query text.</param>
             <param name="continuationToken">(Optional) The continuation token in the Azure Cosmos DB service.</param>
             <param name="requestOptions">(Optional) The options for the item query request <see cref="T:Microsoft.Azure.Cosmos.QueryRequestOptions"/></param>
             <returns>An iterator to go through the items.</returns>
             <remarks>
             Query as a stream only supports single partition queries 
             </remarks>
             <example>
             1. Create a query to get all the ToDoActivity that have a cost greater than 9000 for the specified partition
             <code language="c#">
             <![CDATA[
             public class ToDoActivity{
                 public string id {get; set;}
                 public string status {get; set;}
                 public int cost {get; set;}
             }
             
             FeedIterator feedIterator = this.Container.GetItemQueryStreamIterator(
                 "select * from ToDos t where t.cost > 9000",
                 null,
                 new QueryRequestOptions() { PartitionKey = new PartitionKey("Error")});
            
             while (feedIterator.HasMoreResults)
             {
                 using (ResponseMessage response = await feedIterator.ReadNextAsync())
                 {
                     using (StreamReader sr = new StreamReader(response.Content))
                     using (JsonTextReader jtr = new JsonTextReader(sr))
                     {
                         JObject result = JObject.Load(jtr);
                     }
                 }
             }
             ]]>
             </code>
             </example>
             <example>
             2. Creates a FeedIterator to get all the ToDoActivity.
             <code language="c#">
             <![CDATA[
             public class ToDoActivity{
                 public string id {get; set;}
                 public string status {get; set;}
                 public int cost {get; set;}
             }
            
             FeedIterator feedIterator = this.Container.GetItemQueryStreamIterator(
                 null,
                 null,
                 new QueryRequestOptions() { PartitionKey = new PartitionKey("Error")});
            
             while (feedIterator.HasMoreResults)
             {
                 using (ResponseMessage response = await feedIterator.ReadNextAsync())
                 {
                     using (StreamReader sr = new StreamReader(response.Content))
                     using (JsonTextReader jtr = new JsonTextReader(sr))
                     {
                         JObject result = JObject.Load(jtr);
                     }
                 }
             }
             ]]>
             </code>
             </example>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Container.GetItemQueryIterator``1(System.String,System.String,Microsoft.Azure.Cosmos.QueryRequestOptions)">
             <summary>
              This method creates a query for items under a container in an Azure Cosmos database using a SQL statement with parameterized values. It returns a FeedIterator.
              For more information on preparing SQL statements with parameterized values, please see <see cref="T:Microsoft.Azure.Cosmos.QueryDefinition"/>.
             </summary>
             <param name="queryText">The cosmos SQL query text.</param>
             <param name="continuationToken">(Optional) The continuation token in the Azure Cosmos DB service.</param>
             <param name="requestOptions">(Optional) The options for the item query request <see cref="T:Microsoft.Azure.Cosmos.QueryRequestOptions"/></param>
             <returns>An iterator to go through the items.</returns>
             <example>
             1. Create a query to get all the ToDoActivity that have a cost greater than 9000
             <code language="c#">
             <![CDATA[
             public class ToDoActivity{
                 public string id {get; set;}
                 public string status {get; set;}
                 public int cost {get; set;}
             }
             
             FeedIterator<ToDoActivity> feedIterator = this.Container.GetItemQueryIterator<ToDoActivity>(
                 "select * from ToDos t where t.cost > 9000",
                 null,
                 new QueryRequestOptions() { PartitionKey = new PartitionKey("Error")});
            
             while (feedIterator.HasMoreResults)
             {
                 foreach(var item in await feedIterator.ReadNextAsync()){
                 {
                     Console.WriteLine(item.cost);
                 }
             }
             ]]>
             </code>
             </example>
             <example>
             2. Create a FeedIterator to get all the ToDoActivity.
             <code language="c#">
             <![CDATA[
             public class ToDoActivity{
                 public string id {get; set;}
                 public string status {get; set;}
                 public int cost {get; set;}
             }
            
             FeedIterator<ToDoActivity> feedIterator = this.Container.GetItemQueryIterator<ToDoActivity>(
                 null,
                 null,
                 new QueryRequestOptions() { PartitionKey = new PartitionKey("Error")});
            
             while (feedIterator.HasMoreResults)
             {
                 foreach(var item in await feedIterator.ReadNextAsync()){
                 {
                     Console.WriteLine(item.cost); 
                 }
             }
             ]]>
             </code>
             </example>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Container.GetItemLinqQueryable``1(System.Boolean,System.String,Microsoft.Azure.Cosmos.QueryRequestOptions)">
             <summary>
             This method creates a LINQ query for items under a container in an Azure Cosmos DB service.
             IQueryable extension method ToFeedIterator() should be use for asynchronous execution with FeedIterator, please refer to example 2.
             </summary>
             <remarks>
             LINQ execution is synchronous which will cause issues related to blocking calls. 
             It is recommended to always use ToFeedIterator(), and to do the asynchronous execution.
             </remarks>
             <typeparam name="T">The type of object to query.</typeparam>
             <param name="allowSynchronousQueryExecution">(Optional)the option which allows the query to be executed synchronously via IOrderedQueryable.</param>
             <param name="continuationToken">(Optional) The continuation token in the Azure Cosmos DB service.</param>
             <param name="requestOptions">(Optional)The options for the item query request.<see cref="T:Microsoft.Azure.Cosmos.QueryRequestOptions"/></param>
             <returns>(Optional) An IOrderedQueryable{T} that can evaluate the query.</returns>
             <example>
             1. This example below shows LINQ query generation and blocked execution.
             <code language="c#">
             <![CDATA[
             public class Book 
             {
                 public string Title {get; set;}
                 
                 public Author Author {get; set;}
                 
                 public int Price {get; set;}
             }
             
             public class Author
             {
                 public string FirstName {get; set;}
                 public string LastName {get; set;}
             }
              
             // Query by the Title property
             Book book = container.GetItemLinqQueryable<Book>(true)
                                  .Where(b => b.Title == "War and Peace")
                                  .AsEnumerable()
                                  .FirstOrDefault();
             
             // Query a nested property
             Book otherBook = container.GetItemLinqQueryable<Book>(true)
                                       .Where(b => b.Author.FirstName == "Leo")
                                       .AsEnumerable()
                                       .FirstOrDefault();
             
             // Perform iteration on books
             foreach (Book matchingBook in container.GetItemLinqQueryable<Book>(true)
                                        .Where(b => b.Price > 100))
             {
                 // Iterate through books
             }
             ]]>
             </code>
             </example>
             <example>
             2. This example below shows LINQ query generation and asynchronous execution with FeedIterator.
             <code language="c#">
             <![CDATA[
            
             // LINQ query generation
             var setIterator = container.GetItemLinqQueryable<Book>()
                                  .Where(b => b.Title == "War and Peace")
                                  .ToFeedIterator();
                                  
             //Asynchronous query execution
             while (setIterator.HasMoreResults)
             {
                 foreach(var item in await feedIterator.ReadNextAsync()){
                 {
                     Console.WriteLine(item.cost); 
                 }
             }
            
             ]]>
             </code>
             </example>
             <remarks>
             The Azure Cosmos DB LINQ provider compiles LINQ to SQL statements. Refer to http://azure.microsoft.com/documentation/articles/documentdb-sql-query/#linq-to-documentdb-sql for the list of expressions supported by the Azure Cosmos DB LINQ provider. ToString() on the generated IQueryable returns the translated SQL statement. The Azure Cosmos DB provider translates JSON.NET and DataContract serialization attributes for members to their JSON property names.
             </remarks>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.Container.ChangesHandler`1">
            <summary>
            Delegate to receive the changes within a <see cref="T:Microsoft.Azure.Cosmos.ChangeFeedProcessor"/> execution.
            </summary>
            <param name="changes">The changes that happened.</param>
            <param name="cancellationToken">A cancellation token representing the current cancellation status of the <see cref="T:Microsoft.Azure.Cosmos.ChangeFeedProcessor"/> instance.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation that is going to be done with the changes.</returns>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.Container.ChangesEstimationHandler">
            <summary>
            Delegate to receive the estimation of pending changes to be read by the associated <see cref="T:Microsoft.Azure.Cosmos.ChangeFeedProcessor"/> instance.
            </summary>
            <param name="estimatedPendingChanges">An estimation in number of items.</param>
            <param name="cancellationToken">A cancellation token representing the current cancellation status of the <see cref="T:Microsoft.Azure.Cosmos.ChangeFeedProcessor"/> instance.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation that is going to be done with the estimation.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Container.GetChangeFeedProcessorBuilder``1(System.String,Microsoft.Azure.Cosmos.Container.ChangesHandler{``0})">
            <summary>
            Initializes a <see cref="T:Microsoft.Azure.Cosmos.ChangeFeedProcessorBuilder"/> for change feed processing.
            </summary>
            <param name="processorName">A name that identifies the Processor and the particular work it will do.</param>
            <param name="onChangesDelegate">Delegate to receive changes.</param>
            <returns>An instance of <see cref="T:Microsoft.Azure.Cosmos.ChangeFeedProcessorBuilder"/></returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Container.GetChangeFeedEstimatorBuilder(System.String,Microsoft.Azure.Cosmos.Container.ChangesEstimationHandler,System.Nullable{System.TimeSpan})">
            <summary>
            Initializes a <see cref="T:Microsoft.Azure.Cosmos.ChangeFeedProcessorBuilder"/> for change feed monitoring.
            </summary>
            <param name="processorName">The name of the Processor the Estimator is going to measure.</param>
            <param name="estimationDelegate">Delegate to receive estimation.</param>
            <param name="estimationPeriod">Time interval on which to report the estimation. Default is 5 seconds.</param>
            <remarks>
            The goal of the Estimator is to measure progress of a particular processor. In order to do that, the <paramref name="processorName"/> and other parameters, like the leases container, need to match that of the Processor to measure.
            </remarks>
            <returns>An instance of <see cref="T:Microsoft.Azure.Cosmos.ChangeFeedProcessorBuilder"/></returns>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.ContainerCore">
            <summary>
            Operations for reading, replacing, or deleting a specific, existing container by id.
            
            <see cref="T:Microsoft.Azure.Cosmos.Database"/> for creating new containers, and reading/querying all containers;
            </summary>
            <summary>
            Used to perform operations on items. There are two different types of operations.
            1. The object operations where it serializes and deserializes the item on request/response
            2. The stream response which takes a Stream containing a JSON serialized object and returns a response containing a Stream
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.ContainerCore.#ctor">
            <summary>
            Only used for unit testing
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.ContainerCore.GetCachedContainerPropertiesAsync(System.Threading.CancellationToken)">
            <summary>
            Gets the container's Properties by using the internal cache.
            In case the cache does not have information about this container, it may end up making a server call to fetch the data.
            </summary>
            <param name="cancellationToken"><see cref="T:System.Threading.CancellationToken"/> representing request cancellation.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> containing the <see cref="T:Microsoft.Azure.Cosmos.ContainerProperties"/> for this container.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.ContainerCore.GetPartitionKeyPathTokensAsync(System.Threading.CancellationToken)">
            <summary>
            Used by typed API only. Exceptions are allowed.
            </summary>
            <param name="cancellationToken"></param>
            <returns>Returns the partition key path</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.ContainerCore.GetNonePartitionKeyValueAsync(System.Threading.CancellationToken)">
            <summary>
            Instantiates a new instance of the <see cref="T:Microsoft.Azure.Documents.Routing.PartitionKeyInternal"/> object.
            </summary>
            <remarks>
            The function selects the right partition key constant for inserting documents that don't have
            a value for partition key. The constant selection is based on whether the collection is migrated
            or user partitioned
            
            For non-existing container will throw <see cref="T:Microsoft.Azure.Documents.DocumentClientException"/> with 404 as status code
            </remarks>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.ContainerCore.cachedUriSegmentWithoutId">
            <summary>
            Cache the full URI segment without the last resource id.
            This allows only a single con-cat operation instead of building the full URI string each time.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.ContainerCore.GetItemQueryStreamIteratorInternal(Microsoft.Azure.Cosmos.SqlQuerySpec,System.Boolean,System.String,Microsoft.Azure.Cosmos.QueryRequestOptions)">
            <summary>
            Helper method to create a stream feed iterator.
            It decides if it is a query or read feed and create
            the correct instance.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.ContainerCore.ValidatePartitionKey(System.Object,Microsoft.Azure.Cosmos.RequestOptions)">
            <summary>
            Throw an exception if the partition key is null or empty string
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.ContainerCore.GetResourceSegmentUriWithoutId">
            <summary>
            Gets the full resource segment URI without the last id.
            </summary>
            <returns>Example: /dbs/*/colls/*/{this.pathSegment}/ </returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.ContainerCore.ContcatCachedUriWithId(System.String)">
            <summary>
            Gets the full resource URI using the cached resource URI segment 
            </summary>
            <param name="resourceId">The resource id</param>
            <returns>
            A document link in the format of {CachedUriSegmentWithoutId}/{0}/ with {0} being a Uri escaped version of the <paramref name="resourceId"/>
            </returns>
            <remarks>Would be used when creating an <see cref="T:Microsoft.Azure.Documents.Attachment"/>, or when replacing or deleting a item in Azure Cosmos DB.</remarks>
            <seealso cref="M:System.Uri.EscapeUriString(System.String)"/>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.ContainerResponse">
            <summary>
            The cosmos container response
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.ContainerResponse.#ctor">
            <summary>
            Create a <see cref="T:Microsoft.Azure.Cosmos.ContainerResponse"/> as a no-op for mock testing
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.ContainerResponse.#ctor(System.Net.HttpStatusCode,Microsoft.Azure.Cosmos.Headers,Microsoft.Azure.Cosmos.ContainerProperties,Microsoft.Azure.Cosmos.Container,Microsoft.Azure.Cosmos.CosmosDiagnostics)">
            <summary>
            A private constructor to ensure the factory is used to create the object.
            This will prevent memory leaks when handling the HttpResponseMessage
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.ContainerResponse.Container">
            <summary>
            The reference to the cosmos container. This allows additional operations on the container
            or for easy access to other references like Items, StoredProcedures, etc..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.ContainerResponse.Headers">
            <inheritdoc/>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.ContainerResponse.Resource">
            <inheritdoc/>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.ContainerResponse.StatusCode">
            <inheritdoc/>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.ContainerResponse.Diagnostics">
            <inheritdoc/>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.ContainerResponse.RequestCharge">
            <inheritdoc/>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.ContainerResponse.ActivityId">
            <inheritdoc/>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.ContainerResponse.ETag">
            <inheritdoc/>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.ContainerResponse.MaxResourceQuota">
            <inheritdoc/>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.ContainerResponse.CurrentResourceQuotaUsage">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.ContainerResponse.op_Implicit(Microsoft.Azure.Cosmos.ContainerResponse)~Microsoft.Azure.Cosmos.Container">
            <summary>
            Get <see cref="T:Microsoft.Azure.Cosmos.Container"/> implicitly from <see cref="T:Microsoft.Azure.Cosmos.ContainerResponse"/>
            </summary>
            <param name="response">ContainerResponse</param>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.ItemResponse`1">
            <summary>
            The cosmos item response
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.ItemResponse`1.#ctor">
            <summary>
            Create a <see cref="T:Microsoft.Azure.Cosmos.ItemResponse`1"/> as a no-op for mock testing
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.ItemResponse`1.#ctor(System.Net.HttpStatusCode,Microsoft.Azure.Cosmos.Headers,`0,Microsoft.Azure.Cosmos.CosmosDiagnostics)">
            <summary>
            A private constructor to ensure the factory is used to create the object.
            This will prevent memory leaks when handling the CosmosResponseMessage
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.ItemResponse`1.Headers">
            <inheritdoc/>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.ItemResponse`1.Resource">
            <inheritdoc/>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.ItemResponse`1.StatusCode">
            <inheritdoc/>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.ItemResponse`1.Diagnostics">
            <inheritdoc/>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.ItemResponse`1.RequestCharge">
            <inheritdoc/>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.ItemResponse`1.ActivityId">
            <inheritdoc/>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.ItemResponse`1.ETag">
            <inheritdoc/>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.ItemResponse`1.MaxResourceQuota">
            <inheritdoc/>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.ItemResponse`1.CurrentResourceQuotaUsage">
            <inheritdoc/>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.CosmosClientContext">
            <summary>
            This class is used to get access to different client level operations without directly referencing the client object.
            This makes it easy to pass a reference to the client, and it makes it easy to mock for unit tests.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.CosmosClientContext.Client">
            <summary>
            The Cosmos client that is used for the request
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.CosmosClientContext.CreateLink(System.String,System.String,System.String)">
            <summary>
            Generates the URI link for the resource
            </summary>
            <param name="parentLink">The parent link URI (/dbs/mydbId) </param>
            <param name="uriPathSegment">The URI path segment</param>
            <param name="id">The id of the resource</param>
            <returns>A resource link in the format of {parentLink}/this.UriPathSegment/this.Name with this.Name being a Uri escaped version</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.CosmosClientContext.ProcessResourceOperationStreamAsync(System.Uri,Microsoft.Azure.Documents.ResourceType,Microsoft.Azure.Documents.OperationType,Microsoft.Azure.Cosmos.RequestOptions,Microsoft.Azure.Cosmos.ContainerCore,System.Nullable{Microsoft.Azure.Cosmos.PartitionKey},System.String,System.IO.Stream,System.Action{Microsoft.Azure.Cosmos.RequestMessage},System.Threading.CancellationToken)">
            <summary>
            This is a wrapper around ExecUtil method. This allows the calls to be mocked so logic done 
            in a resource can be unit tested.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.CosmosClientContext.ProcessResourceOperationStreamAsync(System.Uri,Microsoft.Azure.Documents.ResourceType,Microsoft.Azure.Documents.OperationType,Microsoft.Azure.Cosmos.RequestOptions,Microsoft.Azure.Cosmos.ContainerCore,System.Nullable{Microsoft.Azure.Cosmos.PartitionKey},System.IO.Stream,System.Action{Microsoft.Azure.Cosmos.RequestMessage},System.Threading.CancellationToken)">
            <summary>
            This is a wrapper around ExecUtil method. This allows the calls to be mocked so logic done 
            in a resource can be unit tested.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.CosmosClientContext.ProcessResourceOperationAsync``1(System.Uri,Microsoft.Azure.Documents.ResourceType,Microsoft.Azure.Documents.OperationType,Microsoft.Azure.Cosmos.RequestOptions,Microsoft.Azure.Cosmos.ContainerCore,System.Nullable{Microsoft.Azure.Cosmos.PartitionKey},System.IO.Stream,System.Action{Microsoft.Azure.Cosmos.RequestMessage},System.Func{Microsoft.Azure.Cosmos.ResponseMessage,``0},System.Threading.CancellationToken)">
            <summary>
            This is a wrapper around request invoker method. This allows the calls to be mocked so logic done 
            in a resource can be unit tested.
            </summary>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.CosmosException">
            <summary>
            The Cosmos Client exception
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.CosmosException.#ctor(System.String,System.Net.HttpStatusCode,System.Int32,System.String,System.Double)">
            <summary>
            Create a <see cref="T:Microsoft.Azure.Cosmos.CosmosException"/>
            </summary>
            <param name="message">The message associated with the exception.</param>
            <param name="statusCode">The <see cref="T:System.Net.HttpStatusCode"/> associated with the exception.</param>
            <param name="subStatusCode">A sub status code associated with the exception.</param>
            <param name="activityId">An ActivityId associated with the operation that generated the exception.</param>
            <param name="requestCharge">A request charge associated with the operation that generated the exception.</param>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.CosmosException.ResponseBody">
            <summary>
            The body of the cosmos response message as a string
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.CosmosException.StatusCode">
            <summary>
            Gets the request completion status code from the Azure Cosmos DB service.
            </summary>
            <value>The request completion status code</value>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.CosmosException.SubStatusCode">
            <summary>
            Gets the request completion sub status code from the Azure Cosmos DB service.
            </summary>
            <value>The request completion status code</value>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.CosmosException.RequestCharge">
            <summary>
            Gets the request charge for this request from the Azure Cosmos DB service.
            </summary>
            <value>
            The request charge measured in request units.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.CosmosException.ActivityId">
            <summary>
            Gets the activity ID for the request from the Azure Cosmos DB service.
            </summary>
            <value>
            The activity ID for the request.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.CosmosException.RetryAfter">
            <summary>
            Gets the retry after time. This tells how long a request should wait before doing a retry.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.CosmosException.Headers">
            <summary>
            Gets the response headers
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.CosmosException.Diagnostics">
            <summary>
            Gets the diagnostics for the request
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.CosmosException.Error">
            <summary>
            Gets the internal error object
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.CosmosException.TryGetHeader(System.String,System.String@)">
            <summary>
            Try to get a header from the cosmos response message
            </summary>
            <param name="headerName"></param>
            <param name="value"></param>
            <returns>A value indicating if the header was read.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.CosmosException.ToString">
            <summary>
            Create a custom string with all the relevant exception information
            </summary>
            <returns>A string representation of the exception.</returns>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.CosmosQuotaResponse">
            <summary>
            The Cosmos resource response. 
            This contains a list of shared properties accross the different response types.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.CosmosQuotaResponse.#ctor(System.String)">
            <summary>
            A class to parse all the quota response.
            </summary>
            <param name="quotaInfo">Example string: functions=0;storedProcedures=0;triggers=0;documentSize=0;documentsSize=0;documentsCount=0;collectionSize=0;</param>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.CosmosQuotaResponse.ParseQuotaString(System.String)">
            <summary>
            Parse the string into the dictionary
            </summary>
            <param name="quotaInfo">Example string: functions=0;storedProcedures=0;triggers=0;documentSize=0;documentsSize=0;documentsCount=0;collectionSize=0;</param>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.CosmosQuotaResponse.ToString">
            <summary>
            Override the to string method to return the original string from the header
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.CosmosResponseFactory.cosmosSerializer">
            <summary>
            Cosmos JSON converter. This allows custom JSON parsers.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.CosmosResponseFactory.propertiesSerializer">
            <summary>
            This is used for all meta data types
            </summary>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.Database">
             <summary>
             Operations for reading or deleting an existing database.
            
             <see cref="T:Microsoft.Azure.Cosmos.CosmosClient"/> for or creating new databases, and reading/querying all databases; use `client.Databases`.
             </summary>
             <remarks>
             Note: all these operations make calls against a fixed budget.
             You should design your system such that these calls scale sub-linearly with your application.
             For instance, do not call `database.ReadAsync()` before every single `item.ReadAsync()` call, to ensure the database exists;
             do this once on application start up.
             </remarks>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.Database.Id">
            <summary>
            The Id of the Cosmos database
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Database.ReadAsync(Microsoft.Azure.Cosmos.RequestOptions,System.Threading.CancellationToken)">
            <summary>
            Reads a <see cref="T:Microsoft.Azure.Cosmos.DatabaseProperties"/> from the Azure Cosmos service as an asynchronous operation.
            </summary>
            <param name="requestOptions">(Optional) The options for the container request <see cref="T:Microsoft.Azure.Cosmos.RequestOptions"/></param>
            <param name="cancellationToken">(Optional) <see cref="T:System.Threading.CancellationToken"/> representing request cancellation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> containing a <see cref="T:Microsoft.Azure.Cosmos.DatabaseResponse"/> which wraps a <see cref="T:Microsoft.Azure.Cosmos.DatabaseProperties"/> containing the read resource record.
            </returns>
            <exception cref="T:Microsoft.Azure.Cosmos.CosmosException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
            <list>
                <listheader>
                    <term>StatusCode</term><description>Reason for exception</description>
                </listheader>
                <item>
                    <term>404</term><description>NotFound - This means the resource you tried to read did not exist.</description>
                </item>
                <item>
                    <term>429</term><description>TooManyRequests - This means you have exceeded the number of request units per second.</description>
                </item>
            </list>
            </exception>
            <example>
            <code language="c#">
            <![CDATA[
            //Reads a Database resource where
            // - database_id is the ID property of the Database resource you wish to read.
            Database database = this.cosmosClient.GetDatabase(database_id);
            DatabaseResponse response = await database.ReadAsync();
            ]]>
            </code>
            </example>
            <remarks>
            <para>
            Doing a read of a resource is the most efficient way to get a resource from the Database. If you know the resource's ID, do a read instead of a query by ID.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Database.DeleteAsync(Microsoft.Azure.Cosmos.RequestOptions,System.Threading.CancellationToken)">
            <summary>
            Delete a <see cref="T:Microsoft.Azure.Cosmos.DatabaseProperties"/> from the Azure Cosmos DB service as an asynchronous operation.
            </summary>
            <param name="requestOptions">(Optional) The options for the container request <see cref="T:Microsoft.Azure.Cosmos.RequestOptions"/></param>
            <param name="cancellationToken">(Optional) <see cref="T:System.Threading.CancellationToken"/> representing request cancellation.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> containing a <see cref="T:Microsoft.Azure.Cosmos.DatabaseResponse"/> which will contain information about the request issued.</returns>
            <exception cref="T:Microsoft.Azure.Cosmos.CosmosException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
            <list>
                <listheader>
                    <term>StatusCode</term><description>Reason for exception</description>
                </listheader>
                <item>
                    <term>404</term><description>NotFound - This means the resource you tried to delete did not exist.</description>
                </item>
            </list>
            </exception>
            <example>
            <code language="c#">
            <![CDATA[
            //Delete a cosmos database
            Database database = cosmosClient.GetDatabase("myDbId");
            DatabaseResponse response = await database.DeleteAsync();
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Database.ReadThroughputAsync(System.Threading.CancellationToken)">
            <summary>
            Gets database throughput in measurement of request units per second in the Azure Cosmos service.
            </summary>
            <param name="cancellationToken">(Optional) <see cref="T:System.Threading.CancellationToken"/> representing request cancellation.</param>
            <returns>Provisioned throughput in request units per second</returns>
            <value>
            The provisioned throughput for this database.
            </value>
            <remarks>
            <para>
            Null value indicates a database with no throughput provisioned.
            
            <seealso href="https://docs.microsoft.com/azure/cosmos-db/request-units"/>
            <seealso href="https://docs.microsoft.com/azure/cosmos-db/set-throughput#set-throughput-on-a-database"/>
            </para>
            </remarks>
            <example>
            The following example shows how to get database throughput.
            <code language="c#">
            <![CDATA[
            int? throughput = await database.ReadThroughputAsync();
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Database.ReadThroughputAsync(Microsoft.Azure.Cosmos.RequestOptions,System.Threading.CancellationToken)">
            <summary>
            Gets database throughput in measurement of request units per second in the Azure Cosmos service.
            </summary>
            <param name="requestOptions">The options for the throughput request.<see cref="T:Microsoft.Azure.Cosmos.RequestOptions"/></param>
            <param name="cancellationToken">(Optional) <see cref="T:System.Threading.CancellationToken"/> representing request cancellation.</param>
            <returns>The throughput response.</returns>
            <value>
            The provisioned throughput for this database.
            </value>
            <remarks>
            <para>
            Null value indicates a database with no throughput provisioned.
            
            <seealso href="https://docs.microsoft.com/azure/cosmos-db/request-units"/>
            <seealso href="https://docs.microsoft.com/azure/cosmos-db/set-throughput#set-throughput-on-a-database"/>
            </para>
            </remarks>
            <example>
            The following example shows how to get the throughput
            <code language="c#">
            <![CDATA[
             RequestOptions requestOptions = new RequestOptions();
            ThroughputProperties throughputProperties = await database.ReadThroughputAsync(requestOptions);
            Console.WriteLine($"Throughput: {throughputProperties?.Throughput}");
            ]]>
            </code>
            </example>
            <example>
            The following example shows how to get throughput, MinThroughput and is replace in progress
            <code language="c#">
            <![CDATA[
            RequestOptions requestOptions = new RequestOptions();
            ThroughputResponse response = await database.ReadThroughputAsync(requestOptions);
            Console.WriteLine($"Throughput: {response.Resource?.Throughput}");
            Console.WriteLine($"MinThroughput: {response.MinThroughput}");
            Console.WriteLine($"IsReplacePending: {response.IsReplacePending}");
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Database.ReplaceThroughputAsync(System.Int32,Microsoft.Azure.Cosmos.RequestOptions,System.Threading.CancellationToken)">
            <summary>
            Sets throughput provisioned for a database in measurement of request units per second in the Azure Cosmos service.
            </summary>
            <param name="throughput">The cosmos database throughput expressed in Request Units per second.</param>
            <param name="requestOptions">(Optional) The options for the throughput request.<see cref="T:Microsoft.Azure.Cosmos.RequestOptions"/></param>
            <param name="cancellationToken">(Optional) <see cref="T:System.Threading.CancellationToken"/> representing request cancellation.</param>
            <returns>The throughput response.</returns>
            <value>
            The provisioned throughput for this database.
            </value>
            <example>
            The following example shows how to get the throughput.
            <code language="c#">
            <![CDATA[
            ThroughputResponse throughput = await this.cosmosDatabase.ReplaceThroughputAsync(10000);
            ]]>
            </code>
            </example>
            <remarks>
            <seealso href="https://docs.microsoft.com/azure/cosmos-db/request-units"/> for details on provision throughput.
            </remarks>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Database.ReadStreamAsync(Microsoft.Azure.Cosmos.RequestOptions,System.Threading.CancellationToken)">
            <summary>
            Reads a <see cref="T:Microsoft.Azure.Cosmos.DatabaseProperties"/> from the Azure Cosmos service as an asynchronous operation.
            </summary>
            <param name="requestOptions">(Optional) The options for the container request <see cref="T:Microsoft.Azure.Cosmos.RequestOptions"/></param>
            <param name="cancellationToken">(Optional) <see cref="T:System.Threading.CancellationToken"/> representing request cancellation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> containing a <see cref="T:Microsoft.Azure.Cosmos.ResponseMessage"/> containing the read resource record.
            </returns>
            <example>
            <code language="c#">
            <![CDATA[
            //Reads a Database resource where
            // - database_id is the ID property of the Database resource you wish to read.
            Database database = this.cosmosClient.GetDatabase(database_id);
            ResponseMessage response = await database.ReadContainerStreamAsync();
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Database.DeleteStreamAsync(Microsoft.Azure.Cosmos.RequestOptions,System.Threading.CancellationToken)">
            <summary>
            Delete a <see cref="T:Microsoft.Azure.Cosmos.DatabaseProperties"/> from the Azure Cosmos DB service as an asynchronous operation.
            </summary>
            <param name="requestOptions">(Optional) The options for the container request <see cref="T:Microsoft.Azure.Cosmos.RequestOptions"/></param>
            <param name="cancellationToken">(Optional) <see cref="T:System.Threading.CancellationToken"/> representing request cancellation.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> containing a <see cref="T:Microsoft.Azure.Cosmos.ResponseMessage"/> which will contain information about the request issued.</returns>
            <example>
            <code language="c#">
            <![CDATA[
            //Delete a Database resource where
            // - database_id is the ID property of the Database resource you wish to delete.
            Database database = this.cosmosClient.GetDatabase(database_id);
            await database.DeleteStreamAsync();
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Database.GetContainer(System.String)">
            <summary>
            Returns a reference to a container object. 
            </summary>
            <param name="id">The cosmos container id.</param>
            <returns>Cosmos container reference</returns>
            <remarks>
            Returns a Container reference. Reference doesn't guarantees existence.
            Please ensure container already exists or is created through a create operation.
            </remarks>
            <example>
            <code language="c#">
            <![CDATA[
            Database db = this.cosmosClient.GetDatabase("myDatabaseId");
            DatabaseResponse response = await db.GetContainer("testcontainer");
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Database.CreateContainerAsync(Microsoft.Azure.Cosmos.ContainerProperties,System.Nullable{System.Int32},Microsoft.Azure.Cosmos.RequestOptions,System.Threading.CancellationToken)">
             <summary>
             Creates a container as an asynchronous operation in the Azure Cosmos service.
             </summary>
             <param name="containerProperties">The <see cref="T:Microsoft.Azure.Cosmos.ContainerProperties"/> object.</param>
             <param name="throughput">(Optional) The throughput provisioned for a container in measurement of Requests Units per second in the Azure Cosmos DB service.</param>
             <param name="requestOptions">(Optional) The options for the container request <see cref="T:Microsoft.Azure.Cosmos.RequestOptions"/></param>
             <param name="cancellationToken">(Optional) <see cref="T:System.Threading.CancellationToken"/> representing request cancellation.</param>
             <returns>A <see cref="T:System.Threading.Tasks.Task"/> containing a <see cref="T:Microsoft.Azure.Cosmos.ContainerResponse"/> which wraps a <see cref="T:Microsoft.Azure.Cosmos.ContainerProperties"/> containing the read resource record.</returns>
             <exception cref="T:System.ArgumentNullException">If either <paramref name="containerProperties"/> is not set.</exception>
             <exception cref="T:System.AggregateException">Represents a consolidation of failures that occurred during async processing. Look within InnerExceptions to find the actual exception(s).</exception>
             <exception cref="T:Microsoft.Azure.Cosmos.CosmosException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a container are:
             <list type="table">
                 <listheader>
                     <term>StatusCode</term><description>Reason for exception</description>
                 </listheader>
                 <item>
                     <term>400</term><description>BadRequest - This means something was wrong with the request supplied. It is likely that an id was not supplied for the new container.</description>
                 </item>
                 <item>
                     <term>403</term><description>Forbidden - This means you attempted to exceed your quota for containers. Contact support to have this quota increased.</description>
                 </item>
                 <item>
                     <term>409</term><description>Conflict - This means a <see cref="T:Microsoft.Azure.Cosmos.ContainerProperties"/> with an id matching the id you supplied already existed.</description>
                 </item>
             </list>
             </exception>
             <example>
            
             <code language="c#">
             <![CDATA[
             ContainerProperties containerProperties = new ContainerProperties()
             {
                 Id = Guid.NewGuid().ToString(),
                 PartitionKeyPath = "/pk",
                 IndexingPolicy = new IndexingPolicy()
                {
                     Automatic = false,
                     IndexingMode = IndexingMode.Lazy,
                };
             };
            
             ContainerResponse response = await this.cosmosDatabase.CreateContainerAsync(containerProperties);
             ]]>
             </code>
             </example>
             <seealso cref="M:Microsoft.Azure.Cosmos.Database.DefineContainer(System.String,System.String)"/>
             <remarks>
             <seealso href="https://docs.microsoft.com/azure/cosmos-db/request-units"/> for details on provision throughput.
             </remarks>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Database.CreateContainerAsync(System.String,System.String,System.Nullable{System.Int32},Microsoft.Azure.Cosmos.RequestOptions,System.Threading.CancellationToken)">
             <summary>
             Creates a container as an asynchronous operation in the Azure Cosmos service.
             </summary>
             <param name="id">The cosmos container id</param>
             <param name="partitionKeyPath">The path to the partition key. Example: /location</param>
             <param name="throughput">(Optional) The throughput provisioned for a container in measurement of Requests Units per second in the Azure Cosmos DB service.</param>
             <param name="requestOptions">(Optional) The options for the container request <see cref="T:Microsoft.Azure.Cosmos.RequestOptions"/></param>
             <param name="cancellationToken">(Optional) <see cref="T:System.Threading.CancellationToken"/> representing request cancellation.</param>
             <returns>A <see cref="T:System.Threading.Tasks.Task"/> containing a <see cref="T:Microsoft.Azure.Cosmos.ContainerResponse"/> which wraps a <see cref="T:Microsoft.Azure.Cosmos.ContainerProperties"/> containing the read resource record.</returns>
             <exception cref="T:System.ArgumentNullException">If <paramref name="id"/> is not set.</exception>
             <exception cref="T:System.AggregateException">Represents a consolidation of failures that occurred during async processing. Look within InnerExceptions to find the actual exception(s).</exception>
             <exception cref="T:Microsoft.Azure.Cosmos.CosmosException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a container are:
             <list type="table">
                 <listheader>
                     <term>StatusCode</term><description>Reason for exception</description>
                 </listheader>
                 <item>
                     <term>400</term><description>BadRequest - This means something was wrong with the request supplied. It is likely that an id was not supplied for the new container.</description>
                 </item>
                 <item>
                     <term>403</term><description>Forbidden - This means you attempted to exceed your quota for containers. Contact support to have this quota increased.</description>
                 </item>
                 <item>
                     <term>409</term><description>Conflict - This means a <see cref="T:Microsoft.Azure.Cosmos.ContainerProperties"/> with an id matching the id you supplied already existed.</description>
                 </item>
             </list>
             </exception>
             <example>
            
             <code language="c#">
             <![CDATA[
             ContainerResponse response = await this.cosmosDatabase.CreateContainerAsync(Guid.NewGuid().ToString(), "/pk");
             ]]>
             </code>
             </example>
             <seealso cref="M:Microsoft.Azure.Cosmos.Database.DefineContainer(System.String,System.String)"/>
             <remarks>
             <seealso href="https://docs.microsoft.com/azure/cosmos-db/request-units"/> for details on provision throughput.
             </remarks>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Database.CreateContainerIfNotExistsAsync(Microsoft.Azure.Cosmos.ContainerProperties,System.Nullable{System.Int32},Microsoft.Azure.Cosmos.RequestOptions,System.Threading.CancellationToken)">
             <summary>
             <para>Check if a container exists, and if it doesn't, create it.
             Only the container id is used to verify if there is an existing container. Other container properties such as throughput are not validated and can be different then the passed properties.</para>
             </summary>
             <param name="containerProperties">The <see cref="T:Microsoft.Azure.Cosmos.ContainerProperties"/> object.</param>
             <param name="throughput">(Optional) The throughput provisioned for a container in measurement of Requests Units per second in the Azure Cosmos DB service.</param>
             <param name="requestOptions">(Optional) The options for the container request <see cref="T:Microsoft.Azure.Cosmos.RequestOptions"/></param>
             <param name="cancellationToken">(Optional) <see cref="T:System.Threading.CancellationToken"/> representing request cancellation.</param>
             <returns>A <see cref="T:System.Threading.Tasks.Task"/> containing a <see cref="T:Microsoft.Azure.Cosmos.ContainerResponse"/> which wraps a <see cref="T:Microsoft.Azure.Cosmos.ContainerProperties"/> containing the read resource record.</returns>
             <exception cref="T:System.ArgumentNullException">If either <paramref name="containerProperties"/> is not set.</exception>
             <exception cref="T:System.AggregateException">Represents a consolidation of failures that occurred during async processing. Look within InnerExceptions to find the actual exception(s).</exception>
             <exception cref="T:Microsoft.Azure.Cosmos.CosmosException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a container are:
             <list type="table">
                 <listheader>
                     <term>StatusCode</term><description>Reason for exception</description>
                 </listheader>
                 <item>
                     <term>400</term><description>BadRequest - This means something was wrong with the request supplied. It is likely that an id was not supplied for the new container.</description>
                 </item>
                 <item>
                     <term>403</term><description>Forbidden - This means you attempted to exceed your quota for containers. Contact support to have this quota increased.</description>
                 </item>
                 <item>
                     <term>409</term><description>Conflict - This means a <see cref="T:Microsoft.Azure.Cosmos.ContainerProperties"/> with an id matching the id you supplied already existed.</description>
                 </item>
             </list>
             </exception>
             <list>
                 <listheader>
                     <term>StatusCode</term><description>Common success StatusCodes for the CreateDatabaseIfNotExistsAsync operation</description>
                 </listheader>
                 <item>
                     <term>201</term><description>Created - New database is created.</description>
                 </item>
                 <item>
                     <term>200</term><description>Accepted - This means the database already exists.</description>
                 </item>
             </list>
             <example>
            
             <code language="c#">
             <![CDATA[
             ContainerProperties containerProperties = new ContainerProperties()
             {
                 Id = Guid.NewGuid().ToString(),
                 PartitionKeyPath = "/pk",
                 IndexingPolicy = new IndexingPolicy()
                {
                     Automatic = false,
                     IndexingMode = IndexingMode.Lazy,
                };
             };
            
             ContainerResponse response = await this.cosmosDatabase.CreateContainerIfNotExistsAsync(containerProperties);
             ]]>
             </code>
             </example>
             <remarks>
             <seealso href="https://docs.microsoft.com/azure/cosmos-db/request-units"/> for details on provision throughput.
             </remarks>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Database.CreateContainerIfNotExistsAsync(System.String,System.String,System.Nullable{System.Int32},Microsoft.Azure.Cosmos.RequestOptions,System.Threading.CancellationToken)">
             <summary>
             Check if a container exists, and if it doesn't, create it.
             This will make a read operation, and if the container is not found it will do a create operation.
             </summary>
             <param name="id">The cosmos container id</param>
             <param name="partitionKeyPath">The path to the partition key. Example: /location</param>
             <param name="throughput">(Optional) The throughput provisioned for a container in measurement of Request Units per second in the Azure Cosmos DB service.</param>
             <param name="requestOptions">(Optional) The options for the container request <see cref="T:Microsoft.Azure.Cosmos.RequestOptions"/></param>
             <param name="cancellationToken">(Optional) <see cref="T:System.Threading.CancellationToken"/> representing request cancellation.</param>
             <returns>A <see cref="T:System.Threading.Tasks.Task"/> containing a <see cref="T:Microsoft.Azure.Cosmos.ContainerResponse"/> which wraps a <see cref="T:Microsoft.Azure.Cosmos.ContainerProperties"/> containing the read resource record.</returns>
             <exception cref="T:System.ArgumentNullException">If <paramref name="id"/> is not set.</exception>
             <exception cref="T:System.AggregateException">Represents a consolidation of failures that occurred during async processing. Look within InnerExceptions to find the actual exception(s).</exception>
             <exception cref="T:Microsoft.Azure.Cosmos.CosmosException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a container are:
             <list type="table">
                 <listheader>
                     <term>StatusCode</term><description>Reason for exception</description>
                 </listheader>
                 <item>
                     <term>400</term><description>BadRequest - This means something was wrong with the request supplied. It is likely that an id was not supplied for the new container.</description>
                 </item>
                 <item>
                     <term>403</term><description>Forbidden - This means you attempted to exceed your quota for containers. Contact support to have this quota increased.</description>
                 </item>
                 <item>
                     <term>409</term><description>Conflict - This means a <see cref="T:Microsoft.Azure.Cosmos.ContainerProperties"/> with an id matching the id you supplied already existed.</description>
                 </item>
             </list>
             </exception>
             <example>
            
             <code language="c#">
             <![CDATA[
             ContainerResponse response = await this.cosmosDatabase.CreateContainerIfNotExistsAsync(Guid.NewGuid().ToString(), "/pk");
             ]]>
             </code>
             </example>
             <remarks>
             <seealso href="https://docs.microsoft.com/azure/cosmos-db/request-units"/> for details on provision throughput.
             </remarks>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Database.CreateContainerStreamAsync(Microsoft.Azure.Cosmos.ContainerProperties,System.Nullable{System.Int32},Microsoft.Azure.Cosmos.RequestOptions,System.Threading.CancellationToken)">
             <summary>
             Creates a container as an asynchronous operation in the Azure Cosmos service.
             </summary>
             <param name="containerProperties">The <see cref="T:Microsoft.Azure.Cosmos.ContainerProperties"/> object.</param>
             <param name="throughput">(Optional) The throughput provisioned for a container in measurement of Request Units per second in the Azure Cosmos DB service.</param>
             <param name="requestOptions">(Optional) The options for the container request <see cref="T:Microsoft.Azure.Cosmos.RequestOptions"/></param>
             <param name="cancellationToken">(Optional) <see cref="T:System.Threading.CancellationToken"/> representing request cancellation.</param>
             <returns>A <see cref="T:System.Threading.Tasks.Task"/> containing a <see cref="T:Microsoft.Azure.Cosmos.ResponseMessage"/> containing the created resource record.</returns>
             <example>
             Creates a container as an asynchronous operation in the Azure Cosmos service and return stream response.
             <code language="c#">
             <![CDATA[
             ContainerProperties containerProperties = new ContainerProperties()
             {
                 Id = Guid.NewGuid().ToString(),
                 PartitionKeyPath = "/pk",
             };
            
             using(ResponseMessage response = await this.cosmosDatabase.CreateContainerStreamAsync(containerProperties))
             {
             }
             ]]>
             </code>
             </example>
             <seealso cref="M:Microsoft.Azure.Cosmos.Database.DefineContainer(System.String,System.String)"/>
             <remarks>
             <seealso href="https://docs.microsoft.com/azure/cosmos-db/request-units"/> for details on provision throughput.
             </remarks>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Database.GetUser(System.String)">
            <summary>
            Returns a reference to a user object.
            </summary>
            <param name="id">The cosmos user id.</param>
            <returns>Cosmos user reference</returns>
            <remarks>
            Returns a User reference. Reference doesn't guarantees existence.
            Please ensure user already exists or is created through a create operation.
            </remarks>
            <example>
            <code language="c#">
            <![CDATA[
            Database db = this.cosmosClient.GetDatabase("myDatabaseId");
            User user = await db.GetUser("userId");
            UserResponse response = await user.ReadAsync();
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Database.CreateUserAsync(System.String,Microsoft.Azure.Cosmos.RequestOptions,System.Threading.CancellationToken)">
             <summary>
             Creates a user as an asynchronous operation in the Azure Cosmos service.
             </summary>
             <param name="id">The cosmos user id</param>
             <param name="requestOptions">(Optional) The options for the user request <see cref="T:Microsoft.Azure.Cosmos.RequestOptions"/></param>
             <param name="cancellationToken">(Optional) <see cref="T:System.Threading.CancellationToken"/> representing request cancellation.</param>
             <returns>A <see cref="T:System.Threading.Tasks.Task"/> containing a <see cref="T:Microsoft.Azure.Cosmos.UserResponse"/> which wraps a <see cref="T:Microsoft.Azure.Cosmos.UserProperties"/> containing the read resource record.</returns>
             <exception cref="T:System.ArgumentNullException">If <paramref name="id"/> is not set.</exception>
             <exception cref="T:Microsoft.Azure.Cosmos.CosmosException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a user are:
             <list type="table">
                 <listheader>
                     <term>StatusCode</term><description>Reason for exception</description>
                 </listheader>
                 <item>
                     <term>400</term><description>BadRequest - This means something was wrong with the request supplied. It is likely that an id was not supplied for the new user.</description>
                 </item>
                 <item>
                     <term>409</term><description>Conflict - This means a <see cref="T:Microsoft.Azure.Cosmos.UserProperties"/> with an id matching the id you supplied already existed.</description>
                 </item>
             </list>
             </exception>
             <example>
            
             <code language="c#">
             <![CDATA[
             UserResponse response = await this.cosmosDatabase.CreateUserAsync(Guid.NewGuid().ToString());
             ]]>
             </code>
             </example>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Database.UpsertUserAsync(System.String,Microsoft.Azure.Cosmos.RequestOptions,System.Threading.CancellationToken)">
             <summary>
             Upserts a user as an asynchronous operation in the Azure Cosmos service.
             </summary>
             <param name="id">The cosmos user id.</param>
             <param name="requestOptions">(Optional) The options for the user request <see cref="T:Microsoft.Azure.Cosmos.RequestOptions"/></param>
             <param name="cancellationToken">(Optional) <see cref="T:System.Threading.CancellationToken"/> representing request cancellation.</param>
             <returns>A <see cref="T:System.Threading.Tasks.Task"/> containing a <see cref="T:Microsoft.Azure.Cosmos.UserResponse"/> which wraps a <see cref="T:Microsoft.Azure.Cosmos.UserProperties"/> containing the read resource record.</returns>
             <exception cref="T:System.ArgumentNullException">If <paramref name="id"/> is not set.</exception>
             <exception cref="T:Microsoft.Azure.Cosmos.CosmosException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a user are:
             <list type="table">
                 <listheader>
                     <term>StatusCode</term><description>Reason for exception</description>
                 </listheader>
                 <item>
                     <term>400</term><description>BadRequest - This means something was wrong with the request supplied. It is likely that an id was not supplied for the new user.</description>
                 </item>
             </list>
             </exception>
             <example>
            
             <code language="c#">
             <![CDATA[
             UserResponse response = await this.cosmosDatabase.UpsertUserAsync(Guid.NewGuid().ToString());
             ]]>
             </code>
             </example>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Database.GetContainerQueryIterator``1(Microsoft.Azure.Cosmos.QueryDefinition,System.String,Microsoft.Azure.Cosmos.QueryRequestOptions)">
            <summary>
            This method creates a query for containers under an database using a SQL statement. It returns a FeedIterator.
            For more information on preparing SQL statements with parameterized values, please see <see cref="T:Microsoft.Azure.Cosmos.QueryDefinition"/> overload.
            </summary>
            <param name="queryDefinition">The cosmos SQL query definition.</param>
            <param name="continuationToken">(Optional) The continuation token in the Azure Cosmos DB service.</param>
            <param name="requestOptions">(Optional) The options for the item query request <see cref="T:Microsoft.Azure.Cosmos.QueryRequestOptions"/></param>
            <returns>An iterator to go through the containers</returns>
            <example>
            This create the type feed iterator for containers with queryDefinition as input.
            <code language="c#">
            <![CDATA[
            string queryText = "SELECT * FROM c where c.id like @testId";
            QueryDefinition queryDefinition = new QueryDefinition(queryText);
            queryDefinition.WithParameter("@testId", "testDatabaseId");
            FeedIterator<ContainerProperties> resultSet = this.cosmosDatabase.GetContainerQueryIterator<ContainerProperties>(queryDefinition);
            while (feedIterator.HasMoreResults)
            {
                foreach (ContainerProperties properties in await feedIterator.ReadNextAsync())
                {
                    Console.WriteLine(properties.Id);
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Database.GetContainerQueryStreamIterator(Microsoft.Azure.Cosmos.QueryDefinition,System.String,Microsoft.Azure.Cosmos.QueryRequestOptions)">
            <summary>
            This method creates a query for containers under an database using a SQL statement. It returns a FeedIterator.
            For more information on preparing SQL statements with parameterized values, please see <see cref="T:Microsoft.Azure.Cosmos.QueryDefinition"/> overload.
            </summary>
            <param name="queryDefinition">The cosmos SQL query definition.</param>
            <param name="continuationToken">The continuation token in the Azure Cosmos DB service.</param>
            <param name="requestOptions">(Optional) The options for the container request <see cref="T:Microsoft.Azure.Cosmos.QueryRequestOptions"/></param>
            <returns>An iterator to go through the containers</returns>
            <example>
            This create the stream feed iterator for containers with queryDefinition as input.
            <code language="c#">
            <![CDATA[
            string queryText = "SELECT * FROM c where c.id like '%testId%'";
            QueryDefinition queryDefinition = new QueryDefinition(queryText);
            FeedIterator resultSet = this.cosmosDatabase.GetContainerQueryStreamIterator(queryDefinition);
            while (feedIterator.HasMoreResults)
            {
                using (ResponseMessage response = await feedIterator.ReadNextAsync())
                {
                    using (StreamReader sr = new StreamReader(response.Content))
                    using (JsonTextReader jtr = new JsonTextReader(sr))
                    {
                        JObject result = JObject.Load(jtr);
                    }
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Database.GetContainerQueryIterator``1(System.String,System.String,Microsoft.Azure.Cosmos.QueryRequestOptions)">
            <summary>
            This method creates a query for containers under an database using a SQL statement. It returns a FeedIterator.
            For more information on preparing SQL statements with parameterized values, please see <see cref="T:Microsoft.Azure.Cosmos.QueryDefinition"/> overload.
            </summary>
            <param name="queryText">The cosmos SQL query text.</param>
            <param name="continuationToken">(Optional) The continuation token in the Azure Cosmos DB service.</param>
            <param name="requestOptions">(Optional) The options for the item query request <see cref="T:Microsoft.Azure.Cosmos.QueryRequestOptions"/></param>
            <returns>An iterator to go through the containers</returns>
            <example>
            1. This create the type feed iterator for containers with queryText as input,
            <code language="c#">
            <![CDATA[
            string queryText = "SELECT * FROM c where c.id like '%testId%'";
            FeedIterator<ContainerProperties> resultSet = this.cosmosDatabase.GetContainerQueryIterator<ContainerProperties>(queryText);
            while (feedIterator.HasMoreResults)
            {
            FeedResponse<ContainerProperties> iterator =
            await feedIterator.ReadNextAsync(this.cancellationToken);
            }
            ]]>
            </code>
            </example>
            <example>
            2. This create the type feed iterator for containers without queryText, retrieving all containers.
            <code language="c#">
            <![CDATA[
            FeedIterator<ContainerProperties> resultSet = this.cosmosDatabase.GetContainerQueryIterator<ContainerProperties>();
            while (feedIterator.HasMoreResults)
            {
            FeedResponse<ContainerProperties> iterator =
            await feedIterator.ReadNextAsync(this.cancellationToken);
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Database.GetContainerQueryStreamIterator(System.String,System.String,Microsoft.Azure.Cosmos.QueryRequestOptions)">
            <summary>
            This method creates a query for containers under an database using a SQL statement. It returns a FeedIterator.
            For more information on preparing SQL statements with parameterized values, please see <see cref="T:Microsoft.Azure.Cosmos.QueryDefinition"/> overload.
            </summary>
            <param name="queryText">The cosmos SQL query text.</param>
            <param name="continuationToken">The continuation token in the Azure Cosmos DB service.</param>
            <param name="requestOptions">(Optional) The options for the container request <see cref="T:Microsoft.Azure.Cosmos.QueryRequestOptions"/></param>
            <returns>An iterator to go through the containers</returns>
            <example>
            1. This create the stream feed iterator for containers with queryText as input.
            <code language="c#">
            <![CDATA[
            string queryText = "SELECT * FROM c where c.id like '%testId%'";
            FeedIterator resultSet = this.cosmosDatabase.GetContainerQueryStreamIterator(queryText);
            while (feedIterator.HasMoreResults)
            {
            ResponseMessage iterator =
            await feedIterator.ReadNextAsync(this.cancellationToken);
            }
            ]]>
            </code>
            </example>
            <example>
            2. This create the stream feed iterator for containers without queryText, retrieving all container.
            <code language="c#">
            <![CDATA[
            FeedIterator resultSet = this.cosmosDatabase.GetContainerQueryStreamIterator();
            while (feedIterator.HasMoreResults)
            {
            ResponseMessage iterator =
            await feedIterator.ReadNextAsync(this.cancellationToken);
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Database.GetUserQueryIterator``1(System.String,System.String,Microsoft.Azure.Cosmos.QueryRequestOptions)">
            <summary>
            This method creates a query for users under an database using a SQL statement. It returns a FeedIterator.
            For more information on preparing SQL statements with parameterized values, please see <see cref="T:Microsoft.Azure.Cosmos.QueryDefinition"/> overload.
            </summary>
            <param name="queryText">The cosmos SQL query text.</param>
            <param name="continuationToken">(Optional) The continuation token in the Azure Cosmos DB service.</param>
            <param name="requestOptions">(Optional) The options for the user query request <see cref="T:Microsoft.Azure.Cosmos.QueryRequestOptions"/></param>
            <returns>An iterator to go through the users</returns>
            <example>
            1. This create the type feed iterator for users with queryText as input,
            <code language="c#">
            <![CDATA[
            string queryText = "SELECT * FROM c where c.id like '%testId%'";
            FeedIterator<UserProperties> resultSet = this.cosmosDatabase.GetUserQueryIterator<UserProperties>(queryText);
            while (feedIterator.HasMoreResults)
            {
                FeedResponse<UserProperties> iterator = await feedIterator.ReadNextAsync(this.cancellationToken);
            }
            ]]>
            </code>
            </example>
            <example>
            2. This create the type feed iterator for users without queryText, retrieving all users.
            <code language="c#">
            <![CDATA[
            FeedIterator<UserProperties> resultSet = this.cosmosDatabase.GetUserQueryIterator<ContainerProperties>();
            while (feedIterator.HasMoreResults)
            {
                FeedResponse<UserProperties> iterator =
                await feedIterator.ReadNextAsync(this.cancellationToken);
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Database.GetUserQueryIterator``1(Microsoft.Azure.Cosmos.QueryDefinition,System.String,Microsoft.Azure.Cosmos.QueryRequestOptions)">
            <summary>
            This method creates a query for users under an database using a SQL statement. It returns a FeedIterator.
            For more information on preparing SQL statements with parameterized values, please see <see cref="T:Microsoft.Azure.Cosmos.QueryDefinition"/> overload.
            </summary>
            <param name="queryDefinition">The cosmos SQL query definition.</param>
            <param name="continuationToken">(Optional) The continuation token in the Azure Cosmos DB service.</param>
            <param name="requestOptions">(Optional) The options for the user query request <see cref="T:Microsoft.Azure.Cosmos.QueryRequestOptions"/></param>
            <returns>An iterator to go through the users</returns>
            <example>
            This create the type feed iterator for users with queryDefinition as input.
            <code language="c#">
            <![CDATA[
            string queryText = "SELECT * FROM c where c.id like @testId";
            QueryDefinition queryDefinition = new QueryDefinition(queryText);
            queryDefinition.WithParameter("@testId", "testUserId");
            FeedIterator<UserProperties> resultSet = this.cosmosDatabase.GetUserQueryIterator<UserProperties>(queryDefinition);
            while (feedIterator.HasMoreResults)
            {
                foreach (UserProperties properties in await feedIterator.ReadNextAsync())
                {
                    Console.WriteLine(properties.Id);
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Database.DefineContainer(System.String,System.String)">
             <summary>
             Creates a containerBuilder.
             </summary>
             <param name="name">Azure Cosmos container name to create.</param>
             <param name="partitionKeyPath">The path to the partition key. Example: /partitionKey</param>
             <returns>A fluent definition of an Azure Cosmos container.</returns>
             <example>
            
             <code language="c#">
             <![CDATA[
             CosmosContainerResponse container = await this.cosmosDatabase.DefineContainer("TestContainer", "/partitionKey")
                 .UniqueKey()
                     .Path("/path1")
                     .Path("/path2")
                     .Attach()
                 .IndexingPolicy()
                     .IndexingMode(IndexingMode.Consistent)
                     .AutomaticIndexing(false)
                     .IncludedPaths()
                         .Path("/includepath1")
                         .Path("/includepath2")
                         .Attach()
                     .ExcludedPaths()
                         .Path("/excludepath1")
                         .Path("/excludepath2")
                         .Attach()
                     .CompositeIndex()
                         .Path("/root/leaf1")
                         .Path("/root/leaf2", CompositePathSortOrder.Descending)
                         .Attach()
                     .CompositeIndex()
                         .Path("/root/leaf3")
                         .Path("/root/leaf4")
                         .Attach()
                     .Attach()
                 .CreateAsync(5000 /* throughput /*); 
             ]]>
             </code>
             </example>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.DatabaseCore">
             <summary>
             Operations for reading or deleting an existing database.
            
             <see cref="T:Microsoft.Azure.Cosmos.CosmosClient"/> for or creating new databases, and reading/querying all databases; use `client.Databases`.
             </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.DatabaseCore.#ctor">
            <summary>
            Only used for unit testing
            </summary>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.DatabaseResponse">
            <summary>
            The cosmos database response
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.DatabaseResponse.#ctor">
            <summary>
            Create a <see cref="T:Microsoft.Azure.Cosmos.DatabaseResponse"/> as a no-op for mock testing
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.DatabaseResponse.#ctor(System.Net.HttpStatusCode,Microsoft.Azure.Cosmos.Headers,Microsoft.Azure.Cosmos.DatabaseProperties,Microsoft.Azure.Cosmos.Database,Microsoft.Azure.Cosmos.CosmosDiagnostics)">
            <summary>
            A private constructor to ensure the factory is used to create the object.
            This will prevent memory leaks when handling the HttpResponseMessage
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.DatabaseResponse.Database">
            <summary>
            The reference to the cosmos database. 
            This allows additional operations for the database and easier access to the container operations
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.DatabaseResponse.Headers">
            <inheritdoc/>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.DatabaseResponse.Resource">
            <inheritdoc/>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.DatabaseResponse.StatusCode">
            <inheritdoc/>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.DatabaseResponse.Diagnostics">
            <inheritdoc/>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.DatabaseResponse.RequestCharge">
            <inheritdoc/>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.DatabaseResponse.ActivityId">
            <inheritdoc/>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.DatabaseResponse.ETag">
            <inheritdoc/>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.DatabaseResponse.MaxResourceQuota">
            <inheritdoc/>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.DatabaseResponse.CurrentResourceQuotaUsage">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.DatabaseResponse.op_Implicit(Microsoft.Azure.Cosmos.DatabaseResponse)~Microsoft.Azure.Cosmos.Database">
            <summary>
            Get <see cref="T:Microsoft.Azure.Cosmos.Database"/> implicitly from <see cref="T:Microsoft.Azure.Cosmos.DatabaseResponse"/>
            </summary>
            <param name="response">DatabaseResponse</param>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.Permission">
            <summary>
            Operations for reading, replacing, or deleting a specific permission by id. Permissions are used to create ResourceTokens. Resource tokens provide access to the application resources within a database. Resource tokens:
            <list type="bullet">
            <item>
            <description>Provide access to specific containers, partition keys, documents, attachments, stored procedures, triggers, and UDFs.</description>
            </item>
            <item>
            <description>Are created when a user is granted permissions to a specific resource.</description>
            </item>
            <item>
            <description>Are recreated when a permission resource is acted upon on by POST, GET, or PUT call.</description>
            </item>
            <item>
            <description>Use a hash resource token specifically constructed for the user, resource, and permission.</description>
            </item>
            <item>
            <description>Are time bound with a customizable validity period. The default valid timespan is one hour. Token lifetime, however, may be explicitly specified, up to a maximum of 24 hours.</description>
            </item>
            <item>
            <description>Provide a safe alternative to giving out the master key.</description>
            </item>
            <item>
            <description>Enable clients to read, write, and delete resources in the Cosmos DB account according to the permissions they've been granted.</description>
            </item>
            </list>
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.Permission.Id">
            <summary>
            The Id of the Cosmos Permission
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Permission.ReadAsync(System.Nullable{System.Int32},Microsoft.Azure.Cosmos.RequestOptions,System.Threading.CancellationToken)">
            <summary>
            Reads a <see cref="T:Microsoft.Azure.Cosmos.PermissionProperties"/> from the Azure Cosmos service as an asynchronous operation. Each read will return a new ResourceToken with its respective expiration. 
            </summary>
            <param name="tokenExpiryInSeconds">(Optional) The expiry time for resource token in seconds. This value can range from 10 seconds, to 24 hours (or 86,400 seconds). The default value for this is 1 hour (or 3,600 seconds). This does not change the default value for future tokens.</param>
            <param name="requestOptions">(Optional) The options for the permission request <see cref="T:Microsoft.Azure.Cosmos.RequestOptions"/></param>
            <param name="cancellationToken">(Optional) <see cref="T:System.Threading.CancellationToken"/> representing request cancellation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> containing a <see cref="T:Microsoft.Azure.Cosmos.PermissionResponse"/> which wraps a <see cref="T:Microsoft.Azure.Cosmos.PermissionProperties"/> containing the read resource record.
            </returns>
            <exception cref="T:Microsoft.Azure.Cosmos.CosmosException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a permission are:
            <list type="table">
                <listheader>
                    <term>StatusCode</term><description>Reason for exception</description>
                </listheader>
                <item>
                    <term>404</term><description>NotFound - This means the resource or parent resource you tried to read did not exist.</description>
                </item>
                <item>
                    <term>429</term><description>TooManyRequests - This means you have exceeded the number of request units per second. Consult the DocumentClientException.RetryAfter value to see how long you should wait before retrying this operation.</description>
                </item>
            </list>
            </exception>
            <example>
            <code language="c#">
            <![CDATA[
            User user = this.database.GetUser("userId");
            Permission permission= user.GetPermission("permissionId");
            PermissionProperties permissionProperties = await permission.ReadAsync(tokenExpiryInSeconds: 9000);
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Permission.ReplaceAsync(Microsoft.Azure.Cosmos.PermissionProperties,System.Nullable{System.Int32},Microsoft.Azure.Cosmos.RequestOptions,System.Threading.CancellationToken)">
            <summary>
            Replace a <see cref="T:Microsoft.Azure.Cosmos.PermissionProperties"/> from the Azure Cosmos service as an asynchronous operation. This will not revoke existing ResourceTokens.
            </summary>
            <param name="permissionProperties">The <see cref="T:Microsoft.Azure.Cosmos.PermissionProperties"/> object.</param>
            <param name="tokenExpiryInSeconds">(Optional) The expiry time for resource token in seconds. This value can range from 10 seconds, to 24 hours (or 86,400 seconds). The default value for this is 1 hour (or 3,600 seconds). This does not change the default value for future tokens.</param>
            <param name="requestOptions">(Optional) The options for the user request <see cref="T:Microsoft.Azure.Cosmos.RequestOptions"/></param>
            <param name="cancellationToken">(Optional) <see cref="T:System.Threading.CancellationToken"/> representing request cancellation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> containing a <see cref="T:Microsoft.Azure.Cosmos.PermissionResponse"/> which wraps a <see cref="T:Microsoft.Azure.Cosmos.PermissionProperties"/> containing the replace resource record.
            </returns>
            <exception cref="T:Microsoft.Azure.Cosmos.CosmosException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a permission are:
            <list type="table">
                <listheader>
                    <term>StatusCode</term><description>Reason for exception</description>
                </listheader>
                <item>
                    <term>404</term><description>NotFound - This means the resource or parent resource you tried to read did not exist.</description>
                </item>
                <item>
                    <term>429</term><description>TooManyRequests - This means you have exceeded the number of request units per second. Consult the DocumentClientException.RetryAfter value to see how long you should wait before retrying this operation.</description>
                </item>
            </list>
            </exception>
            <example>        
            <code language="c#">
            <![CDATA[
            PermissionProperties permissionProperties = permissionReadResponse;
            permissionProperties.Id = "newuser";
            PermissionResponse response = await permission.ReplaceAsync(permissionProperties, tokenExpiryInSeconds: 9000);
            PermissionProperties replacedProperties = response;
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Permission.DeleteAsync(Microsoft.Azure.Cosmos.RequestOptions,System.Threading.CancellationToken)">
            <summary>
            Delete a <see cref="T:Microsoft.Azure.Cosmos.PermissionProperties"/> from the Azure Cosmos DB service as an asynchronous operation. This will not revoke existing ResourceTokens.
            </summary>
            <param name="requestOptions">(Optional) The options for the user request <see cref="T:Microsoft.Azure.Cosmos.RequestOptions"/></param>
            <param name="cancellationToken">(Optional) <see cref="T:System.Threading.CancellationToken"/> representing request cancellation.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> containing a <see cref="T:Microsoft.Azure.Cosmos.PermissionResponse"/> which will contain information about the request issued.</returns>
            <exception cref="T:Microsoft.Azure.Cosmos.CosmosException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a permission are:
            <list type="table">
                <listheader>
                    <term>StatusCode</term><description>Reason for exception</description>
                </listheader>
                <item>
                    <term>404</term><description>NotFound - This means the resource or parent resource you tried to delete did not exist.</description>
                </item>
            </list>
            </exception>
            <example>
            <code language="c#">
            <![CDATA[
            User user = this.database.GetUser("userId");
            Permission permission = user.GetPermission("permissionId");
            PermissionResponse response = await permission.DeleteAsync();
            ]]>
            </code>
            </example>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.PermissionCore">
            <summary>
            Operations for reading, replacing, or deleting a specific, existing user by id.
            
            <see cref="T:Microsoft.Azure.Cosmos.User"/> for creating new users, and reading/querying all user;
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.PermissionCore.#ctor">
            <summary>
            Only used for unit testing
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.PermissionCore.Id">
            <inheritdoc/>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.PermissionCore.User">
            <summary>
            Returns a reference to a user object. 
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.PermissionCore.DeleteAsync(Microsoft.Azure.Cosmos.RequestOptions,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.PermissionCore.ReadAsync(System.Nullable{System.Int32},Microsoft.Azure.Cosmos.RequestOptions,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.PermissionCore.ReplaceAsync(Microsoft.Azure.Cosmos.PermissionProperties,System.Nullable{System.Int32},Microsoft.Azure.Cosmos.RequestOptions,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.PermissionMode">
            <summary> 
            These are the access permissions for creating or replacing a <see cref="T:Microsoft.Azure.Cosmos.PermissionProperties" /> resource in the Azure Cosmos DB service.
            </summary>
            <remarks>
            A Permission resource associates an access permission of a user on a particular resource.
            </remarks>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.PermissionMode.Read">
            <summary>
            Read permission mode will provide the user with Read only access to a resource.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.PermissionMode.All">
            <summary>
            All permission mode will provide the user with full access(read, insert, replace and delete) to a resource.
            </summary>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.PermissionResponse">
            <summary>
            The cosmos permission response
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.PermissionResponse.#ctor">
            <summary>
            Create a <see cref="T:Microsoft.Azure.Cosmos.PermissionResponse"/> as a no-op for mock testing
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.PermissionResponse.#ctor(System.Net.HttpStatusCode,Microsoft.Azure.Cosmos.Headers,Microsoft.Azure.Cosmos.PermissionProperties,Microsoft.Azure.Cosmos.Permission,Microsoft.Azure.Cosmos.CosmosDiagnostics)">
            <summary>
            A private constructor to ensure the factory is used to create the object.
            This will prevent memory leaks when handling the HttpResponseMessage
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.PermissionResponse.Permission">
            <summary>
            The reference to the cosmos permission. This allows additional operations on the permission
            or for easy access permissions
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.PermissionResponse.Headers">
            <inheritdoc/>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.PermissionResponse.Resource">
            <inheritdoc/>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.PermissionResponse.StatusCode">
            <inheritdoc/>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.PermissionResponse.Diagnostics">
            <inheritdoc/>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.PermissionResponse.RequestCharge">
            <inheritdoc/>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.PermissionResponse.ActivityId">
            <inheritdoc/>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.PermissionResponse.ETag">
            <inheritdoc/>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.PermissionResponse.MaxResourceQuota">
            <inheritdoc/>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.PermissionResponse.CurrentResourceQuotaUsage">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.PermissionResponse.op_Implicit(Microsoft.Azure.Cosmos.PermissionResponse)~Microsoft.Azure.Cosmos.Permission">
            <summary>
            Get <see cref="T:Microsoft.Azure.Cosmos.Permission"/> implicitly from <see cref="T:Microsoft.Azure.Cosmos.PermissionResponse"/>
            </summary>
            <param name="response">PermissionResponse</param>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.ChangeFeedPartitionKeyResultSetIteratorCore">
            <summary>
            Cosmos Change Feed Iterator for a particular Partition Key Range
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.ChangeFeedPartitionKeyResultSetIteratorCore.MaxItemCount">
            <summary>
            Gets or sets the maximum number of items to be returned in the enumeration operation in the Azure Cosmos DB service.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.ChangeFeedPartitionKeyResultSetIteratorCore.ReadNextAsync(System.Threading.CancellationToken)">
            <summary>
            Get the next set of results from the cosmos service
            </summary>
            <param name="cancellationToken">(Optional) <see cref="T:System.Threading.CancellationToken"/> representing request cancellation.</param>
            <returns>A change feed response from cosmos service</returns>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.ChangeFeedResultSetIteratorCore">
            <summary>
            Cosmos Stand-By Feed iterator implementing Composite Continuation Token
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.ChangeFeedResultSetIteratorCore.changeFeedOptions">
            <summary>
            The query options for the result set
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.ChangeFeedResultSetIteratorCore.ReadNextAsync(System.Threading.CancellationToken)">
            <summary>
            Get the next set of results from the cosmos service
            </summary>
            <param name="cancellationToken">(Optional) <see cref="T:System.Threading.CancellationToken"/> representing request cancellation.</param>
            <returns>A query response from cosmos service</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.ChangeFeedResultSetIteratorCore.ShouldRetryFailureAsync(Microsoft.Azure.Cosmos.ResponseMessage,System.Threading.CancellationToken)">
            <summary>
            During Feed read, split can happen or Max Item count can go beyond the max response size
            </summary>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.Response`1">
            <summary>
            The cosmos resource response class
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.Response`1.Headers">
            <summary>
            Gets the current <see cref="T:Microsoft.Azure.Cosmos.ResponseMessage"/> HTTP headers.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.Response`1.Resource">
            <summary>
            The content of the response.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Response`1.op_Implicit(Microsoft.Azure.Cosmos.Response{`0})~`0">
            <summary>
            Get Resource implicitly from <see cref="T:Microsoft.Azure.Cosmos.Response`1"/>
            </summary>
            <param name="response">The Azure Cosmos DB service response.</param>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.Response`1.StatusCode">
            <summary>
            Gets the request completion status code from the Azure Cosmos DB service.
            </summary>
            <value>The request completion status code</value>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.Response`1.RequestCharge">
            <summary>
            Gets the request charge for this request from the Azure Cosmos DB service.
            </summary>
            <value>
            The request charge measured in request units.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.Response`1.ActivityId">
            <summary>
            Gets the activity ID for the request from the Azure Cosmos DB service.
            </summary>
            <value>
            The activity ID for the request.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.Response`1.ETag">
            <summary>
            Gets the entity tag associated with the resource from the Azure Cosmos DB service.
            </summary>
            <value>
            The entity tag associated with the resource.
            </value>
            <remarks>
            ETags are used for concurrency checking when updating resources. 
            </remarks>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.Response`1.Diagnostics">
            <summary>
            Gets the cosmos diagnostics information for the current request to Azure Cosmos DB service
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.Response`1.MaxResourceQuota">
            <summary>
            Gets the maximum size limit for this entity from the Azure Cosmos DB service.
            </summary>
            <value>
            The maximum size limit for this entity. Measured in kilobytes for document resources 
            and in counts for other resources.
            </value>
            <remarks>
            To get public access to the quota information do the following
            cosmosResponse.Headers.GetHeaderValue("x-ms-resource-quota")
            </remarks>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.Response`1.CurrentResourceQuotaUsage">
            <summary>
            Gets the current size of this entity from the Azure Cosmos DB service.
            </summary>
            <value>
            The current size for this entity. Measured in kilobytes for document resources 
            and in counts for other resources.
            </value>
            <remarks>
            To get public access to the quota information do the following
            cosmosResponse.Headers.GetHeaderValue("x-ms-resource-usage")
            </remarks>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.AccountConsistency">
            <summary>
            Represents the consistency policy of a database account of the Azure Cosmos DB service.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.AccountConsistency.DefaultConsistencyLevel">
            <summary>
            Get or set the default consistency level in the Azure Cosmos DB service.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.AccountConsistency.MaxStalenessPrefix">
            <summary>
            For bounded staleness consistency, the maximum allowed staleness
            in terms difference in sequence numbers (aka version) in the Azure Cosmos DB service.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.AccountConsistency.MaxStalenessIntervalInSeconds">
            <summary>
            For bounded staleness consistency, the maximum allowed staleness
            in terms time interval in the Azure Cosmos DB service.
            </summary>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.AccountProperties">
            <summary> 
            Represents a <see cref="T:Microsoft.Azure.Cosmos.AccountProperties"/>. A AccountProperties is the container for databases in the Azure Cosmos DB service.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.AccountProperties.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.Cosmos.AccountProperties"/> class.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.AccountProperties.WritableRegions">
            <summary>
            Gets the list of locations representing the writable regions of
            this database account from the Azure Cosmos DB service.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.AccountProperties.ReadableRegions">
            <summary>
            Gets the list of locations representing the readable regions of
            this database account from the Azure Cosmos DB service.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.AccountProperties.Id">
            <summary>
            Gets the Id of the resource in the Azure Cosmos DB service.
            </summary>
            <value>The Id associated with the resource.</value>
            <remarks>
            <para>
            Every resource within an Azure Cosmos DB database account needs to have a unique identifier. 
            Unlike <see cref="P:Microsoft.Azure.Documents.Resource.ResourceId"/>, which is set internally, this Id is settable by the user and is not immutable.
            </para>
            <para>
            When working with document resources, they too have this settable Id property. 
            If an Id is not supplied by the user the SDK will automatically generate a new GUID and assign its value to this property before
            persisting the document in the database. 
            You can override this auto Id generation by setting the disableAutomaticIdGeneration parameter on the <see cref="T:Microsoft.Azure.Cosmos.DocumentClient"/> instance to true.
            This will prevent the SDK from generating new Ids. 
            </para>
            <para>
            The following characters are restricted and cannot be used in the Id property:
             '/', '\\', '?', '#'
            </para>
            </remarks>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.AccountProperties.ETag">
            <summary>
            Gets the entity tag associated with the resource from the Azure Cosmos DB service.
            </summary>
            <value>
            The entity tag associated with the resource.
            </value>
            <remarks>
            ETags are used for concurrency checking when updating resources. 
            </remarks>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.AccountProperties.ResourceId">
            <summary>
            Gets or sets the Resource Id associated with the resource in the Azure Cosmos DB service.
            </summary>
            <value>
            The Resource Id associated with the resource.
            </value>
            <remarks>
            A Resource Id is the unique, immutable, identifier assigned to each Azure Cosmos DB 
            resource whether that is a database, a collection or a document.
            These resource ids are used when building up SelfLinks, a static addressable Uri for each resource within a database account.
            </remarks>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.AccountProperties.MaxMediaStorageUsageInMB">
            <summary>
            Gets the storage quota for media storage in the databaseAccount from the Azure Cosmos DB service.
            </summary>
            <value>
            The storage quota in measured MBs.
            </value>
            <remarks>
            This value is retrieved from the gateway.
            </remarks>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.AccountProperties.MediaStorageUsageInMB">
            <summary>
            Gets the current attachment content (media) usage in MBs from the Azure Cosmos DB service.
            </summary>
            <value>
            The attachment content (media) usage in MBs.
            </value>
            <remarks>
            The value is retrieved from the gateway. The value is returned from cached information updated periodically 
            and is not guaranteed to be real time.
            </remarks>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.AccountProperties.ConsumedDocumentStorageInMB">
            <summary>
            The cumulative sum of current sizes of created collection in MB
            Value is returned from cached information which is updated periodically and is not guaranteed to be real time
            TODO remove this property tfs 4442779
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.AccountProperties.ReservedDocumentStorageInMB">
            <summary>
            The cumulative sum of maximum sizes of created collection in MB
            Value is returned from cached information which is updated periodically and is not guaranteed to be real time
            TODO remove this property tfs 4442779
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.AccountProperties.ProvisionedDocumentStorageInMB">
            <summary>
            The provisioned documented storage capacity for the database account
            Value is returned from cached information which is updated periodically and is not guaranteed to be real time
            TODO remove this property tfs 4442779
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.AccountProperties.Consistency">
            <summary>
            Gets the <see cref="P:Microsoft.Azure.Cosmos.AccountProperties.Consistency"/> from the Azure Cosmos DB service.
            </summary>
            <value>
            The ConsistencySetting.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.AccountProperties.AddressesLink">
            <summary>
            Gets the self-link for Address Routing Table in the databaseAccount
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.AccountProperties.ReplicationPolicy">
            <summary>
            Gets the ReplicationPolicy properties
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.AccountProperties.SystemReplicationPolicy">
            <summary>
            Gets the SystemReplicationPolicy 
            </summary>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.AccountRegion">
            <summary>
            The AccountLocation class represents an Azure Cosmos DB database account in a specific region.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.AccountRegion.Name">
            <summary>
            Gets the name of the database account location in the Azure Cosmos DB service. For example,
            "West US" as the name of the database account location in the West US region.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.AccountRegion.Endpoint">
            <summary>
            Gets the URL of the database account location in the Azure Cosmos DB service. For example,
            "https://contoso-WestUS.documents.azure.com:443/" as the URL of the 
            database account location in the West US region.
            </summary>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.CompositePathSortOrder">
            <summary>
            Defines the target data type of an index path specification in the Azure Cosmos DB service.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.CompositePathSortOrder.Ascending">
            <summary>
            Ascending sort order for composite paths.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.CompositePathSortOrder.Descending">
            <summary>
            Descending sort order for composite paths.
            </summary>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.CompositePath">
            <summary>
            DOM for a composite path.
            A composite path is used in a composite index.
            For example if you want to run a query like "SELECT * FROM c ORDER BY c.age, c.height",
            then you need to add "/age" and "/height" as composite paths to your composite index.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.CompositePath.Path">
            <summary>
            Gets or sets the full path in a document used for composite indexing.
            We do not support wild cards in the path.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.CompositePath.Order">
            <summary>
            Gets or sets the sort order for the composite path.
            For example if you want to run the query "SELECT * FROM c ORDER BY c.age asc, c.height desc",
            then you need to make the order for "/age" "ascending" and the order for "/height" "descending".
            </summary>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.ConflictProperties">
            <summary>
            Represents a conflict in the Azure Cosmos DB service.
            </summary>
            <remarks>
            On rare occasions, during an async operation (insert, replace and delete), a version conflict may occur on a resource during fail over or multi master scenarios.
            The conflicting resource is persisted as a Conflict resource.  
            Inspecting Conflict resources will allow you to determine which operations and resources resulted in conflicts.
            This is not related to operations returning a Conflict status code.
            </remarks>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.ConflictProperties.Id">
            <summary>
            Gets the Id of the resource in the Azure Cosmos DB service.
            </summary>
            <value>The Id associated with the resource.</value>
            <remarks>
            <para>
            Every resource within an Azure Cosmos DB database account needs to have a unique identifier. 
            </para>
            <para>
            The following characters are restricted and cannot be used in the Id property:
             '/', '\\', '?', '#'
            </para>
            </remarks>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.ConflictProperties.OperationKind">
            <summary>
            Gets the operation that resulted in the conflict in the Azure Cosmos DB service.
            </summary>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.ConflictResolutionMode">
            <summary>
            Specifies the supported conflict resolution modes, as specified in <see cref="T:Microsoft.Azure.Cosmos.ConflictResolutionPolicy"/>
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.ConflictResolutionMode.LastWriterWins">
            <summary>
            Last writer wins conflict resolution mode
            </summary>
            <remarks>
            Setting the ConflictResolutionMode to "LastWriterWins" indicates that conflict resolution should be done by inspecting a field in the conflicting documents
            and picking the document which has the higher value in that path. See <see cref="P:Microsoft.Azure.Cosmos.ConflictResolutionPolicy.ResolutionPath"/> for details on how to specify the path
            to be checked for conflict resolution.
            </remarks>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.ConflictResolutionMode.Custom">
            <summary>
            Custom conflict resolution mode
            </summary>
            <remarks>
            Setting the ConflictResolutionMode to "Custom" indicates that conflict resolution is custom handled by a user. 
            The user could elect to register a user specified <see cref="T:Microsoft.Azure.Cosmos.Scripts.StoredProcedureProperties"/> for handling conflicting resources.
            Should the user not register a user specified StoredProcedure, conflicts will default to being made available as Conflict resources, 
            which the user can inspect and manually resolve.
            See <see cref="P:Microsoft.Azure.Cosmos.ConflictResolutionPolicy.ResolutionProcedure"/> for details on how to specify the stored procedure
            to run for conflict resolution.
            </remarks>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.ConflictResolutionPolicy">
            <summary>
            Represents the conflict resolution policy configuration for specifying how to resolve conflicts 
            in case writes from different regions result in conflicts on items in the container in the Azure Cosmos DB service.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.ConflictResolutionPolicy.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.Cosmos.ConflictResolutionPolicy"/> class for the Azure Cosmos DB service.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.ConflictResolutionPolicy.Mode">
            <summary>
            Gets or sets the <see cref="T:Microsoft.Azure.Cosmos.ConflictResolutionMode"/> in the Azure Cosmos DB service. By default it is <see cref="F:Microsoft.Azure.Cosmos.ConflictResolutionMode.LastWriterWins"/>.
            </summary>
            <value>
            One of the values of the <see cref="T:Microsoft.Azure.Cosmos.ConflictResolutionMode"/> enumeration.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.ConflictResolutionPolicy.ResolutionPath">
            <summary>
            Gets or sets the path which is present in each item in the Azure Cosmos DB service for last writer wins conflict-resolution.
            This path must be present in each item and must be an integer value.
            In case of a conflict occurring on a item, the item with the higher integer value in the specified path will be picked.
            If the path is unspecified, by default the time stamp path will be used.
            </summary>
            <remarks>
            This value should only be set when using <see cref="F:Microsoft.Azure.Cosmos.ConflictResolutionMode.LastWriterWins"/>
            </remarks>
            <value>
            <![CDATA[The path to check values for last-writer wins conflict resolution. That path is a rooted path of the property in the item, such as "/name/first".]]>
            </value>
            <example>
            <![CDATA[
            conflictResolutionPolicy.ConflictResolutionPath = "/name/first";
            ]]>
            </example>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.ConflictResolutionPolicy.ResolutionProcedure">
            <summary>
            Gets or sets the <see cref="T:Microsoft.Azure.Cosmos.Scripts.StoredProcedureProperties"/> which is used for conflict resolution in the Azure Cosmos DB service.
            This stored procedure may be created after the <see cref="T:Microsoft.Azure.Cosmos.Container"/> is created and can be changed as required. 
            </summary>
            <remarks>
            1. This value should only be set when using <see cref="F:Microsoft.Azure.Cosmos.ConflictResolutionMode.Custom"/>
            2. In case the stored procedure fails or throws an exception, the conflict resolution will default to registering conflicts in the conflicts feed"/>.
            3. The user can provide the stored procedure id.
            </remarks>
            <value>
            <![CDATA[The stored procedure to perform conflict resolution.]]>
            </value>
            <example>
            <![CDATA[
            conflictResolutionPolicy.ConflictResolutionProcedure = "dbs/databaseName/colls/containerName/sprocs/storedProcedureName";
            ]]>
            </example>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.ConsistencyLevel">
            <summary> 
            These are the consistency levels supported by the Azure Cosmos DB service.
            </summary>
            <remarks>
            The requested Consistency Level must match or be weaker than that provisioned for the database account.
            For more information on consistency levels, please see <see>http://azure.microsoft.com/documentation/articles/documentdb-consistency-levels/"</see> Consistency Levels article.
            </remarks>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.ConsistencyLevel.Strong">
            <summary>
            Strong Consistency guarantees that read operations always return the value that was last written.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.ConsistencyLevel.BoundedStaleness">
            <summary>
            Bounded Staleness guarantees that reads are not too out-of-date. This can be configured based on number of operations (MaxStalenessPrefix) 
            or time (MaxStalenessIntervalInSeconds).  For more information on MaxStalenessPrefix and MaxStalenessIntervalInSeconds, please see <see cref="T:Microsoft.Azure.Cosmos.AccountConsistency"/>.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.ConsistencyLevel.Session">
            <summary>
            Session Consistency guarantees monotonic reads (you never read old data, then new, then old again), monotonic writes (writes are ordered) 
            and read your writes (your writes are immediately visible to your reads) within any single session. 
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.ConsistencyLevel.Eventual">
            <summary>
            Eventual Consistency guarantees that reads will return a subset of writes. All writes 
            will be eventually be available for reads.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.ConsistencyLevel.ConsistentPrefix">
            <summary>
            ConsistentPrefix Consistency guarantees that reads will return some prefix of all writes with no gaps.
            All writes will be eventually be available for reads.
            </summary>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.ContainerProperties">
            <summary>
            Represents a document container in the Azure Cosmos DB service. A container is a named logical container for documents. 
            </summary>
            <remarks>
            A database may contain zero or more named containers and each container consists of zero or more JSON documents. 
            Being schema-free, the documents in a container do not need to share the same structure or fields. Since containers are application resources, 
            they can be authorized using either the master key or resource keys.
            Refer to <see>http://azure.microsoft.com/documentation/articles/documentdb-resources/#collections</see> for more details on containers.
            </remarks>
            <example>
            The example below creates a new partitioned container with 50000 Request-per-Unit throughput.
            The partition key is the first level 'country' property in all the documents within this container.
            <code language="c#">
            <![CDATA[
                Container container = await client.GetDatabase("dbName"].Containers.CreateAsync("MyCollection", "/country", 50000} );
                ContainerProperties containerProperties = container.Resource;
            ]]>
            </code>
            </example>
            <example>
            The example below creates a new container with a custom indexing policy.
            <code language="c#">
            <![CDATA[
                ContainerProperties containerProperties = new ContainerProperties("MyCollection", "/country");
                containerProperties.IndexingPolicy.Automatic = true;
                containerProperties.IndexingPolicy.IndexingMode = IndexingMode.Consistent;
                
                CosmosContainerResponse containerCreateResponse = await client.GetDatabase("dbName"].CreateContainerAsync(containerProperties, 50000);
                ContainerProperties createdContainerProperties = containerCreateResponse.Container;
            ]]>
            </code>
            </example>
            <example>
            The example below deletes this container.
            <code language="c#">
            <![CDATA[
                Container container = client.GetDatabase("dbName"].Containers["MyCollection"];
                await container.DeleteAsync();
            ]]>
            </code>
            </example>
            <seealso cref="T:Microsoft.Azure.Cosmos.IndexingPolicy"/>
            <seealso cref="T:Microsoft.Azure.Cosmos.UniqueKeyPolicy"/>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.ContainerProperties.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.Cosmos.ContainerProperties"/> class for the Azure Cosmos DB service.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.ContainerProperties.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.Cosmos.ContainerProperties"/> class for the Azure Cosmos DB service.
            </summary>
            <param name="id">The Id of the resource in the Azure Cosmos service.</param>
            <param name="partitionKeyPath">The path to the partition key. Example: /location</param>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.ContainerProperties.PartitionKeyDefinitionVersion">
             <summary>
             Gets or sets the <see cref="T:Microsoft.Azure.Cosmos.PartitionKeyDefinitionVersion"/>
            
             The partition key definition version 1 uses a hash function that computes
             hash based on the first 100 bytes of the partition key. This can cause
             conflicts for documents with partition keys greater than 100 bytes.
             
             The partition key definition version 2 uses a hash function that computes
             hash based on the first 2 KB of the partition key.
             </summary>
             <returns>The Partition Key Definition Version of the container</returns>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.ContainerProperties.ConflictResolutionPolicy">
            <summary>
            Gets or sets the <see cref="P:Microsoft.Azure.Cosmos.ContainerProperties.ConflictResolutionPolicy" />
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.ContainerProperties.Id">
            <summary>
            Gets or sets the Id of the resource in the Azure Cosmos DB service.
            </summary>
            <value>The Id associated with the resource.</value>
            <remarks>
            <para>
            Every resource within an Azure Cosmos DB database account needs to have a unique identifier. 
            Unlike <see cref="P:Microsoft.Azure.Documents.Resource.ResourceId"/>, which is set internally, this Id is settable by the user and is not immutable.
            </para>
            <para>
            When working with document resources, they too have this settable Id property. 
            If an Id is not supplied by the user the SDK will automatically generate a new GUID and assign its value to this property before
            persisting the document in the database. 
            You can override this auto Id generation by setting the disableAutomaticIdGeneration parameter on the <see cref="T:Microsoft.Azure.Cosmos.DocumentClient"/> instance to true.
            This will prevent the SDK from generating new Ids. 
            </para>
            <para>
            The following characters are restricted and cannot be used in the Id property:
             '/', '\\', '?', '#'
            </para>
            </remarks>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.ContainerProperties.UniqueKeyPolicy">
            <summary>
            Gets or sets the <see cref="P:Microsoft.Azure.Cosmos.ContainerProperties.UniqueKeyPolicy"/> that guarantees uniqueness of documents in container in the Azure Cosmos DB service.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.ContainerProperties.ETag">
            <summary>
            Gets the entity tag associated with the resource from the Azure Cosmos DB service.
            </summary>
            <value>
            The entity tag associated with the resource.
            </value>
            <remarks>
            ETags are used for concurrency checking when updating resources. 
            </remarks>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.ContainerProperties.LastModified">
            <summary>
            Gets the last modified time stamp associated with <see cref="T:Microsoft.Azure.Cosmos.ContainerProperties" /> from the Azure Cosmos DB service.
            </summary>
            <value>The last modified time stamp associated with the resource.</value>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.ContainerProperties.IndexingPolicy">
            <summary>
            Gets the <see cref="P:Microsoft.Azure.Cosmos.ContainerProperties.IndexingPolicy"/> associated with the container from the Azure Cosmos DB service. 
            </summary>
            <value>
            The indexing policy associated with the container.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.ContainerProperties.PartitionKeyPath">
            <summary>
            JSON path used for containers partitioning
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.ContainerProperties.TimeToLivePropertyPath">
            <summary>
            Gets or sets the time to live base time stamp property path.
            </summary>
            <value>
            It is an optional property.
            This property should be only present when DefaultTimeToLive is set. When this property is present, time to live
            for a item is decided based on the value of this property in item.
            By default, TimeToLivePropertyPath is set to null meaning the time to live is based on the _ts property in item.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.ContainerProperties.DefaultTimeToLive">
            <summary>
            Gets the default time to live in seconds for item in a container from the Azure Cosmos service.
            </summary>
            <value>
            It is an optional property.
            A valid value must be either a nonzero positive timespan or <c>null</c>.
            By default, DefaultTimeToLive is set to null meaning the time to live is turned off for the container.
            The unit of measurement is seconds. The maximum allowed value is 2147483647.
            </value>
            <remarks>
            <para>
            The <see cref="P:Microsoft.Azure.Cosmos.ContainerProperties.DefaultTimeToLive"/> will be applied to all the items in the container as the default time-to-live policy.
            The individual item could override the default time-to-live policy by setting its time to live.
            </para>
            <para>
            When the <see cref="P:Microsoft.Azure.Cosmos.ContainerProperties.DefaultTimeToLive"/> is <c>null</c>, the time-to-live will be turned off for the container.
            It means all the items will never expire. The individual item's  time to live will be disregarded.
            </para>
            <para>
            When the <see cref="P:Microsoft.Azure.Cosmos.ContainerProperties.DefaultTimeToLive"/> is '-1', the time-to-live will be turned on for the container.
            By default, all the items will never expire. The individual item could be given a specific time-to-live value by setting its
            time to live. The item's time to live will be honored, and the expired items
            will be deleted in background.
            </para>
            <para>
            When the <see cref="P:Microsoft.Azure.Cosmos.ContainerProperties.DefaultTimeToLive"/> is a nonzero positive integer, the time-to-live will be turned on for the container.
            And a default time-to-live in seconds will be applied to all the items. A item will be expired after the
            specified <see cref="P:Microsoft.Azure.Cosmos.ContainerProperties.DefaultTimeToLive"/> value in seconds since its last write time.
            </para>
            </remarks>
            <example>
            The example below disables time-to-live on a container.
            <code language="c#">
            <![CDATA[
                container.DefaultTimeToLive = null;
            ]]>
            </code>
            </example>
            <example>
            The example below enables time-to-live on a container. By default, all the items never expire.
            <code language="c#">
            <![CDATA[
                container.DefaultTimeToLive = TimeSpan.FromDays(2);
            ]]>
            </code>
            </example>
            <example>
            The example below enables time-to-live on a container. By default, the item will expire after 1000 seconds
            since its last write time.
            <code language="c#">
            <![CDATA[
                container.DefaultTimeToLive = TimeSpan.FromSeconds(1000);
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.ContainerProperties.GetNoneValue">
            <summary>
            The function selects the right partition key constant mapping for <see cref="F:Microsoft.Azure.Cosmos.PartitionKey.None"/>
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.ContainerProperties.CreateWithResourceId(System.String)">
            <summary>
            Only collection cache needs this contract. None are expected to use it. 
            </summary>
            <param name="resourceId">The resource identifier for the container.</param>
            <returns>An instance of <see cref="T:Microsoft.Azure.Cosmos.ContainerProperties"/>.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.ContainerProperties.#ctor(System.String,Microsoft.Azure.Documents.PartitionKeyDefinition)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.Cosmos.ContainerProperties"/> class for the Azure Cosmos DB service.
            </summary>
            <param name="id">The Id of the resource in the Azure Cosmos service.</param>
            <param name="partitionKeyDefinition">The partition key <see cref="T:Microsoft.Azure.Documents.PartitionKeyDefinition"/></param>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.ContainerProperties.PartitionKey">
            <summary>
            Gets or sets <see cref="T:Microsoft.Azure.Documents.PartitionKeyDefinition"/> object in the Azure Cosmos DB service.
            </summary>
            <value>
            <see cref="T:Microsoft.Azure.Documents.PartitionKeyDefinition"/> object.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.ContainerProperties.ResourceId">
            <summary>
            Gets the Resource Id associated with the resource in the Azure Cosmos DB service.
            </summary>
            <value>
            The Resource Id associated with the resource.
            </value>
            <remarks>
            A Resource Id is the unique, immutable, identifier assigned to each Azure Cosmos DB 
            resource whether that is a database, a container or a document.
            These resource ids are used when building up SelfLinks, a static addressable Uri for each resource within a database account.
            </remarks>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.ContainerProperties.ValidateRequiredProperties">
            <summary>
            Throws an exception if an invalid id or partition key is set.
            </summary>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.CosmosResource">
            <summary> 
             Represents an abstract resource type in the Azure Cosmos DB service.
             All Azure Cosmos DB resources, such as <see cref="T:Microsoft.Azure.Cosmos.Database"/>, <see cref="T:Microsoft.Azure.Documents.DocumentCollection"/>, and <see cref="T:Microsoft.Azure.Documents.Document"/> extend this abstract type.
            </summary>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.DatabaseProperties">
            <summary>
            Represents a database in the Azure Cosmos DB account.
            </summary>
            <remarks>
            Each Azure Cosmos DB database account can have zero or more databases. A database in Azure Cosmos DB is a logical container for 
            document collections and users.
            Refer to <see>http://azure.microsoft.com/documentation/articles/documentdb-resources/#databases</see> for more details on databases.
            </remarks>
            <example>
            The example below creates a new Database with an Id property of 'MyDatabase'.
            <code language="c#">
            <![CDATA[ 
            using (DocumentClient client = new DocumentClient(new Uri("service endpoint"), "auth key"))
            {
                Database db = await client.CreateDatabaseAsync(new Database { Id = "MyDatabase" });
            }
            ]]>
            </code>
            </example>
            <example> 
            The example below creates a collection within this database with OfferThroughput set to 10000.
            <code language="c#">
            <![CDATA[
            DocumentCollection coll = await client.CreateDocumentCollectionAsync(db.SelfLink,
                new DocumentCollection { Id = "MyCollection" }, 
                10000);
            ]]>
            </code>
            </example>
            <example>
            The example below queries for a Database by Id to retrieve the SelfLink.
            <code language="c#">
            <![CDATA[
            using Microsoft.Azure.Cosmos.Linq;
            Database database = client.CreateDatabaseQuery().Where(d => d.Id == "MyDatabase").AsEnumerable().FirstOrDefault();
            string databaseLink = database.SelfLink;
            ]]>
            </code>
            </example>    
            <example>
            The example below deletes the database using its SelfLink property.
            <code language="c#">
            <![CDATA[
            await client.DeleteDatabaseAsync(db.SelfLink);
            ]]>
            </code>
            </example>
            <seealso cref="T:Microsoft.Azure.Cosmos.ContainerProperties"/>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.DatabaseProperties.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.Cosmos.DatabaseProperties"/> class for the Azure Cosmos DB service.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.DatabaseProperties.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.Cosmos.DatabaseProperties"/> class for the Azure Cosmos DB service.
            </summary>
            <param name="id">The Id of the resource in the Azure Cosmos service.</param>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.DatabaseProperties.Id">
            <summary>
            Gets or sets the Id of the resource in the Azure Cosmos DB service.
            </summary>
            <value>The Id associated with the resource.</value>
            <remarks>
            <para>
            Every resource within an Azure Cosmos DB database account needs to have a unique identifier. 
            </para>
            <para>
            When working with document resources, they too have this settable Id property. 
            If an Id is not supplied by the user the SDK will automatically generate a new GUID and assign its value to this property before
            persisting the document in the database. 
            You can override this auto Id generation by setting the disableAutomaticIdGeneration parameter on the <see cref="T:Microsoft.Azure.Cosmos.DocumentClient"/> instance to true.
            This will prevent the SDK from generating new Ids. 
            </para>
            <para>
            The following characters are restricted and cannot be used in the Id property:
             '/', '\\', '?', '#'
            </para>
            </remarks>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.DatabaseProperties.ETag">
            <summary>
            Gets the entity tag associated with the resource from the Azure Cosmos DB service.
            </summary>
            <value>
            The entity tag associated with the resource.
            </value>
            <remarks>
            ETags are used for concurrency checking when updating resources. 
            </remarks>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.DatabaseProperties.LastModified">
            <summary>
            Gets the last modified time stamp associated with <see cref="T:Microsoft.Azure.Cosmos.DatabaseProperties" /> from the Azure Cosmos DB service.
            </summary>
            <value>The last modified time stamp associated with the resource.</value>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.DatabaseProperties.ResourceId">
            <summary>
            Gets the Resource Id associated with the resource in the Azure Cosmos DB service.
            </summary>
            <value>
            The Resource Id associated with the resource.
            </value>
            <remarks>
            A Resource Id is the unique, immutable, identifier assigned to each Azure Cosmos DB 
            resource whether that is a database, a collection or a document.
            These resource ids are used when building up SelfLinks, a static addressable Uri for each resource within a database account.
            </remarks>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.DataType">
            <summary>
            Defines the target data type of an index path specification in the Azure Cosmos DB service.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.DataType.Number">
            <summary>
            Represents a numeric data type.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.DataType.String">
            <summary>
            Represents a string data type.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.DataType.Point">
            <summary>
            Represent a point data type.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.DataType.LineString">
            <summary>
            Represent a line string data type.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.DataType.Polygon">
            <summary>
            Represent a polygon data type.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.DataType.MultiPolygon">
            <summary>
            Represent a multi-polygon data type.
            </summary>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.ExcludedPath">
            <summary> 
            Specifies a path within a JSON document to be excluded while indexing data for the Azure Cosmos DB service.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.ExcludedPath.Path">
            <summary>
            Gets or sets the path to be excluded from indexing in the Azure Cosmos DB service.
            </summary>
            <value>
            The path to be excluded from indexing.
            </value>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.HashIndex">
            <summary>
            Represents details of the hash index setting in an Azure Cosmos DB service.
            </summary>
            <remarks>
            Can be used to serve queries like: SELECT * FROM docs d WHERE d.prop = 5.
            </remarks>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.HashIndex.#ctor(Microsoft.Azure.Cosmos.DataType)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.Cosmos.HashIndex"/> class with specified DataType for the Azure Cosmos DB service.
            </summary>
            <param name="dataType">Specifies the target data type for the index path specification.</param>
            <seealso cref="P:Microsoft.Azure.Cosmos.HashIndex.DataType"/>
            <example>
            Here is an example to instantiate HashIndex class passing in the DataType:
            <code language="c#">
            <![CDATA[
            HashIndex hashIndex = new HashIndex(DataType.String);
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.HashIndex.#ctor(Microsoft.Azure.Cosmos.DataType,System.Int16)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.Cosmos.HashIndex"/> class with specified DataType and precision for the Azure Cosmos DB service.
            </summary>
            <param name="dataType">Specifies the target data type for the index path specification.</param>
            <param name="precision">Specifies the precision to be used for the data type associated with this index.</param>
            <seealso cref="P:Microsoft.Azure.Cosmos.HashIndex.DataType"/>
            <example>
            Here is an example to instantiate HashIndex class passing in the DataType and precision:
            <code language="c#">
            <![CDATA[
            HashIndex hashIndex = new HashIndex(DataType.String, 3);
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.HashIndex.DataType">
            <summary>
            Gets or sets the data type for which this index should be applied in the Azure Cosmos DB service.
            </summary>
            <value>
            The data type for which this index should be applied.
            </value>
            <remarks>Refer to <a href="http://azure.microsoft.com/documentation/articles/documentdb-indexing-policies/#ConfigPolicy">Customizing the indexing policy of a collection</a> for valid ranges of values.</remarks>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.HashIndex.Precision">
            <summary>
            Gets or sets the precision for this particular index in the Azure Cosmos DB service.
            </summary>
            <value>
            The precision for this particular index. Returns null, if not set.
            </value>
            <remarks>Refer to <a href="http://azure.microsoft.com/documentation/articles/documentdb-indexing-policies/#ConfigPolicy">Customizing the indexing policy of a collection</a> for valid ranges of values.</remarks>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.HashIndex.Clone">
            <summary>
            Creates a copy of the hash index for the Azure Cosmos DB service.
            </summary>
            <returns>A clone of the hash index.</returns>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.IncludedPath">
            <summary> 
            Specifies a path within a JSON document to be included in the Azure Cosmos DB service.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.IncludedPath.Path">
            <summary>
            Gets or sets the path to be indexed in the Azure Cosmos DB service.
            </summary>
            <value>
            The path to be indexed.
            </value>
            <remarks>
            Refer to http://azure.microsoft.com/documentation/articles/documentdb-indexing-policies/#ConfigPolicy for how to specify paths.
            Some valid examples: /"prop"/?, /"prop"/**, /"prop"/"subprop"/?, /"prop"/[]/?
            </remarks>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.IncludedPath.Indexes">
            <summary>
            Gets or sets the collection of <see cref="T:Microsoft.Azure.Cosmos.Index"/> objects to be applied for this included path in the Azure Cosmos DB service.
            </summary>
            <value>
            The collection of the <see cref="T:Microsoft.Azure.Cosmos.Index"/> objects to be applied for this included path.
            </value>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.Index">
            <summary>
            Base class for IndexingPolicy Indexes in the Azure Cosmos DB service, you should use a concrete Index like HashIndex or RangeIndex.
            </summary> 
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Index.#ctor(Microsoft.Azure.Cosmos.IndexKind)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.Cosmos.Index"/> class for the Azure Cosmos DB service.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.Index.Kind">
            <summary>
            Gets or sets the kind of indexing to be applied in the Azure Cosmos DB service.
            </summary>
            <value>
            One of the values of the <see cref="T:Microsoft.Azure.Documents.IndexKind"/> enumeration.
            </value>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Index.Range(Microsoft.Azure.Cosmos.DataType)">
            <summary>
            Returns an instance of the <see cref="T:Microsoft.Azure.Cosmos.RangeIndex"/> class with specified DataType for the Azure Cosmos DB service.
            </summary>
            <param name="dataType">Specifies the target data type for the index path specification.</param>
            <returns>An instance of <see cref="T:Microsoft.Azure.Cosmos.RangeIndex"/> type.</returns>
            <seealso cref="T:Microsoft.Azure.Cosmos.DataType"/>
            <example>
            Here is an example to create RangeIndex instance passing in the DataType:
            <code language="c#">
            <![CDATA[
            RangeIndex rangeIndex = Index.Range(DataType.Number);
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Index.Range(Microsoft.Azure.Cosmos.DataType,System.Int16)">
            <summary>
            Returns an instance of the <see cref="T:Microsoft.Azure.Cosmos.RangeIndex"/> class with specified DataType and precision for the Azure Cosmos DB service.
            </summary>
            <param name="dataType">Specifies the target data type for the index path specification.</param>
            <param name="precision">Specifies the precision to be used for the data type associated with this index.</param>
            <returns>An instance of <see cref="T:Microsoft.Azure.Cosmos.RangeIndex"/> type.</returns>
            <seealso cref="T:Microsoft.Azure.Cosmos.DataType"/>
            <example>
            Here is an example to create RangeIndex instance passing in the DataType and precision:
            <code language="c#">
            <![CDATA[
            RangeIndex rangeIndex = Index.Range(DataType.Number, -1);
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Index.Hash(Microsoft.Azure.Cosmos.DataType)">
            <summary>
            Returns an instance of the <see cref="T:Microsoft.Azure.Cosmos.HashIndex"/> class with specified DataType for the Azure Cosmos DB service.
            </summary>
            <param name="dataType">Specifies the target data type for the index path specification.</param>
            <returns>An instance of <see cref="T:Microsoft.Azure.Cosmos.HashIndex"/> type.</returns>
            <seealso cref="T:Microsoft.Azure.Cosmos.DataType"/>
            <example>
            Here is an example to create HashIndex instance passing in the DataType:
            <code language="c#">
            <![CDATA[
            HashIndex hashIndex = Index.Hash(DataType.String);
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Index.Hash(Microsoft.Azure.Cosmos.DataType,System.Int16)">
            <summary>
            Returns an instance of the <see cref="T:Microsoft.Azure.Cosmos.HashIndex"/> class with specified DataType and precision for the Azure Cosmos DB service.
            </summary>
            <param name="dataType">Specifies the target data type for the index path specification.</param>
            <param name="precision">Specifies the precision to be used for the data type associated with this index.</param>
            <returns>An instance of <see cref="T:Microsoft.Azure.Cosmos.HashIndex"/> type.</returns>
            <seealso cref="T:Microsoft.Azure.Cosmos.DataType"/>
            <example>
            Here is an example to create HashIndex instance passing in the DataType and precision:
            <code language="c#">
            <![CDATA[
            HashIndex hashIndex = Index.Hash(DataType.String, 3);
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Index.Spatial(Microsoft.Azure.Cosmos.DataType)">
            <summary>
            Returns an instance of the <see cref="T:Microsoft.Azure.Cosmos.SpatialIndex"/> class with specified DataType for the Azure Cosmos DB service.
            </summary>
            <param name="dataType">Specifies the target data type for the index path specification.</param>
            <returns>An instance of <see cref="T:Microsoft.Azure.Cosmos.SpatialIndex"/> type.</returns>
            <seealso cref="T:Microsoft.Azure.Cosmos.DataType"/>
            <example>
            Here is an example to create SpatialIndex instance passing in the DataType:
            <code language="c#">
            <![CDATA[
            SpatialIndex spatialIndex = Index.Spatial(DataType.Point);
            ]]>
            </code>
            </example>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.IndexingDirective">
            <summary> 
            Specifies whether or not the resource in the Azure Cosmos DB database is to be indexed.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.IndexingDirective.Default">
            <summary>
            Use any pre-defined/pre-configured defaults.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.IndexingDirective.Include">
            <summary>
            Index the resource.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.IndexingDirective.Exclude">
            <summary>
             Do not index the resource.
            </summary>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.IndexingMode">
            <summary> 
            Specifies the supported indexing modes in the Azure Cosmos DB service.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.IndexingMode.Consistent">
            <summary>
            Index is updated synchronously with a create, update or delete operation.
            </summary>
            <remarks>
            With consistent indexing, query consistency is the same as the default consistency level for the database account. 
            The index is always kept up to date with the data.
            
            The default IndexingMode is Consistent.
            </remarks>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.IndexingMode.Lazy">
            <summary>
            Index is updated asynchronously with respect to a create, update or delete operation.
            </summary>
            <remarks>
            With lazy indexing, queries are eventually consistent. 
            The index is updated when the collection is operating below full throughput capacity (Request units per second). 
            
            Write operations will consume fewer request units (RequestCharge) at the time of write.
            </remarks>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.IndexingMode.None">
            <summary>
            No index is provided.
            </summary>
            <remarks>
            Setting IndexingMode to "None" drops the index. Use this if you don't want to maintain the index for a document collection, to save the storage cost or improve the write throughput. Your queries will degenerate to scans of the entire collection.
            </remarks>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.IndexingPolicy">
            <summary>
            Represents the indexing policy configuration for a collection in the Azure Cosmos DB service.
            </summary> 
            <remarks>
            Indexing policies can used to configure which properties (JSON paths) are included/excluded, whether the index is updated consistently
            or offline (lazy), automatic vs. opt-in per-document, as well as the precision and type of index per path.
            <para>
            Refer to <see>http://azure.microsoft.com/documentation/articles/documentdb-indexing-policies/</see> for additional information on how to specify
            indexing policies.
            </para>
            </remarks>
            <seealso cref="T:Microsoft.Azure.Cosmos.ContainerProperties"/>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.IndexingPolicy.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.Cosmos.IndexingPolicy"/> class for the Azure Cosmos DB service.
            </summary>
            <remarks>
            Indexing mode is set to consistent.
            </remarks>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.IndexingPolicy.Automatic">
            <summary>
            Gets or sets a value that indicates whether automatic indexing is enabled for a collection in the Azure Cosmos DB service.
            </summary>
            <remarks>
            In automatic indexing, documents can be explicitly excluded from indexing using <see cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>.  
            In manual indexing, documents can be explicitly included.
            </remarks>
            <value>
            True, if automatic indexing is enabled; otherwise, false.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.IndexingPolicy.IndexingMode">
            <summary>
            Gets or sets the indexing mode (consistent or lazy) in the Azure Cosmos DB service.
            </summary>
            <value>
            One of the values of the <see cref="T:Microsoft.Azure.Documents.IndexingMode"/> enumeration.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.IndexingPolicy.IncludedPaths">
            <summary>
            Gets the collection containing <see cref="T:Microsoft.Azure.Cosmos.IncludedPath"/> objects in the Azure Cosmos DB service.
            </summary>
            <value>
            The collection containing <see cref="T:Microsoft.Azure.Cosmos.IncludedPath"/> objects.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.IndexingPolicy.ExcludedPaths">
            <summary>
            Gets the collection containing <see cref="T:Microsoft.Azure.Cosmos.ExcludedPath"/> objects in the Azure Cosmos DB service.
            </summary>
            <value>
            The collection containing <see cref="T:Microsoft.Azure.Cosmos.ExcludedPath"/> objects.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.IndexingPolicy.CompositeIndexes">
            <summary>
            Gets the composite indexes for additional indexes
            </summary>
            <example>
            <![CDATA[
              "composite": [
                 [
                    {
                       "path": "/joining_year",
                       "order": "ascending"
                    },
                    {
                       "path": "/level",
                       "order": "descending"
                    }
                 ],
                 [
                    {
                       "path": "/country"
                    },
                    {
                       "path": "/city"
                    }
                 ]
              ]
            ]]>
            </example>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.IndexingPolicy.SpatialIndexes">
            <summary>
            Collection of spatial index definitions to be used
            </summary>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.IndexKind">
            <summary>
            These are the indexing types available for indexing a path in the Azure Cosmos DB service.
            </summary> 
            <remarks>
            For additional details, refer to http://azure.microsoft.com/documentation/articles/documentdb-indexing-policies/#ConfigPolicy.
            </remarks>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.IndexKind.Hash">
            <summary>
            The index entries are hashed to serve point look up queries.
            </summary>
            <remarks>
            Can be used to serve queries like: SELECT * FROM docs d WHERE d.prop = 5
            </remarks>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.IndexKind.Range">
            <summary>
            The index entries are ordered. Range indexes are optimized for inequality predicate queries with efficient range scans.
            </summary>
            <remarks>
            Can be used to serve queries like: SELECT * FROM docs d WHERE d.prop > 5
            </remarks>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.IndexKind.Spatial">
            <summary>
            The index entries are indexed to serve spatial queries.
            </summary>
            <remarks>
            Can be used to serve queries like: SELECT * FROM Root r WHERE ST_DISTANCE({"type":"Point","coordinates":[71.0589,42.3601]}, r.location) $LE 10000
            </remarks>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.ItemBatchOperationStatistics">
            <summary>
            A batch operation might extend multiple requests due to retries.
            </summary>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.OperationKind">
            <summary>
            These are the operation types resulted in a version conflict on a resource. 
            </summary>
            <remarks>
            When a version conflict occurs during an async operation, retrieving the <see cref="T:Microsoft.Azure.Cosmos.ConflictProperties"/> instance will allow you 
            to determine which resource and operation cause the conflict.
            </remarks>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.OperationKind.Invalid">
            <summary>
            An invalid operation.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.OperationKind.Create">
            <summary>
            A create operation.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.OperationKind.Replace">
            <summary>
            An replace operation.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.OperationKind.Delete">
            <summary>
            A delete operation.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.OperationKind.Read">
            <summary>
            This operation does not apply to Conflict.
            </summary>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.PartitionKeyDefinitionVersion">
            <summary>
            Partitioning version.
            </summary> 
        </member>
        <member name="F:Microsoft.Azure.Cosmos.PartitionKeyDefinitionVersion.V1">
            <summary>
            Original version of hash partitioning.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.PartitionKeyDefinitionVersion.V2">
            <summary>
            Enhanced version of hash partitioning - offers better distribution of long partition keys and uses less storage.
            </summary>
            <remarks>This version should be used for any practical purpose, but it is available in newer SDKs only.</remarks>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.Internal.PermissionMode">
            <summary> 
            These are the access permissions for creating or replacing a <see cref="T:Microsoft.Azure.Documents.Permission" /> resource in the Azure Cosmos DB service.
            </summary>
            <remarks>
            A Permission resource associates an access permission of a user on a particular resource.
            </remarks>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Internal.PermissionMode.Read">
            <summary>
            Read permission mode will provide the user with Read only access to a resource.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Internal.PermissionMode.All">
            <summary>
            All permission mode will provide the user with full access(read, insert, replace and delete) to a resource.
            </summary>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.PermissionProperties">
            <summary> 
            Represents a permission in the Azure Cosmos DB service.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.PermissionProperties.#ctor(System.String,Microsoft.Azure.Cosmos.PermissionMode,Microsoft.Azure.Cosmos.Container,System.Nullable{Microsoft.Azure.Cosmos.PartitionKey})">
            <summary>
            Initialize a new instance of the <see cref="T:Microsoft.Azure.Cosmos.PermissionProperties"/> with permssion to <see cref="T:Microsoft.Azure.Cosmos.Container"/>.
            </summary>
            <param name="id">The permission id.</param>
            <param name="permissionMode">The <see cref="P:Microsoft.Azure.Cosmos.PermissionProperties.PermissionMode"/>.</param>
            <param name="container">The <see cref="T:Microsoft.Azure.Cosmos.Container"/> object.</param>
            <param name="resourcePartitionKey">(Optional) The partition key value for the permission in the Azure Cosmos DB service. see <see cref="T:Microsoft.Azure.Cosmos.PartitionKey"/></param>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.PermissionProperties.#ctor(System.String,Microsoft.Azure.Cosmos.PermissionMode,Microsoft.Azure.Cosmos.Container,Microsoft.Azure.Cosmos.PartitionKey,System.String)">
            <summary>
            Initialize a new instance of the <see cref="T:Microsoft.Azure.Cosmos.PermissionProperties"/> with permssion to cosnmos item.
            </summary>
            <param name="id">The permission id.</param>
            <param name="permissionMode">The <see cref="P:Microsoft.Azure.Cosmos.PermissionProperties.PermissionMode"/>.</param>
            <param name="container">The <see cref="T:Microsoft.Azure.Cosmos.Container"/> object.</param>
            <param name="resourcePartitionKey">The <see cref="T:Microsoft.Azure.Cosmos.PartitionKey"/> of the resource in the Azure Cosmos service.</param>
            <param name="itemId">The cosmos item id</param>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.PermissionProperties.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.Cosmos.PermissionProperties"/> class for the Azure Cosmos DB service.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.PermissionProperties.Id">
            <summary>
            Gets the Id of the resource in the Azure Cosmos DB service.
            </summary>
            <value>The Id associated with the resource.</value>
            <remarks>
            <para>
            Every resource within an Azure Cosmos DB database account needs to have a unique identifier. 
            </para>
            <para>
            When working with document resources, they too have this settable Id property. 
            If an Id is not supplied by the user the SDK will automatically generate a new GUID and assign its value to this property before
            persisting the document in the database.
            </para>
            <para>
            The following characters are restricted and cannot be used in the Id property:
             '/', '\\', '?', '#'
            </para>
            </remarks>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.PermissionProperties.ResourceUri">
            <summary> 
            Gets the self-uri of resource to which the permission applies in the Azure Cosmos DB service.
            </summary>
            <value>
            The-uri of the resource to which the permission applies.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.PermissionProperties.ResourcePartitionKey">
            <summary>
            Gets optional partition key value for the permission in the Azure Cosmos DB service.
            A permission applies to resources when two conditions are met:
                  1. <see cref="P:Microsoft.Azure.Cosmos.PermissionProperties.ResourceUri"/> is prefix of resource's link.
                        For example "/dbs/mydatabase/colls/mycollection" applies to "/dbs/mydatabase/colls/mycollection" and "/dbs/mydatabase/colls/mycollection/docs/mydocument"
                  2. <see cref="P:Microsoft.Azure.Cosmos.PermissionProperties.ResourcePartitionKey"/> is superset of resource's partition key.
                        For example absent/empty partition key is superset of all partition keys.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.PermissionProperties.PermissionMode">
            <summary>
            Gets the permission mode in the Azure Cosmos DB service.
            </summary>
            <value>
            The <see cref="P:Microsoft.Azure.Cosmos.PermissionProperties.PermissionMode"/> mode: Read or All.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.PermissionProperties.Token">
            <summary>
            Gets the access token granting the defined permission from the Azure Cosmos DB service.
            </summary>
            <value>
            The access token granting the defined permission.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.PermissionProperties.ETag">
            <summary>
            Gets the entity tag associated with the resource from the Azure Cosmos DB service.
            </summary>
            <value>
            The entity tag associated with the resource.
            </value>
            <remarks>
            ETags are used for concurrency checking when updating resources. 
            </remarks>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.PermissionProperties.LastModified">
            <summary>
            Gets the last modified time stamp associated with <see cref="T:Microsoft.Azure.Cosmos.PermissionProperties" /> from the Azure Cosmos DB service.
            </summary>
            <value>The last modified time stamp associated with the resource.</value>
            <remarks>ResourceToken generation and reading does not apply.</remarks>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.PermissionProperties.ResourceId">
            <summary>
            Gets the Resource Id associated with the resource in the Azure Cosmos DB service.
            </summary>
            <value>
            The Resource Id associated with the resource.
            </value>
            <remarks>
            A Resource Id is the unique, immutable, identifier assigned to each Azure Cosmos DB 
            resource whether that is a database, a collection or a document.
            These resource ids are used when building up SelfLinks, a static addressable Uri for each resource within a database account.
            </remarks>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.RangeIndex">
            <summary>
            Specifies an instance of the <see cref="T:Microsoft.Azure.Cosmos.RangeIndex"/> class in the Azure Cosmos DB service.
            </summary>
            <remarks>
            Can be used to serve queries like: SELECT * FROM docs d WHERE d.prop > 5.
            </remarks>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.RangeIndex.#ctor(Microsoft.Azure.Cosmos.DataType)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.Cosmos.RangeIndex"/> class with specified DataType for the Azure Cosmos DB service.
            </summary>
            <param name="dataType">Specifies the target data type for the index path specification.</param>
            <seealso cref="P:Microsoft.Azure.Cosmos.RangeIndex.DataType"/>
            <example>
            Here is an example to instantiate RangeIndex class passing in the DataType:
            <code language="c#">
            <![CDATA[
            RangeIndex rangeIndex = new RangeIndex(DataType.Number);
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.RangeIndex.#ctor(Microsoft.Azure.Cosmos.DataType,System.Int16)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.Cosmos.RangeIndex"/> class with specified DataType and precision for the Azure Cosmos DB service.
            </summary>
            <param name="dataType">Specifies the target data type for the index path specification.</param>
            <param name="precision">Specifies the precision to be used for the data type associated with this index.</param>
            <seealso cref="P:Microsoft.Azure.Cosmos.RangeIndex.DataType"/>
            <example>
            Here is an example to instantiate RangeIndex class passing in the DataType and precision:
            <code language="c#">
            <![CDATA[
            RangeIndex rangeIndex = new RangeIndex(DataType.Number, -1);
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.RangeIndex.DataType">
            <summary>
            Gets or sets the data type for which this index should be applied in the Azure Cosmos DB service.
            </summary>
            <value>
            The data type for which this index should be applied.
            </value>
            <remarks>Refer to http://azure.microsoft.com/documentation/articles/documentdb-indexing-policies/#ConfigPolicy for valid ranges of values.</remarks>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.RangeIndex.Precision">
            <summary>
            Gets or sets the precision for this particular index in the Azure Cosmos DB service.
            </summary>
            <value>
            The precision for this particular index. Returns null, if not set.
            </value>
            <remarks>Refer to http://azure.microsoft.com/documentation/articles/documentdb-indexing-policies/#ConfigPolicy for valid ranges of values.</remarks>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.RangeIndex.Clone">
            <summary>
            Creates a copy of the range index for the Azure Cosmos DB service.
            </summary>
            <returns>A clone of the range index.</returns>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.SpatialIndex">
            <summary>
            Specifies an instance of the <see cref="T:Microsoft.Azure.Cosmos.SpatialIndex"/> class in the Azure Cosmos DB service. 
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.SpatialIndex.#ctor(Microsoft.Azure.Cosmos.DataType)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.Cosmos.SpatialIndex"/> class for the Azure Cosmos DB service.
            </summary>
            <param name="dataType">Specifies the target data type for the index path specification</param>
            <seealso cref="P:Microsoft.Azure.Cosmos.SpatialIndex.DataType"/>
            <example>
            Here is an example to instantiate SpatialIndex class passing in the DataType
            <code language="c#">
            <![CDATA[
            SpatialIndex spatialIndex = new SpatialIndex(DataType.Point);
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.SpatialIndex.DataType">
            <summary>
            Gets or sets the data type for which this index should be applied in the Azure Cosmos DB service.
            </summary>
            <value>
            The data type for which this index should be applied.
            </value>
            <remarks>Refer to http://azure.microsoft.com/documentation/articles/documentdb-indexing-policies/#ConfigPolicy for valid ranges of values.</remarks>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.SpatialPath">
            <summary>
            Spatial index specification
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.SpatialPath.Path">
            <summary>
            Path in JSON document to index
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.SpatialPath.SpatialTypes">
            <summary>
            Path's spatial type
            </summary>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.SpatialType">
            <summary>
            Defines the target data type of an index path specification in the Azure Cosmos DB service.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.SpatialType.Point">
            <summary>
            Represent a point data type.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.SpatialType.LineString">
            <summary>
            Represent a line string data type.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.SpatialType.Polygon">
            <summary>
            Represent a polygon data type.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.SpatialType.MultiPolygon">
            <summary>
            Represent a multi-polygon data type.
            </summary>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.ThroughputProperties">
            <summary>
            Represents a throughput of the resources in the Azure Cosmos DB service.
            It is the standard pricing for the resource in the Azure Cosmos DB service.
            </summary>
            <remarks>
            It contains provisioned container throughput in measurement of request units per second in the Azure Cosmos service.
            Refer to http://azure.microsoft.com/documentation/articles/documentdb-performance-levels/ for details on provision offer throughput.
            </remarks>
            <example>
            The example below fetch the ThroughputProperties on testContainer.
            <code language="c#">
            <![CDATA[ 
            ThroughputProperties throughputProperties = await testContainer.ReadThroughputAsync().Resource;
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.ThroughputProperties.ETag">
            <summary>
            Gets the entity tag associated with the resource from the Azure Cosmos DB service.
            </summary>
            <value>
            The entity tag associated with the resource.
            </value>
            <remarks>
            ETags are used for concurrency checking when updating resources.
            </remarks>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.ThroughputProperties.LastModified">
            <summary>
            Gets the last modified time stamp associated with <see cref="T:Microsoft.Azure.Cosmos.DatabaseProperties" /> from the Azure Cosmos DB service.
            </summary>
            <value>The last modified time stamp associated with the resource.</value>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.ThroughputProperties.Throughput">
            <summary>
            Gets the provisioned throughput for a resource in measurement of request units per second in the Azure Cosmos service.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.ThroughputProperties.OfferRID">
            <summary>
            Gets the offer rid.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.ThroughputProperties.ResourceRID">
            <summary>
            Gets the resource rid.
            </summary>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.UniqueKey">
            <summary>
            Represents a unique key on that enforces uniqueness constraint on documents in the collection in the Azure Cosmos DB service.
            </summary>
            <remarks>
            1) For partitioned collections, the value of partition key is implicitly a part of each unique key.
            2) Uniqueness constraint is also enforced for missing values.
            For instance, if unique key policy defines a unique key with single property path, there could be only one document that has missing value for this property.
            </remarks>
            <seealso cref="T:Microsoft.Azure.Cosmos.UniqueKeyPolicy"/>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.UniqueKey.Paths">
            <summary>
            Gets the paths, a set of which must be unique for each document in the Azure Cosmos DB service.
            </summary>
            <value>
            <![CDATA[The paths to enforce uniqueness on. Each path is a rooted path of the unique property in the document, such as "/name/first".]]>
            </value>
            <example>
            <![CDATA[
            uniqueKey.Paths = new Collection<string> { "/name/first", "/name/last" };
            ]]>
            </example>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.UniqueKeyPolicy">
             <summary>
             Represents the unique key policy configuration for specifying uniqueness constraints on documents in the collection in the Azure Cosmos DB service.
             </summary>
             <example>
             <![CDATA[
             var collectionSpec = new DocumentCollection
             {
                 Id = "Collection with unique keys",
                 UniqueKeyPolicy = new UniqueKeyPolicy
                 {
                     UniqueKeys = new Collection<UniqueKey> {
                         // pair </name/first, name/last> is unique.
                         new UniqueKey { Paths = new Collection<string> { "/name/first", "/name/last" } },
                         // /address is unique.
                         new UniqueKey { Paths = new Collection<string> { "/address" } },
                     }
                 }
             };
             DocumentCollection collection = await client.CreateDocumentCollectionAsync(databaseLink, collectionSpec });
            
             var doc = JObject.Parse("{\"name\": { \"first\": \"John\", \"last\": \"Smith\" }, \"alias\":\"johnsmith\" }");
             await client.CreateDocumentAsync(collection.SelfLink, doc);
            
             doc = JObject.Parse("{\"name\": { \"first\": \"James\", \"last\": \"Smith\" }, \"alias\":\"jamessmith\" }");
             await client.CreateDocumentAsync(collection.SelfLink, doc);
            
             try
             {
                 // Error: first+last name is not unique.
                 doc = JObject.Parse("{\"name\": { \"first\": \"John\", \"last\": \"Smith\" }, \"alias\":\"johnsmith1\" }");
                 await client.CreateDocumentAsync(collection.SelfLink, doc);
                 throw new Exception("CreateDocumentAsync should have thrown exception/conflict");
             }
             catch (DocumentClientException ex)
             {
                 if (ex.StatusCode != System.Net.HttpStatusCode.Conflict) throw;
             }
            
             try
             {
                 // Error: alias is not unique.
                 doc = JObject.Parse("{\"name\": { \"first\": \"James Jr\", \"last\": \"Smith\" }, \"alias\":\"jamessmith\" }");
                 await client.CreateDocumentAsync(collection.SelfLink, doc);
                 throw new Exception("CreateDocumentAsync should have thrown exception/conflict");
             }
             catch (DocumentClientException ex)
             {
                 if (ex.StatusCode != System.Net.HttpStatusCode.Conflict) throw;
             }
             ]]>
             </example>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.UniqueKeyPolicy.UniqueKeys">
            <summary>
            Gets collection of <see cref="T:Microsoft.Azure.Cosmos.UniqueKey"/> that guarantee uniqueness of documents in collection in the Azure Cosmos DB service.
            </summary>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.UserProperties">
            <summary> 
            Represents a user in the Azure Cosmos DB service.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.UserProperties.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.Cosmos.UserProperties"/> class for the Azure Cosmos DB service.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.UserProperties.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.Cosmos.UserProperties"/> class for the Azure Cosmos DB service.
            </summary>
            <param name="id">The Id of the resource in the Azure Cosmos service.</param>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.UserProperties.Id">
            <summary>
            Gets or sets the Id of the resource in the Azure Cosmos DB service.
            </summary>
            <value>The Id associated with the resource.</value>
            <remarks>
            <para>
            Every resource within an Azure Cosmos DB database account needs to have a unique identifier. 
            </para>
            <para>
            When working with document resources, they too have this settable Id property. 
            If an Id is not supplied by the user the SDK will automatically generate a new GUID and assign its value to this property before
            persisting the document in the database. 
            </para>
            <para>
            The following characters are restricted and cannot be used in the Id property:
             '/', '\\', '?', '#'
            </para>
            </remarks>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.UserProperties.ETag">
            <summary>
            Gets the entity tag associated with the resource from the Azure Cosmos DB service.
            </summary>
            <value>
            The entity tag associated with the resource.
            </value>
            <remarks>
            ETags are used for concurrency checking when updating resources. 
            </remarks>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.UserProperties.LastModified">
            <summary>
            Gets the last modified time stamp associated with <see cref="T:Microsoft.Azure.Cosmos.DatabaseProperties" /> from the Azure Cosmos DB service.
            </summary>
            <value>The last modified time stamp associated with the resource.</value>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.UserProperties.ResourceId">
            <summary>
            Gets the Resource Id associated with the resource in the Azure Cosmos DB service.
            </summary>
            <value>
            The Resource Id associated with the resource.
            </value>
            <remarks>
            A Resource Id is the unique, immutable, identifier assigned to each Azure Cosmos DB 
            resource whether that is a database, a collection or a document.
            These resource ids are used when building up SelfLinks, a static addressable Uri for each resource within a database account.
            </remarks>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.UserProperties.SelfLink">
            <summary>
            Gets the self-link associated with the resource from the Azure Cosmos DB service.
            </summary>
            <value>The self-link associated with the resource.</value> 
            <remarks>
            A self-link is a static addressable Uri for each resource within a database account and follows the Azure Cosmos DB resource model.
            E.g. a self-link for a document could be dbs/db_resourceid/colls/coll_resourceid/documents/doc_resourceid
            </remarks>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.UserProperties.Permissions">
            <summary>
            Gets the permissions associated with the user for the Azure Cosmos DB service.
            </summary>
            <value>The permissions associated with the user.</value> 
        </member>
        <member name="P:Microsoft.Azure.Cosmos.UserProperties.PermissionsLink">
            <summary>
            Gets the self-link of the permissions associated with the user for the Azure Cosmos DB service.
            </summary>
            <value>The self-link of the permissions associated with the user.</value>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.ThroughputResponse">
            <summary>
            The cosmos throughput response
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.ThroughputResponse.#ctor">
            <summary>
            Create a <see cref="T:Microsoft.Azure.Cosmos.ThroughputResponse"/> as a no-op for mock testing
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.ThroughputResponse.#ctor(System.Net.HttpStatusCode,Microsoft.Azure.Cosmos.Headers,Microsoft.Azure.Cosmos.ThroughputProperties,Microsoft.Azure.Cosmos.CosmosDiagnostics)">
            <summary>
            A private constructor to ensure the factory is used to create the object.
            This will prevent memory leaks when handling the HttpResponseMessage
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.ThroughputResponse.Headers">
            <inheritdoc/>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.ThroughputResponse.Resource">
            <inheritdoc/>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.ThroughputResponse.StatusCode">
            <inheritdoc/>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.ThroughputResponse.Diagnostics">
            <inheritdoc/>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.ThroughputResponse.RequestCharge">
            <inheritdoc/>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.ThroughputResponse.ActivityId">
            <inheritdoc/>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.ThroughputResponse.ETag">
            <inheritdoc/>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.ThroughputResponse.MaxResourceQuota">
            <inheritdoc/>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.ThroughputResponse.CurrentResourceQuotaUsage">
            <inheritdoc/>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.ThroughputResponse.MinThroughput">
            <summary>
            Gets minimum throughput in measurement of request units per second in the Azure Cosmos service.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.ThroughputResponse.IsReplacePending">
            <summary>
            Gets the status whether offer replace is successful or pending.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.ThroughputResponse.op_Implicit(Microsoft.Azure.Cosmos.ThroughputResponse)~Microsoft.Azure.Cosmos.ThroughputProperties">
            <summary>
            Get <see cref="T:Microsoft.Azure.Cosmos.ThroughputProperties"/> implicitly from <see cref="T:Microsoft.Azure.Cosmos.ThroughputResponse"/>
            </summary>
            <param name="response">Throughput response</param>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.User">
            <summary>
            Operations for reading, replacing, or deleting a specific existing user by id and query a user's permissions.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.User.Id">
            <summary>
            The Id of the Cosmos user
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.User.ReadAsync(Microsoft.Azure.Cosmos.RequestOptions,System.Threading.CancellationToken)">
            <summary>
            Reads a <see cref="T:Microsoft.Azure.Cosmos.UserProperties"/> from the Azure Cosmos service as an asynchronous operation.
            </summary>
            <param name="requestOptions">(Optional) The options for the user request <see cref="T:Microsoft.Azure.Cosmos.RequestOptions"/></param>
            <param name="cancellationToken">(Optional) <see cref="T:System.Threading.CancellationToken"/> representing request cancellation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> containing a <see cref="T:Microsoft.Azure.Cosmos.UserResponse"/> which wraps a <see cref="T:Microsoft.Azure.Cosmos.UserProperties"/> containing the read resource record.
            </returns>
            <exception cref="T:Microsoft.Azure.Cosmos.CosmosException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a user are:
            <list type="table">
                <listheader>
                    <term>StatusCode</term><description>Reason for exception</description>
                </listheader>
                <item>
                    <term>404</term><description>NotFound - This means the resource or parent resource you tried to read did not exist.</description>
                </item>
                <item>
                    <term>429</term><description>TooManyRequests - This means you have exceeded the number of request units per second. Consult the DocumentClientException.RetryAfter value to see how long you should wait before retrying this operation.</description>
                </item>
            </list>
            </exception>
            <example>
            <code language="c#">
            <![CDATA[
            User user = this.database.GetUser("userId");
            UserProperties userProperties = await user.ReadUserAsync();
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.User.ReplaceAsync(Microsoft.Azure.Cosmos.UserProperties,Microsoft.Azure.Cosmos.RequestOptions,System.Threading.CancellationToken)">
            <summary>
            Replace a <see cref="T:Microsoft.Azure.Cosmos.UserProperties"/> from the Azure Cosmos service as an asynchronous operation.
            </summary>
            <param name="userProperties">The <see cref="T:Microsoft.Azure.Cosmos.UserProperties"/> object.</param>
            <param name="requestOptions">(Optional) The options for the user request <see cref="T:Microsoft.Azure.Cosmos.RequestOptions"/></param>
            <param name="cancellationToken">(Optional) <see cref="T:System.Threading.CancellationToken"/> representing request cancellation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> containing a <see cref="T:Microsoft.Azure.Cosmos.UserResponse"/> which wraps a <see cref="T:Microsoft.Azure.Cosmos.UserProperties"/> containing the replace resource record.
            </returns>
            <exception cref="T:Microsoft.Azure.Cosmos.CosmosException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a user are:
            <list type="table">
                <listheader>
                    <term>StatusCode</term><description>Reason for exception</description>
                </listheader>
                <item>
                    <term>404</term><description>NotFound - This means the resource or parent resource you tried to read did not exist.</description>
                </item>
                <item>
                    <term>429</term><description>TooManyRequests - This means you have exceeded the number of request units per second. Consult the DocumentClientException.RetryAfter value to see how long you should wait before retrying this operation.</description>
                </item>
            </list>
            </exception>
            <example>
            <code language="c#">
            <![CDATA[
            UserProperties userProperties = userReadResponse;
            userProperties.Id = "newuser";
            UserResponse response = await user.ReplaceUserAsync(userProperties);
            UserProperties replacedProperties = response;
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.User.DeleteAsync(Microsoft.Azure.Cosmos.RequestOptions,System.Threading.CancellationToken)">
            <summary>
            Delete a <see cref="T:Microsoft.Azure.Cosmos.UserProperties"/> from the Azure Cosmos DB service as an asynchronous operation.
            </summary>
            <param name="requestOptions">(Optional) The options for the user request <see cref="T:Microsoft.Azure.Cosmos.RequestOptions"/></param>
            <param name="cancellationToken">(Optional) <see cref="T:System.Threading.CancellationToken"/> representing request cancellation.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> containing a <see cref="T:Microsoft.Azure.Cosmos.UserResponse"/> which will contain information about the request issued.</returns>
            <exception cref="T:Microsoft.Azure.Cosmos.CosmosException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a user are:
            <list type="table">
                <listheader>
                    <term>StatusCode</term><description>Reason for exception</description>
                </listheader>
                <item>
                    <term>404</term><description>NotFound - This means the resource or parent resource you tried to delete did not exist.</description>
                </item>
            </list>
            </exception>
            <example>
            <code language="c#">
            <![CDATA[
            User user = this.database.GetUser("userId");
            UserResponse response = await user.DeleteUserAsync();
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.User.GetPermission(System.String)">
            <summary>
            Returns a reference to a permission object. 
            </summary>
            <param name="id">The cosmos permission id.</param>
            <returns>Cosmos permission reference</returns>
            <remarks>
            Returns a Permission reference. Reference doesn't guarantees existence.
            Please ensure permssion already exists or is created through a create operation.
            </remarks>
            <example>
            <code language="c#">
            <![CDATA[
            User user = this.cosmosClient.GetDatabase("myDatabaseId").GetUser("userId");
            PermissionResponse response = await user.GetPermssion("permissionId");
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.User.CreatePermissionAsync(Microsoft.Azure.Cosmos.PermissionProperties,System.Nullable{System.Int32},Microsoft.Azure.Cosmos.RequestOptions,System.Threading.CancellationToken)">
             <summary>
             Creates a permission as an asynchronous operation in the Azure Cosmos service.
             </summary>
             <param name="permissionProperties">The <see cref="T:Microsoft.Azure.Cosmos.PermissionProperties"/> object.</param>
             <param name="tokenExpiryInSeconds">(Optional) The expiry time for resource token in seconds. This value can range from 10 seconds, to 24 hours (or 86,400 seconds). The default value for this is 1 hour (or 3,600 seconds). This does not change the default value for future tokens.</param>
             <param name="requestOptions">(Optional) The options for the permission request <see cref="T:Microsoft.Azure.Cosmos.RequestOptions"/></param>
             <param name="cancellationToken">(Optional) <see cref="T:System.Threading.CancellationToken"/> representing request cancellation.</param>
             <returns>A <see cref="T:System.Threading.Tasks.Task"/> containing a <see cref="T:Microsoft.Azure.Cosmos.PermissionResponse"/> which wraps a <see cref="T:Microsoft.Azure.Cosmos.PermissionProperties"/> containing the read resource record.</returns>
             <exception cref="T:Microsoft.Azure.Cosmos.CosmosException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a permission are:
             <list type="table">
                 <listheader>
                     <term>StatusCode</term><description>Reason for exception</description>
                 </listheader>
                 <item>
                     <term>400</term><description>BadRequest - This means something was wrong with the request supplied. It is likely that an id was not supplied for the new permission.</description>
                 </item>
                 <item>
                     <term>409</term><description>Conflict - This means a <see cref="T:Microsoft.Azure.Cosmos.PermissionProperties"/> with an id matching the id you supplied already existed.</description>
                 </item>
             </list>
             </exception>
             <example>
            
             <code language="c#">
             <![CDATA[
             PermissionProperties permissionProperties = new PermissionProperties("permissionId", PermissionMode.All, database.GetContainer("containerId"), new PartitionKey("tenantId"))";
             
             PermissionResponse response = await this.cosmosDatabase.GetUser("userId").CreatePermissionAsync(permissionProperties, tokenExpiryInSeconds: 9000);
             ]]>
             </code>
             </example>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.User.UpsertPermissionAsync(Microsoft.Azure.Cosmos.PermissionProperties,System.Nullable{System.Int32},Microsoft.Azure.Cosmos.RequestOptions,System.Threading.CancellationToken)">
             <summary>
             Upsert a permission as an asynchronous operation in the Azure Cosmos service.
             </summary>
             <param name="permissionProperties">The <see cref="T:Microsoft.Azure.Cosmos.PermissionProperties"/> object.</param>
             <param name="tokenExpiryInSeconds">(Optional) The expiry time for resource token in seconds. This value can range from 10 seconds, to 24 hours (or 86,400 seconds). The default value for this is 1 hour (or 3,600 seconds). This does not change the default value for future tokens.</param>
             <param name="requestOptions">(Optional) The options for the permission request <see cref="T:Microsoft.Azure.Cosmos.RequestOptions"/></param>
             <param name="cancellationToken">(Optional) <see cref="T:System.Threading.CancellationToken"/> representing request cancellation.</param>
             <returns>A <see cref="T:System.Threading.Tasks.Task"/> containing a <see cref="T:Microsoft.Azure.Cosmos.PermissionResponse"/> which wraps a <see cref="T:Microsoft.Azure.Cosmos.PermissionProperties"/> containing the read resource record.</returns>
             <exception cref="T:Microsoft.Azure.Cosmos.CosmosException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a permission are:
             <list type="table">
                 <listheader>
                     <term>StatusCode</term><description>Reason for exception</description>
                 </listheader>
                 <item>
                     <term>400</term><description>BadRequest - This means something was wrong with the request supplied. It is likely that an id was not supplied for the new permission.</description>
                 </item>
             </list>
             </exception>
             <example>
            
             <code language="c#">
             <![CDATA[
             PermissionProperties permissionProperties = new PermissionProperties("permissionId", PermissionMode.All, database.GetContainer("containerId"), new PartitionKey("tenantId"))";
             
             PermissionResponse response = await this.cosmosDatabase.GetUser("userId").UpsertPermissionAsync(permissionProperties, tokenExpiryInSeconds: 9000);
             ]]>
             </code>
             </example>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.User.GetPermissionQueryIterator``1(System.String,System.String,Microsoft.Azure.Cosmos.QueryRequestOptions)">
            <summary>
            This method creates a query for permission under a user using a SQL statement. It returns a FeedIterator.
            For more information on preparing SQL statements with parameterized values, please see <see cref="T:Microsoft.Azure.Cosmos.QueryDefinition"/> overload.
            </summary>
            <param name="queryText">The cosmos SQL query text.</param>
            <param name="continuationToken">(Optional) The continuation token in the Azure Cosmos DB service.</param>
            <param name="requestOptions">(Optional) The options for the user query request <see cref="T:Microsoft.Azure.Cosmos.QueryRequestOptions"/></param>
            <returns>An iterator to go through the permission</returns>
            <example>
            1. This create the type feed iterator for permission with queryText as input,
            <code language="c#">
            <![CDATA[
            string queryText = "SELECT * FROM c where c.id like '%testId%'";
            FeedIterator<PermissionProperties> resultSet = this.users.GetPermissionQueryIterator<PermissionProperties>(queryText);
            while (feedIterator.HasMoreResults)
            {
                FeedResponse<PermissionProperties> iterator =
                await feedIterator.ReadNextAsync(this.cancellationToken);
            }
            ]]>
            </code>
            </example>
            <example>
            2. This create the type feed iterator for permissions without queryText, retrieving all permissions.
            <code language="c#">
            <![CDATA[
            FeedIterator<PermissionProperties> resultSet = this.user.GetPermissionQueryIterator<PermissionProperties>();
            while (feedIterator.HasMoreResults)
            {
                FeedResponse<PermissionProperties> iterator =
                await feedIterator.ReadNextAsync(this.cancellationToken);
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.User.GetPermissionQueryIterator``1(Microsoft.Azure.Cosmos.QueryDefinition,System.String,Microsoft.Azure.Cosmos.QueryRequestOptions)">
            <summary>
            This method creates a query for permissions under a database using a SQL statement. It returns a FeedIterator.
            For more information on preparing SQL statements with parameterized values, please see <see cref="T:Microsoft.Azure.Cosmos.QueryDefinition"/> overload.
            </summary>
            <remarks>
            Reading permissions will generate a new ResourceTokens. Prior ResourceTokens will still be valid.
            </remarks>
            <param name="queryDefinition">The cosmos SQL query definition.</param>
            <param name="continuationToken">(Optional) The continuation token in the Azure Cosmos DB service.</param>
            <param name="requestOptions">(Optional) The options for the user query request <see cref="T:Microsoft.Azure.Cosmos.QueryRequestOptions"/></param>
            <returns>An iterator to go through the permissions</returns>
            <example>
            This create the type feed iterator for permissions with queryDefinition as input.
            <code language="c#">
            <![CDATA[
            string queryText = "SELECT * FROM c where c.id like @testId";
            QueryDefinition queryDefinition = new QueryDefinition(queryText);
            queryDefinition.WithParameter("@testId", "testPermissionId");
            FeedIterator<PermissionProperties> resultSet = this.user.GetPermissionQueryIterator<PermissionProperties>(queryDefinition);
            while (feedIterator.HasMoreResults)
            {
                foreach (PermissionProperties properties in await feedIterator.ReadNextAsync())
                {
                    Console.WriteLine(properties.Id);
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.UserCore">
            <summary>
            Operations for reading, replacing, or deleting a specific, existing user by id.
            
            <see cref="T:Microsoft.Azure.Cosmos.User"/> for creating new users, and reading/querying all user;
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.UserCore.#ctor">
            <summary>
            Only used for unit testing
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.UserCore.Id">
            <inheritdoc/>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.UserCore.Database">
            <summary>
            Returns a reference to a database object. 
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.UserCore.ReadAsync(Microsoft.Azure.Cosmos.RequestOptions,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.UserCore.ReplaceAsync(Microsoft.Azure.Cosmos.UserProperties,Microsoft.Azure.Cosmos.RequestOptions,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.UserCore.DeleteAsync(Microsoft.Azure.Cosmos.RequestOptions,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.UserCore.GetPermission(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.UserCore.CreatePermissionAsync(Microsoft.Azure.Cosmos.PermissionProperties,System.Nullable{System.Int32},Microsoft.Azure.Cosmos.RequestOptions,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.UserCore.GetPermissionQueryIterator``1(Microsoft.Azure.Cosmos.QueryDefinition,System.String,Microsoft.Azure.Cosmos.QueryRequestOptions)">
            <inheritdoc/>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.UserResponse">
            <summary>
            The cosmos user response
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.UserResponse.#ctor">
            <summary>
            Create a <see cref="T:Microsoft.Azure.Cosmos.UserResponse"/> as a no-op for mock testing
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.UserResponse.#ctor(System.Net.HttpStatusCode,Microsoft.Azure.Cosmos.Headers,Microsoft.Azure.Cosmos.UserProperties,Microsoft.Azure.Cosmos.User,Microsoft.Azure.Cosmos.CosmosDiagnostics)">
            <summary>
            A private constructor to ensure the factory is used to create the object.
            This will prevent memory leaks when handling the HttpResponseMessage
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.UserResponse.User">
            <summary>
            The reference to the cosmos user. This allows additional operations on the user
            or for easy access permissions
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.UserResponse.Headers">
            <inheritdoc/>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.UserResponse.Resource">
            <inheritdoc/>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.UserResponse.StatusCode">
            <inheritdoc/>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.UserResponse.Diagnostics">
            <inheritdoc/>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.UserResponse.RequestCharge">
            <inheritdoc/>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.UserResponse.ActivityId">
            <inheritdoc/>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.UserResponse.ETag">
            <inheritdoc/>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.UserResponse.MaxResourceQuota">
            <inheritdoc/>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.UserResponse.CurrentResourceQuotaUsage">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.UserResponse.op_Implicit(Microsoft.Azure.Cosmos.UserResponse)~Microsoft.Azure.Cosmos.User">
            <summary>
            Get <see cref="T:Microsoft.Azure.Cosmos.User"/> implicitly from <see cref="T:Microsoft.Azure.Cosmos.UserResponse"/>
            </summary>
            <param name="response">UserResponse</param>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.RestoreState">
            <summary> 
            Specifies the different states of restore,
            should match RestoreConstants.h
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.RestoreState.Invalid">
            <summary>
             Not Specified.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.RestoreState.RestorePending">
            <summary>
             Collection Restore is currently ongoing.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.RestoreState.RestoreCompleted">
            <summary>
             Collection Restore completed with success.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.RestoreState.RestoreFailed">
            <summary>
            Collection Restore completed with failure.
            </summary>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.RetryOptions">
            <summary>
            RetryOptions class defines the parameters an application can set to customize the
            built-in retry policies in the Azure Cosmos DB service.
            </summary>
            <remarks>
            The <see cref="T:Microsoft.Azure.Cosmos.DocumentClient"/> class supports retry
            on certain types of exceptions. This class provides options for applications to control the
            retry behavior.
            </remarks>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.RetryOptions.#ctor">
            <summary>
            Creates a new instance of the RetryOptions class and intialize all properties
            to default values for the Azure Cosmos DB service.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.RetryOptions.MaxRetryAttemptsOnThrottledRequests">
            <summary>
            Gets or sets the maximum number of retries in the case where the request fails
            because the Azure Cosmos DB service has applied rate limiting on the client.
            </summary>
            <value>
            The default value is 9. This means in the case where the request is rate limited,
            the same request will be issued for a maximum of 10 times to the server before
            an error is returned to the application. If the value of this property is set to 0,
            there will be no automatic retry on rate limiting requests from the client and the exception
            needs to handled at the application level.
            For an example on how to set this value, please refer to <see cref="P:Microsoft.Azure.Cosmos.ConnectionPolicy.RetryOptions"/>.
            </value>
            <remarks>
            <para>
            When a client is sending requests faster than the allowed rate,
            the service will return HttpStatusCode 429 (Too Many Request) to rate limit the client. The current
            implementation in the SDK will then wait for the amount of time the service tells it to wait and
            retry after the time has elapsed.
            </para>
            <para>
            For more information, see <see href="https://docs.microsoft.com/en-us/azure/documentdb/documentdb-performance-tips#429">Handle rate limiting/request rate too large</see>.
            </para>
            </remarks>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.RetryOptions.MaxRetryWaitTimeInSeconds">
            <summary>
            Gets or sets the maximum retry time in seconds for the Azure Cosmos DB service.
            </summary>
            <value>
            The default value is 30 seconds. For an example on how to set this value, please refer to <see cref="P:Microsoft.Azure.Cosmos.ConnectionPolicy.RetryOptions"/>.
            </value>
            <remarks>
            <para>
            When a request fails due to a rate limiting error, the service sends back a response that
            contains a value indicating the client should not retry before the <see cref="P:Microsoft.Azure.Documents.DocumentClientException.RetryAfter"/> time period has
            elapsed. This property allows the application to set a maximum wait time for all retry attempts.
            If the cumulative wait time exceeds the this value, the client will stop retrying and return the error to the application.
            </para>
            <para>
            For more information, see <see href="https://docs.microsoft.com/en-us/azure/documentdb/documentdb-performance-tips#429">Handle rate limiting/request rate too large</see>.
            </para>
            </remarks>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.RetryOptions.InitialRetryForRetryWithMilliseconds">
            <summary>
            Gets or sets the initial delay retry time in milliseconds for the Azure Cosmos DB service
            for requests that hit RetryWithExceptions. This covers errors that occur due to concurrency errors in the store.
            </summary>
            <value>
            The default value is 1 second. For an example on how to set this value, please refer to <see cref="P:Microsoft.Azure.Cosmos.ConnectionPolicy.RetryOptions"/>.
            </value>
            <remarks>
            <para>
            When a request fails due to a RetryWith error, the client delays and retries the request. This configures the client
            to delay the time specified before retrying the request.
            </para>
            </remarks>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.RetryOptions.MaximumRetryForRetryWithMilliseconds">
            <summary>
            Gets or sets the maximum delay retry time in milliseconds for the Azure Cosmos DB service
            for requests that hit RetryWithExceptions. This covers errors that occur due to concurrency errors in the store.
            </summary>
            <value>
            The default value is 30 seconds. For an example on how to set this value, please refer to <see cref="P:Microsoft.Azure.Cosmos.ConnectionPolicy.RetryOptions"/>.
            </value>
            <remarks>
            <para>
            When a request fails due to a RetryWith error, the client delays and retries the request. This configures the maximum time
            the client should delay before failing the request.
            </para>
            </remarks>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.RetryOptions.RandomSaltForRetryWithMilliseconds">
            <summary>
            Gets or sets the interval to salt retrywith retries with. This will spread the retry values from 1..n from the exponential backoff
            subscribed.
            </summary>
            <value>
            The default value is to not salt.
            </value>
            <remarks>
            <para>
            When a request fails due to a RetryWith error, the client delays and retries the request. This configures the jitter on the retry attempted.
            </para>
            </remarks>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.RetryOptions.TotalWaitTimeForRetryWithMilliseconds">
            <summary>
            Gets or sets the total time to wait before failing the request for retrywith failures.
            subscribed.
            </summary>
            <value>
            The default value 30 seconds.
            </value>
            <remarks>
            <para>
            When a request fails due to a RetryWith error, the client delays and retries the request. This configures total time spent waiting on the request.
            </para>
            </remarks>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.RetryPolicy">
            <summary>
            Represents the retry policy configuration assocated with a DocumentClient instance.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.RetryPolicy.#ctor(Microsoft.Azure.Cosmos.Routing.GlobalEndpointManager,Microsoft.Azure.Cosmos.ConnectionPolicy)">
            <summary>
            Initialize the instance of the RetryPolicy class
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.RetryPolicy.GetRequestPolicy">
            <summary>
            Creates a new instance of the ClientRetryPolicy class retrying request failures.
            </summary>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.AddressResolver">
            <summary>
            Abstracts out the logic to resolve physical replica addresses for the given <see cref="T:Microsoft.Azure.Documents.DocumentServiceRequest"/>.
            
            AddressCache internally maintains CollectionCache, CollectionRoutingMapCache and BackendAddressCache.
            Logic in this class mainly joins these 3 caches and deals with potential staleness of the caches.
            
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.AddressResolver.ThrowIfTargetChanged(Microsoft.Azure.Documents.DocumentServiceRequest,Microsoft.Azure.Documents.PartitionKeyRange)">
            <summary>
            Validates if the target partition to which the request is being sent has changed during retry.
            If that happens, the request is no more valid and need to be retried.
            Also has the side-effect that if the target identity is not set, we set it on the request
            </summary>
            <param name="request">Request in progress</param>
            <param name="targetRange">Target partition key range determined by address resolver</param>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.AddressResolver.ResolveAddressesAndIdentityAsync(Microsoft.Azure.Documents.DocumentServiceRequest,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Resolves the endpoint of the partition for the given request
            </summary>
            <param name="request">Request for which the partition endpoint resolution is to be performed</param>
            <param name="forceRefreshPartitionAddresses">Force refresh the partition's endpoint</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>An instance of <see cref="T:Microsoft.Azure.Cosmos.AddressResolver.ResolutionResult"/>.</returns>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.Routing.ClientCollectionCache">
            <summary>
            Caches collection information.
            </summary>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.Routing.CollectionRoutingMap">
            <summary>
            Stored partition key ranges in an efficient way with some additional information and provides
            convenience methods for working with set of ranges.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Routing.CollectionRoutingMap.rangeById">
            <summary>
            Partition key range id to partition address and range.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.Routing.CollectionRoutingMap.OrderedPartitionKeyRanges">
            <summary>
            Partition key ranges in increasing order.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Routing.DocumentAnalyzer.ExtractPartitionKeyValue(Microsoft.Azure.Documents.Document,Microsoft.Azure.Documents.PartitionKeyDefinition)">
            <summary>
            Extracts effective <see cref="T:Microsoft.Azure.Documents.Routing.PartitionKeyInternal"/> from deserialized document.
            </summary>
            <remarks>
            This code doesn't do any validation, as it assumes that IndexingPolicy is valid, as it is coming from the backend.
            Expected format is "/prop1/prop2/?". No array expressions are expected.
            </remarks>
            <param name="document">Deserialized document to extract partition key value from.</param>
            <param name="partitionKeyDefinition">Information about partition key.</param>
            <returns>Instance of <see cref="T:Microsoft.Azure.Documents.Routing.PartitionKeyInternal"/>.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Routing.DocumentAnalyzer.ExtractPartitionKeyValue(System.String,Microsoft.Azure.Documents.PartitionKeyDefinition)">
            <summary>
            Extracts effective <see cref="T:Microsoft.Azure.Documents.Routing.PartitionKeyInternal"/> from serialized document.
            </summary>
            <remarks>
            This code doesn't do any validation, as it assumes that IndexingPolicy is valid, as it is coming from the backend.
            Expected format is "/prop1/prop2/?". No array expressions are expected.
            </remarks>
            <param name="documentString">Serialized document to extract partition key value from.</param>
            <param name="partitionKeyDefinition">Information about partition key.</param>
            <returns>Instance of <see cref="T:Microsoft.Azure.Documents.Routing.PartitionKeyInternal"/>.</returns>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.Routing.GlobalAddressResolver">
            <summary>
            AddressCache implementation for client SDK. Supports cross region address routing based on
            avaialbility and preference list.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Routing.GlobalAddressResolver.GetAddressResolver(Microsoft.Azure.Documents.DocumentServiceRequest)">
            <summary>
            ReplicatedResourceClient will use this API to get the direct connectivity AddressCache for given request.
            </summary>
            <param name="request"></param>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.Routing.GlobalEndpointManager">
            <summary>
            AddressCache implementation for client SDK. Supports cross region address routing based on 
            availability and preference list.
            </summary>
            Marking it as non-sealed in order to unit test it using Moq framework
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Routing.GlobalEndpointManager.GetLocation(System.Uri)">
            <summary>
            Returns location corresponding to the endpoint
            </summary>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.Routing.IRoutingMapProvider">
            <summary>
            Routing map provider provides list of effective partition key ranges for a collection.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Routing.IRoutingMapProvider.TryGetOverlappingRangesAsync(System.String,Microsoft.Azure.Documents.Routing.Range{System.String},System.Boolean)">
            <summary>
            Returns list of effective partition key ranges for a collection.
            </summary>
            <param name="collectionResourceId">Collection for which to retrieve routing map.</param>
            <param name="range">This method will return all ranges which overlap this range.</param>
            <param name="forceRefresh">Whether forcefully refreshing the routing map is necessary</param>
            <returns>List of effective partition key ranges for a collection or null if collection doesn't exist.</returns>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.Routing.LocationCache">
            <summary>
            Implements the abstraction to resolve target location for geo-replicated DatabaseAccount
            with multiple writable and readable locations.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.Routing.LocationCache.ReadEndpoints">
            <summary>
            Gets list of read endpoints ordered by
            1. Preferred location
            2. Endpoint availablity
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.Routing.LocationCache.WriteEndpoints">
            <summary>
            Gets list of write endpoints ordered by
            1. Preferred location
            2. Endpoint availablity
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Routing.LocationCache.GetLocation(System.Uri)">
            <summary>
            Returns the location corresponding to the endpoint if location specific endpoint is provided.
            For the defaultEndPoint, we will return the first available write location.
            Returns null, in other cases.
            </summary>
            <remarks>
            Today we return null for defaultEndPoint if multiple write locations can be used.
            This needs to be modifed to figure out proper location in such case.
            </remarks>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Routing.LocationCache.MarkEndpointUnavailableForRead(System.Uri)">
            <summary>
            Marks the current location unavailable for read
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Routing.LocationCache.MarkEndpointUnavailableForWrite(System.Uri)">
            <summary>
            Marks the current location unavailable for write
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Routing.LocationCache.OnDatabaseAccountRead(Microsoft.Azure.Cosmos.AccountProperties)">
            <summary>
            Invoked when <see cref="T:Microsoft.Azure.Cosmos.AccountProperties"/> is read
            </summary>
            <param name="databaseAccount">Read DatabaseAccoaunt </param>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Routing.LocationCache.OnLocationPreferenceChanged(System.Collections.ObjectModel.ReadOnlyCollection{System.String})">
            <summary>
            Invoked when <see cref="P:Microsoft.Azure.Cosmos.ConnectionPolicy.PreferredLocations"/> changes
            </summary>
            <param name="preferredLocations"></param>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Routing.LocationCache.ResolveServiceEndpoint(Microsoft.Azure.Documents.DocumentServiceRequest)">
            <summary>
            Resolves request to service endpoint. 
            1. If this is a write request
               (a) If UseMultipleWriteLocations = true
                   (i) For document writes, resolve to most preferred and available write endpoint.
                       Once the endpoint is marked unavailable, it is moved to the end of available write endpoint. Current request will
                       be retried on next preferred available write endpoint.
                   (ii) For all other resources, always resolve to first/second (regardless of preferred locations)
                        write endpoint in <see cref="P:Microsoft.Azure.Cosmos.AccountProperties.WritableRegions"/>.
                        Endpoint of first write location in <see cref="P:Microsoft.Azure.Cosmos.AccountProperties.WritableRegions"/> is the only endpoint that supports
                        write operation on all resource types (except during that region's failover). 
                        Only during manual failover, client would retry write on second write location in <see cref="P:Microsoft.Azure.Cosmos.AccountProperties.WritableRegions"/>.
               (b) Else resolve the request to first write endpoint in <see cref="F:Microsoft.Azure.Cosmos.AccountProperties.writeRegions"/> OR 
                   second write endpoint in <see cref="P:Microsoft.Azure.Cosmos.AccountProperties.WritableRegions"/> in case of manual failover of that location.
            2. Else resolve the request to most preferred available read endpoint (automatic failover for read requests)
            </summary>
            <param name="request">Request for which endpoint is to be resolved</param>
            <returns>Resolved endpoint</returns>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.Routing.LocationHelper">
            <summary>
            https://azure.microsoft.com/en-us/regions/
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Routing.LocationHelper.GetLocationEndpoint(System.Uri,System.String)">
            <summary>
            For example, for https://contoso.documents.azure.com:443/ and "West US", this will return https://contoso-westus.documents.azure.com:443/
            NOTE: This ONLY called by client first boot when the input endpoint is not available.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Routing.PartitionRoutingHelper.TryGetTargetRangeFromContinuationTokenRangeAsync(System.Collections.Generic.IReadOnlyList{Microsoft.Azure.Documents.Routing.Range{System.String}},Microsoft.Azure.Cosmos.Routing.IRoutingMapProvider,System.String,Microsoft.Azure.Documents.Routing.Range{System.String},System.Collections.Generic.List{Microsoft.Azure.Cosmos.Query.CompositeContinuationToken},Microsoft.Azure.Documents.RntbdConstants.RntdbEnumerationDirection)">
            <summary>
            Gets <see cref="T:Microsoft.Azure.Documents.PartitionKeyRange"/> instance which corresponds to <paramref name="rangeFromContinuationToken"/>
            </summary>
            <param name="providedPartitionKeyRanges"></param>
            <param name="routingMapProvider"></param>
            <param name="collectionRid"></param>
            <param name="rangeFromContinuationToken"></param>
            <param name="suppliedTokens"></param>
            <param name="direction"></param>
            <returns>null if collection with specified <paramref name="collectionRid"/> doesn't exist, which potentially means
            that collection was resolved to outdated Rid by name. Also null can be returned if <paramref name="rangeFromContinuationToken"/>
            is not found - this means it was split.
            </returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Routing.PathParser.GetPathParts(System.String)">
            <summary>
            Extract parts from path
            </summary>
            <remarks>
            This code doesn't do as much validation as the backend, as it assumes that IndexingPolicy path coming from the backend is valid.
            </remarks>
            <param name="path">A path string</param>
            <returns>An array of parts of path</returns>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.SecureStringHMACSHA256Helper">
            <summary>
            Manufactures SHA256 HMACs of byte payloads using a key. The key is a Base64-encoded SecureString.
            In keeping with the goals of SecureString, neither the original Base64 characters nor the decoded 
            bytes ever enters the managed heap, and they are kept decrypted in native memory for as short a 
            time as possible: just the duration of a single ComputeHash call.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.SecureStringHMACSHA256Helper.ComputeHash(System.Byte[])">
            <summary>
            Decode the SecureString containing the Base64-encoded key into native memory, compute the
            SHA256 HMAC of the payload, and destroy the native memory containing the decoded key.
            </summary>
            <param name="bytesToHash">payload that is hashed</param>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.SecureStringUtility">
            <summary>
            Utility for converting string to SecureString.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.SecureStringUtility.ConvertToSecureString(System.String)">
            <summary>
            Converts a unsecure string into a SecureString.
            </summary>
            <param name="unsecureStr">the string to convert.</param>
            <returns>the resulting SecureString</returns>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.CosmosJsonDotNetSerializer">
            <summary>
            The default Cosmos JSON.NET serializer.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.CosmosJsonDotNetSerializer.#ctor">
            <summary>
            Create a serializer that uses the JSON.net serializer
            </summary>
            <remarks>
            This is internal to reduce exposure of JSON.net types so
            it is easier to convert to System.Text.Json
            </remarks>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.CosmosJsonDotNetSerializer.#ctor(Microsoft.Azure.Cosmos.CosmosSerializationOptions)">
            <summary>
            Create a serializer that uses the JSON.net serializer
            </summary>
            <remarks>
            This is internal to reduce exposure of JSON.net types so
            it is easier to convert to System.Text.Json
            </remarks>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.CosmosJsonDotNetSerializer.#ctor(Newtonsoft.Json.JsonSerializerSettings)">
            <summary>
            Create a serializer that uses the JSON.net serializer
            </summary>
            <remarks>
            This is internal to reduce exposure of JSON.net types so
            it is easier to convert to System.Text.Json
            </remarks>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.CosmosJsonDotNetSerializer.FromStream``1(System.IO.Stream)">
            <summary>
            Convert a Stream to the passed in type.
            </summary>
            <typeparam name="T">The type of object that should be deserialized</typeparam>
            <param name="stream">An open stream that is readable that contains JSON</param>
            <returns>The object representing the deserialized stream</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.CosmosJsonDotNetSerializer.ToStream``1(``0)">
            <summary>
            Converts an object to a open readable stream
            </summary>
            <typeparam name="T">The type of object being serialized</typeparam>
            <param name="input">The object to be serialized</param>
            <returns>An open readable stream containing the JSON of the serialized object</returns>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.CosmosPropertyNamingPolicy">
            <summary>
            Determines the naming policy used to convert a string-based name to another format, such as a camel-casing where the first letter is lower case.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.CosmosPropertyNamingPolicy.Default">
            <summary>
            No custom naming policy.
            The property name will be the same as the source.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.CosmosPropertyNamingPolicy.CamelCase">
            <summary>
            First letter in the property name is lower case. 
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.CosmosSerializationFormatOptions.ContentSerializationFormat">
            <summary>
            What serialization format to request the response in from the backend
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.CosmosSerializationFormatOptions.CreateCustomNavigatorCallback">
            <summary>
            Creates a navigator that can navigate a JSON in the specified ContentSerializationFormat
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.CosmosSerializationFormatOptions.CreateCustomWriterCallback">
            <summary>
            Creates a writer to use to write out the stream.
            </summary>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.CosmosSerializationOptions">
            <summary>
            This class provides a way to configure basic
            serializer settings.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.CosmosSerializationOptions.#ctor">
            <summary>
            Create an instance of CosmosSerializationOptions
            with the default values for the Cosmos SDK
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.CosmosSerializationOptions.IgnoreNullValues">
            <summary>
            Gets or sets if the serializer should ignore null properties
            </summary>
            <remarks>
            The default value is false
            </remarks>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.CosmosSerializationOptions.Indented">
            <summary>
            Gets or sets if the serializer should use indentation
            </summary>
            <remarks>
            The default value is false
            </remarks>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.CosmosSerializationOptions.PropertyNamingPolicy">
            <summary>
            Gets or sets whether the naming policy used to convert a string-based name to another format,
            such as a camel-casing format.
            </summary>
            <remarks>
            The default value is CosmosPropertyNamingPolicy.Default
            </remarks>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.CosmosSerializer">
            <summary>
            This is an interface to allow a custom serializer to be used by the CosmosClient
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.CosmosSerializer.FromStream``1(System.IO.Stream)">
            <summary>
            Convert a Stream of JSON to an object. 
            The implementation is responsible for Disposing of the stream,
            including when an exception is thrown, to avoid memory leaks.
            </summary>
            <typeparam name="T">Any typed passed to <see cref="T:Microsoft.Azure.Cosmos.Container"/></typeparam>
            <param name="stream">The Stream response containing JSON from Cosmos</param>
            <returns>The object deserialized from the stream.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.CosmosSerializer.ToStream``1(``0)">
            <summary>
            Convert the object to a Stream. 
            The caller will take ownership of the stream and ensure it is correctly disposed of.
            Stream.CanRead must be true https://docs.microsoft.com/dotnet/api/system.io.stream.canread?view=netcore-2.0
            </summary>
            <param name="input">Any typed passed to <see cref="T:Microsoft.Azure.Cosmos.Container"/></param>
            <returns>A readable Stream containing JSON of the serialized object</returns>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.Spatial.BoundingBox">
            <summary>
            Represents a coordinate range for geometries in the Azure Cosmos DB service.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Spatial.BoundingBox.#ctor(Microsoft.Azure.Cosmos.Spatial.Position,Microsoft.Azure.Cosmos.Spatial.Position)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.Cosmos.Spatial.BoundingBox" /> class in the Azure Cosmos DB service.
            </summary>
            <param name="min">
            Lowest values for all axes of the bounding box.
            </param>
            <param name="max">
            Highest values for all axes of the bounding box.
            </param>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.Spatial.BoundingBox.Min">
            <summary>
            Gets lowest values for all axes of the bounding box in the Azure Cosmos DB service.
            </summary>
            <value>
            Lowest values for all axes of the bounding box.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.Spatial.BoundingBox.Max">
            <summary>
            Gets highest values for all axes of the bounding box in the Azure Cosmos DB service.
            </summary>
            <value>
            Highest values for all axes of the bounding box.
            </value>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Spatial.BoundingBox.Equals(Microsoft.Azure.Cosmos.Spatial.BoundingBox)">
            <summary>
            Determines if this <see cref="T:Microsoft.Azure.Cosmos.Spatial.BoundingBox"/> is equal to the <paramref name="other" /> in the Azure Cosmos DB service.
            </summary>
            <param name="other"><see cref="T:Microsoft.Azure.Cosmos.Spatial.BoundingBox"/> to compare to this bounding box.</param>
            <returns><c>true</c> if bounding boxes are equal. <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Spatial.BoundingBox.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:Microsoft.Azure.Cosmos.Spatial.BoundingBox"/> is equal to the current <see cref="T:Microsoft.Azure.Cosmos.Spatial.BoundingBox"/> in the Azure Cosmos DB service.
            </summary>
            <returns>
            true if the specified object  is equal to the current object; otherwise, false.
            </returns>
            <param name="obj">The object to compare with the current object. </param>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Spatial.BoundingBox.GetHashCode">
            <summary>
            Serves as a hash function for <see cref="T:Microsoft.Azure.Cosmos.Spatial.BoundingBox"/> type in the Azure Cosmos DB service.
            </summary>
            <returns>
            A hash code for the current <see cref="T:Microsoft.Azure.Cosmos.Spatial.BoundingBox"/>.
            </returns>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.Spatial.Converters.BoundingBoxJsonConverter">
            <summary>
            <see cref="T:Newtonsoft.Json.JsonConverter" /> for <see cref="T:Microsoft.Azure.Cosmos.Spatial.BoundingBox" /> class.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Spatial.Converters.BoundingBoxJsonConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter" /> to write to.</param>
            <param name="value">The existingValue.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Spatial.Converters.BoundingBoxJsonConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing existingValue of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>
            Deserialized object.
            </returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Spatial.Converters.BoundingBoxJsonConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>
            <c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.Spatial.Converters.CrsJsonConverter">
            <summary>
            <see cref="T:Newtonsoft.Json.JsonConverter"/> for <see cref="T:Microsoft.Azure.Cosmos.Spatial.Crs" /> class and all its implementations.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Spatial.Converters.CrsJsonConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter" /> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Spatial.Converters.CrsJsonConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>
            The object value.
            </returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Spatial.Converters.CrsJsonConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>
            <c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.Spatial.Converters.GeometryJsonConverter">
            <summary>
            Converter for <see cref="T:Microsoft.Azure.Cosmos.Spatial.Geometry" /> class.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.Spatial.Converters.GeometryJsonConverter.CanWrite">
            <summary>
            Gets a value indicating whether this <see cref="T:Newtonsoft.Json.JsonConverter"/> can write JSON.
            </summary>
            <value><c>true</c> if this <see cref="T:Newtonsoft.Json.JsonConverter"/> can write JSON; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Spatial.Converters.GeometryJsonConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">
            The <see cref="T:Newtonsoft.Json.JsonWriter" /> to write to.
            </param>
            <param name="value">The existingValue.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Spatial.Converters.GeometryJsonConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing existingValue of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>
            Deserialized object.
            </returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Spatial.Converters.GeometryJsonConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>
            <c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.Spatial.Converters.LinearRingJsonConverter">
            <summary>
            <see cref="T:Newtonsoft.Json.JsonConverter"/> for <see cref="T:Microsoft.Azure.Cosmos.Spatial.LinearRing" />.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Spatial.Converters.LinearRingJsonConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter" /> to write to.</param>
            <param name="value">The existingValue.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Spatial.Converters.LinearRingJsonConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing existingValue of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>
            Deserialized object.
            </returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Spatial.Converters.LinearRingJsonConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>
            <c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.Spatial.Converters.LineStringCoordinatesJsonConverter">
            <summary>
            <see cref="T:Newtonsoft.Json.JsonConverter"/> for <see cref="T:Microsoft.Azure.Cosmos.Spatial.LineStringCoordinates" />.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Spatial.Converters.LineStringCoordinatesJsonConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter" /> to write to.</param>
            <param name="value">The existingValue.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Spatial.Converters.LineStringCoordinatesJsonConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing existingValue of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>
            Deserialized object.
            </returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Spatial.Converters.LineStringCoordinatesJsonConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>
            <c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.Spatial.Converters.PolygonCoordinatesJsonConverter">
            <summary>
            <see cref="T:Newtonsoft.Json.JsonConverter"/> for <see cref="T:Microsoft.Azure.Cosmos.Spatial.PolygonCoordinates" />.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Spatial.Converters.PolygonCoordinatesJsonConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter" /> to write to.</param>
            <param name="value">The existingValue.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Spatial.Converters.PolygonCoordinatesJsonConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing existingValue of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>
            Deserialized object.
            </returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Spatial.Converters.PolygonCoordinatesJsonConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>
            <c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.Spatial.Converters.PositionJsonConverter">
            <summary>
            Converter for <see cref="T:Microsoft.Azure.Cosmos.Spatial.Position" /> class.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Spatial.Converters.PositionJsonConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">
            The <see cref="T:Newtonsoft.Json.JsonWriter" /> to write to.
            </param>
            <param name="value">The existingValue.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Spatial.Converters.PositionJsonConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing existingValue of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>
            Deserialized object.
            </returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Spatial.Converters.PositionJsonConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>
            <c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.Spatial.Crs">
            <summary>
            Represents Coordinate Reference System in the Azure Cosmos DB service.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Spatial.Crs.#ctor(Microsoft.Azure.Cosmos.Spatial.CrsType)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.Cosmos.Spatial.Crs" /> class in the Azure Cosmos DB service.
            </summary>
            <param name="type">
            CRS type.
            </param>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.Spatial.Crs.Default">
            <summary>
            Gets default CRS in the Azure Cosmos DB service. Default CRS is named CRS with the name "urn:ogc:def:crs:OGC:1.3:CRS84".
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.Spatial.Crs.Unspecified">
            <summary>
            Gets "Unspecified" CRS in the Azure Cosmos DB service. No CRS can be assumed for Geometries having "Unspecified" CRS.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.Spatial.Crs.Type">
            <summary>
            Gets CRS type in the Azure Cosmos DB service.
            </summary>
            <value>
            Type of CRS.
            </value>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Spatial.Crs.Named(System.String)">
            <summary>
            Creates named CRS with the name specified in the Azure Cosmos DB service.
            </summary>
            <param name="name">CRS name.</param>
            <returns>Instance of <see cref="T:Microsoft.Azure.Cosmos.Spatial.Crs" /> class.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Spatial.Crs.Linked(System.String)">
            <summary>
            Creates linked CRS in the Azure Cosmos DB service.
            </summary>
            <param name="href">
            CRS link.
            </param>
            <returns>
            Instance of <see cref="T:Microsoft.Azure.Cosmos.Spatial.Crs" /> class.
            </returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Spatial.Crs.Linked(System.String,System.String)">
            <summary>
            Creates linked CRS with the optional type specified in the Azure Cosmos DB service.
            </summary>
            <param name="href">
            CRS link.
            </param>
            <param name="type">
            CRS link type.
            </param>
            <returns>
            Instance of <see cref="T:Microsoft.Azure.Cosmos.Spatial.Crs" /> class.
            </returns>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.Spatial.CrsType">
            <summary>
            Type of Coordinate Reference System in the Azure Cosmos DB service.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Spatial.CrsType.Named">
            <summary>
            Coordinate Reference System is specified by name.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Spatial.CrsType.Linked">
            <summary>
            Coordinate Reference System is specified by link.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Spatial.CrsType.Unspecified">
            <summary>
            No Coordinate Reference System can be assumed for a geometry.
            </summary>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.Spatial.Geometry">
            <summary>
            Base class for spatial geometry objects in the Azure Cosmos DB service.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Spatial.Geometry.#ctor(Microsoft.Azure.Cosmos.Spatial.GeometryType,Microsoft.Azure.Cosmos.Spatial.GeometryParams)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.Cosmos.Spatial.Geometry" /> class in the Azure Cosmos DB service.
            </summary>
            <param name="type">
            Geometry type.
            </param>
            <param name="geometryParams">
            Coordinate reference system, additional properties etc.
            </param>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.Spatial.Geometry.Crs">
            <summary>
            Gets the Coordinate Reference System for this geometry in the Azure Cosmos DB service.
            </summary>
            <value>
            The Coordinate Reference System for this geometry.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.Spatial.Geometry.Type">
            <summary>
            Gets geometry type in the Azure Cosmos DB service.
            </summary>
            <value>
            Type of geometry.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.Spatial.Geometry.BoundingBox">
            <summary>
            Gets bounding box for this geometry in the Azure Cosmos DB service.
            </summary>
            <value>
            Bounding box of the geometry.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.Spatial.Geometry.AdditionalProperties">
            <summary>
            Gets additional properties in the Azure Cosmos DB service.
            </summary>
            <value>
            Additional geometry properties.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.Spatial.Geometry.CrsForSerialization">
            <summary>
            Gets or sets CRS value used for serialization in the Azure Cosmos DB service.
            </summary>
            <remarks>
            This is artificial property needed for serialization. If CRS is default one, we don't want
            to serialize anything.
            </remarks>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Spatial.Geometry.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:Microsoft.Azure.Cosmos.Spatial.Geometry" /> is equal to the current <see cref="T:Microsoft.Azure.Cosmos.Spatial.Geometry" /> in the Azure Cosmos DB service.
            </summary>
            <returns>
            true if the specified object  is equal to the current object; otherwise, false.
            </returns>
            <param name="obj">The object to compare with the current object. </param>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Spatial.Geometry.GetHashCode">
            <summary>
            Serves as a hash function for the <see cref="T:Microsoft.Azure.Cosmos.Spatial.Geometry" /> type in the Azure Cosmos DB service.
            </summary>
            <returns>
            A hash code for the current geometry.
            </returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Spatial.Geometry.Distance(Microsoft.Azure.Cosmos.Spatial.Geometry)">
            <summary>
            Distance in meters between two geometries in the Azure Cosmos DB service.
            </summary>
            <param name="to">Second <see cref="T:Microsoft.Azure.Cosmos.Spatial.Geometry"/>.</param>
            <returns>Returns distance in meters between two geometries.</returns>
            <remarks>
            Today this function support only geometries of <see cref="F:Microsoft.Azure.Cosmos.Spatial.GeometryType.Point"/> type.
            </remarks>
            <example>
            <code>
            <![CDATA[
            var distanceQuery = documents.Where(document => document.Location.Distance(new Point(20.1, 20)) < 20000);
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Spatial.Geometry.Within(Microsoft.Azure.Cosmos.Spatial.Geometry)">
            <summary>
            Determines if current inner <see cref="T:Microsoft.Azure.Cosmos.Spatial.Geometry"/> is fully contained inside <paramref name="outer" /> <see cref="T:Microsoft.Azure.Cosmos.Spatial.Geometry"/> in the Azure Cosmos DB service.
            </summary>
            <param name="outer">Outer <see cref="T:Microsoft.Azure.Cosmos.Spatial.Geometry"/>.</param>
            <returns>
            <c>true</c> if current inner <see cref="T:Microsoft.Azure.Cosmos.Spatial.Geometry"/> is fully contained inside <paramref name="outer" /> <see cref="T:Microsoft.Azure.Cosmos.Spatial.Geometry"/>.
            <c>false</c> otherwise.
            </returns>
            <remarks>
            Currently this function supports current geometry of type <see cref="F:Microsoft.Azure.Cosmos.Spatial.GeometryType.Point"/> and outer geometry of type <see cref="F:Microsoft.Azure.Cosmos.Spatial.GeometryType.Polygon"/>.
            </remarks>
            <example>
            <code>
            <![CDATA[
            Polygon polygon = new Polygon(
                   new[]
                   {
                        new Position(10, 10),
                        new Position(30, 10),
                        new Position(30, 30),
                        new Position(10, 30),
                        new Position(10, 10)
                   });
            var withinQuery = documents.Where(document => document.Location.Within(polygon));
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Spatial.Geometry.IsValid">
            <summary>
            <para>
            Determines if the geometry specified is valid and can be indexed
            or used in queries by Azure Cosmos DB service.
            </para>
            <para>
            If a geometry is not valid, it will not be indexed. Also during query time invalid geometries are equivalent to <c>undefined</c>.
            </para>
            </summary>
            <returns><c>true</c> if geometry is valid. <c>false</c> otherwise.</returns>
            <remarks>
            Currently this function supports geometry of type <see cref="F:Microsoft.Azure.Cosmos.Spatial.GeometryType.Point"/> and <see cref="F:Microsoft.Azure.Cosmos.Spatial.GeometryType.Polygon"/>.
            </remarks>
            <example>
            <para>
            This example select all the documents which contain invalid geometries which were not indexed.
            </para>
            <code>
            <![CDATA[
            var invalidDocuments = documents.Where(document => !document.Location.IsValid());
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Spatial.Geometry.IsValidDetailed">
            <summary>
            <para>
            Determines if the geometry specified is valid and can be indexed
            or used in queries by Azure Cosmos DB service
            and if invalid, gives the additional reason as a string value.
            </para>
            <para>
            If a geometry is not valid, it will not be indexed. Also during query time invalid geometries are equivalent to <c>undefined</c>.
            </para>
            </summary>
            <returns>Instance of <see cref="T:Microsoft.Azure.Cosmos.Spatial.GeometryValidationResult"/>.</returns>
            <remarks>
            Currently this function supports geometry of type <see cref="F:Microsoft.Azure.Cosmos.Spatial.GeometryType.Point"/> and <see cref="F:Microsoft.Azure.Cosmos.Spatial.GeometryType.Polygon"/>.
            </remarks>
            <example>
            <para>
            This example select all the documents which contain invalid geometries which were not indexed.
            </para>
            <code>
            <![CDATA[
            var invalidReason = documents.Where(document => !document.Location.IsValid()).Select(document => document.Location.IsValidDetailed());
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Spatial.Geometry.Intersects(Microsoft.Azure.Cosmos.Spatial.Geometry)">
            <summary>
            Checks if current geometry1 intersects with geometry2.
            </summary>
            <param name="geometry2">Second <see cref="T:Microsoft.Azure.Cosmos.Spatial.Geometry"/>.</param>
            <returns>Returns true if geometry1 intersects with geometry2, otherwise returns false.</returns>
            <example>
            <code>
            <![CDATA[
            var distanceQuery = documents.Where(document => document.Location.Intersects(new Point(20.1, 20)));
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Spatial.Geometry.Equals(Microsoft.Azure.Cosmos.Spatial.Geometry)">
            <summary>
            Determines if this <see cref="T:Microsoft.Azure.Cosmos.Spatial.Geometry" /> is equal to the <paramref name="other" /> in the Azure Cosmos DB service.
            </summary>
            <param name="other"><see cref="T:Microsoft.Azure.Cosmos.Spatial.Geometry" /> to compare to this <see cref="T:Microsoft.Azure.Cosmos.Spatial.Geometry" />.</param>
            <returns><c>true</c> if geometries are equal. <c>false</c> otherwise.</returns>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.Spatial.GeometryCollection">
            <summary>
            Represents a geometry consisting of other geometries.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Spatial.GeometryCollection.#ctor(System.Collections.Generic.IList{Microsoft.Azure.Cosmos.Spatial.Geometry})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.Cosmos.Spatial.GeometryCollection"/> class. 
            </summary>
            <param name="geometries">
            List of geometries.
            </param>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Spatial.GeometryCollection.#ctor(System.Collections.Generic.IList{Microsoft.Azure.Cosmos.Spatial.Geometry},Microsoft.Azure.Cosmos.Spatial.GeometryParams)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.Cosmos.Spatial.GeometryCollection"/> class.
            </summary>
            <param name="geometries">
            Child geometries.
            </param>
            <param name="geometryParams">
            Additional geometry parameters.
            </param>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Spatial.GeometryCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.Cosmos.Spatial.GeometryCollection"/> class.
            </summary>
            <remarks>
            This constructor is used only during deserialization.
            </remarks>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.Spatial.GeometryCollection.Geometries">
            <summary>
            Gets child geometries.
            </summary>
            <value>
            Child geometries.
            </value>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Spatial.GeometryCollection.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:Microsoft.Azure.Cosmos.Spatial.GeometryCollection" /> is equal to the current <see cref="T:Microsoft.Azure.Cosmos.Spatial.GeometryCollection" />.
            </summary>
            <returns>
            true if the specified object is equal to the current object; otherwise, false.
            </returns>
            <param name="obj">The object to compare with the current object. </param>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Spatial.GeometryCollection.GetHashCode">
            <summary>
            Serves as a hash function for the <see cref="T:Microsoft.Azure.Cosmos.Spatial.GeometryCollection" /> type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:Microsoft.Azure.Cosmos.Spatial.GeometryCollection" />.
            </returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Spatial.GeometryCollection.Equals(Microsoft.Azure.Cosmos.Spatial.GeometryCollection)">
            <summary>
            Determines if this <see cref="T:Microsoft.Azure.Cosmos.Spatial.GeometryCollection" /> is equal to the <paramref name="other" />.
            </summary>
            <param name="other"><see cref="T:Microsoft.Azure.Cosmos.Spatial.GeometryCollection" /> to compare to this <see cref="T:Microsoft.Azure.Cosmos.Spatial.GeometryCollection" />.</param>
            <returns><c>true</c> if geometry collections are equal. <c>false</c> otherwise.</returns>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.Spatial.GeometryParams">
            <summary>
            Not frequently used geometry parameters in the Azure Cosmos DB service.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.Spatial.GeometryParams.AdditionalProperties">
            <summary>
            Gets or sets any additional properties to be stored as part of a geometry in the Azure Cosmos DB service.
            </summary>
            <value>
            Additional geometry properties.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.Spatial.GeometryParams.Crs">
            <summary>
            Gets or sets Coordinate Reference System for the geometry in the Azure Cosmos DB service.
            </summary>
            <value>
            Coordinate Reference System for the geometry.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.Spatial.GeometryParams.BoundingBox">
            <summary>
            Gets or sets a bounding box for the geometry in the Azure Cosmos DB service.
            </summary>
            <value>
            Bounding box for the geometry.
            </value>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.Spatial.GeometryShape">
            <summary>
            Geometry type in the Azure Cosmos DB service.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Spatial.GeometryShape.Point">
            <summary>
            Represents single point.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Spatial.GeometryShape.MultiPoint">
            <summary>
            Represents geometry consisting of several points.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Spatial.GeometryShape.LineString">
            <summary>
            Sequence of connected line segments.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Spatial.GeometryShape.MultiLineString">
            <summary>
            Geometry consisting of several LineStrings.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Spatial.GeometryShape.Polygon">
            <summary>
            Represents a polygon with optional holes.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Spatial.GeometryShape.MultiPolygon">
            <summary>
            Represents a geometry comprised of several polygons.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Spatial.GeometryShape.GeometryCollection">
            <summary>
            Represents a geometry comprised of other geometries.
            </summary>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.Spatial.GeometryType">
            <summary>
            Geometry type in the Azure Cosmos DB service.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Spatial.GeometryType.Point">
            <summary>
            Represents single point.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Spatial.GeometryType.MultiPoint">
            <summary>
            Represents geometry consisting of several points.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Spatial.GeometryType.LineString">
            <summary>
            Sequence of connected line segments.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Spatial.GeometryType.MultiLineString">
            <summary>
            Geometry consisting of several LineStrings.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Spatial.GeometryType.Polygon">
            <summary>
            Represents a polygon with optional holes.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Spatial.GeometryType.MultiPolygon">
            <summary>
            Represents a geometry comprised of several polygons.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Cosmos.Spatial.GeometryType.GeometryCollection">
            <summary>
            Represents a geometry comprised of other geometries.
            </summary>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.Spatial.GeometryValidationResult">
            <summary>
            <para>
            Return value of <see cref="M:Microsoft.Azure.Cosmos.Spatial.Geometry.IsValidDetailed"/> in the Azure Cosmos DB service.
            </para>
            <para>
            Contains detailed description why a geometyr is invalid.
            </para>
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.Spatial.GeometryValidationResult.IsValid">
            <summary>
            Returns a value indicating whether geometry for which <see cref="M:Microsoft.Azure.Cosmos.Spatial.Geometry.IsValidDetailed"/>
            was called is valid or not in the Azure Cosmos DB service.
            </summary>
            <value>
            <c>true</c> if geometry for which <see cref="M:Microsoft.Azure.Cosmos.Spatial.Geometry.IsValidDetailed"/> was called is valid. <c>false</c> otherwise.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.Spatial.GeometryValidationResult.Reason">
            <summary>
            If geometry is invalid, returns detailed reason in the Azure Cosmos DB service.
            </summary>
            <value>
            Description why a geometry is invalid.
            </value>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.Spatial.LinearRing">
            <summary>
            A <see cref="T:Microsoft.Azure.Cosmos.Spatial.LinearRing" /> is closed LineString with 4 or more positions. The first and last positions are
            equivalent (they represent equivalent points).
            Though a <see cref="T:Microsoft.Azure.Cosmos.Spatial.LinearRing" /> is not explicitly represented as a GeoJSON geometry type, it is referred to in
            the <see cref="T:Microsoft.Azure.Cosmos.Spatial.Polygon"/> geometry type definition in the Azure Cosmos DB service.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Spatial.LinearRing.#ctor(System.Collections.Generic.IList{Microsoft.Azure.Cosmos.Spatial.Position})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.Cosmos.Spatial.LinearRing" /> class in the Azure Cosmos DB service.
            </summary>
            <param name="coordinates">
            The coordinates. 4 or more positions. The first and last positions are equivalent (they represent equivalent
            points).
            </param>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.Spatial.LinearRing.Positions">
            <summary>
            Gets the <see cref="T:Microsoft.Azure.Cosmos.Spatial.LinearRing"/> positions in the Azure Cosmos DB service.
            </summary>
            <value>
            Positions of the <see cref="T:Microsoft.Azure.Cosmos.Spatial.LinearRing"/>.
            </value>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Spatial.LinearRing.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:Microsoft.Azure.Cosmos.Spatial.LinearRing"/> is equal to the current <see cref="T:Microsoft.Azure.Cosmos.Spatial.LinearRing"/> in the Azure Cosmos DB service.
            </summary>
            <returns>
            true if the specified object  is equal to the current object; otherwise, false.
            </returns>
            <param name="obj">The object to compare with the current object. </param>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Spatial.LinearRing.GetHashCode">
            <summary>
            Serves as a hash function for the <see cref="T:Microsoft.Azure.Cosmos.Spatial.LinearRing"/> positions in the Azure Cosmos DB service. 
            </summary>
            <returns>
            A hash code for the current <see cref="T:Microsoft.Azure.Cosmos.Spatial.LinearRing"/>.
            </returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Spatial.LinearRing.Equals(Microsoft.Azure.Cosmos.Spatial.LinearRing)">
            <summary>
            Determines if this <see cref="T:Microsoft.Azure.Cosmos.Spatial.LinearRing"/> is equal to the <paramref name="other" /> in the Azure Cosmos DB service.
            </summary>
            <param name="other"><see cref="T:Microsoft.Azure.Cosmos.Spatial.LinearRing"/> to compare to this one.</param>
            <returns><c>true</c> if linear rings are equal. <c>false</c> otherwise.</returns>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.Spatial.LineString">
            <summary>
            Represents a geometry consisting of connected line segments.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Spatial.LineString.#ctor(System.Collections.Generic.IList{Microsoft.Azure.Cosmos.Spatial.Position})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.Cosmos.Spatial.LineString"/> class. 
            </summary>
            <param name="coordinates">
            List of positions through which the line string goes.
            </param>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Spatial.LineString.#ctor(System.Collections.Generic.IList{Microsoft.Azure.Cosmos.Spatial.Position},Microsoft.Azure.Cosmos.Spatial.GeometryParams)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.Cosmos.Spatial.LineString"/> class.
            </summary>
            <param name="coordinates">
            The coordinates.
            </param>
            <param name="geometryParams">
            Additional geometry parameters.
            </param>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Spatial.LineString.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.Cosmos.Spatial.LineString"/> class.
            </summary>
            <remarks>
            This constructor is used only during deserialization.
            </remarks>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.Spatial.LineString.Positions">
            <summary>
            Gets line string positions.
            </summary>
            <value>
            Positions of the line string.
            </value>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Spatial.LineString.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:Microsoft.Azure.Cosmos.Spatial.LineString" /> is equal to the current <see cref="T:Microsoft.Azure.Cosmos.Spatial.LineString" />.
            </summary>
            <returns>
            true if the specified object is equal to the current object; otherwise, false.
            </returns>
            <param name="obj">The object to compare with the current object. </param>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Spatial.LineString.GetHashCode">
            <summary>
            Serves as a hash function for the <see cref="T:Microsoft.Azure.Cosmos.Spatial.LineString" /> type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:Microsoft.Azure.Cosmos.Spatial.LineString"/>.
            </returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Spatial.LineString.Equals(Microsoft.Azure.Cosmos.Spatial.LineString)">
            <summary>
            Determines if this <see cref="T:Microsoft.Azure.Cosmos.Spatial.LineString"/> is equal to the <paramref name="other" />.
            </summary>
            <param name="other">LineString to compare to this <see cref="T:Microsoft.Azure.Cosmos.Spatial.LineString"/>.</param>
            <returns><c>true</c> if line strings are equal. <c>false</c> otherwise.</returns>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.Spatial.LineStringCoordinates">
            <summary>
            Line string coordinates.
            </summary>
            <seealso cref="T:Microsoft.Azure.Cosmos.Spatial.MultiLineString"/>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Spatial.LineStringCoordinates.#ctor(System.Collections.Generic.IList{Microsoft.Azure.Cosmos.Spatial.Position})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.Cosmos.Spatial.LineStringCoordinates"/> class.
            </summary>
            <param name="positions">
            Line string positions..
            </param>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.Spatial.LineStringCoordinates.Positions">
            <summary>
            Gets line string positions.
            </summary>
            <value>
            Positions of the line string.
            </value>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Spatial.LineStringCoordinates.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:Microsoft.Azure.Cosmos.Spatial.LineStringCoordinates"/> is equal to the current <see cref="T:Microsoft.Azure.Cosmos.Spatial.LineStringCoordinates"/>.
            </summary>
            <returns>
            true if the specified object is equal to the current object; otherwise, false.
            </returns>
            <param name="obj">The object to compare with the current object. </param>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Spatial.LineStringCoordinates.GetHashCode">
            <summary>
            Serves as a hash function for <see cref="T:Microsoft.Azure.Cosmos.Spatial.LineStringCoordinates"/>.
            </summary>
            <returns>
            A hash code for the current <see cref="T:Microsoft.Azure.Cosmos.Spatial.LineStringCoordinates"/>.
            </returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Spatial.LineStringCoordinates.Equals(Microsoft.Azure.Cosmos.Spatial.LineStringCoordinates)">
            <summary>
            Determines if this <see cref="T:Microsoft.Azure.Cosmos.Spatial.LineStringCoordinates"/> is equal to the <paramref name="other" />.
            </summary>
            <param name="other"><see cref="T:Microsoft.Azure.Cosmos.Spatial.LineStringCoordinates"/> to compare to this <see cref="T:Microsoft.Azure.Cosmos.Spatial.LineStringCoordinates"/>.</param>
            <returns><c>true</c> if objects are equal. <c>false</c> otherwise.</returns>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.Spatial.LinkedCrs">
            <summary>
            Coordinate Reference System which is identified by link in the Azure Cosmos DB service. 
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Spatial.LinkedCrs.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.Cosmos.Spatial.LinkedCrs"/> class in the Azure Cosmos DB service. 
            </summary>
            <param name="href">
            Link which identifies the Coordinate Reference System.
            </param>
            <param name="hrefType">
            Optional string which hints at the format used to represent CRS parameters at the provided <paramref name="href"/>.
            </param>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.Spatial.LinkedCrs.Href">
            <summary>
            Gets the link which identifies the Coordinate Reference System in the Azure Cosmos DB service. 
            </summary>
            <value>
            Link which identifies the Coordinate Reference System.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.Spatial.LinkedCrs.HrefType">
            <summary>
            Gets optional string which hints at the format used to represent CRS parameters at the provided <see cref="P:Microsoft.Azure.Cosmos.Spatial.LinkedCrs.Href"/> in the Azure Cosmos DB service. 
            </summary>
            <value>
            Optional string which hints at the format used to represent CRS parameters at the provided <see cref="P:Microsoft.Azure.Cosmos.Spatial.LinkedCrs.Href"/>.
            </value>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Spatial.LinkedCrs.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:Microsoft.Azure.Cosmos.Spatial.LinkedCrs"/> is equal to the current <see cref="T:Microsoft.Azure.Cosmos.Spatial.LinkedCrs"/> in the Azure Cosmos DB service. 
            </summary>
            <returns>
            true if the specified object  is equal to the current object; otherwise, false.
            </returns>
            <param name="obj">The object to compare with the current object. </param>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Spatial.LinkedCrs.GetHashCode">
            <summary>
            Serves as a hash function for <see cref="T:Microsoft.Azure.Cosmos.Spatial.LinkedCrs"/> in the Azure Cosmos DB service. 
            </summary>
            <returns>
            A hash code for the current <see cref="T:Microsoft.Azure.Cosmos.Spatial.LinkedCrs"/>.
            </returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Spatial.LinkedCrs.Equals(Microsoft.Azure.Cosmos.Spatial.LinkedCrs)">
            <summary>
            Determines if this <see cref="T:Microsoft.Azure.Cosmos.Spatial.LinkedCrs"/> is equal to <paramref name="other" /> in the Azure Cosmos DB service. 
            </summary>
            <param name="other"><see cref="T:Microsoft.Azure.Cosmos.Spatial.LinkedCrs"/> to compare to this <see cref="T:Microsoft.Azure.Cosmos.Spatial.LinkedCrs"/>.</param>
            <returns><c>true</c> if CRSs are equal. <c>false</c> otherwise.</returns>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.Spatial.MultiLineString">
            <summary>
            Represents a geometry consisting of multiple <see cref="T:Microsoft.Azure.Cosmos.Spatial.LineString"/>.
            </summary>
            <seealso cref="T:Microsoft.Azure.Cosmos.Spatial.LineString"/>.
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Spatial.MultiLineString.#ctor(System.Collections.Generic.IList{Microsoft.Azure.Cosmos.Spatial.LineStringCoordinates})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.Cosmos.Spatial.MultiLineString"/> class. 
            </summary>
            <param name="lineStrings">
            List of <see cref="T:Microsoft.Azure.Cosmos.Spatial.LineStringCoordinates"/> instances representing individual line strings.
            </param>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Spatial.MultiLineString.#ctor(System.Collections.Generic.IList{Microsoft.Azure.Cosmos.Spatial.LineStringCoordinates},Microsoft.Azure.Cosmos.Spatial.GeometryParams)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.Cosmos.Spatial.MultiLineString"/> class.
            </summary>
            <param name="lineStrings">
            List of <see cref="T:Microsoft.Azure.Cosmos.Spatial.LineStringCoordinates"/> instances representing individual line strings.
            </param>
            <param name="geometryParams">
            Additional geometry parameters.
            </param>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Spatial.MultiLineString.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.Cosmos.Spatial.MultiLineString"/> class.
            </summary>
            <remarks>
            This constructor is used only during deserialization.
            </remarks>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.Spatial.MultiLineString.LineStrings">
            <summary>
            Gets collection of <see cref="T:Microsoft.Azure.Cosmos.Spatial.LineStringCoordinates"/> representing individual line strings.
            </summary>
            <value>
            Collection of <see cref="T:Microsoft.Azure.Cosmos.Spatial.LineStringCoordinates"/> representing individual line strings.
            </value>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Spatial.MultiLineString.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:Microsoft.Azure.Cosmos.Spatial.MultiLineString" /> is equal to the current <see cref="T:Microsoft.Azure.Cosmos.Spatial.MultiLineString" />.
            </summary>
            <returns>
            true if the specified object is equal to the current object; otherwise, false.
            </returns>
            <param name="obj">The object to compare with the current object. </param>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Spatial.MultiLineString.GetHashCode">
            <summary>
            Serves as a hash function for the <see cref="T:Microsoft.Azure.Cosmos.Spatial.MultiLineString" /> type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:Microsoft.Azure.Cosmos.Spatial.MultiLineString"/>.
            </returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Spatial.MultiLineString.Equals(Microsoft.Azure.Cosmos.Spatial.MultiLineString)">
            <summary>
            Determines if this <see cref="T:Microsoft.Azure.Cosmos.Spatial.MultiLineString"/> is equal to <paramref name="other" />.
            </summary>
            <param name="other"><see cref="T:Microsoft.Azure.Cosmos.Spatial.MultiLineString"/> to compare to this <see cref="T:Microsoft.Azure.Cosmos.Spatial.MultiLineString"/>.</param>
            <returns><c>true</c> if line strings are equal. <c>false</c> otherwise.</returns>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.Spatial.MultiPoint">
            <summary>
            Geometry consisting of several points.
            </summary>
            <seealso cref="T:Microsoft.Azure.Cosmos.Spatial.Point"/>.
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Spatial.MultiPoint.#ctor(System.Collections.Generic.IList{Microsoft.Azure.Cosmos.Spatial.Position})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.Cosmos.Spatial.MultiPoint" /> class.
            </summary>
            <param name="points">List of <see cref="T:Microsoft.Azure.Cosmos.Spatial.Position"/> representing individual points.</param>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Spatial.MultiPoint.#ctor(System.Collections.Generic.IList{Microsoft.Azure.Cosmos.Spatial.Position},Microsoft.Azure.Cosmos.Spatial.GeometryParams)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.Cosmos.Spatial.MultiPoint" /> class.
            </summary>
            <param name="points">
            List of <see cref="T:Microsoft.Azure.Cosmos.Spatial.Position"/> representing individual points.
            </param>
            <param name="geometryParams">
            Additional geometry parameters.
            </param>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Spatial.MultiPoint.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.Cosmos.Spatial.MultiPoint"/> class.
            </summary>
            <remarks>
            This constructor is used only during deserialization.
            </remarks>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.Spatial.MultiPoint.Points">
            <summary>
            Gets collections of <see cref="T:Microsoft.Azure.Cosmos.Spatial.Position"/> representing individual points.
            </summary>
            <value>
            Collections of <see cref="T:Microsoft.Azure.Cosmos.Spatial.Position"/> representing individual points.
            </value>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Spatial.MultiPoint.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:Microsoft.Azure.Cosmos.Spatial.MultiPoint" /> is equal to the current <see cref="T:Microsoft.Azure.Cosmos.Spatial.MultiPoint" />.
            </summary>
            <returns>
            true if the specified object  is equal to the current object; otherwise, false.
            </returns>
            <param name="obj">The object to compare with the current object. </param>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Spatial.MultiPoint.GetHashCode">
            <summary>
            Serves as a hash function for the <see cref="T:Microsoft.Azure.Cosmos.Spatial.MultiPoint" /> type.
            </summary>
            <returns>
            A hash code for the current geometry.
            </returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Spatial.MultiPoint.Equals(Microsoft.Azure.Cosmos.Spatial.MultiPoint)">
            <summary>
            Determines if this <see cref="T:Microsoft.Azure.Cosmos.Spatial.MultiPoint"/> is equal to <paramref name="other" />.
            </summary>
            <param name="other"> <see cref="T:Microsoft.Azure.Cosmos.Spatial.MultiPoint"/> to compare to this <see cref="T:Microsoft.Azure.Cosmos.Spatial.MultiPoint"/>.</param>
            <returns><c>true</c> if objects are equal. <c>false</c> otherwise.</returns>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.Spatial.MultiPolygon">
            <summary>
            Geometry which is comprised of multiple polygons.
            </summary>
            <seealso cref="T:Microsoft.Azure.Cosmos.Spatial.Polygon"/>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Spatial.MultiPolygon.#ctor(System.Collections.Generic.IList{Microsoft.Azure.Cosmos.Spatial.PolygonCoordinates})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.Cosmos.Spatial.MultiPolygon"/> class.
            </summary>
            <param name="polygons">
            List of <see cref="T:Microsoft.Azure.Cosmos.Spatial.PolygonCoordinates"/> instances. Each <see cref="T:Microsoft.Azure.Cosmos.Spatial.PolygonCoordinates"/> represents separate polygon.
            </param>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Spatial.MultiPolygon.#ctor(System.Collections.Generic.IList{Microsoft.Azure.Cosmos.Spatial.PolygonCoordinates},Microsoft.Azure.Cosmos.Spatial.GeometryParams)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.Cosmos.Spatial.MultiPolygon"/> class.
            </summary>
            <param name="polygons">
            List of <see cref="T:Microsoft.Azure.Cosmos.Spatial.PolygonCoordinates"/> instances. Each <see cref="T:Microsoft.Azure.Cosmos.Spatial.PolygonCoordinates"/> represents separate polygon.
            </param>
            <param name="geometryParams">Additional geometry parameters.</param>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Spatial.MultiPolygon.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.Cosmos.Spatial.MultiPolygon"/> class.
            </summary>
            <remarks>
            This constructor is used only during deserialization.
            </remarks>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.Spatial.MultiPolygon.Polygons">
            <summary>
            Gets collection of <see cref="T:Microsoft.Azure.Cosmos.Spatial.PolygonCoordinates"/> instances. Each <see cref="T:Microsoft.Azure.Cosmos.Spatial.PolygonCoordinates"/> represents separate polygon.
            </summary>
            <value>
            Collection of <see cref="T:Microsoft.Azure.Cosmos.Spatial.PolygonCoordinates"/> instances. Each <see cref="T:Microsoft.Azure.Cosmos.Spatial.PolygonCoordinates"/> represents separate polygon.
            </value>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Spatial.MultiPolygon.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:Microsoft.Azure.Cosmos.Spatial.MultiPolygon" /> is equal to the current <see cref="T:Microsoft.Azure.Cosmos.Spatial.MultiPolygon" />.
            </summary>
            <returns>
            true if the specified object  is equal to the current object; otherwise, false.
            </returns>
            <param name="obj">The object to compare with the current object. </param>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Spatial.MultiPolygon.GetHashCode">
            <summary>
            Serves as a hash function for the <see cref="T:Microsoft.Azure.Cosmos.Spatial.MultiPolygon" /> type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:Microsoft.Azure.Cosmos.Spatial.MultiPolygon" />.
            </returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Spatial.MultiPolygon.Equals(Microsoft.Azure.Cosmos.Spatial.MultiPolygon)">
            <summary>
            Determines if this <see cref="T:Microsoft.Azure.Cosmos.Spatial.MultiPolygon"/> is equal to <paramref name="other" />.
            </summary>
            <param name="other"><see cref="T:Microsoft.Azure.Cosmos.Spatial.MultiPolygon"/> to compare to this <see cref="T:Microsoft.Azure.Cosmos.Spatial.MultiPolygon"/>.</param>
            <returns><c>true</c> if objects are equal. <c>false</c> otherwise.</returns>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.Spatial.NamedCrs">
            <summary>
            Coordinate Reference System which is identified by name in the Azure Cosmos DB service.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Spatial.NamedCrs.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.Cosmos.Spatial.NamedCrs" /> class in the Azure Cosmos DB service. 
            </summary>
            <param name="name">
            Name identifying a coordinate reference system.
            </param>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.Spatial.NamedCrs.Name">
            <summary>
            Gets a name identifying a coordinate reference system in the Azure Cosmos DB service. For example "urn:ogc:def:crs:OGC:1.3:CRS84".
            </summary>
            <value>
            Name identifying a coordinate reference system. For example "urn:ogc:def:crs:OGC:1.3:CRS84".
            </value>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Spatial.NamedCrs.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:Microsoft.Azure.Cosmos.Spatial.NamedCrs" /> is equal to the current <see cref="T:Microsoft.Azure.Cosmos.Spatial.NamedCrs" /> in the Azure Cosmos DB service.
            </summary>
            <returns>
            true if the specified object  is equal to the current object; otherwise, false.
            </returns>
            <param name="obj">The object to compare with the current object. </param>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Spatial.NamedCrs.GetHashCode">
            <summary>
            Serves as a hash function for the name identifying a coordinate reference system in the Azure Cosmos DB service.
            </summary>
            <returns>
            A hash code for the current <see cref="T:Microsoft.Azure.Cosmos.Spatial.NamedCrs" />.
            </returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Spatial.NamedCrs.Equals(Microsoft.Azure.Cosmos.Spatial.NamedCrs)">
            <summary>
            Determines if this CRS is equal to <paramref name="other" /> CRS in the Azure Cosmos DB service.
            </summary>
            <param name="other">CRS to compare to this CRS.</param>
            <returns><c>true</c> if CRSs are equal. <c>false</c> otherwise.</returns>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.Spatial.Point">
            <summary>
            Point geometry class in the Azure Cosmos DB service.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Spatial.Point.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.Cosmos.Spatial.Point" /> class in the Azure Cosmos DB service.
            </summary>
            <param name="longitude">
            Longitude of the point.
            </param>
            <param name="latitude">
            Latitude of the point.
            </param>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Spatial.Point.#ctor(Microsoft.Azure.Cosmos.Spatial.Position)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.Cosmos.Spatial.Point" /> class in the Azure Cosmos DB service.
            </summary>
            <param name="position">
            Position of the point.
            </param>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Spatial.Point.#ctor(Microsoft.Azure.Cosmos.Spatial.Position,Microsoft.Azure.Cosmos.Spatial.GeometryParams)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.Cosmos.Spatial.Point" /> class in the Azure Cosmos DB service.
            </summary>
            <param name="position">
            Point coordinates.
            </param>
            <param name="geometryParams">
            Additional geometry parameters.
            </param>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Spatial.Point.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.Cosmos.Spatial.Point"/> class in the Azure Cosmos DB service.
            </summary>
            <remarks>
            This constructor is used only during deserialization.
            </remarks>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.Spatial.Point.Position">
            <summary>
            Gets point coordinates in the Azure Cosmos DB service.
            </summary>
            <value>
            Coordinates of the point.
            </value>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Spatial.Point.Equals(Microsoft.Azure.Cosmos.Spatial.Point)">
            <summary>
            Determines if this <see cref="T:Microsoft.Azure.Cosmos.Spatial.Point"/> is equal to <paramref name="other" /> in the Azure Cosmos DB service.
            </summary>
            <param name="other"><see cref="T:Microsoft.Azure.Cosmos.Spatial.Point"/> to compare to this <see cref="T:Microsoft.Azure.Cosmos.Spatial.Point"/>.</param>
            <returns><c>true</c> if objects are equal. <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Spatial.Point.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:Microsoft.Azure.Cosmos.Spatial.Point" /> is equal to the current <see cref="T:Microsoft.Azure.Cosmos.Spatial.Point" /> in the Azure Cosmos DB service.
            </summary>
            <returns>
            true if the specified object  is equal to the current object; otherwise, false.
            </returns>
            <param name="obj">The object to compare with the current object. </param>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Spatial.Point.GetHashCode">
            <summary>
            Serves as a hash function for the <see cref="T:Microsoft.Azure.Cosmos.Spatial.Point" /> type in the Azure Cosmos DB service.
            </summary>
            <returns>
            A hash code for the current geometry.
            </returns>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.Spatial.Polygon">
            <summary>
            <para>
            Polygon geometry class in the Azure Cosmos DB service.
            </para>
            <para>
            A polygon is represented by the set of "polygon rings". Each ring is closed line string.
            First ring defines external ring. All subsequent rings define "holes" in the external ring.
            </para>
            <para>
            Rings must be specified using Left Hand Rule: traversing the ring in the order of its points, should result
            in internal area of the polygon being to the left side.
            </para>
            </summary>
            <example>
            This example shows how to define a polygon which covers small portion of the Earth:
            <code language="c#">
            <![CDATA[
            var polygon = new Polygon(
                    new[]
                    {
                        new Position(20.0, 20.0),
                        new Position(30.0, 20.0),
                        new Position(30.0, 30.0),
                        new Position(20.0, 30.0)
                        new Position(20.0, 20.0)
                    });
            ]]>        
            </code>
            </example>
            <example>
            This example shows how to define a polygon which covers area more than one hemisphere:
            (Notice that only order of coordinates was reversed).
            <code language="c#">
            <![CDATA[
            var polygon = new Polygon(
                    new[]
                    {
                        new Position(20.0, 20.0),
                        new Position(20.0, 30.0),
                        new Position(30.0, 30.0),
                        new Position(30.0, 20.0)
                        new Position(20.0, 20.0)
                    });
            ]]>        
            </code>
            </example>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Spatial.Polygon.#ctor(System.Collections.Generic.IList{Microsoft.Azure.Cosmos.Spatial.Position})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.Cosmos.Spatial.Polygon"/> class,
            from external ring (the polygon contains no holes) in the Azure Cosmos DB service.
            </summary>
            <param name="externalRingPositions">
            External polygon ring coordinates.
            </param>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Spatial.Polygon.#ctor(System.Collections.Generic.IList{Microsoft.Azure.Cosmos.Spatial.LinearRing})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.Cosmos.Spatial.Polygon"/> class in the Azure Cosmos DB service.
            </summary>
            <param name="rings">
            <para>
            Polygon rings.
            </para>
            <para>
            First ring is external ring. Following rings define 'holes' in the polygon.
            </para>
            </param>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Spatial.Polygon.#ctor(System.Collections.Generic.IList{Microsoft.Azure.Cosmos.Spatial.LinearRing},Microsoft.Azure.Cosmos.Spatial.GeometryParams)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.Cosmos.Spatial.Polygon"/> class in the Azure Cosmos DB service.
            </summary>
            <param name="rings">
            Polygon rings.
            </param>
            <param name="geometryParams">
            Additional geometry parameters.
            </param>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Spatial.Polygon.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.Cosmos.Spatial.Polygon"/> class in the Azure Cosmos DB service.
            </summary>
            <remarks>
            This constructor is used only during deserialization.
            </remarks>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.Spatial.Polygon.Rings">
            <summary>
            Gets the polygon rings in the Azure Cosmos DB service.
            </summary>
            <value>
            Polygon rings.
            </value>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Spatial.Polygon.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:Microsoft.Azure.Cosmos.Spatial.Polygon" /> is equal to the current <see cref="T:Microsoft.Azure.Cosmos.Spatial.Polygon" /> in the Azure Cosmos DB service.
            </summary>
            <returns>
            true if the specified object is equal to the current object; otherwise, false.
            </returns>
            <param name="obj">The object to compare with the current object. </param>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Spatial.Polygon.GetHashCode">
            <summary>
            Serves as a hash function for the <see cref="T:Microsoft.Azure.Cosmos.Spatial.Polygon" /> type in the Azure Cosmos DB service.
            </summary>
            <returns>
            A hash code for the current <see cref="T:Microsoft.Azure.Cosmos.Spatial.Polygon"/>.
            </returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Spatial.Polygon.Equals(Microsoft.Azure.Cosmos.Spatial.Polygon)">
            <summary>
            Determines if this <see cref="T:Microsoft.Azure.Cosmos.Spatial.Polygon"/> is equal to the <paramref name="other" /> in the Azure Cosmos DB service.
            </summary>
            <param name="other"><see cref="T:Microsoft.Azure.Cosmos.Spatial.Polygon"/> to compare to this <see cref="T:Microsoft.Azure.Cosmos.Spatial.Polygon"/>.</param>
            <returns><c>true</c> if objects are equal. <c>false</c> otherwise.</returns>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.Spatial.PolygonCoordinates">
            <summary>
            Polygon coordinates.
            </summary>
            <seealso cref="T:Microsoft.Azure.Cosmos.Spatial.MultiPolygon"/>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Spatial.PolygonCoordinates.#ctor(System.Collections.Generic.IList{Microsoft.Azure.Cosmos.Spatial.LinearRing})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.Cosmos.Spatial.PolygonCoordinates"/> class.
            </summary>
            <param name="rings">
            The rings of the polygon.
            </param>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.Spatial.PolygonCoordinates.Rings">
            <summary>
            Gets polygon rings.
            </summary>
            <value>
            Rings of the polygon.
            </value>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Spatial.PolygonCoordinates.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:Microsoft.Azure.Cosmos.Spatial.PolygonCoordinates"/> is equal to the current <see cref="T:Microsoft.Azure.Cosmos.Spatial.PolygonCoordinates"/>.
            </summary>
            <returns>
            true if the specified object  is equal to the current object; otherwise, false.
            </returns>
            <param name="obj">The object to compare with the current object. </param>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Spatial.PolygonCoordinates.GetHashCode">
            <summary>
            Serves as a hash function for a <see cref="T:Microsoft.Azure.Cosmos.Spatial.PolygonCoordinates"/>. 
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Spatial.PolygonCoordinates.Equals(Microsoft.Azure.Cosmos.Spatial.PolygonCoordinates)">
            <summary>
            Determines if this <see cref="T:Microsoft.Azure.Cosmos.Spatial.PolygonCoordinates"/> is equal to the <paramref name="other" />.
            </summary>
            <param name="other"><see cref="T:Microsoft.Azure.Cosmos.Spatial.PolygonCoordinates"/> to compare to this <see cref="T:Microsoft.Azure.Cosmos.Spatial.PolygonCoordinates"/>.</param>
            <returns><c>true</c> if objects are equal. <c>false</c> otherwise.</returns>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.Spatial.Position">
            <summary>
            <para>
            A position is represented by an array of numbers in the Azure Cosmos DB service. There must be at least two elements, and may be more.
            </para>
            <para>
            The order of elements must follow longitude, latitude, altitude.
            Any number of additional elements are allowed - interpretation and meaning of additional elements is up to the application.
            </para>
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Spatial.Position.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.Cosmos.Spatial.Position"/> class in the Azure Cosmos DB service.
            </summary>
            <param name="longitude">
            Longitude value.
            </param>
            <param name="latitude">
            Latitude value.
            </param>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Spatial.Position.#ctor(System.Double,System.Double,System.Nullable{System.Double})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.Cosmos.Spatial.Position"/> class in the Azure Cosmos DB service.
            </summary>
            <param name="longitude">
            Longitude value.
            </param>
            <param name="latitude">
            Latitude value.
            </param>
            <param name="altitude">
            Optional altitude value.
            </param>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Spatial.Position.#ctor(System.Collections.Generic.IList{System.Double})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.Cosmos.Spatial.Position"/> class in the Azure Cosmos DB service.
            </summary>
            <param name="coordinates">
            Position values.
            </param>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.Spatial.Position.Coordinates">
            <summary>
            Gets position coordinates in the Azure Cosmos DB service.
            </summary>
            <value>
            Coordinate values.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.Spatial.Position.Longitude">
            <summary>
            Gets longitude in the Azure Cosmos DB service.
            </summary>
            <value>
            Longitude value.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.Spatial.Position.Latitude">
            <summary>
            Gets latitude in the Azure Cosmos DB service.
            </summary>
            <value>
            Latitude value.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.Spatial.Position.Altitude">
            <summary>
            Gets optional altitude in the Azure Cosmos DB service.
            </summary>
            <value>
            Altitude value.
            </value>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Spatial.Position.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:Microsoft.Azure.Cosmos.Spatial.Position"/> is equal to the current <see cref="T:Microsoft.Azure.Cosmos.Spatial.Position"/> in the Azure Cosmos DB service.
            </summary>
            <returns>
            true if the specified <see cref="T:Microsoft.Azure.Cosmos.Spatial.Position"/> is equal to the current object; otherwise, false.
            </returns>
            <param name="obj">The <see cref="T:Microsoft.Azure.Cosmos.Spatial.Position"/> to compare to the current object. </param>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Spatial.Position.GetHashCode">
            <summary>
            Serves as a hash function for the <see cref="T:Microsoft.Azure.Cosmos.Spatial.Position" /> type in the Azure Cosmos DB service.
            </summary>
            <returns>
            A hash code for the current <see cref="T:Microsoft.Azure.Cosmos.Spatial.Position"/>.
            </returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Spatial.Position.Equals(Microsoft.Azure.Cosmos.Spatial.Position)">
            <summary>
            Determines if this <see cref="T:Microsoft.Azure.Cosmos.Spatial.Position"/> is equal to the <paramref name="other" /> in the Azure Cosmos DB service.
            </summary>
            <param name="other"><see cref="T:Microsoft.Azure.Cosmos.Spatial.Position"/> to compare to this <see cref="T:Microsoft.Azure.Cosmos.Spatial.Position"/>.</param>
            <returns><c>true</c> if objects are equal. <c>false</c> otherwise.</returns>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.Spatial.UnspecifiedCrs">
            <summary>
            Unspecified CRS. If a geometry has this CRS, no CRS can be assumed for it according to GeoJSON spec.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Spatial.UnspecifiedCrs.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.Cosmos.Spatial.UnspecifiedCrs"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Spatial.UnspecifiedCrs.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:Microsoft.Azure.Cosmos.Spatial.LinkedCrs"/> is equal to the current <see cref="T:Microsoft.Azure.Cosmos.Spatial.LinkedCrs"/>.
            </summary>
            <returns>
            true if the specified object  is equal to the current object; otherwise, false.
            </returns>
            <param name="obj">The object to compare with the current object. </param>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Spatial.UnspecifiedCrs.GetHashCode">
            <summary>
            Serves as a hash function for <see cref="T:Microsoft.Azure.Cosmos.Spatial.LinkedCrs"/>. 
            </summary>
            <returns>
            A hash code for the current <see cref="T:Microsoft.Azure.Cosmos.Spatial.LinkedCrs"/>.
            </returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Spatial.UnspecifiedCrs.Equals(Microsoft.Azure.Cosmos.Spatial.UnspecifiedCrs)">
            <summary>
            Determines if this <see cref="T:Microsoft.Azure.Cosmos.Spatial.LinkedCrs"/> is equal to <paramref name="other" />.
            </summary>
            <param name="other"><see cref="T:Microsoft.Azure.Cosmos.Spatial.LinkedCrs"/> to compare to this <see cref="T:Microsoft.Azure.Cosmos.Spatial.LinkedCrs"/>.</param>
            <returns><c>true</c> if CRSs are equal. <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.Sql.SqlObjectHasher.CombineHashes(System.Int64,System.Int64)">
            <summary>
            Combines Two Hashes in an antisymmetric way (stolen from boost).
            </summary>
            <param name="lhs">The first hash</param>
            <param name="rhs">The second hash</param>
            <returns>The combined hash.</returns>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.StoredProcedureResponse`1">
            <summary>
            Represents the response returned from a database stored procedure in the Azure Cosmos DB service. Wraps the response body and headers.
            </summary> 
            <typeparam name="TValue">The returned value type of the stored procedure.</typeparam>
            <remarks>
            Stored procedures can return any string output via the getContext().getResponse().setBody() method.
            This response body could be a serialized JSON object, or any other type.
            Within the .NET SDK, you can deserialize the response into a corresponding TValue type.
            </remarks>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.StoredProcedureResponse`1.#ctor">
            <summary>
            Constructor exposed for mocking purposes in Azure Cosmos DB service.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.StoredProcedureResponse`1.ActivityId">
            <summary>
            Gets the Activity ID of the request from the Azure Cosmos DB service.
            </summary>
            <value>
            The Activity ID of the request.
            </value>
            <remarks>Every request is traced with a globally unique ID. Include activity ID in tracing application failures and when contacting Azure Cosmos DB support</remarks>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.StoredProcedureResponse`1.SessionToken">
            <summary>
            Gets the token for use with session consistency requests from the Azure Cosmos DB service.
            </summary>
            <value>
            The token for use with session consistency requests.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.StoredProcedureResponse`1.ScriptLog">
            <summary>
            Gets the output from stored procedure console.log() statements.
            </summary>
            <value>
            Output from console.log() statements in a stored procedure.
            </value>
            <seealso cref="P:Microsoft.Azure.Cosmos.Scripts.StoredProcedureRequestOptions.EnableScriptLogging"/>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.StoredProcedureResponse`1.StatusCode">
            <summary>
            Gets the request completion status code from the Azure Cosmos DB service.
            </summary>
            <value>The request completion status code</value>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.StoredProcedureResponse`1.MaxResourceQuota">
            <summary>
            Gets the delimited string containing the quota of each resource type within the collection from the Azure Cosmos DB service.
            </summary>
            <value>The delimited string containing the number of used units per resource type within the collection.</value>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.StoredProcedureResponse`1.CurrentResourceQuotaUsage">
            <summary>
            Gets the delimited string containing the usage of each resource type within the collection from the Azure Cosmos DB service.
            </summary>
            <value>The delimited string containing the number of used units per resource type within the collection.</value>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.StoredProcedureResponse`1.RequestCharge">
            <summary>
            Gets the number of normalized Azure Cosmos DB request units (RUs) charged from Azure Cosmos DB service.
            </summary>
            <value>
            The number of normalized Azure Cosmos DB request units (RUs) charged.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.StoredProcedureResponse`1.ResponseHeaders">
            <summary>
            Gets the headers associated with the response from the Azure Cosmos DB service.
            </summary>
            <value>
            Headers associated with the response.
            </value>
            <remarks>
            Provides access to all HTTP response headers returned from the 
            Azure Cosmos DB API.
            </remarks>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.StoredProcedureResponse`1.Response">
            <summary>
            Gets the response of a stored procedure, serialized into the given type from the Azure Cosmos DB service.
            </summary>
            <value>The response of a stored procedure, serialized into the given type.</value>
        </member>
        <member name="P:Microsoft.Azure.Cosmos.StoredProcedureResponse`1.RequestStatistics">
            <summary>
            Gets the clientside request statics for execution of stored procedure.
            </summary>
            <value>The clientside request statics for execution of stored procedure.</value>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.StoredProcedureResponse`1.op_Implicit(Microsoft.Azure.Cosmos.StoredProcedureResponse{`0})~`0">
            <summary>
            Gets the resource implicitly from Azure Cosmos DB service.
            </summary>
            <param name="source">Stored procedure response.</param>
            <returns>The returned resource.</returns>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.TaskHelper">
            <summary>
            The helper function relates to the async Task.
            </summary>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.UriFactory">
            <summary>
            Helper class to assist in creating the various Uris needed for use with the DocumentClient instance in the Azure Cosmos DB service.
            </summary>
            <example>
            The example below uses UriFactory to create a DocumentCollectionLink and then uses that to create a Document.
            <code language="c#">
            <![CDATA[ 
            Uri collUri = UriFactory.CreateDocumentCollectionUri("MyDb", "MyCollection");
            var doc = await client.CreateDocumentAsync(collUri, new {id = "MyDoc"});
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.UriFactory.CreateDatabaseUri(System.String)">
            <summary>
            Given a database id, this creates a database link.
            </summary>
            <param name="databaseId">The database id</param>
            <returns>
            A database link in the format of /dbs/{0}/ with {0} being a Uri escaped version of the <paramref name="databaseId"/>
            </returns>
            <remarks>Would be used when creating or deleting a <see cref="T:Microsoft.Azure.Documents.DocumentCollection"/> or a <see cref="T:Microsoft.Azure.Cosmos.User"/> in Azure Cosmos DB.</remarks>
            <seealso cref="M:System.Uri.EscapeUriString(System.String)"/>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.UriFactory.CreateCollectionUri(System.String,System.String)">
            <summary>
            Given a database and collection id, this creates a collection link.
            </summary>
            <param name="databaseId">The database id</param>
            <param name="collectionId">The collection id</param>
            <returns>
            A collection link in the format of /dbs/{0}/colls/{1}/ with {0} being a Uri escaped version of the <paramref name="databaseId"/> and {1} being <paramref name="collectionId"/>
            </returns>
            <remarks>Would be used when updating or deleting a <see cref="T:Microsoft.Azure.Documents.DocumentCollection"/>, creating a <see cref="T:Microsoft.Azure.Documents.Document"/>, a <see cref="T:Microsoft.Azure.Documents.StoredProcedure"/>, a <see cref="T:Microsoft.Azure.Documents.Trigger"/>, a <see cref="T:Microsoft.Azure.Documents.UserDefinedFunction"/>, or when executing a query with CreateDocumentQuery in Azure Cosmos DB.</remarks>
            <seealso cref="M:System.Uri.EscapeUriString(System.String)"/>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.UriFactory.CreateDocumentCollectionUri(System.String,System.String)">
            <summary>
            Given a database and collection id, this creates a collection link.
            </summary>
            <param name="databaseId">The database id</param>
            <param name="collectionId">The collection id</param>
            <returns>
            A collection link in the format of /dbs/{0}/colls/{1}/ with {0} being a Uri escaped version of the <paramref name="databaseId"/> and {1} being <paramref name="collectionId"/>
            </returns>
            <remarks>Would be used when updating or deleting a <see cref="T:Microsoft.Azure.Documents.DocumentCollection"/>, creating a <see cref="T:Microsoft.Azure.Documents.Document"/>, a <see cref="T:Microsoft.Azure.Documents.StoredProcedure"/>, a <see cref="T:Microsoft.Azure.Documents.Trigger"/>, a <see cref="T:Microsoft.Azure.Documents.UserDefinedFunction"/>, or when executing a query with CreateDocumentQuery in Azure Cosmos DB.</remarks>
            <seealso cref="M:System.Uri.EscapeUriString(System.String)"/>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.UriFactory.CreateUserUri(System.String,System.String)">
            <summary>
            Given a database and user id, this creates a user link.
            </summary>
            <param name="databaseId">The database id</param>
            <param name="userId">The user id</param>
            <returns>
            A user link in the format of /dbs/{0}/users/{1}/ with {0} being a Uri escaped version of the <paramref name="databaseId"/> and {1} being <paramref name="userId"/>
            </returns>
            <remarks>Would be used when creating a <see cref="T:Microsoft.Azure.Cosmos.Permission"/>, or when replacing or deleting a <see cref="T:Microsoft.Azure.Cosmos.User"/> in Azure Cosmos DB.</remarks>
            <seealso cref="M:System.Uri.EscapeUriString(System.String)"/>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.UriFactory.CreateUserDefinedTypeUri(System.String,System.String)">
            <summary>
            Given a database and user defined type id, this creates a user defined type link.
            </summary>
            <param name="databaseId">The database id</param>
            <param name="userDefinedTypeId">The user defined type id</param>
            <returns>
            A user defined type link in the format of /dbs/{0}/udts/{1}/ with {0} being a Uri escaped version of the <paramref name="databaseId"/> and {1} being <paramref name="userDefinedTypeId"/>
            </returns>
            <remarks>Would be used when creating a <see cref="T:Microsoft.Azure.Documents.UserDefinedType"/>, or when replacing or deleting a <see cref="T:Microsoft.Azure.Documents.UserDefinedType"/> in Azure Cosmos DB.</remarks>
            <seealso cref="M:System.Uri.EscapeUriString(System.String)"/>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.UriFactory.CreateDocumentUri(System.String,System.String,System.String)">
            <summary>
            Given a database, collection and document id, this creates a document link.
            </summary>
            <param name="databaseId">The database id</param>
            <param name="collectionId">The collection id</param>
            <param name="documentId">The document id</param>
            <returns>
            A document link in the format of /dbs/{0}/colls/{1}/docs/{2}/ with {0} being a Uri escaped version of the <paramref name="databaseId"/>, {1} being <paramref name="collectionId"/> and {2} being the <paramref name="documentId"/>
            </returns>
            <remarks>Would be used when creating an <see cref="T:Microsoft.Azure.Documents.Attachment"/>, or when replacing or deleting a <see cref="T:Microsoft.Azure.Documents.Document"/> in Azure Cosmos DB.</remarks>
            <seealso cref="M:System.Uri.EscapeUriString(System.String)"/>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.UriFactory.CreatePermissionUri(System.String,System.String,System.String)">
            <summary>
            Given a database and user id, this creates a permission link.
            </summary>
            <param name="databaseId">The database id</param>
            <param name="userId">The user id</param>
            <param name="permissionId">The permission id</param>
            <returns>
            A permission link in the format of /dbs/{0}/users/{1}/permissions/{2} with {0} being a Uri escaped version of the <paramref name="databaseId"/>, {1} being <paramref name="userId"/> and {2} being <paramref name="permissionId"/>
            </returns>
            <remarks>Would be used when replacing or deleting a <see cref="T:Microsoft.Azure.Cosmos.Permission"/> in Azure Cosmos DB.</remarks>
            <seealso cref="M:System.Uri.EscapeUriString(System.String)"/>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.UriFactory.CreateStoredProcedureUri(System.String,System.String,System.String)">
            <summary>
            Given a database, collection and stored proc id, this creates a stored proc link.
            </summary>
            <param name="databaseId">The database id</param>
            <param name="collectionId">The collection id</param>
            <param name="storedProcedureId">The stored procedure id</param>
            <returns>
            A stored procedure link in the format of /dbs/{0}/colls/{1}/sprocs/{2}/ with {0} being a Uri escaped version of the <paramref name="databaseId"/>, {1} being <paramref name="collectionId"/> and {2} being the <paramref name="storedProcedureId"/>
            </returns>
            <remarks>Would be used when replacing, executing, or deleting a <see cref="T:Microsoft.Azure.Documents.StoredProcedure"/> in Azure Cosmos DB.</remarks>
            <seealso cref="M:System.Uri.EscapeUriString(System.String)"/>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.UriFactory.CreateStoredProcedureUri(System.String,System.String)">
            <summary>
            Given a collection link and stored proc id, this creates a stored proc link.
            </summary>
            <param name="documentCollectionLink">The collection link</param>
            <param name="storedProcedureId">The stored procedure id</param>
            <returns>
            A stored procedure link in the format of {0}/sprocs/{1}/ with {0} being <paramref name="documentCollectionLink"/> and {1} being <paramref name="storedProcedureId"/>
            </returns>
            <remarks>Would be used when replacing, executing, or deleting a <see cref="T:Microsoft.Azure.Documents.StoredProcedure"/> in Azure DocumentDB.</remarks>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.UriFactory.CreateTriggerUri(System.String,System.String,System.String)">
            <summary>
            Given a database, collection and trigger id, this creates a trigger link.
            </summary>
            <param name="databaseId">The database id</param>
            <param name="collectionId">The collection id</param>
            <param name="triggerId">The trigger id</param>
            <returns>
            A trigger link in the format of /dbs/{0}/colls/{1}/triggers/{2}/ with {0} being a Uri escaped version of the <paramref name="databaseId"/>, {1} being <paramref name="collectionId"/> and {2} being the <paramref name="triggerId"/>
            </returns>
            <remarks>Would be used when replacing, executing, or deleting a <see cref="T:Microsoft.Azure.Documents.Trigger"/> in Azure Cosmos DB.</remarks>
            <seealso cref="M:System.Uri.EscapeUriString(System.String)"/>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.UriFactory.CreateUserDefinedFunctionUri(System.String,System.String,System.String)">
            <summary>
            Given a database, collection and udf id, this creates a udf link.
            </summary>
            <param name="databaseId">The database id</param>
            <param name="collectionId">The collection id</param>
            <param name="udfId">The udf id</param>
            <returns>
            A udf link in the format of /dbs/{0}/colls/{1}/udfs/{2}/ with {0} being a Uri escaped version of the <paramref name="databaseId"/>, {1} being <paramref name="collectionId"/> and {2} being the <paramref name="udfId"/>
            </returns>
            <remarks>Would be used when replacing, executing, or deleting a <see cref="T:Microsoft.Azure.Documents.UserDefinedFunction"/> in Azure Cosmos DB.</remarks>
            <seealso cref="M:System.Uri.EscapeUriString(System.String)"/>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.UriFactory.CreateConflictUri(System.String,System.String,System.String)">
            <summary>
            Given a database, collection and conflict id, this creates a conflict link.
            </summary>
            <param name="databaseId">The database id</param>
            <param name="collectionId">The collection id</param>
            <param name="conflictId">The conflict id</param>
            <returns>
            A conflict link in the format of /dbs/{0}/colls/{1}/conflicts/{2}/ with {0} being a Uri escaped version of the <paramref name="databaseId"/>, {1} being <paramref name="collectionId"/> and {2} being the <paramref name="conflictId"/>
            </returns>
            <remarks>Would be used when creating a <see cref="T:Microsoft.Azure.Documents.Conflict"/> in Azure Cosmos DB.</remarks>
            <seealso cref="M:System.Uri.EscapeUriString(System.String)"/>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.UriFactory.CreateAttachmentUri(System.String,System.String,System.String,System.String)">
            <summary>
            Given a database, collection, document, and attachment id, this creates an attachment link.
            </summary>
            <param name="databaseId">The database id</param>
            <param name="collectionId">The collection id</param>
            <param name="documentId">The document id</param>
            <param name="attachmentId">The attachment id</param>
            <returns>
            An attachment link in the format of /dbs/{0}/colls/{1}/docs/{2}/attachments/{3} with {0} being a Uri escaped version of the <paramref name="databaseId"/>, {1} being <paramref name="collectionId"/>, {2} being the <paramref name="documentId"/> and {3} being <paramref name="attachmentId"/>
            </returns>
            <remarks>Would be used when replacing, or deleting an <see cref="T:Microsoft.Azure.Documents.Attachment"/> in Azure Cosmos DB.</remarks>
            <seealso cref="M:System.Uri.EscapeUriString(System.String)"/>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.UriFactory.CreatePartitionKeyRangesUri(System.String,System.String)">
            <summary>
            Given a database and collection, this creates a partition key ranges link in the Azure Cosmos DB service.
            </summary>
            <param name="databaseId">The database id</param>
            <param name="collectionId">The collection id</param>
            <returns>
            A partition key ranges link in the format of /dbs/{0}/colls/{1}/pkranges with {0} being a Uri escaped version of the <paramref name="databaseId"/> and {1} being <paramref name="collectionId"/>.
            </returns>
            <seealso cref="M:System.Uri.EscapeUriString(System.String)"/>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.UriFactory.CreateSchemaUri(System.String,System.String,System.String)">
            <summary>
            Given a database, collection and schema id, this creates a schema link in the Azure Cosmos DB service.
            </summary>
            <param name="databaseId">The database id</param>
            <param name="collectionId">The collection id</param>
            <param name="schemaId">The schema id</param>
            <returns>
            A schema link in the format of /dbs/{0}/colls/{1}/schemas/{2}/ with {0} being a Uri escaped version of the <paramref name="databaseId"/>, {1} being <paramref name="collectionId"/> and {2} being the <paramref name="schemaId"/>
            </returns>
            <seealso cref="M:System.Uri.EscapeUriString(System.String)"/>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.UserAgentContainer">
            <summary>
            Contains information about the user environment and helps identify requests.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.ExecUtils.ProcessResourceOperationAsync``1(Microsoft.Azure.Cosmos.CosmosClient,System.Uri,Microsoft.Azure.Documents.ResourceType,Microsoft.Azure.Documents.OperationType,Microsoft.Azure.Cosmos.RequestOptions,Microsoft.Azure.Cosmos.ContainerCore,System.Nullable{Microsoft.Azure.Cosmos.PartitionKey},System.IO.Stream,System.Action{Microsoft.Azure.Cosmos.RequestMessage},System.Func{Microsoft.Azure.Cosmos.ResponseMessage,``0},System.Threading.CancellationToken)">
            <summary>
            Used internally by friends ensrue robust argument and
            exception-less handling, with container information
            </summary>
        </member>
        <member name="T:Microsoft.Azure.Cosmos.InterlockIncrementCheck">
            <summary>
            This class is used to assert that a region of code can only be called concurrently by a limited amount of threads.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Cosmos.InterlockIncrementCheck.EnterLockCheck">
             <summary>
             Increments the internal lock and asserts that only the allowed
             </summary>
             <exception cref="T:System.InvalidOperationException">When more operations than those allowed try to access the context.</exception>
             <example>
             InterlockIncrementCheck interlockIncrementCheck = new InterlockIncrementCheck();
             using (interlockIncrementCheck.EnterLockCheck())
             {
                // protected code
             }
            
             </example>
        </member>
    </members>
</doc>
